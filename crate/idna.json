{"root":"0:0:1643","crate_version":"0.3.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:164:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:98:1642":{"id":"0:98:1642","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[574,4],"end":[579,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3354-0:157:1620":{"id":"b:2:3354-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:89:59":{"id":"0:89:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[520,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[646,0],"end":[699,1]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9081:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11939:1789":{"id":"2:11939:1789","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11919:9190":{"id":"2:11919:9190","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42610:6430","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11925:34567":{"id":"2:11925:34567","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42926:6423","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11906:1814":{"id":"2:11906:1814","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11970:1892":{"id":"2:11970:1892","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11595:6285","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:1892"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42838:6440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95:1885":{"id":"0:95:1885","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[561,4],"end":[564,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:37671":{"id":"2:11990:37671","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11620:6416","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11967:37662":{"id":"2:11967:37662","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:1621":{"id":"0:166:1621","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[600,0],"end":[613,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2759:2195-0:166:1621","a:2:8217:2230-0:166:1621","a:2:8216:2231-0:166:1621","a:2:2695:217-0:166:1621","a:2:2709:225-0:166:1621","b:2:2550-0:166:1621","b:2:2554-0:166:1621","b:2:2560-0:166:1621","b:2:2261-0:166:1621","b:2:2258-0:166:1621","b:2:2622-0:166:1621","b:2:2565-0:166:1621","b:2:3354-0:166:1621","b:5:5599-0:166:1621","0:102","0:179","0:107","0:106","0:104"]}},"2:11914:37656":{"id":"2:11914:37656","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11870:1374","str::slice_mut_unchecked":"2:11915:37657","crate::ops::Index":"2:3016:10981"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:2231-0:157:1620":{"id":"a:2:8216:2231-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:164:414":{"id":"0:164:414","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17:531":{"id":"0:17:531","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6653:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:683:6370":{"id":"5:683:6370","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:11929:1916":{"id":"2:11929:1916","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:37670":{"id":"2:11989:37670","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2556:683":{"id":"2:2556:683","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:157:1620":{"id":"a:2:2709:225-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11976:37664":{"id":"2:11976:37664","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11595:6285","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::rmatch_indices":"2:11979:37665"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42784:6438","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:151:1622":{"id":"b:2:2261-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:27491"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2263:27491":{"id":"2:2263:27491","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5599-0:166:1621":{"id":"b:5:5599-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5597:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5601:1428"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2554-0:151:1622":{"id":"b:2:2554-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2560-0:166:1621":{"id":"b:2:2560-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3354-0:151:1622":{"id":"b:2:3354-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2695:217-0:166:1621":{"id":"a:2:2695:217-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:110-0:157:1620":{"id":"0:110-0:157:1620","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,23],"end":[42,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Config","name":"Config","id":"0:157:1620","glob":false}},"2:11904:310":{"id":"2:11904:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11905:31259","`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11923:7229":{"id":"2:11923:7229","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42888:6436","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:157:1620":{"id":"b:2:2550-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:1954"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11943:1937":{"id":"2:11943:1937","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11595:6285","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split_whitespace":"2:11921:34548","str::rsplit":"2:11949:31292"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42634:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2601:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11935:6349":{"id":"2:11935:6349","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40639:176","prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8216:2231-0:166:1621":{"id":"a:2:8216:2231-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11958:31294":{"id":"2:11958:31294","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285","str::rsplitn":"2:11961:31296"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42738:6445","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2565-0:157:1620":{"id":"b:2:2565-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12002:37673":{"id":"2:12002:37673","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:31282":{"id":"2:11917:31282","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11916:31281"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12008:37675":{"id":"2:12008:37675","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12020:37678":{"id":"2:12020:37678","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:37678"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42951:6393","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2260:2085":{"id":"2:2260:2085","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:166:1621":{"id":"a:2:2709:225-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:114:1633":{"id":"0:114:1633","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[57,0],"end":[62,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:1939":{"id":"2:11996:1939","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8217:2230-0:166:1621":{"id":"a:2:8217:2230-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:2230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:113:1628":{"id":"0:113:1628","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1774":{"id":"0:15:1774","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[45,0],"end":[47,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:684:6371":{"id":"5:684:6371","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12005:37674":{"id":"2:12005:37674","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11895:1921":{"id":"2:11895:1921","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:31290":{"id":"2:11946:31290","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11419:6425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:1630":{"id":"0:96:1630","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[567,4],"end":[571,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:166:1621":{"id":"b:2:2550-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:1954"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5353:38331":{"id":"5:5353:38331","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2201","`String`":"5:7210:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2201","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:6565","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112-0:151:1622":{"id":"0:112-0:151:1622","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,39],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Idna","name":"Idna","id":"0:151:1622","glob":false}},"5:5355:30960":{"id":"5:5355:30960","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12015:30963"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5601:1428":{"id":"5:5601:1428","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[519,0],"end":[533,1]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2601:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12011:37676":{"id":"2:12011:37676","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11557:126","`FromStr`":"2:11556:6434"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11556:6434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11556:6434","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:37668":{"id":"2:11986:37668","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2622-0:166:1621":{"id":"b:2:2622-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3403:16352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2624:6498"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"b:2:2565-0:151:1622":{"id":"b:2:2565-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[535,0],"end":[580,1]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:91:1634","0:92:1881","0:93:1635","0:94:1915","0:95:1885","0:96:1630","0:98:1642"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12015:30963":{"id":"2:12015:30963","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:31259":{"id":"2:11905:31259","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11881:1470"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2565-0:166:1621":{"id":"b:2:2565-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2568:127","2:2569:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2759:2195-0:166:1621":{"id":"a:2:2759:2195-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12016:30964":{"id":"2:12016:30964","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:166:1621":{"id":"b:2:2261-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:27491"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11916:31281":{"id":"2:11916:31281","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11917:31282"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11921:34548":{"id":"2:11921:34548","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11922:34554"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42908:6426","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81:1944":{"id":"0:81:1944","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[448,4],"end":[474,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2601:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:180:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12019:10949":{"id":"2:12019:10949","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:10949"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42942:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91:1634":{"id":"0:91:1634","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[537,4],"end":[540,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:151:1622":{"id":"b:2:2560-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:151:1622":{"id":"0:151:1622","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[433,0],"end":[437,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:79","a:2:2759:2195-0:151:1622","a:2:8217:2230-0:151:1622","a:2:8216:2231-0:151:1622","a:2:2695:217-0:151:1622","a:2:2709:225-0:151:1622","b:2:2550-0:151:1622","b:2:2554-0:151:1622","b:2:2560-0:151:1622","b:2:2261-0:151:1622","b:2:2258-0:151:1622","b:2:2565-0:151:1622","b:2:3354-0:151:1622","0:155"]}},"0:3:1618":{"id":"0:3:1618","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[315,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:15:1774","0:17:531","0:37:1820","0:39:597"],"is_stripped":false}},"0:103:657":{"id":"0:103:657","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[647,4],"end":[698,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:1820":{"id":"0:37:1820","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[216,0],"end":[219,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:1790":{"id":"2:12013:1790","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11979:37665":{"id":"2:11979:37665","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11595:6285","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::match_indices":"2:11976:37664"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42802:6439","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12014:30962":{"id":"2:12014:30962","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5337:38327":{"id":"5:5337:38327","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2201","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:6565","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2201","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6961:6565","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11955:37660":{"id":"2:11955:37660","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11595:6285","str::split":"2:11943:1937","prim@char":"1:11864:410","str::split_terminator":"2:11952:37659"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42702:6446","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11908:31256":{"id":"2:11908:31256","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40639:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2624:6498":{"id":"2:2624:6498","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3415:9080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:31298":{"id":"2:11926:31298","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:2195-0:151:1622":{"id":"a:2:2759:2195-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12017:37677":{"id":"2:12017:37677","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:37677"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42933:6397","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1620":{"id":"0:157:1620","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[510,0],"end":[516,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:90","a:2:2759:2195-0:157:1620","a:2:8217:2230-0:157:1620","a:2:8216:2231-0:157:1620","a:2:2695:217-0:157:1620","a:2:2709:225-0:157:1620","b:2:2550-0:157:1620","b:2:2554-0:157:1620","b:2:2560-0:157:1620","b:2:2261-0:157:1620","b:2:2258-0:157:1620","b:2:2565-0:157:1620","b:2:3354-0:157:1620","b:5:681-0:157:1620","0:163","0:88","0:165"]}},"2:11999:31299":{"id":"2:11999:31299","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2695:217-0:157:1620":{"id":"a:2:2695:217-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5344:38329":{"id":"5:5344:38329","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2550-0:151:1622":{"id":"b:2:2550-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2524:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2553:1954"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11899:37654":{"id":"2:11899:37654","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11897:37653"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:681-0:157:1620":{"id":"b:5:681-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2275:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:6370","5:684:6371","5:685:6372"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:92:1881":{"id":"0:92:1881","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:59":{"id":"0:180:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:31257":{"id":"2:11910:31257","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11894:799":{"id":"2:11894:799","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11864:410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11973:37663":{"id":"2:11973:37663","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11595:6285","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::matches":"2:11970:1892"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42856:6441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5338:1946":{"id":"5:5338:1946","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5356:30961":{"id":"5:5356:30961","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12016:30964"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:59":{"id":"0:156:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2560-0:157:1620":{"id":"b:2:2560-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2530:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2563:127","2:2564:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1643":{"id":"0:0:1643","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[74,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3:1618","0:110-0:157:1620","0:111-0:166:1621","0:112-0:151:1622","0:113:1628","0:114:1633","0:115:1641"],"is_stripped":false}},"2:2568:127":{"id":"2:2568:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31737:9626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:8216:2231-0:151:1622":{"id":"a:2:8216:2231-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8216:2231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:93:1635":{"id":"0:93:1635","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[549,4],"end":[552,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:27913":{"id":"2:11902:27913","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11163:6427"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11915:37657":{"id":"2:11915:37657","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11870:1374","crate::ops::IndexMut":"2:3020:10982","str::slice_unchecked":"2:11914:37656"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,16],"end":[509,20]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2707:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:82:1630":{"id":"0:82:1630","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[478,4],"end":[496,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:225-0:151:1622":{"id":"a:2:2709:225-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2709:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11949:31292":{"id":"2:11949:31292","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11595:6285","`DoubleEndedIterator`":"2:7203:120","prim@char":"1:11864:410","str::split":"2:11943:1937"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42652:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11982:37666":{"id":"2:11982:37666","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:151:1622":{"id":"b:2:2258-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2085"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2563:127":{"id":"2:2563:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[711,0],"end":[711,27]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","provide","cause","description","type_id"],"trait":{"name":"Error","id":"2:2615:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11918:1776":{"id":"2:11918:1776","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11864:410"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42604:1812","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8217:2230-0:157:1620":{"id":"a:2:8217:2230-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:2230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11922:34554":{"id":"2:11922:34554","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11921:34548"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42917:6424","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2553:1954":{"id":"2:2553:1954","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2527:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:37667":{"id":"2:11984:37667","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8217:2230-0:151:1622":{"id":"a:2:8217:2230-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8217:2230","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11896:37652":{"id":"2:11896:37652","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11988:37669":{"id":"2:11988:37669","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5341:38328":{"id":"5:5341:38328","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5336":{"id":"5:5336","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5247:1374","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5337:38327","5:5338:1946","5:5341:38328","5:5344:38329","5:5352:38330","5:5353:38331","5:5354:2146","5:5355:30960","5:5356:30961"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11932:1917":{"id":"2:11932:1917","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2569:1448":{"id":"2:2569:1448","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[713,0],"end":[717,1]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9086:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:657"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11952:37659":{"id":"2:11952:37659","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11595:6285","str::split":"2:11943:1937","prim@char":"1:11864:410","`DoubleEndedIterator`":"2:7203:120","str::rsplit_terminator":"2:11955:37660"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42684:6447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2759:2195-0:157:1620":{"id":"a:2:2759:2195-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2759:2195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11961:31296":{"id":"2:11961:31296","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11864:410","str::splitn":"2:11958:31294","self::pattern":"2:11595:6285"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42756:6444","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11615:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2695:217-0:151:1622":{"id":"a:2:2695:217-0:151:1622","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2695:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11912:31258":{"id":"2:11912:31258","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9776:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:166:1621":{"id":"b:2:2258-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2085"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3354-0:166:1621":{"id":"b:2:3354-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3352:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3356:1462"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2554-0:157:1620":{"id":"b:2:2554-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:105:683":{"id":"0:105:683","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[702,4],"end":[708,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[701,0],"end":[709,1]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:105:683"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:115:1641":{"id":"0:115:1641","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2261-0:157:1620":{"id":"b:2:2261-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2255:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2263:27491"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11920:1795":{"id":"2:11920:1795","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42620:6429","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111-0:166:1621":{"id":"0:111-0:166:1621","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,31],"end":[42,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Errors","name":"Errors","id":"0:166:1621","glob":false}},"2:11893":{"id":"2:11893","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:11158:1374","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11894:799","2:11895:1921","2:11896:37652","2:11897:37653","2:11899:37654","2:11902:27913","2:11903:37655","2:11904:310","2:11905:31259","2:11906:1814","2:11908:31256","2:11910:31257","2:11912:31258","2:11914:37656","2:11915:37657","2:11916:31281","2:11917:31282","2:11918:1776","2:11919:9190","2:11920:1795","2:11921:34548","2:11922:34554","2:11923:7229","2:11924:37658","2:11925:34567","2:11926:31298","2:11929:1916","2:11932:1917","2:11935:6349","2:11939:1789","2:11943:1937","2:11946:31290","2:11949:31292","2:11952:37659","2:11955:37660","2:11958:31294","2:11961:31296","2:11964:37661","2:11967:37662","2:11970:1892","2:11973:37663","2:11976:37664","2:11979:37665","2:11982:37666","2:11984:37667","2:11986:37668","2:11988:37669","2:11989:37670","2:11990:37671","2:11993:37672","2:11996:1939","2:11999:31299","2:12002:37673","2:12005:37674","2:12008:37675","2:12011:37676","2:12013:1790","2:12014:30962","2:12015:30963","2:12016:30964","2:12017:37677","2:12019:10949","2:12020:37678"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:108:657":{"id":"0:108:657","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[714,4],"end":[716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9040:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9029:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11964:37661":{"id":"2:11964:37661","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2554-0:166:1621":{"id":"b:2:2554-0:166:1621","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2527:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2556:683"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:80:926":{"id":"0:80:926","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[440,4],"end":[446,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["config",{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2258-0:157:1620":{"id":"b:2:2258-0:157:1620","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2702:2194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2252:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2260:2085"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:39:597":{"id":"0:39:597","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[225,0],"end":[230,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40637:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11897:37653":{"id":"2:11897:37653","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2564:1449":{"id":"2:2564:1449","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2534:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3356:1462":{"id":"2:3356:1462","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:38976:9145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:37658":{"id":"2:11924:37658","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42898:6437","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:6372":{"id":"5:685:6372","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[439,0],"end":[507,1]},"visibility":{"restricted":{"parent":"0:46:1619","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:926","0:81:1944","0:82:1630","0:86:1642"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:86:1642":{"id":"0:86:1642","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[500,4],"end":[506,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40781:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5352:38330":{"id":"5:5352:38330","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11903:37655":{"id":"2:11903:37655","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:94:1915":{"id":"0:94:1915","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[555,4],"end":[558,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:2146":{"id":"5:5354:2146","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7210:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7210:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:37672":{"id":"2:11993:37672","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11864:410","self::pattern":"2:11595:6285"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11600:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:8180:7343":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:10161:7313":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2359:11033":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:8926:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:1995:9054":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12926:8255":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:2282:8458":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10385:7747":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:9100:6477":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9820:7683":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:8510:6858":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:1723:9841":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:599:38503":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:10704:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:41074:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4697:10062":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:46560:9264":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:491:7516":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:48552:11254":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:4888:8522":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:7622:6462":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:7469:10604":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:534:6761":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:10583:23350":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:45413:9248":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:7278:8489":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4945:10183":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:7802:9359":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:1580:7245":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:985:8707":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:3519:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:266:2171":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"1:11511:9348":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:2793:8480":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:9831:7199":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:1586:7246":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:22141:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:6475:11170":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:5967:10379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:5741:10262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5805:10294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:9712:6881":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:1771:7190":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:80:7157":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4981:10205":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:13134:8310":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2798:8720":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:3352:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:2341:8461":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:7665:10952":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:46287:9257":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:43233:9199":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:1583:9753":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2605:8472":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:1762:9075":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:7203:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12148:8022":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:44875:9236":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:8475:23326":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:2087:9055":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:3995:7043":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:40705:7043":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:7164:34547":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6463:8648":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"14:31:8950":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13148:8312":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8117:11043":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:44677:9230":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:6528:11172":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:8967:9442":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:29949:6521":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:10867:9435":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22075:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13594:8444":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:2631:8473":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11661:7934":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5219:6858":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:9805:7680":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:7681:7102":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:20458:34643":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4416:9970":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:1788:7335":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40914:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6877:23285":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:9183:7178":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4787:10101":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:12237:8042":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6070:6972":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:10226:28813":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:3599:8496":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11951:7991":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:43223:9195":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:39599:7276":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:38999:6487":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"22:1122:7489":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"17:11559:7919":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:8272:23342":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"12:320:6661":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:505:9653":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9061:6861":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:46457:9260":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:6993:6688":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8155:6429":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:4574:8512":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:46655:9271":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4402:9962":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:2255:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:8822:38499":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:6565:6726":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:2869:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:10933:6795":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:4786:8519":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:0:1994":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7872:8857":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:2213:6730":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:25647:7085":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:9681:7595":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:11251:7359":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:6496:10437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12609:8169":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"12:822:10967":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:40832:7043":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:12177:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:2868:8483":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:7275:30952":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:11813:7956":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:22108:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:20477:34648":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:4795:783":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:12398:6758":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10360:7739":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11884:1469":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:7452:10599":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:45074:9242":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5752:10270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4301:9917":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:5724:34771":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:8561:6873":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6322:9336":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:50262:9282":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"18:538:6847":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"0:39:597":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"6:5910:10356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:8217:2230":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:11595:6285":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:42620:6429":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:1422:7244":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:5773:6712":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:13071:8289":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:41699:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:9155:7177":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:39632:7283":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:8911:38497":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:9553:6861":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:21675:9115":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7980:23290":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:5563:6772":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:6324:6317":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10403:7770":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"21:228:1848":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"2:39920:7300":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:30189:34539":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:13580:8441":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5931:10368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"9:977:9037":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:621:2124":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:9111:9445":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"22:386:6657":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"2:2891:16548":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:8494:6857":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:41636:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:39406:11013":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:9751:7676":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11218:9345":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:493:9648":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5900:6771":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:8666:6876":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"12:60:7233":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:9873:7202":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10310:7213":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"15:0:1991":{"crate_id":15,"path":["addr2line"],"kind":"module"},"12:1832:7042":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10894:7781":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:1827:9078":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2530:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:13039:8281":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"20:336:2133":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"5:2169:38468":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:6252:8616":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:39619:7282":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:40994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"0:15:1774":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"17:8774:6878":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:50283:9283":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:4457:9991":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:5193:6422":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:8137:23338":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"15:214:7001":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:5823:10306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7497:6996":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:20725:11100":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12781:8231":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"12:353:6663":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13459:8412":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:43429:9204":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"9:505:7033":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:40532:7088":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21814:9129":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:7557:8804":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:9293:7650":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:21492:9111":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:546:9682":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"12:1840:6699":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:6178:6771":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:2930:22421":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12617:8172":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:6970:6317":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:42487:7263":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"20:356:2135":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"2:4414:6302":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:2749:8478":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:4269:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:7166:23286":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:11821:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:2957:2196":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"12:810:7244":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:41403:6472":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3985:11093":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12134:8020":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:4004:9081":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:44446:9222":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8979:7117":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:7929:8863":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2905:6370":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:39289:6396":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:3089:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:505:6693":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"21:67:1846":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"2:43568:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6842:8704":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11885:1466":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:4519:8510":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4597:10020":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4224:9857":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3016:10981":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:7832:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:9031:38494":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6270:6979":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:20774:7075":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10121:7725":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:2793:11213":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4841:10132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:10762:7329":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:20858:11218":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:11835:10955":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:45751:9253":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:9318:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:44823:9234":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:113:7163":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:10230:7332":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:12387:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:13506:8426":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:30011:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:4086:7345":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:7282:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:3959:6704":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:6643:10496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11774:7951":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:4671:11102":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:4322:9925":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4662:10045":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:39730:7295":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:727:6853":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:20456:34647":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11684:7939":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4413:8508":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:3159:7245":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:2407:10619":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:5060:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:39942:7303":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2481:11100":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:1056:37293":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:7434:10596":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:45331:9247":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:9488:7660":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12884:8241":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:40469:9089":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"7:79:22199":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:1443:7047":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:8643:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11014:7807":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:11887:1523":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:6376:23282":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:4261:9884":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:38800:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6241:8615":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:355:9284":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:5755:6773":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:44376:9219":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:39246:6405":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:5313:9320":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"12:834:8961":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44406:9220":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8814:6317":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:7105:9065":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:10138:10860":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:481:7515":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:644:7517":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"21:0:1645":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"2:9943:7043":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:4983:9319":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12322:8054":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4743:10084":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:3923:11087":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4900:10169":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"12:632:7042":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:10949:7788":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:2343:10627":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:6976:7249":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:929:7047":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:41721:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:11217:7837":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:4467:410":{"crate_id":2,"path":["core","char"],"kind":"module"},"17:12103:8015":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:96:7160":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9897:7203":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:11368:9105":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:7487:10607":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:22837:7084":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7603:8812":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7117:10966":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4549:10016":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7483:6995":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:813:6683":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:31737:9626":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:38860:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:7585:9286":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2705:8476":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:45301:9246":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:7909:8862":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4994:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:4635:8514":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:4820:10117":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:10088:7723":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:4687:10056":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:6204:6699":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"12:300:7237":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:2831:6768":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10075:7721":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:950:8961":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10837:9328":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:42430:7318":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13082:8293":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:1731:9845":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6865:8706":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4346:9939":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:5753:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12022:8005":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:43441:16672":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:10445:6888":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:4893:2219":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:6628:10491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:2636:10622":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:39651:7285":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:38785:7257":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:40503:11078":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:1571:6699":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:361:9285":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44899:9237":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:9776:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:7708:9139":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9909:6884":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"0:0:1643":{"crate_id":0,"path":["idna"],"kind":"module"},"17:8981:7174":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:4263:9083":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"12:119:6659":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4404:11113":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:9063:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:2367:8462":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10466:7752":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:198:2186":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"17:8055:23327":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:7847:8854":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:481:9642":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:1568:6317":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"12:738:7045":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:7704:9358":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"0:115:1641":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"6:4389:9957":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6137:6977":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:11149:9099":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4805:10112":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:21826:11081":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"5:6536:6714":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:4357:8506":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:6399:6783":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:9644:7666":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:11245:7358":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:10321:7737":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:1663:9810":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:2205:9065":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:14:2102":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:42610:6430":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:42838:6440":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6735:8683":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:1638:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:9791:7679":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:2386:2000":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:4921:8523":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:40637:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:1432:7046":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:0:487":{"crate_id":2,"path":["core"],"kind":"module"},"1:7797:7339":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2709:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"12:751:6699":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:7541:6790":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4483:10002":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:7117:38487":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:10708:6892":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:10314:7352":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:6472:9338":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:9030:2125":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10546:23349":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7309:8490":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11875:632":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4379:9954":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:11133:16629":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:40697:7042":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:6555:6724":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11528:7912":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:7440:10597":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:2521:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:3430:2125":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:2156:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:45957:9254":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"12:2069:8965":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"20:8:2140":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:12739:8219":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:38992:9146":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"13:226:7005":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4237:9866":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:39913:7299":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:939:10967":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:525:9670":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"9:827:22297":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:572:9695":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1514:9714":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:9073:9341":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5959:10376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:11617:7926":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11054:6895":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9382:7653":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:7058:6317":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:9577:7663":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10139:6861":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:7555:10970":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:5556:6771":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:4539:10015":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"12:659:6317":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:766:27094":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:5772:10281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:11600:6417":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:46099:9255":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4571:10018":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:3010:22422":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:5388:8484":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4422:9972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:5916:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43550:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:3632:8497":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:20645:11226":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:11412:9313":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"15:193:7228":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12225:8041":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"12:1138:8970":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:11871:1452":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:11029:28347":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:40722:2227":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:43373:10708":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:11345:9104":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13126:8307":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:21545:9112":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:1575:6665":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:42951:6393":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"9:19:7008":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:10357:6793":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:45177:9244":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3159:9303":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:119:16962":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:956:8963":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5716:10257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:45567:9251":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41660:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:11500:7905":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:3543:7043":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4882:10158":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:5189:6421":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"12:1845:6665":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:4844:11137":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10845:6888":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:5660:10217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:42500:7323":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"12:725:7044":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:7343:6989":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:2916:7205":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:7596:35718":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:473:7242":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"20:93:2145":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"2:8638:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:11419:6425":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:43377:10709":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:10654:10719":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10490:7754":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:9283:7648":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:44477:9223":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:30581:7086":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"18:582:7086":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9458:7657":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:3263:8493":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:5597:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:5664:8548":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:8441:23348":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:6698:10533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11846:28325":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:4347:6706":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:5712:7104":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:3901:11085":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:8368:23345":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46617:9269":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:12008:8003":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10283:7212":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:8056:8874":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:12429:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:4361:9945":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:39681:7288":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:44777:9233":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:8401:9175":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:8278:10465":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:39194:6403":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46349:9258":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4618:10022":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:43040:9183":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10528:7216":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:0:1366":{"crate_id":1,"path":["std"],"kind":"module"},"17:9250:7645":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:21619:7078":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"19:0:1015":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8333:2220":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:590:7521":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:7319:8799":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:4149:7059":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:4314:6704":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:3269:16295":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5938:10370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:39392:9156":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"12:861:8964":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:6747:11215":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:42738:6445":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12060:8009":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11708:7940":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:22273:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:6094:10425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:7584:11100":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:20608:11225":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"20:327:7501":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"1:1771:599":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:44322:9217":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:10752:7770":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:8974:7108":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:20853:11100":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:4327:8505":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:0:1992":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:36:6673":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5878:10343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:2874:16544":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:7123:16528":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1695:9828":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:8596:6874":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:21399:11100":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10497:23457":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10721:6894":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:914:6665":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:4757:10088":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:6548:10465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:42756:6444":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:7173:2200":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:2116:7048":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7135:38488":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:641:9290":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:8744:7352":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:11706:6806":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:10001:7362":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:1463:7252":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13024:8279":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4468:9995":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7825:8853":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:21793:10628":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:39489:7264":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13031:8280":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:3232:16294":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:42440:7319":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:8921:7105":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:4727:6769":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:10973:7802":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13366:8387":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:3871:11083":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:43389:7074":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:4962:10191":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11997:8001":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:3391:9309":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:7298:8798":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4751:10087":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:39006:7489":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3240:9308":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:9919:7042":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:44631:9229":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:11870:1374":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:540:9679":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:9092:6474":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12198:8039":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:1083:8970":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:42604:1812":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:42188:10702":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4812:986":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12836:8235":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:10088:7312":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:7511:10612":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4218:9856":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8274:9415":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:2882:16546":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10332:23455":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:3605:11079":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:2886:16547":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:9022:7119":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:8339:23344":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"12:1534:8971":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:20424:34461":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:20411:7086":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6719:10547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13141:8311":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"22:636:7152":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"21:320:7493":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"2:2815:8721":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13413:8398":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10625:7767":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:42888:6436":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:1604:9767":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:6653:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:5737:6926":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:44529:9225":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:41194:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:609:7528":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:1382:6317":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5728:10261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:46495:9261":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:43069:9191":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10649:10717":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:21136:11222":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:42634:6443":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10682:7769":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:1242:8970":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"22:0:2160":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"6:4714:10073":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:3114:10983":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:2827:16539":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:43212:16325":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5890:10348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:7522:6788":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"9:622:22225":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:11203:9344":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"12:1029:8966":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:4394:6488":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:42908:6426":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:7428:10595":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:4769:34507":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:8776:9434":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:1747:9850":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:9068:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:5596:6953":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:6649:10497":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:39345:6401":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:961:6677":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"20:231:2141":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"2:4259:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1609:9769":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:1981:7115":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:7948:7113":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:39236:6404":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:6403:6677":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:41941:7092":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:4989:6712":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:0:1993":{"crate_id":17,"path":["object"],"kind":"module"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6109:8604":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10824:9358":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:39359:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:1571:9745":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6530:10456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6472:8649":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11315:7860":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:5541:8538":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6611:10486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:3316:7303":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:8871:7171":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13354:8384":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"12:2184:9624":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8138:7060":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:10051:9446":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:42513:7324":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:5014:9319":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6634:10493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:3217:34935":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:904:6699":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:8987:9443":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:12190:16388":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:2993:8491":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5917:10357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:2840:8722":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:31777:7255":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:8056:9402":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:44584:9228":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:1899:18301":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:9358:7073":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:46411:9259":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6059:38489":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13091:8296":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:40840:6317":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"9:709:9175":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"3:0:434":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:4669:11099":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"9:382:7018":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:2759:2195":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:567:9693":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:9098:6476":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:10209:9327":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:420:7549":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:3566:8495":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12638:8180":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1617:9774":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:2964:2198":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:2482:16383":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4681:10054":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"12:1003:8965":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6521:10455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"22:1034:27119":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"5:7307:6721":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:43357:10704":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:2320:8460":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"9:956:22208":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:561:9690":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:5145:6677":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:4328:9927":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:9631:7197":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:4217:8502":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:4144:8501":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:2345:11029":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:7210:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12972:8266":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4115:7347":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:7224:9072":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:6075:6758":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"22:669:6843":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"17:12756:8221":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4451:9988":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:6576:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:2894:22420":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10630:9455":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:8790:9435":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:2535:8469":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:4748:10956":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10822:23352":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:653:17320":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:9589:6753":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"0:114:1633":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"2:41654:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"0:113:1628":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"2:2862:8726":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"12:1852:7245":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:4340:6487":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6619:8675":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11594:7923":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4781:10098":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11330:7866":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6903:9443":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5902:10355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:46606:9268":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12361:8064":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:40849:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11170:7355":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6171:8609":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:9968:6443":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6123:6975":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"14:7:8950":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:20727:11219":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:7059:2227":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:9601:7664":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11800:7954":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7015:6317":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:12263:9109":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:39549:7267":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:2261:22394":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:7193:9071":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"18:707:6419":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:4330:6734":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"0:37:1820":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"5:7052:6317":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8185:11076":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7942:8866":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:0:804":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7288:8797":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:3667:9311":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:313:2185":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"5:4284:6706":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:7849:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9350:7632":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:286:2201":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:7463:10603":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:9539:7662":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:6884:10897":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:46580:9266":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:3161:9304":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:4166:9315":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:9557:6747":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:3455:11061":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:11893:7965":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:20884:11223":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:45043:9241":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:1564:7042":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:3125:7206":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:43560:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:39951:6742":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:7873:7115":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:3020:10982":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:4868:6704":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:42412:7315":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:42461:7321":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:38904:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13492:8419":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6496:23283":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:7044:38486":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:41396:6473":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:4426:11114":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:1962:7196":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10221:7208":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4476:10000":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13047:8282":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:12695:8214":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"14:215:8955":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:9422:7185":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:7446:10598":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4583:10019":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13340:8378":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:11880:729":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:4680:657":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:4828:10122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11734:7694":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11087:6901":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:21401:11220":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11070:6899":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:8868:11174":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7329:6988":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2772:6298":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:2476:9298":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:690:7536":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"9:863:22205":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:2573:9299":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4274:9894":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:6546:6323":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4921:10176":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42173:9179":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:8218:2229":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:7218:10593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:2788:11211":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"0:17:531":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"1:11889:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:21141:11245":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:38926:10960":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:3346:6704":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:8256:9413":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:46551:9263":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:5839:23280":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:42592:6433":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"22:728:6641":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"2:43624:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:681:7534":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:39266:6394":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:1040:7250":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:11864:410":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5558:23278":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:1989:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12251:8043":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:2366:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:2579:8471":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13572:8438":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:630:9051":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11161:7825":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:153:6657":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"14:0:1990":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5433:8528":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:2252:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9401:7654":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:40764:16620":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11639:7933":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:5999:6775":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:20877:11100":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:39667:7287":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:660:7165":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:5495:11157":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3204:16371":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:39206:34568":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:2857:16543":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:5981:8588":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:9877:9167":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:43653:8974":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:8493:7042":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:6667:10507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:5163:8525":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:21710:9117":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:42942:6395":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"14:160:8950":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:7201:10584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:44428:9221":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11877:731":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:6284:6980":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:7473:7551":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10506:7756":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:9086:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10245:7210":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:44:7007":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:271:6677":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:11288:7851":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"22:966:6656":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:42784:6438":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:878:7044":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4766:10091":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:10050:7311":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8806:7354":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:1824:7336":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:7267:8794":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:39439:6736":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:3728:6665":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"14:221:8957":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45255:9245":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:5411:8486":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4353:9943":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:44507:9224":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4835:11136":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:7521:10614":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:21293:7077":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:4262:8503":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:4817:8520":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:8941:7173":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"9:111:7011":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:42192:7309":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12514:8086":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:9700:7672":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:22339:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:10724:28332":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:9234:9098":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:11034:7817":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:3716:8499":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:38816:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:6697:6718":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11830:7123":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:8241:23341":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"12:1628:6671":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:40874:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:5878:22393":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12816:6909":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:22306:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:8811:7068":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:699:6852":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:3130:38407":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:7498:10611":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:42652:6442":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:5990:10385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:5549:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"12:0:1989":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:7511:8803":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:21305:34458":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:2906:37299":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:40575:9170":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:10694:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:39691:7290":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:41970:9175":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:1351:7042":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:7484:9465":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:2465:8466":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12909:8250":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:21598:9113":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"5:3185:7248":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:6091:6779":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:3051:9301":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:42898:6437":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:41980:7094":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:7481:10606":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:11556:6434":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:8351:9424":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:9382:7339":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:4:998":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:10774:7552":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"12:762:6665":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"12:1859:7246":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13374:8390":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:7956:6999":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:39567:7272":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4649:10041":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:369:2136":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"5:3164:38404":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:9501:6879":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6053:10399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:11233:9347":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:43353:10703":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:11606:7925":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"22:449:6641":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"2:6939:6774":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10233:7734":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:10244:7333":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11909:7970":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2329:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:3177:16549":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:1550:9730":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:8212:23340":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:5492:10386":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:3283:11066":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8907:9437":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5945:10371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:40552:34538":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:8240:9412":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:4564:10476":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:3977:11091":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:48935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:43086:9192":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:291:38526":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"17:11576:7922":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:594:9708":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8248:7341":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"9:800:9632":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:42578:6435":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11186:7828":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4396:9960":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:9223:23358":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2706:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:3439:33342":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:46571:9265":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:8162:23339":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:42933:6397":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:5862:6704":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12948:8261":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:3198:16372":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:8300:9318":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:9088:6472":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:38840:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:614:38501":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:2933:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6200:8612":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13176:8319":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:11356:7871":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:6791:10575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:10257:7211":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:0:1984":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:8096:7116":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:21702:9116":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:30083:34544":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:2695:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4988:10208":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:5000:10213":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:1589:9755":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:20733:11221":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12176:8028":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:1197:8707":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:1065:8965":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:39558:7270":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12291:8048":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8168:6436":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:4656:10042":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"20:257:1845":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"21:259:38527":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"6:6571:10483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:8234:11110":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:7235:9073":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2613:9300":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:1674:1071":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12896:8244":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:2946:10971":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:11666:16322":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13158:8315":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:8174:7341":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9071:38500":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:1213:8966":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11300:7854":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:9185:7337":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:40954:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:1710:9837":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:6926:6786":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:3402:8494":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:4749:8518":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5460:8537":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:679:10954":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:4877:10156":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:21800:9128":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"9:586:9630":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:22240:9133":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:41234:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:46533:9262":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43246:6448":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:1716:6665":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:45537:9250":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:1541:9725":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13557:8437":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:42450:7320":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"12:1872:7248":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:123:16963":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:1849:7338":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:41154:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11888:1108":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:5235:8526":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:3929:11088":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"7:32:22192":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:7552:6408":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7357:6990":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12980:8268":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:20439:34461":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:4028:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:44276:9215":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:5780:7217":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"11:0:1988":{"crate_id":11,"path":["adler"],"kind":"module"},"1:7034:7356":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:43369:10707":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"22:752:6651":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"6:4313:9920":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:5184:22392":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:1051:8707":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:860:7043":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:8806:35720":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:10462:6462":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:9090:6473":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:39702:7293":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:11886:777":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:45097:9243":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:7601:9351":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:3415:9080":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"12:98:9622":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4850:10138":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:4632:11113":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:2524:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:5686:9334":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:4545:8511":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:39511:7061":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:7596:9349":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:6517:8660":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"14:187:22372":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:10714:9310":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:46209:9256":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:2210:9297":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12860:8239":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:2361:11034":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:6186:6978":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:21727:34578":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6757:10566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21764:34549":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:3199:9305":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"12:274:7234":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:2847:16541":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"9:188:7015":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:7953:11069":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:578:9698":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:4604:6389":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:531:7518":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"12:2198:9627":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:5494:23277":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:3403:16352":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:2527:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"18:574:7517":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:736:27093":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:39642:7066":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:4318:9317":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:588:10947":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:6512:10449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:3123:33865":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:3915:11086":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:5172:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:9671:7667":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:7559:16526":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:44945:9239":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:755:7545":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:2539:6765":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:10828:9034":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:45491:9249":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:242:7546":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"22:534:7151":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"16:2300:6918":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:624:38502":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10520:7759":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:3118:7042":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:1704:9834":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:1903:23388":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:12674:8209":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:3188:8492":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:7290:6665":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"12:1120:8969":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:7023:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:3238:9307":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:9722:6882":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42856:6441":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"9:649:22226":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:11879:733":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10394:7748":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13436:8411":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:41274:7089":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:10608:7615":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:6722:6729":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2823:11214":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:39258:6393":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:11868:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"22:43:27115":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:10684:7114":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:8932:9438":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:11350:9311":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:8441:11148":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4501:10013":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7890:8859":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:2411:8464":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:7475:10605":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7567:23288":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:12211:35072":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1645:9798":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:8323:6417":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:48948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3610:6677":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1612:6677":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:3963:11089":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:20696:11217":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:4246:9316":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13478:8417":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10642:23351":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:5996:6958":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:6034:8593":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6790:8697":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"20:249:127":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"2:43134:9193":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:1898:2122":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:962:8964":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:3249:7207":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:9526:7189":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:217:6675":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:7435:8802":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:8752:6429":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:4155:7042":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"22:470:6645":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"5:3671:9054":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8222:9314":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:5203:6857":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7970:8867":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2549:6748":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:21:670":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:39520:7062":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:11881:1470":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:1739:16572":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12278:8047":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:2208:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:6000:10388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:2998:16296":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:9092:9342":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6829:8701":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:646:10953":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:42421:7316":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:1847:7337":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:3192:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8839:9436":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"12:815:8958":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9119:28884":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"2:2831:16538":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11485:7901":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:1554:6704":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:6764:10569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:7792:7418":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:40781:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:9001:28334":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:3448:11042":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:8216:2231":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:39590:7275":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:1076:7251":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:1413:7045":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:41114:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:5378:9327":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:11615:6418":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7671:7103":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:40773:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:5510:6948":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5690:10242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:48974:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13527:8432":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12748:8220":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4703:10065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"15:175:7223":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:2360:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:9193:38498":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11748:7948":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12934:8258":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7543:6997":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:7396:23287":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:40588:9314":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11721:7943":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6330:8623":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:12850:8238":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:5614:6957":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:8820:9329":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43018:16320":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11882:1467":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:8295:23343":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4673:10050":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:6594:10484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:6146:8605":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:42532:7326":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:11468:7122":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:9328:7652":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:2324:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:4119:7058":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:7001:38405":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11853:7961":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10270:7735":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12630:8179":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:21635:7053":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6668:6944":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:9304:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:5951:10374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12087:8013":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"12:697:7047":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:247:7547":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:46708:9274":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:30025:34582":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:10672:9460":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:8483:7348":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1687:9827":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:933:8958":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:9029:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:2771:8479":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:43361:10705":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:2615:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:2714:6294":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:44921:9238":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13404:8396":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:9353:16390":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3457:7562":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11486:10722":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13059:8288":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6704:6985":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:41417:6475":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:40824:7042":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2961:2197":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:5628:8541":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:5240:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:1786:7334":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:4721:8517":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:7180:9069":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4720:10076":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:10849:28341":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:5477:7271":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:4051:16293":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"14:202:16332":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6743:10557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:1597:7248":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:2487:8467":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:39936:7301":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9371:7176":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:39581:7065":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:44298:9216":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:7150:9066":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:10944:6796":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:45601:9252":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:8161:6443":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:2746:6296":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:2601:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:9263:7179":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:10011:6425":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10659:9359":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"12:1518:22360":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11787:7952":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:8424:9427":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:44853:9235":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:11056:9342":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:9387:6792":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:3125:7246":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8852:11173":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4689:8516":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"12:1866:7247":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:9303:6879":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11536:7914":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:10207:7730":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:7688:10992":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"10:0:1987":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13536:8434":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11259:7842":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"9:896:22206":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8089:7067":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8762:9433":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6676:6983":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:42702:6446":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:11308:9101":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:22438:9134":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:2868:8727":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2217:11026":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"20:0:1644":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"2:44566:9227":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:5761:8557":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:5347:9325":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13100:8297":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6728:10550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:558:9287":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:2509:8468":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:5447:8532":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10420:6887":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:42802:6439":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:1074:8966":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:39364:9155":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:31773:9139":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:11343:7870":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"9:33:7010":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:11384:9106":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:5554:7064":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:7226:1817":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:3865:11084":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4559:10017":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12046:8008":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:3151:7247":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8229:10712":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"12:1065:38482":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10350:7552":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:13114:8304":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:6611:9336":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:9108:7176":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12955:8263":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:4441:8509":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:2557:8470":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:870:6317":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:586:9703":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:38976:9145":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:9778:7678":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:7469:6993":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"9:0:1986":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:40486:9091":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:6682:7297":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:11137:7821":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13184:8321":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:4385:8507":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:1534:9722":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:6210:8613":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6773:10572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"14:40:7803":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:9165:38493":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:40446:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:39312:6398":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:3120:29184":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:40755:2228":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10670:6891":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:42684:6447":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12337:6888":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:967:7183":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5786:10292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1652:9802":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:48922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4520:10014":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:44729:9232":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:1921:9079":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12118:8019":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:5815:23279":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7637:8816":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:29989:6523":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:41757:6471":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:11620:6416":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6345:6981":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:4952:10186":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:8991:38495":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:4775:10097":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"12:646:7043":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:1677:9821":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:13393:8395":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9375:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:43611:9209":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:2809:16537":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13382:8391":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:5679:9331":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:8014:8765":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:39469:7263":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"20:97:1844":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"18:671:7170":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:10950:6797":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:4750:11098":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4862:10147":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:43408:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:9930:7689":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6017:8590":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:11609:6419":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:44707:9231":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:39927:6460":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:4440:6489":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:8526:6872":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:7173:10581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1527:9720":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:39529:7265":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:10796:7772":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:8499:7351":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"12:2178:9623":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:42522:7325":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:2518:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:4297:8504":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"23:0:2161":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"16:6316:7219":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:7650:10950":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11518:9348":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:7031:7052":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6654:8679":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:315:38509":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:8105:9310":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:10123:6442":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6161:23281":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:43641:9212":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:2967:2199":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4489:10004":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:9081:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:3126:33864":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:8393:23346":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"20:348:2134":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"2:43603:9207":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:38699:16370":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10455:7751":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:38958:9144":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10476:23456":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:553:9685":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:48987:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:5327:9324":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2803:8717":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13203:8326":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"9:676:22213":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:10997:7803":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13221:8329":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4628:10029":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"12:1085:8968":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"12:387:7238":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9857:7686":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:9766:11100":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:5663:6699":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:44232:9213":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11761:7949":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"12:1044:22359":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:40611:9092":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:1592:7247":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:20479:34645":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:4568:10480":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:41958:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2842:8482":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:9096:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:2534:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4849:8521":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:29983:6522":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"12:777:6670":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:7865:9363":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11149:7822":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"12:1555:8972":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:2702:2194":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:5122:8524":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"20:383:2137":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"1:11867:1033":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"18:521:27095":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4408:9965":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:13007:8272":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:41669:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:6359:6460":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12164:8026":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13214:8327":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:847:7042":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:3026:7558":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:21748:34521":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:11147:6798":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:386:7548":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7426:8801":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2825:8481":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13279:8371":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"12:853:8963":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11368:7874":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:39539:7063":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11106:6908":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6059:10400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:10202:6445":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:6250:6677":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4673:11103":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:6286:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:3973:11090":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:484:6760":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11828:7959":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:8884:11175":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12265:8046":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10422:9307":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:12238:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:39185:9147":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:6051:11255":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:62:16908":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:499:9650":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"22:948:27118":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"5:2916:36887":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:48961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4910:10170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:8510:9432":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:41034:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:7659:23289":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:4772:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:6123:7109":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4662:8515":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12964:8264":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:39222:6402":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:3530:7042":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5525:6951":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:7819:9360":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:12768:8226":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11074:10721":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:920:7244":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4429:9975":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11876:734":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6719:38485":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"14:165:22365":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6593:8674":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:41933:7090":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:6743:23284":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:4385:6735":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:7857:9362":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9274:7646":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:861:6685":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10182:7728":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10434:7214":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9362:6861":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:1404:7044":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:2912:36888":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:8951:38491":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:2080:8966":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:6488:10432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:10062:7204":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:44344:9218":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:3747:6677":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:48909:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4606:8513":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11005:9433":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:31786:6297":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:13518:8428":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11235:7838":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:3689:8498":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:6567:8673":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6298:8617":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:9339:7181":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:9982:7336":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"12:2053:8707":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"9:920:22207":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5843:10322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:38985:8765":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:11974:8000":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:2908:10616":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"0:3:1618":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:4498:11129":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5800:10293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:8631:6875":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:30564:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7388:8800":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"12:2190:38481":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12073:8010":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10159:7727":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:638:9288":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:9021:7175":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:9040:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4637:10034":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6528:8661":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:41773:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:43365:10706":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:11862:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:4566:10478":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:2705:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:39610:7281":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:3953:6677":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11939:7989":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:11865:1486":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:41988:7095":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:11163:6427":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:4191:6486":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:46747:9275":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:7195:10582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:22405:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:39319:6399":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:9052:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:6136:6718":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:2835:16540":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:487:9645":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:12033:8006":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5759:10272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:6635:16530":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:3772:9313":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13327:8372":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10108:7724":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:8418:23347":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12211:8040":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9738:6869":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:11874:631":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:4115:6704":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11199:7829":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:878:7042":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:36:9629":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:40713:6317":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"21:276:2183":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"2:39969:7306":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:2189:7051":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:20684:11100":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:12730:8215":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4727:10078":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:2867:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:1520:9717":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:9446:7186":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:21687:34583":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:564:6849":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:2727:8477":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:3923:6699":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4611:10021":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9691:7669":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:1927:2123":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:43055:9188":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:3659:7115":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9764:7677":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:12455:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12797:8234":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9947:23430":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:5374:6947":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11093:9341":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:2275:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:3187:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11863:923":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5813:10299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4369:9948":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:8881:38492":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:1509:9712":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4871:10153":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:39283:6395":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:40623:9094":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:2703:6293":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:4085:6704":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"13:0:1983":{"crate_id":13,"path":["std_detect"],"kind":"module"},"13:110:38483":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:8750:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:39326:6400":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:5948:7279":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:1645:6518":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:43198:9194":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11125:7818":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11547:7917":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:6961:6565":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"22:879:27117":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"2:10216:6444":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:781:6680":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:7372:38484":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:10729:7328":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:6052:6943":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:10419:9305":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:43381:10710":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:5441:6714":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11271:7843":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:21651:7079":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:2819:11212":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:2389:8463":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:4268:9084":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6541:10461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:46685:9273":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:39305:6397":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:7809:7114":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"20:223:7497":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"17:1931:7193":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5698:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:6730:16522":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:2707:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:2878:16545":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11515:7910":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:3532:6699":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:39449:9157":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:20886:7075":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:9475:6744":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:3277:6665":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:4334:9930":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5949:8585":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4890:10163":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:73:1468":{"crate_id":2,"path":["core","u32"],"kind":"module"},"2:20671:11227":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:38882:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:562:7551":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:925:7046":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:41410:6474":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:7249:8786":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:5789:16882":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:9433:7656":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:8110:23325":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:6827:6800":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:3667:6317":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4929:10178":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"9:592:22224":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:5432:9328":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:5472:8485":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:7943:9364":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"12:393:7239":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:531:9673":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6816:8698":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:1228:8965":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:29763:11080":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:6781:8694":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:6226:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:43266:6449":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:11869:1344":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:44547:9226":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:891:7045":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:2784:6301":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:9658:7198":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9844:7684":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10296:7736":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:636:7533":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:11267:6800":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:22372:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:39376:34547":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:487:7550":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11017:9434":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10854:23353":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"21:302:2184":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"16:3854:8500":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:1986:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:42361:7314":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:43161:9107":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:7164:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4795:10106":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12485:8066":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:43385:10711":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:5363:9326":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:5793:6932":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:39716:7294":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:46591:9267":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"8:0:1985":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:39961:7304":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13231:8334":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:1366:7043":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:1559:9736":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11883:1468":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:7237:8785":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:9574:6748":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:11873:7964":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:10416:9303":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:652:7517":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:8796:6859":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:44252:9214":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:7160:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:2683:8475":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:11164:7110":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:4064:7344":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:9475:7188":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10921:7782":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:8798:7042":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8944:28321":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:46670:9272":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6359:8624":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10875:7778":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:4102:11109":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11436:7876":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11841:7960":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:9885:7688":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:44996:9240":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11037:7074":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:4094:7346":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:507:7517":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:38738:16297":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:12510:10984":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:3373:9408":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:2852:16542":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"7:0:1513":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11327:6802":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:7133:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4307:9918":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41687:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:1836:6317":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:39498:7060":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:12349:8057":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5722:10260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:515:7514":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:5703:8551":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13192:8322":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10374:7743":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:3201:9306":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:6985:6699":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:9627:7665":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:3670:9312":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9118:38496":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:4554:11088":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:6690:6984":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:8701:6877":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:2433:8465":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:11391:9312":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6079:10414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:7127:16527":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:12550:8117":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"21:145:1847":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"1:2371:11039":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:6542:6784":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:8148:7293":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:42917:6424":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:7211:6940":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11174:7827":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13168:8318":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:1021:7184":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11247:7841":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:7386:10594":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:41949:7093":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:1753:10625":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:39179:6395":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:46632:9270":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:9094:6475":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:534:6930":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:42926:6423":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:4016:9082":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:6363:9337":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:9317:7180":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4248:9874":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:12874:8240":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:2077:6693":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:40688:1813":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:4439:9982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:1716:9838":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22207:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:4629:11138":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:11878:732":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:4733:10081":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12307:8050":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"18:719:7539":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:6879:7067":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:669:7046":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:42542:7327":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7093:8744":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2657:8474":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:22174:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}