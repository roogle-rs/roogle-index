{"root":"0:0:1681","crate_version":"0.4.0","includes_private":false,"index":{"1:2551:1483":{"id":"1:2551:1483","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12119:34326":{"id":"1:12119:34326","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2740:2249-0:170:1659":{"id":"a:1:2740:2249-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:681:27983":{"id":"5:681:27983","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:422":{"id":"0:168:422","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2543:696":{"id":"1:2543:696","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:670":{"id":"0:107:670","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2541-0:170:1659":{"id":"b:1:2541-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12037:34311":{"id":"1:12037:34311","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12036:34310"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12049:1962":{"id":"1:12049:1962","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1821":{"id":"0:22:1821","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:38068":{"id":"5:5429:38068","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3321:1496":{"id":"1:3321:1496","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39303:9453","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8252:2274-0:161:1658":{"id":"a:1:8252:2274-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8252:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2541-0:161:1658":{"id":"b:1:2541-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2552-0:170:1659":{"id":"b:1:2552-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12028:30357":{"id":"1:12028:30357","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2555:128":{"id":"1:2555:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31982:9872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:679:7150":{"id":"5:679:7150","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12043:7341":{"id":"1:12043:7341","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43576:6464","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5441:38071":{"id":"5:5441:38071","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2134","`String`":"5:7280:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2134","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12036:34310":{"id":"1:12036:34310","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12037:34311"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12024:314":{"id":"1:12024:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12025:34291","`u8`":"4:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2250-0:161:1658":{"id":"b:1:2250-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2252:27812"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1672","0:96:1926","0:97:1673","0:98:1961","0:99:1930","0:100:1668","0:102:1680"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:170:1659":{"id":"0:170:1659","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8252:2274-0:170:1659","a:1:8253:2273-0:170:1659","a:1:2683:220-0:170:1659","a:1:2740:2249-0:170:1659","a:1:2700:228-0:170:1659","b:1:2609-0:170:1659","b:1:2247-0:170:1659","b:1:3319-0:170:1659","b:1:2552-0:170:1659","b:1:2250-0:170:1659","b:1:2541-0:170:1659","b:1:2547-0:170:1659","b:1:2537-0:170:1659","b:5:5686-0:170:1659","0:110","0:183","0:106","0:108","0:111"]}}},"1:12044:37397":{"id":"1:12044:37397","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43586:6466","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12099:37404":{"id":"1:12099:37404","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11715:2143","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11917:418","str::match_indices":"1:12096:37403"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43490:6476","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:1990":{"id":"0:87:1990","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8252:2274-0:155:1660":{"id":"a:1:8252:2274-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8252:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12110:37410":{"id":"1:12110:37410","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11740:6454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12113:37411":{"id":"1:12113:37411","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:680:27982":{"id":"5:680:27982","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12125:37413":{"id":"1:12125:37413","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12134:34195":{"id":"1:12134:34195","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39511:28227","Self::is_ascii":"1:12133:1837"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39511:28227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2540:2000":{"id":"1:2540:2000","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12023:37394":{"id":"1:12023:37394","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12038:1823":{"id":"1:12038:1823","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43292:1859","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12040:1842":{"id":"1:12040:1842","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43308:6462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12104:37406":{"id":"1:12104:37406","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12131:37415":{"id":"1:12131:37415","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11676:127","`FromStr`":"1:11675:2139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11675:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11675:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12096:37403":{"id":"1:12096:37403","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11715:2143","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11917:418","str::rmatch_indices":"1:12099:37404"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43472:6475","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12030:30358":{"id":"1:12030:30358","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12045:29607":{"id":"1:12045:29607","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43614:6477","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2683:220-0:161:1658":{"id":"a:1:2683:220-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5442:2200":{"id":"5:5442:2200","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2537-0:170:1659":{"id":"b:1:2537-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2540:2000"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100:1668":{"id":"0:100:1668","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:117:1666":{"id":"0:117:1666","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:170:1659":{"id":"a:1:2700:228-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:86:943":{"id":"0:86:943","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:943","0:87:1990","0:88:1668","0:91:1680"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:670":{"id":"0:112:670","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9120:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9109:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1679":{"id":"0:119:1679","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2537-0:155:1660":{"id":"b:1:2537-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2540:2000"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12017:37392":{"id":"1:12017:37392","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12019:37393":{"id":"1:12019:37393","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12017:37392"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12022:34251":{"id":"1:12022:34251","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11282:6458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12059:1836":{"id":"1:12059:1836","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41355:179","prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1930":{"id":"0:99:1930","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12034:37395":{"id":"1:12034:37395","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11923:1402","str::slice_mut_unchecked":"1:12035:37396","crate::ops::Index":"1:2980:2129"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12090:1937":{"id":"1:12090:1937","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11715:2143","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11917:418","str::matches":"1:12090:1937"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43526:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12102:37405":{"id":"1:12102:37405","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1668":{"id":"0:88:1668","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12041:29562":{"id":"1:12041:29562","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12042:29588"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43596:6465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12039:9621":{"id":"1:12039:9621","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43298:6463","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2250-0:155:1660":{"id":"b:1:2250-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2252:27812"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5444:35415":{"id":"5:5444:35415","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12137:34199"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12052:1963":{"id":"1:12052:1963","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12084:37400":{"id":"1:12084:37400","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8253:2273-0:170:1659":{"id":"a:1:8253:2273-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8253:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3319-0:155:1660":{"id":"b:1:3319-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12069:34320":{"id":"1:12069:34320","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11715:2143","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11917:418","str::split":"1:12063:1983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43340:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12122:37412":{"id":"1:12122:37412","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:1658":{"id":"0:161:1658","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:8252:2274-0:161:1658","a:1:8253:2273-0:161:1658","a:1:2683:220-0:161:1658","a:1:2740:2249-0:161:1658","a:1:2700:228-0:161:1658","b:1:2247-0:161:1658","b:1:3319-0:161:1658","b:1:2552-0:161:1658","b:1:2250-0:161:1658","b:1:2541-0:161:1658","b:1:2547-0:161:1658","b:1:2537-0:161:1658","b:5:677-0:161:1658","0:167","0:169","0:92"]}}},"5:5425:38067":{"id":"5:5425:38067","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2134","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2134","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7013:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12072:37398":{"id":"1:12072:37398","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11715:2143","str::split":"1:12063:1983","prim@char":"4:11917:418","`DoubleEndedIterator`":"1:7243:121","str::rsplit_terminator":"1:12075:37399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43372:6470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5686-0:170:1659":{"id":"b:5:5686-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5684:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5688:1460"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5432:38069":{"id":"5:5432:38069","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2556:1482":{"id":"1:2556:1482","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2609-0:170:1659":{"id":"b:1:2609-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3373:11346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2611:11115"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"1:12141:37417":{"id":"1:12141:37417","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4536:37417"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43639:6422","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1680":{"id":"0:91:1680","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1671":{"id":"0:118:1671","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12109:37409":{"id":"1:12109:37409","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:161:1658":{"id":"b:1:3319-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2700:228-0:155:1660":{"id":"a:1:2700:228-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2700:228-0:161:1658":{"id":"a:1:2700:228-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2552-0:161:1658":{"id":"b:1:2552-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2252:27812":{"id":"1:2252:27812","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5688:1460":{"id":"5:5688:1460","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2547-0:155:1660":{"id":"b:1:2547-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2247-0:155:1660":{"id":"b:1:2247-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2249:2035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:95:1672":{"id":"0:95:1672","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1673":{"id":"0:97:1673","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2611:11115":{"id":"1:2611:11115","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"1:3385:9400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12032:30359":{"id":"1:12032:30359","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12078:34322":{"id":"1:12078:34322","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143","str::rsplitn":"1:12081:34324"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43426:6472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12015:1967":{"id":"1:12015:1967","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12025:34291":{"id":"1:12025:34291","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11934:1504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12035:37396":{"id":"1:12035:37396","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11923:1402","crate::ops::IndexMut":"1:2984:2130","str::slice_unchecked":"1:12034:37395"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12081:34324":{"id":"1:12081:34324","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11917:418","str::splitn":"1:12078:34322","self::pattern":"1:11715:2143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43444:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:1992":{"id":"5:5426:1992","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2541-0:155:1660":{"id":"b:1:2541-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12108:37408":{"id":"1:12108:37408","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","description","cause","source"],"trait":{"name":"Error","id":"1:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2247-0:161:1658":{"id":"b:1:2247-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2249:2035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12136:34198":{"id":"1:12136:34198","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12026:1861":{"id":"1:12026:1861","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41355:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:1659":{"id":"0:115-0:170:1659","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1659","glob":false}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12055:6385":{"id":"1:12055:6385","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41355:179","prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2249:2035":{"id":"1:2249:2035","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12140:11393":{"id":"1:12140:11393","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4539:11393"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43630:6423","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2740:2249-0:161:1658":{"id":"a:1:2740:2249-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2740:2249-0:155:1660":{"id":"a:1:2740:2249-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:1961":{"id":"0:98:1961","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1681":{"id":"0:0:1681","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1656","0:114-0:161:1658","0:115-0:170:1659","0:116-0:155:1660","0:117:1666","0:118:1671","0:119:1679"],"is_stripped":false}}},"1:2550:128":{"id":"1:2550:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12013":{"id":"1:12013","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12014:815","1:12015:1967","1:12016:37391","1:12017:37392","1:12019:37393","1:12022:34251","1:12023:37394","1:12024:314","1:12025:34291","1:12026:1861","1:12028:30357","1:12030:30358","1:12032:30359","1:12034:37395","1:12035:37396","1:12036:34310","1:12037:34311","1:12038:1823","1:12039:9621","1:12040:1842","1:12041:29562","1:12042:29588","1:12043:7341","1:12044:37397","1:12045:29607","1:12046:32062","1:12049:1962","1:12052:1963","1:12055:6385","1:12059:1836","1:12063:1983","1:12066:29558","1:12069:34320","1:12072:37398","1:12075:37399","1:12078:34322","1:12081:34324","1:12084:37400","1:12087:37401","1:12090:1937","1:12093:37402","1:12096:37403","1:12099:37404","1:12102:37405","1:12104:37406","1:12106:37407","1:12108:37408","1:12109:37409","1:12110:37410","1:12113:37411","1:12116:1985","1:12119:34326","1:12122:37412","1:12125:37413","1:12128:37414","1:12131:37415","1:12133:1837","1:12134:34195","1:12135:34197","1:12136:34198","1:12137:34199","1:12138:37416","1:12140:11393","1:12141:37417"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:109:696":{"id":"0:109:696","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12066:29558":{"id":"1:12066:29558","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11538:6479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2250-0:170:1659":{"id":"b:1:2250-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2252:27812"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5440:38070":{"id":"5:5440:38070","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7280:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2547-0:170:1659":{"id":"b:1:2547-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:1867":{"id":"0:44:1867","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9145:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114-0:161:1658":{"id":"0:114-0:161:1658","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1658","glob":false}}},"1:12016:37391":{"id":"1:12016:37391","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12063:1983":{"id":"1:12063:1983","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11715:2143","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11917:418","str::split_whitespace":"1:12041:29562","str::rsplit":"1:12069:34320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43322:6469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424":{"id":"5:5424","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5425:38067","5:5426:1992","5:5429:38068","5:5432:38069","5:5440:38070","5:5441:38071","5:5442:2200","5:5443:35414","5:5444:35415"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5443:35414":{"id":"5:5443:35414","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12136:34198"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1660":{"id":"0:155:1660","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:8252:2274-0:155:1660","a:1:8253:2273-0:155:1660","a:1:2683:220-0:155:1660","a:1:2740:2249-0:155:1660","a:1:2700:228-0:155:1660","b:1:2247-0:155:1660","b:1:3319-0:155:1660","b:1:2552-0:155:1660","b:1:2250-0:155:1660","b:1:2541-0:155:1660","b:1:2547-0:155:1660","b:1:2537-0:155:1660","0:159"]}}},"1:12075:37399":{"id":"1:12075:37399","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11715:2143","str::split":"1:12063:1983","prim@char":"4:11917:418","str::split_terminator":"1:12072:37398"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43390:6468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12087:37401":{"id":"1:12087:37401","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12093:37402":{"id":"1:12093:37402","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11715:2143","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11917:418","str::matches":"1:12090:1937"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43544:6474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2247-0:170:1659":{"id":"b:1:2247-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2249:2035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12116:1985":{"id":"1:12116:1985","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12014:815":{"id":"1:12014:815","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1926":{"id":"0:96:1926","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12133:1837":{"id":"1:12133:1837","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:34197":{"id":"1:12135:34197","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2552-0:155:1660":{"id":"b:1:2552-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2547-0:161:1658":{"id":"b:1:2547-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2683:220-0:170:1659":{"id":"a:1:2683:220-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12042:29588":{"id":"1:12042:29588","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12041:29562"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43605:6478","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1660":{"id":"0:116-0:155:1660","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1660","glob":false}}},"1:12137:34199":{"id":"1:12137:34199","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1680":{"id":"0:102:1680","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41497:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8253:2273-0:161:1658":{"id":"a:1:8253:2273-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8253:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2683:220-0:155:1660":{"id":"a:1:2683:220-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:24:540":{"id":"0:24:540","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6717:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:607":{"id":"0:46:607","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41353:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7280:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9150:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:677-0:161:1658":{"id":"b:5:677-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:7150","5:680:27982","5:681:27983"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7:1656":{"id":"0:7:1656","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1821","0:24:540","0:44:1867","0:46:607"],"is_stripped":false}}},"a:1:8253:2273-0:155:1660":{"id":"a:1:8253:2273-0:155:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8253:2273","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3319-0:170:1659":{"id":"b:1:3319-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2248","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12046:32062":{"id":"1:12046:32062","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8252:2274-0:170:1659":{"id":"a:1:8252:2274-0:170:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8252:2274","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2537-0:161:1658":{"id":"b:1:2537-0:161:1658","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2540:2000"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12106:37407":{"id":"1:12106:37407","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12128:37414":{"id":"1:12128:37414","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11715:2143"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:2132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12138:37416":{"id":"1:12138:37416","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4538:37416"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43621:6424","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:9424:7770":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:21098:16581":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11299:7946":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:2826:8866":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12138:8100":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:7529:7105":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"20:97:1889":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"17:13667:8530":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:8525:9351":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:5024:10433":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11069:23572":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:39198:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:644:7152":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3998:9401":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"22:728:6766":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"17:13292:8411":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12113:8098":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:5838:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:47660:9698":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:1027:22578":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3168:11369":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:4832:10333":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:11641:8010":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:154:6782":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:43934:6457":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:2773:11351":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:7052:6808":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:2511:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"11:630:7151":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:2962:11370":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"0:117:1666":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"4:2348:10893":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:12019:7819":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"9:502:9167":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13344:8427":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:13812:8571":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:11538:6479":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:40236:7200":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:8:2194":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:8953:6973":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:10505:7325":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:44312:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:6505:9256":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4290:10100":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:39037:11374":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7557:7107":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:40265:7410":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:41185:9409":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:8718:6987":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:8498:7384":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:10092:7315":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6890:7101":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12259:8139":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:20574:32378":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:43900:11531":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:1556:9989":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:7168:2135":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11946:8073":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:40335:7425":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:7168:11443":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6164:8728":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:1270:9107":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12607:8193":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:46571:9681":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:8090:8999":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"15:180:7335":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:40397:7431":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:1299:9111":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:22501:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:6400:8752":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:4193:6821":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:8256:23544":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:6624:10711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:39929:6430":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:40306:7418":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:7624:9268":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:2544:6851":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:41480:6491":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:11939:792":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"6:6617:10707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:7271:10827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:21126:7210":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"9:174:7140":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:7065:8846":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:8683:6986":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:5774:10490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4367:10160":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:7243:9198":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:5754:2120":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:7180:16870":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1689:10078":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:21675:9427":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:8805:9354":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:12385:9425":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:21728:9428":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:43149:7465":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:41870:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6795:10792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11163:7915":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:11916:940":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:9158:6497":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"23:0:2215":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"17:13777:8558":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11902:8065":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"22:449:6766":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:47827:9707":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:7516:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:2194:9873":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:43614:6477":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:2816:11357":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:10851:9275":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:42362:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:39220:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12236:8130":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:1470:7154":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:9127:9365":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:13612:8511":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:119:6785":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:2263:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:6644:9254":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:4811:798":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:4932:8658":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6135:10646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:7510:10841":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:10855:9164":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"4:8867:17055":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12980:8353":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:47631:9695":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:40418:7436":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:5787:6859":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:2921:2250":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:5716:9252":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:6588:6359":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:4662:17009":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1499:9958":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"21:266:2225":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"17:11422:7960":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:3899:8639":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:9973:7803":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:40001:6423":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:4665:16982":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:2150:588":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13857:8577":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5990:7422":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:5693:7062":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9138:7285":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4853:10343":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:40227:7198":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:901:2120":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:3815:8637":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:5876:10539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:11011:7899":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4435:10191":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:582:7221":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:44049:6450":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:8360:23559":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:45955:9668":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:20994:16582":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:8456:17031":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"5:7227:29756":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:3193:9222":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12622:7002":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13791:8565":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:1583:7360":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:9409:23579":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:541:9923":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10857:23570":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:1099:7364":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7077:23505":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"14:0:2108":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:43390:6468":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6819:8815":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7259:2270":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:7499:9388":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:45508:9653":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:2804:8862":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:10721:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:9478:7773":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:22435:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:21000:16584":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:3513:2120":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:10894:9354":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"11:1121:9111":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:4463:418":{"crate_id":1,"path":["core","char"],"kind":"module"},"4:8508:7151":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:4868:17007":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:9529:6907":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:43921:9630":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:11927:642":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:13698:8537":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:1931:655":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:20604:32637":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:43526:6473":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10428:7859":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:12345:8148":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:699:6966":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:355:9201":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:10255:36182":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11861:8061":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:43230:7471":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:7335:38953":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"11:723:7153":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:10010:7371":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"21:276:2237":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:3272:9226":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:10448:9223":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6876:7100":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:46001:9670":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:8922:9356":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10660:7002":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:1672:10071":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7767:23508":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13821:8573":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:888:7154":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:731:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:258:6797":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:42133:6497":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7596:23507":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:1254:8847":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:7619:9266":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:6431:8754":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:3782:8636":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:2505:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:7599:16920":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:6561:17051":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13506:8468":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5798:10506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:5874:17106":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:41471:2271":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:736:7154":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10555:7864":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:45646:9659":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:9617:7297":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:1423:7152":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4817:10329":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5792:10503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:11918:1520":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:9145:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:8909:6462":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"0:46:607":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"0:24:540":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"1:45356:9647":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:2963:38354":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:41421:7152":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:7574:10856":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:9721:7301":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:8416:9606":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:9876:7715":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:532:9917":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"9:325:9876":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:10569:7868":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:9408:11488":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13865:8580":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"11:817:9101":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:10491:6882":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:9413:7208":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4894:10364":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:47712:9702":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:7598:10861":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:1755:9396":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:21926:29760":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11136:7909":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:43220:7470":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10452:7323":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:9120:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10989:7668":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13367:8432":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:9895:7797":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:6629:2176":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:0:2111":{"crate_id":17,"path":["object"],"kind":"module"},"6:5079:10459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:311:7349":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:8163:7436":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:13433:8451":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13879:8583":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:2470:8604":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6833:10811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9696:6993":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:7585:10857":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:4941:6821":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:5471:6821":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:6696:23503":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:43444:6471":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:1910:18534":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:10247:6472":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13516:8473":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4694:10272":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12318:8145":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:1103:9110":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:5383:6821":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:8283:23557":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12293:8142":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:4254:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:45903:9666":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:21117:16920":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:7509:8629":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"9:421:22502":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:40080:9586":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7205:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12902:8311":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4871:10354":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:5966:10594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:3300:8632":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:6600:2174":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:1915:9399":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:4510:8645":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"9:52:7125":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:41790:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:9011:33971":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:10056:6479":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:4845:8655":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:4279:9234":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:1535:9974":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:9410:7374":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:6129:10645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:43280:6461":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:46831:9685":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:7971:16946":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:2842:11360":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"11:1838:7359":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:43706:11530":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:4596:8648":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:12126:8099":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11969:8078":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"11:1611:6791":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"21:302:2238":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"4:11044:9353":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:46154:9674":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:6170:10671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:3315:16943":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:5593:6858":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6201:8730":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:5948:6821":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"9:0:2104":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:20589:32639":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:1048:8847":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10316:7850":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:40214:7197":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11615:8005":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:4409:6339":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"0:0:1681":{"crate_id":0,"path":["idna"],"kind":"module"},"17:10897:7896":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:10864:9246":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:9577:7778":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10125:7814":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:1846:7373":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11532:7980":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12403:8158":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:8753:6988":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:2220:38463":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:11921:312":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:39317:8904":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:43954:2133":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6767:8813":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:11337:6889":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:32109:6338":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:247:7663":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:42876:7453":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:22534:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9534:7293":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:42352:10961":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:42112:6495":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:2959:10865":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:922:7155":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:574:7633":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:4926:17014":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"21:67:1891":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"4:8293:10711":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"0:7:1656":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"17:9512:7292":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"10:0:2105":{"crate_id":10,"path":["adler"],"kind":"module"},"16:5305:8664":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:31982:9872":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:43138:7464":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5811:8681":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:2642:8611":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:719:7655":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12634:8196":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:7820:9277":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11060:7002":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9322:38963":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6218:8733":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9265:7287":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:3201:7361":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:8104:7179":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:44354:9644":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"9:481:22499":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11484:7968":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:4314:10117":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:676:16858":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"4:10167:11100":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"11:1048:38947":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13135:8377":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1439:2171":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:8788:6989":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:5848:10527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:2956:7150":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:21014:7210":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:10977:6886":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:41670:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:3235:7362":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:42380:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:13233:8400":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:42417:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:11899:36012":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:8195:23546":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:7528:10844":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"3:0:2099":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:1565:2171":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10527:23674":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:39138:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:41910:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:6671:8788":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:44299:9640":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:7214:2254":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:43490:6476":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4394:10170":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5104:8663":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:4362:6823":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:6935:8823":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"15:198:7340":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:7722:9275":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13499:8466":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:8573:23566":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10649:7326":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:46076:9672":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4615:10259":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6027:10620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:7277:10829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:1648:10054":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4861:10348":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:7891:7178":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5828:10516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6840:10814":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:926:7156":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:4728:8651":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4523:10234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:3996:16961":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:3156:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:39331:6505":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"16:7103:9362":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:25857:7220":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:2046:9184":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:4045:11394":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:43308:6462":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:2811:11356":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:7537:6876":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5766:10488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:538:6961":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:10516:7862":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:13194:8389":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:0:2110":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:45664:9660":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9628:7781":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5402:6972":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4722:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5817:10508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4419:10186":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:43639:6422":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12449:8165":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11675:2139":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:4437:16982":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:8047:8994":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:4517:10231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:4455:10200":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:2558:6849":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:320:7609":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"16:7042:8844":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:7321:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:4425:6823":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7837:8956":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10840:7894":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:44129:11537":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:8366:9342":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"5:6389:2171":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4809:10326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7478:8628":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:474:7356":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2897:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:40009:6424":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9098:7284":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:20546:7221":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:4335:6505":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:12282:8140":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:40358:7204":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:1662:10065":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:579:9942":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:0:496":{"crate_id":1,"path":["core"],"kind":"module"},"16:8109:9002":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:1594:7362":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:2862:8620":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5007:10425":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:39123:7401":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:41548:7152":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:13659:8529":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:10807:7473":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:43426:6472":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:3580:7151":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4388:10168":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"20:257:1890":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"6:6704:10736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:9072:9259":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:6432:6870":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"14:40:7943":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13399:8443":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:44069:6446":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:21872:9431":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:4785:30009":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4445:10197":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:573:9939":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1512:9964":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:2353:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:30428:29743":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:953:9103":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:1012:9107":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:2319:8597":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:2933:7317":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:1680:10072":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:3151:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:47788:9706":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:42857:9610":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:1919:23607":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:5742:7167":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:2821:11358":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:4135:16980":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:6211:6857":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:44238:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:23047:7219":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:113:7274":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:3141:11366":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10761:23568":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:3472:37087":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:22600:9447":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:12098:8095":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:386:7664":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:8835:9247":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:1924:6631":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"11:1822:2171":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:7449:8925":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12576:8187":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:515:7630":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2783:2125":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:9312:7288":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:40643:7444":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:660:7276":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:11224:9261":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:41556:2171":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:12505:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"4:3424:9227":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:6717:8800":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:47697:9701":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:2846:11361":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"20:383:2192":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"1:30826:7221":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"22:470:6770":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:41413:7151":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:21569:16920":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:41540:7151":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:8759:7388":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:9028:7282":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10743:7328":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"22:966:6781":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"4:9403:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:45933:9667":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:40667:6905":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:40108:9587":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11800:8049":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:39154:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:9796:7789":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:10168:6467":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5043:10447":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11410:7957":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:40315:7419":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:46381:9678":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10068:7314":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11234:7928":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:10731:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:11941:1131":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:20780:11325":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6520:8762":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:40636:7443":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"4:11935:1501":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:47613:9694":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:10029:7399":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:844:9104":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4703:10277":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:8777:9352":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:2376:16915":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:20889:11325":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:42457:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:5858:6829":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:7706:16891":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:41830:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:3481:16918":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"1:10095:7455":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10080:7813":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:361:9202":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:40185:7406":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10133:7456":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:21:683":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:9152:6494":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:8142:9006":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:39957:6429":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:7543:7106":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"7:0:1548":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:2799:11354":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:917:7358":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7626:8941":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:7164:11444":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:22402:6436":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:47429:9690":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10589:7873":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11268:9419":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:643:16857":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:1732:11341":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:4018:16965":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5571:8623":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:11478:7186":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:8214:8904":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4991:10420":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6572:10683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:3214:37377":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:40326:7424":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:2138:9185":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:554:9204":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:6849:10817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:2925:2251":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11319:7956":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:2743:6335":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:1947:7305":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12006:8082":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:2364:16909":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:43774:9623":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:7201:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:44248:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"13:110:38948":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:7092:7162":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"7:32:22486":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4340:10137":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:8936:7168":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6919:38950":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:707:6456":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:41268:29744":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:43109:7460":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"11:760:2168":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:46123:9673":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:8984:7171":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:40042:6428":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9453:23580":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:6468:6797":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:45312:9645":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:5062:6829":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"22:0:2214":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"6:554:9929":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:6920:7179":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13461:8458":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:5233:6797":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:8821:7390":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"22:636:7263":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"9:445:22500":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:4148:7382":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:3175:7360":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6990:8837":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:8858:6991":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:8954:33741":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:2378:8600":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10303:7849":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4928:10389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:10445:9221":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:2764:8616":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6670:10730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:8263:7376":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:20606:32640":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8252:2274":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:41590:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4841:10339":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:4542:10243":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:2855:6854":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:3266:7319":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:39178:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"14:160:9090":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:41630:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:1461:7153":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:9380:23578":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:399:7350":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"11:332:6787":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:1695:10081":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13721:8550":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:2791:11353":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4488:10215":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:5709:9249":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"22:1122:7605":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"6:4495:10218":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11372:7015":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11556:7982":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:11101:10882":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:1577:7359":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:8765:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"6:7462:10839":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:11109:7908":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5779:7067":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:6508:17049":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12358:8149":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:11937:1503":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"11:1858:7362":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"18:681:7650":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:1820:2164":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:9154:6495":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:5630:8672":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:1408:7151":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:39971:6431":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5050:10450":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"20:223:7613":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"4:5044:9237":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:501:6814":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:3749:8635":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:42392:8971":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:494:9892":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"21:0:1683":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"1:20919:16594":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:8076:9320":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:7062:37374":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13219:8397":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:42435:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:6137:17059":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:657:2171":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:44329:9643":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2160:11325":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"4:635:9205":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:5386:6971":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:2752:2124":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:7591:2123":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:8979:38965":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:4757:8652":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10416:7320":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"11:1845:7360":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"8:0:2103":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:21093:16920":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:587:9947":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:40016:6425":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:47765:9705":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:13257:8405":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:47367:9689":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:249:128":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"16:6361:8748":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:8791:9353":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:2337:7032":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:1895:6630":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:11866:9391":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6662:8787":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:45526:9654":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:22369:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:43576:6464":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5057:10453":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:6007:10614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:5594:8625":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:41162:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:2693:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:5393:9244":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6575:23502":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"15:219:7118":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4379:10163":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:9062:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:4097:7379":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"18:491:7632":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11628:8009":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:8389:23560":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:7539:10848":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6043:10625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:8170:6462":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"0:119:1679":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:2779:8861":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:671:7281":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:11883:7187":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11520:7977":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:39338:7605":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:3231:9223":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:413:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:6647:10729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:4877:17008":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:40075:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:2580:9216":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:1982:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:9816:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12178:8104":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:2060:9107":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2786:8617":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:43049:7458":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"9:234:9606":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:7467:8933":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:43586:6466":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:9557:6975":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13488:8465":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:55:8984":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"4:6319:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:8170:9007":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:7608:10863":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11464:6485":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10052:7811":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:46177:9675":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2838:11359":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10377:7853":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7244:38955":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:40446:7438":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:2366:16910":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:11497:10883":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:507:7633":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:46257:9676":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:41219:11453":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:4907:10374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"4:8153:7197":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:21124:16588":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12770:8205":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"11:285:7346":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9748:6975":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12072:8091":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6336:8744":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13101:7023":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:242:7662":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:8443:23562":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:11770:8040":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:867:2171":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:11487:6482":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:8823:6990":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:46335:9677":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:638:9207":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:4010:16963":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5998:23499":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"10:44:7124":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:5462:9246":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"6:1574:9999":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:22468:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:568:9937":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10936:7008":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:2795:11352":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7859:23509":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:41565:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:526:9914":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13803:8567":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11600:7999":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12894:8308":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:7757:8944":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12510:8180":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:4031:6797":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11544:7981":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5881:10540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"22:1034:27440":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"16:7411:7054":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:2892:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:13332:8421":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"18:80:7268":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:10721:7883":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:30234:6593":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:2694:8613":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11355:7013":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:930:9098":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13376:8435":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:2808:8618":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:819:6803":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:3270:9225":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:11928:644":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:10257:7316":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:975:7295":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:4904:8657":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2762:8860":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:7699:7163":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:1594:10013":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:10741:9228":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:20992:16920":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6868:7058":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2695:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"11:793:7358":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:5202:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:9032:7183":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:1826:2120":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4549:10245":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:42408:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2742:8615":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6725:10742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:6535:6784":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"4:3638:16954":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:9340:7289":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:8632:23545":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9683:7785":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:1538:9113":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:652:7633":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:21955:10894":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:4459:16983":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:40407:7433":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:30194:2161":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:1773:2168":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:420:7665":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:836:9103":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:10686:9277":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6854:8819":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:11931:745":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:1568:9997":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11282:7943":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:2180:7345":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5986:10602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:3488:16938":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:9178:7286":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:7043:7392":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:4739:10292":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8359:2132":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4677:10264":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:3962:16960":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:11197:7391":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:1844:7372":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"6:7563:10852":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:1666:1091":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"11:968:8847":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:6597:10701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:21347:16595":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:12461:8167":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11434:7961":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9933:6983":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:43472:6475":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:273:2134":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:7815:7374":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:2241:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:22336:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:12553:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:1768:609":{"crate_id":4,"path":["std","env"],"kind":"module"},"16:6327:7094":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:7545:10849":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7113:2171":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6506:7331":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:10491:7861":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:6376:7095":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:5032:8661":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:20778:30730":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:47651:9697":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:2186:38946":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:482:9886":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9150:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:20932:16920":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:39076:11371":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"4:6124:6866":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:9906:9598":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:4587:16960":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:14:2078":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:10440:7322":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:1479:7358":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:1544:9980":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:12608:2165":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"5:779:6800":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:42672:7230":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:47037:9686":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6488:8756":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:44341:9115":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:9612:6849":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:11490:33960":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:46493:9680":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:4597:10722":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:1636:6591":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2602:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:6254:7087":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:6259:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:7803:8952":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:40367:7428":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:40061:6421":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12550:8185":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:7013:2166":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:2687:10871":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:259:38991":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"6:6155:10660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:348:2189":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"18:727:6967":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10580:7872":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"11:1852:7361":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8846:7205":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:43605:6478":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:45857:9665":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4916:10380":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:8156:7116":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2311:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:21781:7213":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:1285:9105":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:7519:8938":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:8521:23564":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:1630:10042":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:11936:1502":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:43340:6467":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7966:7176":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:11729:6456":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8820:670":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:9839:7791":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:40205:7407":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10598:7897":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:3668:6797":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:7196:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:9213:7372":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:43728:9614":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:32022:7400":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"16:7711:8943":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:2316:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:4948:10400":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:9164:6499":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:8255:9330":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11193:7919":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:13678:8534":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:20879:16587":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:3805:9231":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4427:10188":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:62:17132":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4534:10238":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:4263:9404":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6014:10616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:13763:8556":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:9067:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6544:7098":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:97:9868":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:7600:9203":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:45378:9648":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:6865:6873":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:1489:7155":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:47750:9704":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:6588:10695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:10451:9225":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:13385:8436":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:10104:6998":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:30322:29648":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:1115:38348":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:3155:34169":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:22270:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:10670:7878":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:40677:7448":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:42872:10969":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:3700:9229":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"14:215:9095":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:10774:7472":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:7360:2168":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"22:948:27439":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"6:4886:10359":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9806:16920":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13024:8358":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:8883:17054":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:12360:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"0:118:1671":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"4:3956:16959":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11220:7927":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:45557:9655":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5071:8662":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:44256:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:20559:32378":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:10705:7881":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:42654:9606":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:7669:7110":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:4937:10395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"13:226:7122":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:531:7634":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:46411:9679":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12959:8348":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:1519:9966":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:47671:9699":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:7366:23506":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:9057:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11879:8062":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:4006:16962":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6728:8801":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4972:10412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:21453:32382":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:39941:29766":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:46617:9682":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:7269:6830":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:7694:7164":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9907:6995":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"22:534:7262":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"5:7022:2171":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:11924:1486":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:9218:6975":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:8254:2272":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4327:10127":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:4599:10724":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:2448:8603":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:8253:2273":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1669:6797":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:10699:9381":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"4:5522:10632":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"11:0:2106":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"4:875:7153":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:7076:2171":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4555:10247":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11258:7942":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:535:7044":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:2620:9217":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:8841:31103":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:11917:418":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:10876:33992":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:480:6845":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:5920:7040":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:5933:6857":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:5343:9238":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:9365:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:3385:9400":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:3934:6821":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:3446:8633":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:5862:10538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:8183:6464":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:1543:6821":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:9964:7151":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:7883:9281":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"22:43:27436":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:30798:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13169:8380":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:2347:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:2720:8614":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:5067:10454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:10013:6469":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10334:6975":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:6032:6861":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:44065:6452":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:1500:7156":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2757:11187":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:11503:6484":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2298:22614":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13639:8523":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:1561:7151":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:4380:6898":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:9946:7801":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:6321:7092":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:12085:8093":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:5418:8666":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:44045:6448":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:5847:8688":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:506:9897":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4567:10256":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9627:6915":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:1783:7369":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:39242:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:3142:7318":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:3719:7178":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:2890:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"16:2967:22641":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13015:8354":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:0:442":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:2928:2252":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:40658:7447":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:2855:11363":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:41248:7223":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:41429:2171":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:4351:9235":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10681:7879":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:1701:10082":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:20739:16589":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:6316:6797":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"11:365:6789":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13324:8420":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12046:8088":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4468:10205":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:1637:10046":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:10238:9245":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:3181:31493":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6243:38954":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:30228:2162":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:6786:6843":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:5281:17093":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"9:388:22501":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:599:38969":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5073:10456":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4780:10315":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:9110:6435":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"6:6066:10631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:8348:17018":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:5013:9237":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:2215:6844":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:5557:7061":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"15:0:2109":{"crate_id":15,"path":["addr2line"],"kind":"module"},"20:369:2191":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"4:3378:6821":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:13625:8517":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:21837:9429":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:32018:9276":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:43630:6423":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:21889:29770":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:8931:6992":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:4010:9402":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:2404:8601":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:45809:9664":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:3030:8630":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:530:6846":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:9109:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:21976:9443":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:204:6795":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:40432:7437":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:7875:9280":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:562:7667":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"18:614:38968":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:21342:16585":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"4:4704:16973":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:5367:22612":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:9148:38959":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:6893:11139":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10712:23676":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:8132:16919":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"5:7121:2171":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:21849:29753":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:2668:8612":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10039:7809":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9545:7755":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:96:7271":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:2426:8602":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:6761:6840":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:9469:7771":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:11932:746":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:9108:38961":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6819:10802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:11272:7395":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"12:0:2107":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:43372:6470":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:1572:2168":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:4818:8654":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:12516:6863":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:4480:8644":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"0:22:1821":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"4:585:16855":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:40028:6426":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:7285:37212":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"16:7293:8884":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:9826:7309":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:9822:7790":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:44291:9638":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:9110:9364":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:936:16871":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:4783:16970":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:6575:6871":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:10635:7001":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:9350:38958":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:7645:6882":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:39993:6422":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:43621:6424":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:8120:9228":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"20:0:1682":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"6:5889:10545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:10711:7177":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11844:8058":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:47537:9692":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:5000:8660":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:47640:9696":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:45787:9663":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:9162:6498":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:2174:9870":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:9298:9418":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"4:11266:7394":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4763:10304":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10967:7897":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12307:8144":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4605:10258":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:22567:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:7437:8924":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:4531:17000":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:11422:9231":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:1589:7361":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:3734:9184":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:13443:8454":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4684:10265":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:11922:1372":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"16:7697:7113":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11785:8044":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7294:10838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:4760:6855":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:42633:7228":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:13159:8379":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:8829:2171":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:1008:6797":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1716:10089":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13145:8378":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:8315:9236":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:49633:16598":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:1520:7366":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:47491:9691":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4400:10173":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:11427:6483":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:3063:7675":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:4445:8643":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10354:7852":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:42617:7225":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"9:352:22515":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:40255:7201":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11653:8013":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:11930:744":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:6793:8814":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:2168:9869":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:2737:6333":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:7557:10851":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:45332:9646":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6061:22613":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:11191:7173":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:3191:9221":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:11120:9259":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:6270:2120":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"13:0:2102":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:5408:9245":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"21:145:1892":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:8548:23565":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:8129:9003":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:1746:10891":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:9415:6880":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:2905:8622":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:7488:8936":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:4325:6897":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:7961:9282":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:2767:8857":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13477:8461":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10735:7886":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:9523:7777":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:40383:7430":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:1821:7371":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:20770:16586":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:39303:9453":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:13419:8449":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:30250:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:13411:8446":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:488:9889":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4462:10203":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:4983:10418":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:7556:6878":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:0:2112":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7498:8937":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7588:8940":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:7488:7667":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:12298:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:4540:8646":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:40274:7413":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4586:10257":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:5835:10518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:2240:7160":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:43911:9626":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:41353:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:6108:6863":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:9068:38960":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4412:10182":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12331:8147":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13564:8510":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:40297:7203":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11037:23571":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:40652:7445":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:5886:8691":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:45711:9661":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"7:79:22493":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:11064:7209":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:40092:29756":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6021:10617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:9373:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:4303:10109":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:1985:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:20851:16593":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:2850:11362":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:6293:8743":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:4022:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:6132:8725":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:9959:7802":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:4233:7151":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:3225:8631":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"21:198:2240":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"17:9641:7298":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:7249:10826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7572:38951":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11573:7990":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4753:10298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:6717:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:2391:6524":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:618:6632":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:5586:6857":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:10026:7311":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:7594:11441":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:47735:9703":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:41497:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:5377:9243":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:2616:8610":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11891:8064":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:2572:8608":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:43266:2137":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6307:7090":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10015:7808":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:9498:6993":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:3640:7679":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:6564:10678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:21571:16583":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:644:7633":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:7827:7177":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:8997:9362":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12496:8179":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"11:2049:9105":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"14:7:9090":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6035:10622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10142:23649":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:22303:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:4327:8641":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:11083:9260":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:2980:2129":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:5976:7046":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:875:6805":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:4400:8642":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6606:10702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:1517:9112":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:3196:11372":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6022:23500":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4625:10260":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:1785:7370":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"6:500:9894":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:73:1502":{"crate_id":1,"path":["core","u32"],"kind":"module"},"1:43100:7459":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:7598:11442":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:2594:8609":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5993:10603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:3934:16957":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:8989:7181":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:4872:8656":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:9091:9260":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:41327:9412":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:609:7644":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:2162:11326":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4943:10398":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:10465:7860":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:7810:7534":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:8249:16981":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10545:7668":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4747:10296":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:2879:8621":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6390:8751":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:6156:7172":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:39296:9452":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:11740:6454":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11993:8079":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:8667:6972":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5643:8677":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:2588:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:43886:9625":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:43118:7462":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:4847:10340":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:11522:9265":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7743:7114":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:39914:6423":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10206:7457":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"0:44:1867":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"4:11933:742":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"16:8072:8997":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:8189:7376":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4389:6506":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:7243:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13356:8428":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2705:2160":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:11938:1500":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:5677:23497":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:6355:9254":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:20752:16590":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"4:2219:16902":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:911:2168":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:40685:7450":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:7551:10850":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:2468:16920":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:8651:6971":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"4:10681:10880":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:1494:9956":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11446:7964":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:403:7351":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:10676:10878":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:6236:7057":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:20948:16580":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:20814:16592":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:13041:8360":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:3948:16958":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:2033:8847":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"20:231:2195":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"17:13181:8383":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:39324:9454":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:9734:7787":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"21:313:2239":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"4:11940:1558":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"6:4954:10401":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:8977:9361":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:43292:1859":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:6743:10752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6943:23504":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:3898:16956":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:43298:6463":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:6980:6860":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:4113:7195":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"18:590:7637":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:42642:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:1501:22579":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:30264:29761":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:22237:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:5357:9242":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"14:31:9090":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1708:10085":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"11:798:9098":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:1071:9107":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:8310:23558":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13066:8370":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12646:8203":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:2212:9214":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11721:8015":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:562:9934":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13082:8373":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6460:7096":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5014:10428":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:1732:10094":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:8941:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:6619:2175":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"22:879:27438":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"5:4163:6821":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:9488:7775":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:44041:6445":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:5963:7329":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:1062:9105":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9988:7152":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:8244:10873":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11715:2143":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:10270:7846":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:43849:9423":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:8678:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:9228:38957":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"11:986:9105":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4715:10284":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:3593:7152":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13744:8551":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:8439:9345":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:8854:9355":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:8176:6469":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:41304:9232":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:5655:8624":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7016:8838":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:11786:11524":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4474:10208":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:7256:9200":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"20:336:2188":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"1:9160:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10261:6471":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:21910:29750":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:123:17187":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:11915:371":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:6392:7444":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:3233:11373":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5919:10568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:12915:8318":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:5949:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:8490:23563":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:6867:10820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:13316:8419":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:30003:11155":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:3078:2131":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2984:2130":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:8237:9232":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7029:8841":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12433:8161":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:6771:11434":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:5527:2174":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5797:7071":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"11:2201:2135":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:3585:8634":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4793:10320":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:7504:10840":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13033:8359":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"20:315:38975":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"17:12923:8319":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:41990:7224":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:10275:7476":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4482:10213":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"20:327:7617":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"6:653:17544":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:44053:6449":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:5346:8665":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11090:7905":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9853:7310":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:4969:8659":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:7030:7363":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10289:7477":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13469:8460":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:45486:9652":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10823:7735":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:8289:9333":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"14:221:9097":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:41438:2270":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:9986:7804":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:7635:31101":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3373:11346":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:12799:8225":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7294:2121":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:21813:7214":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:7377:2169":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:10079:9367":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:9670:7300":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:8598:23567":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:21797:7190":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:45627:9658":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:10960:6884":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11735:6455":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:4073:7152":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:5804:10507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:5277:17092":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:42126:6496":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9886:7794":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:21962:9442":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7213:9195":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:766:27415":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:487:7666":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:11252:11494":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:1589:10011":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10402:7855":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"11:1831:2168":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12224:8128":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:46647:9683":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:8195:7378":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:43175:7406":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4799:10323":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9917:6996":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:11239:9262":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"22:669:6957":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:44057:6453":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:7280:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:11942:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:41404:1860":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:47289:9688":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4728:10288":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:5525:17036":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:3162:11367":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:2521:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:45587:9656":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5954:10589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:11920:1053":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:11821:8053":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11391:7022":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7317:38952":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:21864:9430":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:947:9101":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8673:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:4706:16974":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:42119:6494":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:11502:7976":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:42625:7227":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:4127:7381":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:2350:16905":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12194:8109":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12388:8154":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11832:8056":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:805:16871":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:21441:7212":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6442:8755":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:892:7151":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13309:8418":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13249:8403":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"18:736:27414":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5741:23498":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"10:36:9875":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:39981:6432":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"14:165:22584":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:8111:7180":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:11923:1402":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:41489:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:12522:8181":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:45757:9662":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4769:10307":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:595:9952":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:2167:7157":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:3158:34170":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:2910:11364":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:2830:8619":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5724:8678":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12835:8256":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:695:7156":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12033:8087":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10478:7324":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12059:8090":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:41950:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:10343:7388":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12563:8186":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:43210:7469":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:35:2167":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:9772:7788":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:2931:22640":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:4:1018":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:12592:8189":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:40283:7415":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:7837:9278":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"4:3152:36937":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:41339:9414":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:4144:7196":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:43128:7463":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:8180:23510":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13689:8535":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:1068:9109":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:1629:587":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"5:1135:7365":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:4186:6504":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:9653:7782":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10000:7805":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12483:8178":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:3904:16955":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11339:7009":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"4:2481:9215":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:10386:6881":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:8899:17056":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:7042:2120":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:4601:10726":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:9156:6496":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9275:38964":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:11032:9352":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:4789:8653":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:3872:8638":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4505:10225":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2357:8599":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:2546:8607":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:6774:10778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:755:7661":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:291:38992":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"17:12372:8152":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:1568:2120":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:1978:7308":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:2508:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:7673:16859":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:11459:7966":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:12333:33167":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12536:8182":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:5944:8697":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1602:10018":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12419:8159":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:2244:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:13265:8407":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:8025:8993":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:5684:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:844:7151":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6474:7097":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:1526:9969":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5736:10463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:690:7652":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13651:8526":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:7084:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11941:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:2740:2249":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:2748:6337":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:4649:10262":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:10971:6885":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:2128:6814":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"20:93:2199":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"16:4624:8649":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:40165:9588":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:39511:28227":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:2694:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:43757:9622":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:41710:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:3799:2168":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:10885:7005":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:10657:9376":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:2957:38353":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:21988:11188":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4258:9403":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:44096:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:5090:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:39920:9582":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:7305:2122":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:11929:747":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:41202:9411":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4663:10263":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:0:1394":{"crate_id":4,"path":["std"],"kind":"module"},"1:41750:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:11254:9264":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:2210:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:43596:6465":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6804:10795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:3348:7447":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2745:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:9188:38956":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:636:7649":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:6179:7072":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:1034:7296":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11924:8072":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:4845:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:40035:6427":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:41291:9601":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:2469:11154":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:43544:6474":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:43188:7467":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13240:8402":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:6076:10634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:4764:388":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"21:228:1893":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"1:46025:9671":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11585:7993":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"22:386:6782":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"17:11471:7967":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:47575:9693":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:4568:8647":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"4:8200:16953":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:46681:9684":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:4786:10318":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:8420:23561":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:9595:6910":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10923:7006":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:3083:9218":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:44073:6447":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:4605:6417":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:9566:7287":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:547:9926":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:6558:8763":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:11360:9229":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:45424:9650":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:2514:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:6719:10741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:11934:1504":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:6724:7440":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:521:27416":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7635:8942":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:3047:22642":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:47686:9700":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10615:7876":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:45402:9649":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:1787:7302":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:8813:7151":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7683:7112":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11813:8051":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4823:10330":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13453:8457":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:2458:10868":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:2502:8605":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"4:959:9104":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:857:7152":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:13121:8374":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:43201:7468":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4373:10161":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:7726:9276":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:3233:9224":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:47179:9687":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:11282:6458":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:42664:7229":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"20:356:2190":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:5589:7202":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12311:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:6904:7102":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:624:38967":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:4001:2120":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:9866:7792":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:3406:9326":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:5579:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4637:10261":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6710:10738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5708:7065":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:45609:9657":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:3463:6435":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:11717:6893":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:3703:9230":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:2524:8606":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:9038:38962":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:119:17186":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6981:8834":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:7522:10843":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:10626:7877":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:7867:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:3327:2168":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:4199:9233":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:11888:16861":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:481:7631":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:5616:8668":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:2683:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:13053:8365":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:44117:9635":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"22:752:6776":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"4:9149:36271":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"4:1433:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"14:187:22591":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:3647:2171":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:5531:7414":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10691:23675":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:626:9181":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:40348:7426":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:4392:6821":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:6351:23501":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:6677:11447":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9443:7290":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:2517:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:2690:2248":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"16:4037:8640":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10798:23569":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:7850:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"11:1818:7151":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:6935:6874":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"14:202:2119":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:40122:11408":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"16:8256:9014":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5899:10552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:2931:2253":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:11174:6887":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:4436:6507":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:6609:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:2032:7178":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:3209:7359":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:2700:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:4962:10406":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:40245:7408":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:7688:16860":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:4702:8650":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:4119:7380":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:8514:7387":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:43822:9624":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:13842:8576":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:11401:9230":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:4702:16971":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:10751:36267":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:45979:9669":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:3168:7151":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:2832:8867":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:6780:17058":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10283:7848":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:5270:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"5:2967:38356":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:44077:7209":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:43322:6469":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"11:667:7155":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12158:8103":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:1080:9111":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:564:6963":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:11529:9265":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:40155:6899":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:8947:9357":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:13426:8450":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:9596:7779":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:44061:6451":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1505:9961":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:13211:8394":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:8271:9331":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:45456:9651":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:20587:32635":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2787:11355":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:11720:2132":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2691:6331":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:39264:11365":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:3180:37376":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:11056:36264":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:749:2120":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:7266:1864":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:6396:9255":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5978:10601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:40629:7442":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:43743:9619":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:6687:10731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}