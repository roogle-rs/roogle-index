{"root":"0:0:1682","crate_version":"0.4.0","includes_private":false,"index":{"5:5442:38152":{"id":"5:5442:38152","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12129:28951":{"id":"1:12129:28951","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11601:6477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12176:37493":{"id":"1:12176:37493","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2683:220-0:155:1661":{"id":"a:1:2683:220-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2551:1483":{"id":"1:2551:1483","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:422":{"id":"0:168:422","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2543:696":{"id":"1:2543:696","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:107:670":{"id":"0:107:670","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12185:37494":{"id":"1:12185:37494","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8316:2271-0:161:1659":{"id":"a:1:8316:2271-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8316:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2740:2247-0:161:1659":{"id":"a:1:2740:2247-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12201:37498":{"id":"1:12201:37498","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4538:37498"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43803:6422","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3321:1496":{"id":"1:3321:1496","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39366:9454","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12093:33221":{"id":"1:12093:33221","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:35632":{"id":"5:5446:35632","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12200:34325"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1959":{"id":"0:98:1959","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2537-0:170:1660":{"id":"b:1:2537-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2540:1998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8316:2271-0:155:1661":{"id":"a:1:8316:2271-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8316:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2555:128":{"id":"1:2555:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32045:9873","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12105:28961":{"id":"1:12105:28961","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12104:28981"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43787:6476","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12106:7342":{"id":"1:12106:7342","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43758:6462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12138:37481":{"id":"1:12138:37481","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11778:2141","str::split":"1:12126:1981","prim@char":"4:11917:418","str::split_terminator":"1:12135:37480"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43572:6466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12082:37475":{"id":"1:12082:37475","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12080:37474"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2250-0:170:1660":{"id":"b:1:2250-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2252:27827"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96:1924":{"id":"0:96:1924","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1673","0:96:1924","0:97:1674","0:98:1959","0:99:1928","0:100:1669","0:102:1681"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:170:1660":{"id":"0:170:1660","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8316:2271-0:170:1660","a:1:8315:2272-0:170:1660","a:1:2700:228-0:170:1660","a:1:2740:2247-0:170:1660","a:1:2683:220-0:170:1660","b:1:2250-0:170:1660","b:1:2609-0:170:1660","b:1:2537-0:170:1660","b:1:2547-0:170:1660","b:1:2552-0:170:1660","b:1:3319-0:170:1660","b:1:2247-0:170:1660","b:1:2541-0:170:1660","b:5:5688-0:170:1660","0:110","0:183","0:108","0:111","0:106"]}}},"1:12089:1859":{"id":"1:12089:1859","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5688-0:170:1660":{"id":"b:5:5688-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5686:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5690:1460"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115-0:170:1660":{"id":"0:115-0:170:1660","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1660","glob":false}}},"1:12104:28981":{"id":"1:12104:28981","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12105:28961"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43778:6463","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:681:7147":{"id":"5:681:7147","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:5434:38151":{"id":"5:5434:38151","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2611:11116":{"id":"1:2611:11116","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"1:3385:9401","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1819":{"id":"0:22:1819","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12088:34406":{"id":"1:12088:34406","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12141:34437":{"id":"1:12141:34437","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141","str::rsplitn":"1:12144:34439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43608:6470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:1659":{"id":"0:114-0:161:1659","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1659","glob":false}}},"b:1:2552-0:155:1661":{"id":"b:1:2552-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5426":{"id":"5:5426","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5427:38149","5:5428:1990","5:5431:38150","5:5434:38151","5:5442:38152","5:5443:38153","5:5444:2198","5:5445:35631","5:5446:35632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2700:228-0:161:1659":{"id":"a:1:2700:228-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2552-0:161:1659":{"id":"b:1:2552-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12095:33222":{"id":"1:12095:33222","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:1840":{"id":"1:12103:1840","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43490:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:170:1660":{"id":"a:1:2700:228-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1682":{"id":"0:0:1682","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1657","0:114-0:161:1659","0:115-0:170:1660","0:116-0:155:1661","0:117:1667","0:118:1672","0:119:1680"],"is_stripped":false}}},"1:12098:37478":{"id":"1:12098:37478","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11923:1402","crate::ops::IndexMut":"1:2984:2128","str::slice_unchecked":"1:12097:37477"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:943":{"id":"0:86:943","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:943","0:87:1988","0:88:1669","0:91:1681"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:670":{"id":"0:112:670","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9183:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9172:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12108:28950":{"id":"1:12108:28950","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43796:6475","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12126:1981":{"id":"1:12126:1981","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11778:2141","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11917:418","str::split_whitespace":"1:12104:28981","str::rsplit":"1:12132:34435"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43504:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2683:220-0:170:1660":{"id":"a:1:2683:220-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8316:2271-0:170:1660":{"id":"a:1:8316:2271-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8316:2271","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12172:37491":{"id":"1:12172:37491","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12078:1965":{"id":"1:12078:1965","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12144:34439":{"id":"1:12144:34439","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11917:418","str::splitn":"1:12141:34437","self::pattern":"1:11778:2141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43626:6469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:1659":{"id":"0:161:1659","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:8316:2271-0:161:1659","a:1:8315:2272-0:161:1659","a:1:2700:228-0:161:1659","a:1:2740:2247-0:161:1659","a:1:2683:220-0:161:1659","b:1:2250-0:161:1659","b:1:2537-0:161:1659","b:1:2547-0:161:1659","b:1:2552-0:161:1659","b:1:3319-0:161:1659","b:1:2247-0:161:1659","b:1:2541-0:161:1659","b:5:679-0:161:1659","0:169","0:167","0:92"]}}},"1:12080:37474":{"id":"1:12080:37474","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8315:2272-0:155:1661":{"id":"a:1:8315:2272-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8315:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12165:37487":{"id":"1:12165:37487","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:679-0:161:1659":{"id":"b:5:679-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:675:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:681:7147","5:682:27997","5:683:27998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5427:38149":{"id":"5:5427:38149","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2132","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2132","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12118:6383":{"id":"1:12118:6383","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41537:179","prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12194:37497":{"id":"1:12194:37497","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11739:127","`FromStr`":"1:11738:2137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11738:2137","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11738:2137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1669":{"id":"0:88:1669","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12153:1935":{"id":"1:12153:1935","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11778:2141","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11917:418","str::matches":"1:12153:1935"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43708:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5690:1460":{"id":"5:5690:1460","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12159:37485":{"id":"1:12159:37485","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11778:2141","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11917:418","str::rmatch_indices":"1:12162:37486"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43654:6473","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2252:27827":{"id":"1:2252:27827","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12091:33220":{"id":"1:12091:33220","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41537:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9879:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2263:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2540:1998":{"id":"1:2540:1998","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2514:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12179:1983":{"id":"1:12179:1983","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2556:1482":{"id":"1:2556:1482","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1661":{"id":"0:155:1661","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:8316:2271-0:155:1661","a:1:8315:2272-0:155:1661","a:1:2700:228-0:155:1661","a:1:2740:2247-0:155:1661","a:1:2683:220-0:155:1661","b:1:2250-0:155:1661","b:1:2537-0:155:1661","b:1:2547-0:155:1661","b:1:2552-0:155:1661","b:1:3319-0:155:1661","b:1:2247-0:155:1661","b:1:2541-0:155:1661","0:159"]}}},"b:1:3319-0:155:1661":{"id":"b:1:3319-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5444:2198":{"id":"5:5444:2198","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2740:2247-0:155:1661":{"id":"a:1:2740:2247-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12167:37488":{"id":"1:12167:37488","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1674":{"id":"0:97:1674","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:27998":{"id":"5:683:27998","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:1657":{"id":"0:7:1657","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1819","0:24:540","0:44:1865","0:46:607"],"is_stripped":false}}},"1:12101:1821":{"id":"1:12101:1821","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43474:1857","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2588:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100:1669":{"id":"0:100:1669","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1680":{"id":"0:119:1680","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12182:34441":{"id":"1:12182:34441","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2552-0:170:1660":{"id":"b:1:2552-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2555:128","1:2556:1482"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:161:1659":{"id":"b:1:3319-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:87:1988":{"id":"0:87:1988","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:155:1661":{"id":"a:1:2700:228-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2541-0:161:1659":{"id":"b:1:2541-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12076":{"id":"1:12076","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12077:815","1:12078:1965","1:12079:37473","1:12080:37474","1:12082:37475","1:12085:34389","1:12086:37476","1:12087:314","1:12088:34406","1:12089:1859","1:12091:33220","1:12093:33221","1:12095:33222","1:12097:37477","1:12098:37478","1:12099:34425","1:12100:34426","1:12101:1821","1:12102:9622","1:12103:1840","1:12104:28981","1:12105:28961","1:12106:7342","1:12107:37479","1:12108:28950","1:12109:30833","1:12112:1960","1:12115:1961","1:12118:6383","1:12122:1834","1:12126:1981","1:12129:28951","1:12132:34435","1:12135:37480","1:12138:37481","1:12141:34437","1:12144:34439","1:12147:37482","1:12150:37483","1:12153:1935","1:12156:37484","1:12159:37485","1:12162:37486","1:12165:37487","1:12167:37488","1:12169:37489","1:12171:37490","1:12172:37491","1:12173:37492","1:12176:37493","1:12179:1983","1:12182:34441","1:12185:37494","1:12188:37495","1:12191:37496","1:12194:37497","1:12196:1835","1:12197:34321","1:12198:34323","1:12199:34324","1:12200:34325","1:12201:37498","1:12203:11394","1:12204:37499"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12099:34425":{"id":"1:12099:34425","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12100:34426"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1681":{"id":"0:102:1681","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1672":{"id":"0:118:1672","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2537-0:155:1661":{"id":"b:1:2537-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2540:1998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12199:34324":{"id":"1:12199:34324","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","cause","source","provide","description"],"trait":{"name":"Error","id":"1:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12147:37482":{"id":"1:12147:37482","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12100:34426":{"id":"1:12100:34426","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12099:34425"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2541-0:155:1661":{"id":"b:1:2541-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12086:37476":{"id":"1:12086:37476","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:2249:2033":{"id":"1:2249:2033","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12191:37496":{"id":"1:12191:37496","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12188:37495":{"id":"1:12188:37495","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12132:34435":{"id":"1:12132:34435","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11778:2141","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11917:418","str::split":"1:12126:1981"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43522:6465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2250-0:155:1661":{"id":"b:1:2250-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2252:27827"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2550:128":{"id":"1:2550:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12156:37484":{"id":"1:12156:37484","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11778:2141","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11917:418","str::matches":"1:12153:1935"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43726:6472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:27997":{"id":"5:682:27997","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12169:37489":{"id":"1:12169:37489","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2683:220-0:161:1659":{"id":"a:1:2683:220-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12135:37480":{"id":"1:12135:37480","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11778:2141","str::split":"1:12126:1981","prim@char":"4:11917:418","`DoubleEndedIterator`":"1:7306:121","str::rsplit_terminator":"1:12138:37481"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43554:6468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:696":{"id":"0:109:696","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12196:1835":{"id":"1:12196:1835","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12122:1834":{"id":"1:12122:1834","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41537:179","prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12107:37479":{"id":"1:12107:37479","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43768:6464","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9208:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5431:38150":{"id":"5:5431:38150","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1661":{"id":"0:116-0:155:1661","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1661","glob":false}}},"1:12200:34325":{"id":"1:12200:34325","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:38153":{"id":"5:5443:38153","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2132","`String`":"5:7282:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2132","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7015:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12162:37486":{"id":"1:12162:37486","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11778:2141","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11917:418","str::match_indices":"1:12159:37485"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43672:6474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2541-0:170:1660":{"id":"b:1:2541-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2543:696"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12197:34321":{"id":"1:12197:34321","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39574:28089","Self::is_ascii":"1:12196:1835"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39574:28089","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2250-0:161:1659":{"id":"b:1:2250-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2244:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2252:27827"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2740:2247-0:170:1660":{"id":"a:1:2740:2247-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12097:37477":{"id":"1:12097:37477","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11923:1402","str::slice_mut_unchecked":"1:12098:37478","crate::ops::Index":"1:2980:2127"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12079:37473":{"id":"1:12079:37473","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5428:1990":{"id":"5:5428:1990","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7282:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12150:37483":{"id":"1:12150:37483","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2547-0:161:1659":{"id":"b:1:2547-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12102:9622":{"id":"1:12102:9622","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43480:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12112:1960":{"id":"1:12112:1960","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8315:2272-0:170:1660":{"id":"a:1:8315:2272-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8315:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2547-0:155:1661":{"id":"b:1:2547-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:1865":{"id":"0:44:1865","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2247-0:155:1661":{"id":"b:1:2247-0:155:1661","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2249:2033"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:95:1673":{"id":"0:95:1673","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12173:37492":{"id":"1:12173:37492","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11803:6452","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2547-0:170:1660":{"id":"b:1:2547-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2521:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2517:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2550:128","1:2551:1483"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12087:314":{"id":"1:12087:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12088:34406","`u8`":"4:11934:1505"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12171:37490":{"id":"1:12171:37490","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12085:34389":{"id":"1:12085:34389","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11345:6456"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:170:1660":{"id":"b:1:3319-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12115:1961":{"id":"1:12115:1961","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11798:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2537-0:161:1659":{"id":"b:1:2537-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2514:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2511:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2540:1998"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12203:11394":{"id":"1:12203:11394","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4539:11394"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43812:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:540":{"id":"0:24:540","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:6719:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:607":{"id":"0:46:607","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41535:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12204:37499":{"id":"1:12204:37499","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4536:37499"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43821:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8315:2272-0:161:1659":{"id":"a:1:8315:2272-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8315:2272","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:117:1667":{"id":"0:117:1667","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2247-0:161:1659":{"id":"b:1:2247-0:161:1659","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2249:2033"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2247-0:170:1660":{"id":"b:1:2247-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2241:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2249:2033"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9213:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12198:34323":{"id":"1:12198:34323","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:35631":{"id":"5:5445:35631","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12199:34324"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2609-0:170:1660":{"id":"b:1:2609-0:170:1660","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3373:11347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2611:11116"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"1:12109:30833":{"id":"1:12109:30833","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11917:418","self::pattern":"1:11778:2141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11783:2130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1681":{"id":"0:91:1681","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7282:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41679:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12077:815":{"id":"1:12077:815","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1928":{"id":"0:99:1928","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:5919:10569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:564:6960":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:3152:37109":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:6032:6858":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:8947:9358":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:47879:9702":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4394:10171":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5104:8664":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:7608:10864":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10402:7856":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:2169:7154":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:1947:7306":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12634:8197":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:5797:7068":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:2816:11358":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4663:10264":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"22:0:2212":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"6:4861:10349":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:4932:8659":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6135:10647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:9443:7291":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:10855:9165":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"4:8867:17056":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6840:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:39574:28089":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:10092:7316":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:45791:9658":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:2511:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"16:7103:9363":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:4969:8660":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:1561:7148":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5899:10553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:8821:7391":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:526:9915":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:21011:16581":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:7600:9204":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:154:6780":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:5976:7043":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11372:7012":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:2826:8867":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:3569:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4505:10226":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"11:119:6783":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5043:10448":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:3815:8638":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6647:10730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:4127:7382":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13249:8404":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9886:7795":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13292:8412":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"15:198:7341":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:35:2165":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:671:7282":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5998:23500":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7837:8957":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:491:7633":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13309:8419":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10649:7327":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7478:8629":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13316:8420":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:5741:23499":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13612:8512":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:9534:7294":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12835:8257":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6819:8816":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4928:10390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:3182:38525":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4586:10258":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:47611:9691":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:2140:9186":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:7891:7175":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:11939:792":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:2855:11364":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7743:7111":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:96:7272":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:10894:9355":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:638:9208":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:2580:9217":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:8109:9003":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:6156:7169":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:403:7352":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:30385:28112":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:4841:10340":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10478:7325":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:41730:7149":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:2689:10872":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9424:7771":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:46563:9679":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:2298:22615":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13159:8380":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:7837:9279":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"9:325:9877":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:11916:940":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"6:4388:10169":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:7522:10844":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:2034:7175":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:2558:6846":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:43956:9624":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9213:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:43480:6461":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1373:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:42534:10962":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:3141:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:4811:798":{"crate_id":1,"path":["core","iter"],"kind":"module"},"4:4135:16981":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:1775:2166":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:2263:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6535:6782":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:40091:6424":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:11331:9420":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:45638:9652":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:7329:1862":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:2752:2122":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:7227:11445":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"14:215:9096":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12483:8179":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:7599:16921":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6431:8755":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:3782:8637":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:3513:2118":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7859:23510":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:47853:9700":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13499:8467":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6717:8801":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:10741:9229":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:7499:9389":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:8953:6970":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:8997:9363":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:2150:588":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:43910:9615":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4785:29056":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:2740:2247":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:11918:1521":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:22039:9444":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:0:2108":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:47822:9697":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1636:6589":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"16:6460:7093":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:7384:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:5787:6856":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:43554:6468":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11459:7967":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:7574:10857":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12536:8183":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10334:6972":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:7245:9199":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40470:7434":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13744:8552":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:113:7275":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"4:11337:6886":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4894:10365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:3203:7362":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:660:7277":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"18:699:6963":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"22:1034:27441":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"4:10721:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:7411:7051":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:11803:6452":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:515:7631":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:386:7665":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:8759:7389":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:20914:16594":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:7296:2119":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"10:36:9876":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:2337:7029":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4463:418":{"crate_id":1,"path":["core","char"],"kind":"module"},"17:12770:8206":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4258:9404":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9498:6990":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:11927:642":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"6:1689:10079":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2779:8862":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:1931:655":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:12358:8150":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:1071:9108":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:7673:16860":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1602:10019":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12282:8141":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:2928:2250":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4549:10246":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:44235:6447":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:3406:9327":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:2215:6841":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:10068:7315":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:986:9106":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4871:10355":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:11792:6454":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:3300:8633":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"4:10876:36159":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:44494:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10823:7736":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:11585:7994":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:731:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:47219:9687":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:46593:9680":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:844:9105":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"7:79:22494":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4832:10334":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:420:7666":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:968:8848":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:12461:8168":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:6129:10646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:7698:33523":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:8651:6968":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:2505:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"11:1838:7360":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:123:17188":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:4596:8649":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:7645:6879":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:42807:7224":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8316:2271":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:3899:8640":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:3424:9228":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6170:10672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:21516:29849":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12345:8149":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:5471:6819":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:2378:8601":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:798:9099":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12072:8092":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:10960:6881":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:41620:2268":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"20:315:38998":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"4:3083:9219":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:6670:10731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10452:7324":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11391:7019":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:45538:9648":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:40228:9589":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"0:46:607":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"0:24:540":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"17:13376:8436":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:9219:6494":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:22025:9443":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"20:327:7618":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"4:4702:16972":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1272:9108":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:21156:16921":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10743:7329":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6376:7092":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"22:752:6774":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"17:10527:23675":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:39201:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:13506:8469":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12126:8100":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:1544:9981":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:43291:7461":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:1568:9998":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:7726:9277":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:4926:17015":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:3703:9231":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:43522:6465":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:119:17187":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:8293:10712":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12224:8129":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10626:7878":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:11345:6456":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:5305:8665":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:5811:8682":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:2642:8612":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:45708:9655":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7335:38977":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:43939:9623":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:1787:7303":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:399:7351":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:481:7632":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:707:6454":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"14:160:9091":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:4254:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:8156:7113":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:8823:6987":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:43310:7464":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:3749:8636":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:20815:16591":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"4:2376:16916":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:9592:6904":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:7231:11444":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11566:6482":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:273:2132":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"15:0:2107":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:42836:9607":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:653:17545":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:9380:23579":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:9683:7786":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"13:0:2100":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:1538:9114":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1732:10095":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:10338:7477":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:5279:17093":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:2160:11326":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:5963:7330":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:2969:38443":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5798:10507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"11:2180:7346":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:32172:6336":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:7528:10845":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:47813:9696":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:4119:7381":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:3216:38527":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11109:7909":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:39241:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"22:470:6768":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:21935:9432":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:6671:8789":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:10079:9368":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:3670:6795":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:9215:6492":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"16:6935:8824":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:6361:8749":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:332:6785":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12158:8104":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:11921:312":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:44511:9644":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13842:8577":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:40072:6422":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11339:7006":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6027:10621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:8271:9332":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:7820:9278":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:8195:7379":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:2767:8858":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12923:8320":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:3446:8634":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:4728:8652":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4523:10235":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:6318:6795":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:12374:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:22051:11189":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:11883:7184":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:4186:6502":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:2544:6848":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:2811:11357":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:1565:2169":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:43300:7463":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11946:8074":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:1846:7374":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10416:7321":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:42639:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:40290:7195":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:20942:16588":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"22:966:6779":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"10:44:7121":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:9696:6990":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11532:7981":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:12568:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:11502:7977":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:1910:18535":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:43778:6463":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:45668:9653":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:7810:7535":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:4437:16983":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:6243:38975":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4455:10201":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:12388:8155":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:6780:17059":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:7229:28116":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"19:0:1035":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:43726:6472":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7042:8845":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:47833:9698":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1502:7153":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:4809:10327":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6474:7094":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5966:10595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:10699:9382":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:47970:9707":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10712:23677":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9839:7792":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:5393:9245":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:41722:7148":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"16:6575:23503":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:888:7151":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"11:1027:22579":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"15:219:7115":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4769:10308":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:12361:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:1589:10012":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:8255:9331":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:5377:9244":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13411:8447":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:3237:7363":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:45809:9659":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:10310:6470":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:5686:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:2862:8621":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:39401:7606":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:12522:8182":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"5:1671:6795":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:39380:8905":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:40825:7445":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:5525:17037":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"6:6704:10737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:8909:6460":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1574:10000":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11484:7969":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12607:8194":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11193:7920":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"4:8498:7385":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:9577:7779":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:5804:10508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:6865:6870":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:2319:8598":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:532:9918":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:8791:9354":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"22:449:6764":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:46183:9671":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:7449:8926":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:8984:7168":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9917:6993":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:13233:8401":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:8366:9343":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"5:3177:7361":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:3156:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:39359:9453":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:40859:7449":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:45991:9665":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:6602:2172":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:2481:9216":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:2846:11362":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:1463:7150":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:8153:7194":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:9658:6907":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"13:226:7119":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11163:7916":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:285:7347":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11220:7928":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:9512:7293":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:22465:6434":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:41450:28097":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:2808:8619":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:43474:1857":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10885:7002":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:21927:9431":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:8718:6984":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:7378:2167":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:11770:8041":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:4351:9236":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:2830:8620":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:5462:9247":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:12194:8110":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:6520:8763":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7669:7107":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:22663:9448":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4327:10128":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10052:7812":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:5386:6968":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:43490:6460":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:43572:6466":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:9127:9366":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:13698:8538":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:6725:10743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:1513:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:9149:36421":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:2897:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:0:2109":{"crate_id":17,"path":["object"],"kind":"module"},"6:4373:10162":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:8142:9007":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:947:9102":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:8183:6462":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:45584:9650":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:9322:38986":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:46137:9669":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:3721:7175":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12894:8309":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:2799:11355":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:1499:9959":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7626:8942":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:624:38989":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:12510:8181":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:11888:16862":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:0:496":{"crate_id":1,"path":["core"],"kind":"module"},"14:0:2106":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:21952:28150":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:4113:7192":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:723:7150":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:47842:9699":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4739:10293":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4637:10262":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:4677:10265":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13332:8422":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4763:10305":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:1818:7148":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5571:8624":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:8214:8905":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:2620:9218":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4991:10421":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:21180:16921":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:12449:8166":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:7086:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"0:22:1819":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"6:6572:10684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6849:10818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:5383:6819":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:13082:8374":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11355:7010":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:22531:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:43787:6476":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"20:336:2186":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:11813:8052":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:42815:7225":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:3463:6433":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:44031:9424":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:2353:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:43708:6471":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3151:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7596:23508":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:39305:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:40421:7201":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:22564:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:7077:23506":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2594:8610":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:1256:8848":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:44103:9631":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6506:7332":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:1648:10055":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:1978:7309":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:5032:8662":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:11272:7396":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9946:7802":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:10324:6469":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5828:10517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:3063:7676":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:2965:38442":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:44536:9645":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:628:9182":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:5013:9238":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:2168:9870":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:11490:36518":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:4045:11395":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:41892:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4605:6415":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:42301:6492":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4462:10204":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:7043:7393":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:8632:23546":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:43039:9611":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:6488:8757":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:21876:7211":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6990:8838":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:8416:9607":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:21504:7209":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:4199:9234":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2764:8617":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5693:7059":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10967:7898":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:365:6787":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:43331:7466":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:11844:8059":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:9403:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"0:119:1680":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:40299:7197":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:49815:16599":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:1577:7360":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11471:7968":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:684:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5817:10509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:7015:2164":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:5589:7199":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:8490:23564":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:9172:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"16:4624:8650":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6321:7089":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:10731:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"0:118:1672":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"4:11941:1131":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"6:6155:10661":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:44430:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10491:7862":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9409:23580":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:7815:7375":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4878:1005":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:3155:34306":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:11529:9266":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:2791:11354":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:3272:9227":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:21:683":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:8922:9357":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:1505:9962":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:7064:38523":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11136:7910":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5367:22613":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:766:27416":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:500:9895":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:302:2236":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"1:46085:9667":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:44481:9641":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:20652:30325":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:7271:10828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:6787:7441":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4495:10219":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2832:8868":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:42599:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:39139:11372":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:2925:2249":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:42308:6494":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6021:10618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:39283:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:8598:23568":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:43412:7472":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:46863:9685":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:40430:7429":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7529:7102":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:5630:8673":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:875:7150":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:47361:9688":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13865:8581":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"14:202:2117":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1680:10073":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:7182:16871":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:10076:6467":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:43768:6464":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:5557:7058":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:2931:2251":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10039:7810":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:480:6842":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6351:23502":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:9469:7772":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2572:8609":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:643:16858":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:8360:23560":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9312:7289":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:7462:10840":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:8521:23565":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:1755:9397":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:4033:6795":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:6561:17052":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:43504:6467":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:5064:6827":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:2855:6851":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13763:8557":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10681:7880":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:4757:8653":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13367:8433":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10142:23650":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:40460:7432":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:7215:9196":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:3595:7149":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5889:10546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:8283:23558":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7557:7104":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:41535:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:4972:10413":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:21634:16584":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:10196:7457":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6662:8788":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:40308:7409":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:681:7651":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6007:10615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:5594:8626":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12293:8143":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:8904:33483":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:9217:6493":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:43672:6474":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:5408:9246":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"16:2448:8604":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:573:9940":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:541:9924":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:30297:6591":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:7539:10849":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:44420:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6043:10626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:40044:6430":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"14:31:9091":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11969:8079":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:953:9104":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10635:6998":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"9:445:22501":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:42092:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:22432:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:4279:9235":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:547:9927":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:5756:2118":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:5593:6855":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10303:7850":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:20995:16921":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11902:8066":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7244:38976":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:20609:7218":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:4877:17009":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:30257:2159":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:10015:7809":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:8263:7377":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:42799:7222":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:2060:9108":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2786:8618":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:8765:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:7467:8934":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5978:10602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10125:7815":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:44004:9625":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:4943:6819":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:7094:7159":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:30861:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:20650:30323":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:8170:9008":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"14:7:9091":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:21791:9429":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11299:7947":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10316:7851":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:959:9105":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:8858:6988":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"21:67:1889":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"17:9038:38982":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:41344:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:1852:7362":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:41401:11454":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:40185:11409":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"16:7317:38978":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1746:10892":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6022:23501":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:10851:9276":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:12616:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:2757:11188":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:1716:10090":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4907:10375":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:11258:7943":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:7510:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:41772:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9523:7778":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:40143:9587":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:8525:9352":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:8548:23566":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:11940:1559":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:12579:6860":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:39394:6503":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:41662:6489":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:6336:8745":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:5709:9250":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:5343:9239":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:4409:6337":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4567:10257":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12592:8190":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:32081:9277":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"5:7258:9201":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:361:9203":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:48009:9708":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:9188:38980":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:40155:28116":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:11522:9266":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:4349:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:40105:6426":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:45893:9662":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"20:249:128":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"17:13169:8381":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:11778:2141":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:13033:8360":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3385:9401":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"6:4435:10192":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:45969:9664":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11600:8000":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:10751:36409":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:40328:7411":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"22:43:27437":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"4:6575:6868":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"11:0:2104":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"21:0:1684":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"1:2795:11353":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2693:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:8076:9321":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"4:9062:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:4195:6819":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:5990:7423":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13488:8466":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:10167:11101":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:12563:8187":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:4075:7149":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:10255:36167":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:7757:8945":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6236:7054":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:675:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:2201:2133":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:40218:6896":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"22:1122:7606":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"4:8508:7148":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"16:6890:7098":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:413:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:2694:8614":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4482:10214":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:20833:16587":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:40337:7414":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:590:7638":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:43383:7469":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:1982:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:894:7148":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10840:7895":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4886:10360":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:7585:10858":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:2980:2127":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:8736:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:4904:8658":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:5529:2172":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4303:10110":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:9091:9261":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:11721:8016":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:6319:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:1425:7149":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"11:1858:7363":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"11:2049:9106":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:10352:7478":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:482:9887":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12046:8089":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:7722:9276":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4793:10321":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:1491:7152":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:10010:7372":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:2742:8616":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:9227:6497":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:9361:9419":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:8573:23567":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:8788:6986":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11490:6481":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:9428:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:8979:38984":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"22:386:6780":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"1:40834:7446":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:6307:7087":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:5346:8666":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:3231:9224":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11422:7961":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:867:2169":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12085:8094":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"11:1845:7361":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:8422:2130":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:7563:10853":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:507:7634":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:6597:10702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:47549:9690":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4010:9403":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:10711:7174":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11544:7982":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5774:10491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:44278:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:42294:6493":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4542:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:11064:7206":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:46305:9674":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"0:117:1667":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"4:3193:9223":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:8244:10874":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"20:231:2193":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"4:8977:9362":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:7598:10862":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:11239:9263":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:3996:16962":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:4587:16961":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:44243:6449":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:2804:8863":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:6740:11448":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:2892:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:10660:6999":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5766:10489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:5954:10590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12318:8146":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:4597:10723":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"11:1121:9112":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:9734:7788":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13066:8371":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:2212:9215":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"5:7078:2169":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:7170:2133":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:45769:9657":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:43796:6475":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:1594:7363":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"20:383:2190":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"6:7545:10850":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:11928:644":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:1512:9965":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7803:8953":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:11478:7183":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:11937:1504":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"6:1594:10014":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:6211:6854":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:1101:7365":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11282:7944":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:2695:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:5202:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:8667:6969":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"12:0:2105":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:41521:9415":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:6983:7176":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:1826:2118":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4916:10381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:8835:9248":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"4:2366:16911":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:21063:16585":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:46439:9677":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"18:614:38990":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7519:8939":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:11785:8045":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:11936:1503":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:5993:10604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11861:8062":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:9879:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:7282:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:7711:8944":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13443:8455":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:46258:9673":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4948:10401":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4427:10189":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"22:948:27440":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"4:11931:745":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:9488:7776":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8883:670":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:9748:6972":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:4534:10239":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:1662:10066":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6014:10617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:8090:9000":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6696:23504":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10269:7458":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:4760:6852":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7498:8938":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:46115:9668":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7588:8941":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:4540:8647":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:6588:10696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1666:1091":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"9:0:2102":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:2222:38550":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"20:257:1888":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"6:4412:10183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10428:7860":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6876:7097":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11653:8014":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2241:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11234:7929":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:1768:609":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:30889:7218":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:40318:7198":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:45846:9661":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:7961:9283":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6904:7099":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10569:7869":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"11:1068:9110":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10580:7873":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:3141:11367":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:1821:7372":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:8883:17055":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:30313:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:6788:6840":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6132:8726":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11060:6999":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:5071:8663":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:8777:9353":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:9072:9260":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"5:7024:2169":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4753:10299":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5881:10541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:9869:16921":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"14:221:9098":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:12307:8145":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:6505:9257":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:6631:2174":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:2961:10866":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:40248:7407":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:2616:8611":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:1672:10072":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:39217:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:13678:8535":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:44136:2131":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:3872:8639":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:9028:7283":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:1287:9106":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2602:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:13433:8452":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:4006:16963":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6728:8802":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:1895:6628":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:12006:8083":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:13564:8511":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"4:6259:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:5779:7064":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:6124:6863":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:10491:6879":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"11:1611:6789":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:6470:6795":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:582:7218":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:11083:9261":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:21405:16586":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:10670:7879":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:40360:7200":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:9826:7310":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:4599:10725":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:40446:7431":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:44116:6455":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:41603:7149":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:2311:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:8256:23545":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6061:22614":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:20843:11326":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:1820:2162":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:3638:16955":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:8954:33756":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:3481:16919":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:10026:7312":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:10977:6883":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:39261:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:47917:9704":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2162:11327":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:2316:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:2242:7157":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:40600:7437":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6854:8820":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:43448:2135":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:41679:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:10231:6465":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:3801:2166":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:5986:10603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"3:0:2097":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:3488:16939":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"16:2879:8622":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:9178:7287":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6390:8752":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:9067:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:1472:7151":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:3962:16961":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:7366:23507":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"22:728:6764":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"4:7827:7174":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11891:8065":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:44311:11538":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:80:7269":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2720:8615":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:3934:6819":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:40098:6425":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:7488:7668":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"22:669:6954":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"4:11938:1501":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"23:0:2213":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"4:7556:6875":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:12331:8148":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:1785:7371":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:40389:7425":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:568:9938":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:7551:10851":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:21912:28147":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:2391:6522":{"crate_id":4,"path":["std","io"],"kind":"module"},"5:4003:2118":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:11899:36160":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"4:2350:16906":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:10465:7861":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:4144:7193":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"11:1103:9111":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11556:7983":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:5418:8667":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:11101:10883":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:7271:6828":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:5847:8689":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:11056:36413":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:805:16872":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12033:8088":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:2033:8848":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10516:7863":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:10448:9224":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:40020:6427":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12059:8091":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:9057:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:10545:7669":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4786:10319":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:6272:2118":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:5933:6854":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:4097:7380":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:9436:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"20:223:7614":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"6:4722:10286":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:11520:7978":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:11924:1486":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"20:369:2189":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"17:3266:7320":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:40124:6419":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:3315:16944":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:45606:9651":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:7054:6806":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:41611:2169":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:10681:10881":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:8111:7177":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:10798:23570":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:1494:9957":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:4165:6819":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:43282:7460":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:1630:10043":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2691:6329":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"18:644:7634":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:749:2118":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:9228:38988":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6066:10632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:857:7149":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:4459:16984":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:8348:17019":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:47471:9689":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:11917:418":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:3158:34307":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:10971:6882":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:7694:7161":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:43925:9620":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:821:6801":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:2404:8602":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"4:8170:6460":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"5:6139:17060":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:73:1503":{"crate_id":1,"path":["core","u32"],"kind":"module"},"17:13265:8408":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11924:8073":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:12671:2163":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:21860:7187":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:2186:38969":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:4335:6503":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:3030:8631":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4715:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:44223:6443":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:554:9930":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5050:10451":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:2347:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:10000:7806":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:5655:8625":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7016:8839":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13857:8578":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:2668:8613":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:266:2223":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"1:40171:9588":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:2426:8603":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12372:8153":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:8443:23563":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:4847:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:93:2197":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:45514:9647":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6819:10803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:5357:9243":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"16:4818:8655":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:12646:8204":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10615:7877":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7029:8842":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:4480:8645":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:4037:8641":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:43812:6421":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:43357:7407":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"4:11224:9262":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7293:8885":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:3585:8635":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:4394:6819":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:7504:10841":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12178:8105":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:2783:2123":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:4783:16971":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11783:2130":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:4364:6821":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:5079:10460":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:2890:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"17:11069:23573":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:0:442":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:1062:9106":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13639:8524":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:44251:6444":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:45560:9649":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:39992:6428":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5000:8661":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:1301:9112":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4694:10273":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:3211:7360":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12019:7820":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:41738:2169":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:3647:2169":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13803:8568":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:11044:9354":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:1117:38433":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"11:97:9869":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:11266:7395":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:42315:6495":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9907:6992":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:5708:7062":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6868:7055":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4605:10259":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7437:8925":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:11935:1502":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:12576:8188":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:44299:9636":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:9218:6972":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12915:8319":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:4531:17001":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:41586:1858":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:44239:6451":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:12423:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:3378:6819":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:12433:8162":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:40138:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:10923:7003":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:562:7668":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5848:10528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:5522:10633":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:7706:16892":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:4510:8646":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:2460:10869":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:242:7663":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:10119:6477":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:7294:10839":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:47795:9695":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7543:7103":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:3582:7148":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:2357:8600":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3078:2129":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:40867:7451":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:538:6958":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:47894:9703":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:1924:6629":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"16:2967:22642":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5920:7037":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:45939:9663":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:4445:8644":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13101:7020":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:1783:7370":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"11:1822:2169":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5862:10539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7654:2121":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:6793:8815":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:46207:9672":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9557:6972":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:4018:16966":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:5283:17094":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:7657:11442":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13469:8461":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:11191:7170":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:43626:6469":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12799:8226":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:8120:9229":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"6:4445:10198":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:936:16872":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:21844:7210":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:8129:9004":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5067:10455":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:46517:9678":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:4706:16975":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:2905:8623":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:7488:8937":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:9566:7288":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:11932:746":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:10936:7005":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"11:657:2169":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:7264:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:10051:7149":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:1543:6819":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:44068:9626":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:1844:7373":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:9453:23581":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6179:7069":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:8420:23562":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:5840:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:42574:8972":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:13659:8530":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:204:6793":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:22018:10895":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:2959:38441":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4983:10419":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"11:760:2166":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:7572:38974":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:975:7296":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:3142:7319":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:487:7667":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4290:10101":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:10445:9222":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:9223:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:587:9948":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13879:8584":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9098:7285":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:22630:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:10354:7853":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:43392:7470":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"21:320:7610":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:43320:7465":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10257:7317":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:40268:7408":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13516:8474":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:2910:11365":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:11360:9230":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:5876:17107":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:9275:38983":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:5886:8692":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:1701:10083":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:585:16856":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"11:644:7149":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:844:7148":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:7285:37117":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"11:793:7359":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11821:8054":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4703:10278":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6293:8744":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:1637:10047":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:7661:11443":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:2850:11363":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13721:8551":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:3225:8632":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11410:7958":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:11922:1372":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:7249:10827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4488:10216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"20:8:2192":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"9:52:7122":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:6432:6867":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"14:187:22592":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5073:10457":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:8514:7388":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:2737:6331":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:11800:8050":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:21189:7207":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:14:2076":{"crate_id":1,"path":["core","write"],"kind":"macro"},"20:0:1683":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"17:11641:8011":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:2958:7147":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:1441:2169":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:43758:6462":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"4:11930:744":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"6:6795:10793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6564:10679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:8813:7148":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:20952:11326":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6035:10623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10857:23571":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:4327:8642":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:474:7357":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:41430:7220":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:7516:10843":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10598:7898":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:4400:8643":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6606:10703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4625:10261":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:11849:11525":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4853:10344":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4340:10138":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:6396:9256":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:41671:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"16:4872:8657":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:1568:2118":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:0:2110":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4943:10399":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:8249:16982":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:9906:9599":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10440:7323":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4747:10297":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13257:8406":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:8195:23547":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:9822:7791":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:355:9202":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:5860:6827":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:44255:6445":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:247:7664":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"20:97:1887":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"16:5643:8678":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"8:0:2101":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:3998:9402":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:4325:6894":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:562:9935":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4847:10341":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:574:7634":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:727:6964":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:40056:6420":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:1080:9112":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:7277:10830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:5044:9238":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:8072:8998":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5876:10540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:4868:17008":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:10761:23569":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"4:11866:9392":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"11:2174:9871":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:755:7662":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12959:8349":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:21632:16921":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:44231:6448":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:2468:16921":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10505:7326":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:1985:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:1010:6795":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:41384:9412":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:30327:28151":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:4022:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:13777:8559":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:40064:6421":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:21187:16589":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:8104:7176":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:11798:6453":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:4263:9405":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:9596:7780":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:25920:7217":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:1481:7359":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:618:6630":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:501:6812":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13219:8398":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7509:8630":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:609:7645":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:9213:7373":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11011:7900":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13135:8378":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:259:39036":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"6:6804:10796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:3805:9232":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:690:7653":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:40411:7427":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"4:911:2166":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:8989:7178":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:2469:11155":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"15:180:7336":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6743:10753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:39327:11366":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:45828:9660":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"21:198:2238":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"1:44473:9639":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:2705:2158":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:6719:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:636:7650":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:4704:16974":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:11120:9260":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:10104:6995":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:42617:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:43402:7471":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13024:8359":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2838:11360":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:11738:2137":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:1012:9108":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:11601:6477":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10691:23676":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:7123:2169":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2821:11359":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:41595:7148":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"18:531:7635":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3168:11370":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"21:313:2237":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:30066:11156":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:30491:28110":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:40277:7194":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:11879:8063":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:47673:9692":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10705:7882":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:6508:17050":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4823:10331":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13041:8361":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12980:8354":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:1695:10082":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:676:16859":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:1519:9967":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:40398:7426":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13181:8384":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:43821:6420":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13240:8403":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:2588:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:20637:29844":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:40811:7443":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:42132:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:45690:9654":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"7:32:22487":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10870:7474":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:30291:2160":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:11933:742":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:46675:9681":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:1501:22580":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:8753:6985":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:10837:7473":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4474:10209":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:22366:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13651:8527":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:630:7148":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"0:44:1865":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"9:502:9168":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:0:820":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6981:8835":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12496:8180":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:32085:7401":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:9959:7803":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:6867:10821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:7883:9282":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:8909:7202":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:7259:2268":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:43608:6470":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:43654:6473":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:7306:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:228:1891":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"1:9173:6433":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:9350:38987":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:3270:9226":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:3348:7448":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:1915:9400":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13791:8566":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:42854:7227":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:13356:8429":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"4:2348:10894":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"21:276:2235":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"17:9973:7804":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11628:8010":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:11174:6884":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:9068:38981":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:2690:2246":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:4380:6895":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:10386:6878":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"11:1517:9113":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:3196:11373":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:7688:16861":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"0:0:1682":{"crate_id":0,"path":["idna"],"kind":"module"},"17:13194:8390":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:8854:9356":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:22300:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:4845:8656":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:7875:9281":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:258:6795":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:11401:9231":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:8941:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:20877:16593":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:595:9953":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:43803:6422":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11434:7962":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:43370:7468":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13053:8366":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:5531:7415":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:40614:7438":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:8176:6467":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:41747:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:11197:7392":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6943:23505":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:39100:11375":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4728:10289":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:1556:9990":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9478:7774":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:9032:7180":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:40840:7448":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13015:8355":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:22498:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12259:8140":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:736:7151":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:47947:9706":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"0:7:1657":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"17:12419:8160":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:7277:2252":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:8310:23559":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:8163:7437":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:40369:7419":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:41473:9602":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:5057:10454":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:2219:16903":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:6327:7091":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:8289:9334":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:11915:371":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:3233:11374":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:635:9206":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11090:7906":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:901:2118":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:5949:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:39387:9455":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13461:8459":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10283:7849":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:46359:9676":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6442:8756":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:2130:6812":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12902:8312":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:21973:28092":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"18:736:27415":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13426:8451":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"11:1048:38970":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13625:8518":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:40849:6902":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5736:10464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10080:7814":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:7307:2120":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2773:11352":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:4436:6505":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:1526:9970":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:9108:38979":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"11:817:9102":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9690:6912":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:47757:9694":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:7557:10852":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:2962:11371":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2762:8861":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6218:8734":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:5724:8679":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:3898:16957":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13211:8395":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9617:7298":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:7198:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:39366:9454":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:7683:7109":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8317:2270":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:39977:6421":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:40346:7416":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:10343:7389":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"20:348:2187":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:10897:7897":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:39186:7402":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"11:1831:2166":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"9:234:9607":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5014:10429":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:9796:7790":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:9721:7302":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:9876:7716":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:44082:11532":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"22:879:27439":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"1:21161:16582":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:10686:9278":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:55:8985":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:6164:8729":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:3736:9185":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11832:8057":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13667:8531":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:877:6803":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:9110:9365":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6544:7095":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:9675:6846":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:20622:29844":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:11942:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:13344:8428":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:13812:8572":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:42824:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:6621:2173":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:10451:9226":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:3162:11368":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12113:8099":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:2521:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:8899:17057":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:4601:10727":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:1522:7367":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:11920:1053":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:9895:7798":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:10027:7148":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:47868:9701":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:11032:9353":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:9340:7290":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:8132:16920":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:4789:8654":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:40628:7439":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:1589:7362":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:719:7656":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:7966:7173":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:2546:8608":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:6774:10779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:11550:6480":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:21989:28113":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"21:145:1890":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"6:579:9943":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5944:8698":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"11:695:7153":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:10029:7400":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:2931:22641":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:8025:8994":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4937:10396":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:506:9898":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:9225:6496":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:41972:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"14:40:7944":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:8180:23511":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:46799:9683":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13145:8379":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:8315:9237":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:6391:2169":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:11923:1402":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:20982:16595":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:12138:8101":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:43231:7459":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4649:10263":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:21055:16921":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"9:352:22516":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:2921:2248":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:43888:11531":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:9853:7311":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:44523:9116":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:42012:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4419:10187":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"11:311:7350":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:12448:9426":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:7624:9269":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12550:8186":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:8047:8995":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:3191:9222":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:8805:9355":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:9986:7805":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:3373:11347":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"4:4665:16983":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:10657:9377":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:5792:10504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:9933:6980":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:9670:7301":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:12004:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:8389:23561":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:8829:2169":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:4:1018":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:43058:7454":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:4010:16964":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:930:9099":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10735:7887":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12236:8131":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:44247:6450":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:11254:9265":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:4662:17010":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:8456:17032":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"22:534:7263":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"1:1629:587":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:9471:11489":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:5716:9253":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:22399:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:530:6843":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:6644:9255":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6076:10635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:42590:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:46039:9666":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:4568:8648":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:20669:30321":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:6651:6357":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13689:8536":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:47719:9693":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:535:7041":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:9476:7205":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:5586:6854":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:917:7359":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6558:8764":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:9265:7288":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2508:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:6719:10742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:11934:1505":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:41812:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:4517:10232":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:521:27417":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7635:8943":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:46161:9670":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:2244:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11573:7991":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:41653:2269":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:4314:10118":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:22597:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:1583:7361":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2748:6335":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"4:554:9205":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5677:23498":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:42172:7221":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2502:8606":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"14:165:22585":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:5235:6795":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:5835:10519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:23110:7216":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4954:10402":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:6763:6837":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"7:0:1549":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:41486:9233":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:7115:2169":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:3700:9230":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:44438:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:3472:37110":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:2694:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:6710:10739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"9:388:22502":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13324:8421":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:6919:38973":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"9:481:22500":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:47932:9705":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:11717:6890":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:2524:8607":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:7537:6873":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13419:8450":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4468:10206":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:5742:7164":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:11497:10884":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:2984:2128":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:10238:9246":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:4389:6504":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:40034:6429":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:9772:7789":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:5616:8669":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9641:7299":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:20841:30592":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"4:5090:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"5:2048:9185":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:10377:7854":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:11929:747":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:4555:10248":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"11:2194:9874":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5024:10434":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4780:10316":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:0:1394":{"crate_id":4,"path":["std"],"kind":"module"},"4:2210:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"6:4799:10324":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:2745:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:41852:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:43462:6459":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4400:10174":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:20802:16590":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:9653:7783":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:3640:7680":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8315:2272":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:3904:16956":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:42052:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:40818:7444":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:4764:388":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"16:7767:23509":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:46336:9675":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:6355:9255":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:8256:9015":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13821:8574":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:7032:7364":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:3233:9225":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:8741:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:9221:6495":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:777:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13453:8458":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:2364:16910":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"13:110:38971":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:7619:9267":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:8200:16954":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:8189:7377":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:599:38992":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9183:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:9138:7286":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:4962:10407":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11446:7965":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:9628:7782":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:2470:8605":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6833:10812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4615:10260":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12396:30829":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:45494:9646":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:4702:8651":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:1137:7366":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:42846:7226":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:62:17133":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:2514:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:7043:6857":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:488:9890":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:3934:16958":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:40079:6423":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:46753:9682":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:46829:9684":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:47013:9686":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:22333:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:10676:10879":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:13399:8444":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:45739:9656":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:32045:9873":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:1572:2166":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:922:7152":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:2743:6333":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:1919:23608":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10989:7669":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:11993:8080":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:5402:6969":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:41932:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:7362:2166":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:21900:9430":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:2787:11356":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:42544:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:42562:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:494:9893":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10721:7884":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:21738:9428":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:2842:11361":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:8683:6983":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:7971:16947":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11527:6483":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11037:23572":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:4235:7148":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:5579:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:5007:10426":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:3170:7148":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:781:6798":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:39983:9583":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3181:30308":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9148:38985":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:6687:10732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:44259:7206":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:44093:9627":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6201:8731":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:44227:6446":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:11422:9232":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4684:10266":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:7867:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:3047:22643":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11319:7957":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:12622:6999":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:2683:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"16:7697:7110":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:10864:9247":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"4:3948:16959":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:652:7634":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"9:421:22503":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:21057:16583":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10270:7847":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:1433:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:2933:7318":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:10555:7865":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:21077:7207":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13121:8375":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10158:7456":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:20667:30326":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6767:8814":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:2517:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:41509:9413":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:6834:11435":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:1034:7297":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:7850:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:41367:9410":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:836:9104":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:9208:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:4427:6821":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:8439:9346":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:4148:7383":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12098:8096":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"20:356:2188":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"11:667:7152":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:1535:9975":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:1410:7148":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:9410:7375":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:1708:10086":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:3329:2166":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:6609:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"9:174:7137":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:2700:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:9415:6877":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6254:7084":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9545:7756":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:11615:8006":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:291:39037":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"4:6392:7445":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:21410:16596":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:40004:28088":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:7268:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12403:8159":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10589:7874":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:7699:7160":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"4:3956:16960":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:926:7153":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:6935:6871":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:9011:36162":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:5950:6819":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"10:0:2103":{"crate_id":10,"path":["adler"],"kind":"module"},"4:8237:9233":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:5270:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:6108:6860":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4379:10164":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6400:8753":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6624:10712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:6893:11140":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:1048:8848":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:40378:7420":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4817:10330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:7044:2118":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13385:8437":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:11315:11495":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:43054:10970":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:8936:7165":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:6617:10708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"22:636:7264":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"16:7065:8847":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4367:10161":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9866:7793":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:8931:6989":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:13477:8462":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:1732:11342":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}