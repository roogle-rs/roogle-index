{"root":"0:0:2045","crate_version":"0.5.0","includes_private":false,"index":{"b:1:2649-0:155:2024":{"id":"b:1:2649-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2643:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2651:2413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13235:29449":{"id":"1:13235:29449","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13230:29904":{"id":"1:13230:29904","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13231:29939"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44167:6882","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13264:37064":{"id":"1:13264:37064","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12889:2523","str::split":"1:13252:2362","prim@char":"4:12336:471","str::split_terminator":"1:13261:37063"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43961:6885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32233:237-0:155:2024":{"id":"a:1:32233:237-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32233:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2922-0:161:2022":{"id":"b:1:2922-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2925:2378"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32292:2650-0:161:2022":{"id":"a:1:32292:2650-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32292:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2899:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:832"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13279:2316":{"id":"1:13279:2316","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12889:2523","`DoubleEndedIterator`":"1:8269:129","prim@char":"4:12336:471","str::rmatches":"1:13282:37065"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44097:6890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2936:1808":{"id":"1:2936:1808","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13291:37068":{"id":"1:13291:37068","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:37777":{"id":"5:5632:37777","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5635:34033":{"id":"5:5635:34033","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13325:34036"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13270:34393":{"id":"1:13270:34393","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12336:471","str::splitn":"1:13267:34391","self::pattern":"1:12889:2523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44015:6888","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13276:34396":{"id":"1:13276:34396","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13218:29790":{"id":"1:13218:29790","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13311:37075":{"id":"1:13311:37075","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2974:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:2340":{"id":"0:98:2340","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:832":{"id":"0:109:832","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:2036","0:96:2305","0:97:2037","0:98:2340","0:99:2309","0:100:2032","0:102:2044"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2922-0:155:2024":{"id":"b:1:2922-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2925:2378"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:91:2044":{"id":"0:91:2044","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2032":{"id":"0:88:2032","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:247-0:155:2024":{"id":"a:1:3145:247-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3145:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13327:34268":{"id":"1:13327:34268","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:991:41610"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5634:2262":{"id":"5:5634:2262","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13234:29981":{"id":"1:13234:29981","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44185:6894","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2932-0:155:2024":{"id":"b:1:2932-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2902:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2935:137","1:2936:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13330:37079":{"id":"1:13330:37079","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4957:37079"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44192:6835","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2937-0:170:2023":{"id":"b:1:2937-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2940:137","1:2941:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13229:2215":{"id":"1:13229:2215","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43879:6880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2368":{"id":"0:87:2368","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3764-0:161:2022":{"id":"b:1:3764-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3762:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3766:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13252:2362":{"id":"1:13252:2362","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12889:2523","`DoubleEndedIterator`":"1:8269:129","prim@char":"4:12336:471","str::split_whitespace":"1:13230:29904","str::rsplit":"1:13258:34389"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43893:6886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:37775":{"id":"5:5621:37775","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13244:6796":{"id":"1:13244:6796","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42003:191","prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13297:37071":{"id":"1:13297:37071","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5618:2370":{"id":"5:5618:2370","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13258:34389":{"id":"1:13258:34389","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12889:2523","`DoubleEndedIterator`":"1:8269:129","prim@char":"4:12336:471","str::split":"1:13252:2362"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43911:6884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13209:37059":{"id":"1:13209:37059","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13233:37062":{"id":"1:13233:37062","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44157:6883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13326:34037":{"id":"1:13326:34037","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2974:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3766:1821":{"id":"1:3766:1821","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39716:10410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2022":{"id":"0:161:2022","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:32233:237-0:161:2022","a:1:42095:2669-0:161:2022","a:1:3180:6739-0:161:2022","a:1:3145:247-0:161:2022","a:1:32292:2650-0:161:2022","a:1:42096:2668-0:161:2022","b:1:2922-0:161:2022","b:1:2649-0:161:2022","b:1:2937-0:161:2022","b:1:2926-0:161:2022","b:1:3764-0:161:2022","b:1:2652-0:161:2022","b:1:2932-0:161:2022","b:5:738-0:161:2022","0:167","0:169","0:92"]}}},"0:116-0:155:2024":{"id":"0:116-0:155:2024","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:2024","glob":false}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1178","0:87:2368","0:88:2032","0:91:2044"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42095:2669-0:161:2022":{"id":"a:1:42095:2669-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42095:2669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2649-0:161:2022":{"id":"b:1:2649-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2643:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2651:2413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13211:34362":{"id":"1:13211:34362","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12355:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13320:37078":{"id":"1:13320:37078","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12850:136","`FromStr`":"1:12849:2518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12849:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12849:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13199":{"id":"1:13199","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13200:997","1:13201:2346","1:13202:37056","1:13203:37057","1:13205:37058","1:13208:34322","1:13209:37059","1:13210:336","1:13211:34362","1:13212:2232","1:13214:29788","1:13216:29789","1:13218:29790","1:13220:37060","1:13221:37061","1:13222:34381","1:13223:34382","1:13224:34385","1:13225:34386","1:13227:2195","1:13228:10458","1:13229:2215","1:13230:29904","1:13231:29939","1:13232:8095","1:13233:37062","1:13234:29981","1:13235:29449","1:13238:2341","1:13241:2342","1:13244:6796","1:13248:2208","1:13252:2362","1:13255:29947","1:13258:34389","1:13261:37063","1:13264:37064","1:13267:34391","1:13270:34393","1:13273:34395","1:13276:34396","1:13279:2316","1:13282:37065","1:13285:37066","1:13288:37067","1:13291:37068","1:13293:37069","1:13295:37070","1:13297:37071","1:13298:37072","1:13299:37073","1:13302:37074","1:13305:2364","1:13308:34397","1:13311:37075","1:13314:37076","1:13317:37077","1:13320:37078","1:13322:2210","1:13323:34265","1:13324:34035","1:13325:34036","1:13326:34037","1:13327:34268","1:13328:34269","1:13329:34270","1:13330:37079","1:13332:12451","1:13333:37080"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13333:37080":{"id":"1:13333:37080","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4955:37080"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44210:6833","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:37072":{"id":"1:13298:37072","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:738-0:161:2022":{"id":"b:5:738-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2665:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:734:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:740:7652","5:741:29422","5:742:29423"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:2043":{"id":"0:119:2043","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:2023":{"id":"0:115-0:170:2023","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:2023","glob":false}}},"0:168:475":{"id":"0:168:475","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13221:37061":{"id":"1:13221:37061","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12342:1721","crate::ops::IndexMut":"1:3423:2545","str::slice_unchecked":"1:13220:37060"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13203:37057":{"id":"1:13203:37057","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:618":{"id":"0:24:618","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7059:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13261:37063":{"id":"1:13261:37063","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12889:2523","str::split":"1:13252:2362","prim@char":"4:12336:471","`DoubleEndedIterator`":"1:8269:129","str::rsplit_terminator":"1:13264:37064"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43943:6887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:693":{"id":"0:46:693","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:802":{"id":"0:107:802","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10294:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10275:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13210:336":{"id":"1:13210:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13211:34362","`u8`":"4:12355:1851"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13329:34270":{"id":"1:13329:34270","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:991:41610"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616":{"id":"5:5616","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5617:37774","5:5618:2370","5:5621:37775","5:5624:37776","5:5632:37777","5:5633:37778","5:5634:2262","5:5635:34033","5:5636:34034"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:1178":{"id":"0:86:1178","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13224:34385":{"id":"1:13224:34385","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13225:34386"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13308:34397":{"id":"1:13308:34397","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13325:34036":{"id":"1:13325:34036","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2037":{"id":"0:97:2037","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13323:34265":{"id":"1:13323:34265","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39902:6733","Self::is_ascii":"1:13322:2210"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39902:6733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13302:37074":{"id":"1:13302:37074","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13238:2341":{"id":"1:13238:2341","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2024":{"id":"0:155:2024","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:32233:237-0:155:2024","a:1:42095:2669-0:155:2024","a:1:3180:6739-0:155:2024","a:1:3145:247-0:155:2024","a:1:32292:2650-0:155:2024","a:1:42096:2668-0:155:2024","b:1:2922-0:155:2024","b:1:2649-0:155:2024","b:1:2937-0:155:2024","b:1:2926-0:155:2024","b:1:3764-0:155:2024","b:1:2652-0:155:2024","b:1:2932-0:155:2024","0:159"]}}},"a:1:32292:2650-0:155:2024":{"id":"a:1:32292:2650-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32292:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2935:137":{"id":"1:2935:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"a:1:32233:237-0:161:2022":{"id":"a:1:32233:237-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32233:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2937-0:161:2022":{"id":"b:1:2937-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2940:137","1:2941:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2045":{"id":"0:0:2045","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:2020","0:114-0:161:2022","0:115-0:170:2023","0:116-0:155:2024","0:117:2030","0:118:2035","0:119:2043"],"is_stripped":false}}},"1:13241:2342":{"id":"1:13241:2342","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:37070":{"id":"1:13295:37070","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2937-0:155:2024":{"id":"b:1:2937-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2940:137","1:2941:1806"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2926-0:155:2024":{"id":"b:1:2926-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2928:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13201:2346":{"id":"1:13201:2346","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2665:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3180:6739-0:161:2022":{"id":"a:1:3180:6739-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3180:6739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13317:37077":{"id":"1:13317:37077","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3145:247-0:161:2022":{"id":"a:1:3145:247-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3145:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5624:37776":{"id":"5:5624:37776","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7645:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2652-0:155:2024":{"id":"b:1:2652-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2646:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2654:29421"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2654:29421":{"id":"1:2654:29421","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2940:137":{"id":"1:2940:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32157:10766","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:96:2305":{"id":"0:96:2305","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32233:237-0:170:2023":{"id":"a:1:32233:237-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32233:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2928:832":{"id":"1:2928:832","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42095:2669-0:170:2023":{"id":"a:1:42095:2669-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42095:2669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5866-0:170:2023":{"id":"b:5:5866-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10325:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5864:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5868:1781"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2974:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13205:37058":{"id":"1:13205:37058","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13203:37057"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13216:29789":{"id":"1:13216:29789","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13214:29788":{"id":"1:13214:29788","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42003:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2652-0:170:2023":{"id":"b:1:2652-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2646:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2654:29421"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13228:10458":{"id":"1:13228:10458","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12336:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43869:2599","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13231:29939":{"id":"1:13231:29939","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13230:29904"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44176:6895","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:170:2023":{"id":"b:1:2926-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2928:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13285:37066":{"id":"1:13285:37066","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12889:2523","`DoubleEndedIterator`":"1:8269:129","prim@char":"4:12336:471","str::rmatch_indices":"1:13288:37067"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44043:6892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42095:2669-0:155:2024":{"id":"a:1:42095:2669-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42095:2669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3180:6739-0:170:2023":{"id":"a:1:3180:6739-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3180:6739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3764-0:170:2023":{"id":"b:1:3764-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3762:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3766:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5636:34034":{"id":"5:5636:34034","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13326:34037"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2651:2413":{"id":"1:2651:2413","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13255:29947":{"id":"1:13255:29947","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12704:6896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13332:12451":{"id":"1:13332:12451","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4958:12451"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44201:6834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2941:1806":{"id":"1:2941:1806","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:2020":{"id":"0:7:2020","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2193","0:24:618","0:44:2238","0:46:693"],"is_stripped":false}}},"b:1:3764-0:155:2024":{"id":"b:1:3764-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3762:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3766:1821"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3145:247-0:170:2023":{"id":"a:1:3145:247-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3145:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13267:34391":{"id":"1:13267:34391","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523","str::rsplitn":"1:13270:34393"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43997:6889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","description","cause","source","provide"],"trait":{"name":"Error","id":"1:2985:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:2309":{"id":"0:99:2309","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2032":{"id":"0:100:2032","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3180:6739-0:155:2024":{"id":"a:1:3180:6739-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3180:6739","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2036":{"id":"0:95:2036","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13293:37069":{"id":"1:13293:37069","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:2022":{"id":"0:114-0:161:2022","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:2022","glob":false}}},"0:102:2044":{"id":"0:102:2044","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42096:2668-0:161:2022":{"id":"a:1:42096:2668-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42096:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13273:34395":{"id":"1:13273:34395","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2926-0:161:2022":{"id":"b:1:2926-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2928:832"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170:2023":{"id":"0:170:2023","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32233:237-0:170:2023","a:1:42095:2669-0:170:2023","a:1:3180:6739-0:170:2023","a:1:3145:247-0:170:2023","a:1:32292:2650-0:170:2023","a:1:42096:2668-0:170:2023","b:1:2922-0:170:2023","b:1:2649-0:170:2023","b:1:2937-0:170:2023","b:1:2926-0:170:2023","b:1:3764-0:170:2023","b:1:2652-0:170:2023","b:1:2932-0:170:2023","b:5:5866-0:170:2023","0:111","0:183","0:108","0:110","0:106"]}}},"5:741:29422":{"id":"5:741:29422","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5868:1781":{"id":"5:5868:1781","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3140:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13232:8095":{"id":"1:13232:8095","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44147:6881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13208:34322":{"id":"1:13208:34322","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12436:6874"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10320:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13288:37067":{"id":"1:13288:37067","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12889:2523","`DoubleEndedIterator`":"1:8269:129","prim@char":"4:12336:471","str::match_indices":"1:13285:37066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44061:6893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13222:34381":{"id":"1:13222:34381","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13224:34385","str::split_at_mut":"1:13223:34382"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13227:2195":{"id":"1:13227:2195","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12336:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43863:2231","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42096:2668-0:155:2024":{"id":"a:1:42096:2668-0:155:2024","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42096:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5633:37778":{"id":"5:5633:37778","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2513","`String`":"5:7645:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2513","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2238":{"id":"0:44:2238","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13202:37056":{"id":"1:13202:37056","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2035":{"id":"0:118:2035","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13328:34269":{"id":"1:13328:34269","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:991:41610"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:37774":{"id":"5:5617:37774","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2513","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2513","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13299:37073":{"id":"1:13299:37073","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12915:6869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2652-0:161:2022":{"id":"b:1:2652-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2646:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2654:29421"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32292:2650-0:170:2023":{"id":"a:1:32292:2650-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32292:2650","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:117:2030":{"id":"0:117:2030","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42134:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13220:37060":{"id":"1:13220:37060","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12342:1721","str::slice_mut_unchecked":"1:13221:37061","crate::ops::Index":"1:39547:2544"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13282:37065":{"id":"1:13282:37065","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12889:2523","`DoubleEndedIterator`":"1:8269:129","prim@char":"4:12336:471","str::matches":"1:13279:2316"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44115:6891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2932-0:170:2023":{"id":"b:1:2932-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2902:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2935:137","1:2936:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2925:2378":{"id":"1:2925:2378","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2899:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:740:7652":{"id":"5:740:7652","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13212:2232":{"id":"1:13212:2232","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42003:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10979:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13248:2208":{"id":"1:13248:2208","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42003:191","prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12910:6870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2932-0:161:2022":{"id":"b:1:2932-0:161:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2906:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2902:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2935:137","1:2936:1808"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2922-0:170:2023":{"id":"b:1:2922-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2899:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2896:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2925:2378"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:742:29423":{"id":"5:742:29423","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13322:2210":{"id":"1:13322:2210","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13200:997":{"id":"1:13200:997","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12336:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13223:34382":{"id":"1:13223:34382","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13222:34381","str::split_at_mut_checked":"1:13225:34386"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:34386":{"id":"1:13225:34386","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13224:34385"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10325:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:802"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22:2193":{"id":"0:22:2193","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7645:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13324:34035":{"id":"1:13324:34035","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13314:37076":{"id":"1:13314:37076","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42096:2668-0:170:2023":{"id":"a:1:42096:2668-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42096:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2649-0:170:2023":{"id":"b:1:2649-0:170:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32234:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2643:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2651:2413"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:112:802":{"id":"0:112:802","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10294:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10275:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13305:2364":{"id":"1:13305:2364","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12336:471","self::pattern":"1:12889:2523"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42001:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12895:2512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:23170:10399":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:6409:11408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:3288:36663":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:943:7659":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:11934:8249":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:10068:25188":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:11209:10280":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:6636:11523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:47252:10611":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:13473:8784":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:6968:2557":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:12342:8668":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:2543:12377":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:7397:38603":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5665:11374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5927:9580":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:42190:2552":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:22164:30686":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:1098:8043":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:437:8431":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:39902:6733":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13235:8750":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:8847:8157":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:42576:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:4324:8154":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:40565:10416":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12225:8071":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:7140:18113":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7651:6848":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:6079:7542":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:8211:139":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:10218:7484":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:42457:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:865:7653":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:42734:6917":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14788:9063":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11898:8613":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:545:10823":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:3635:12438":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5489:11303":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:21643:30688":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:12889:2523":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:2234:8056":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:1509:2552":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:12647:8079":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:11583:10314":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"6:7348:11655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:15324:9235":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:22497:17718":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13509:8789":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:47115:10602":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:32292:2650":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:32203:9806":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:42054:2665":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:43486:8230":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13173:8734":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4971:11100":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:4507:7716":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:42992:9874":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:11026:25218":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"11:2554:38586":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12621:8690":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:4848:6929":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5415:9565":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:14235:8947":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:45875:10491":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:8226:25146":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:12650:6899":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:1092:10012":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:34392:9768":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:46012:10503":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:8301:9917":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:2394:9500":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5415:11259":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:10954:25216":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:7425:10110":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"4:8231:7675":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12543:8688":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:465:8117":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:304:2513":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:42537:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:11366:8234":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:42301:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:5314:11222":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:42340:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:3187:6741":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:9916:25202":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:9410:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:10719:10145":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:43699:8237":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:10584:7728":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:2665:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"11:1051:10012":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:1888:11825":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:46137:10518":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:5686:7557":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:6574:7594":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7633:38597":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6621:11521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11153:8035":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:41823:7869":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"9:482:24122":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:7052:9736":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:521:29388":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10399:6880":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:3196:9496":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13766:8858":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:10612:8032":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:10331:6916":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:38309:12424":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:10942:7698":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:3042:11815":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:11063:8553":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:5644:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"4:2070:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12863:8702":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"14:7:9995":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:11967:8250":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:12056:8648":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12251:8072":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:7575:11764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"9:502:10077":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1535:10873":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5134:11154":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:5006:9559":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:42095:2669":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:8012:11779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:5212:11177":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:312:2638":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"6:1580:10904":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:43820:8248":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:1653:10958":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:42182:7654":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"18:689:8418":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:5367:25131":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:14503:8992":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2592:9509":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:1843:2549":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10791:30082":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:5436:11274":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:6412:25136":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:6532:9656":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:3999:10151":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"11:2536:10763":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:1883:7653":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:32976:9759":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:5382:11243":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:5083:11150":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:7566:7669":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:10327:6914":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:39679:12431":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7656:25143":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:3386:10144":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:23148:10397":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:42029:7653":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:44167:6882":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:40722:8184":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:44685:10472":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13606:8820":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:473:10780":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"20:424:8376":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"17:14038:8900":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:44607:6860":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:9284:10283":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7559:9840":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"22:0:2613":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"6:5020:11126":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:15214:9208":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5400:11254":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:4877:18045":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:3597:8067":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13387:8768":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:12963:12568":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:7389:11682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:680:8416":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"22:636:8000":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"1:32217:6927":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"11:673:7653":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:1559:10890":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11799:8059":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:10989:36023":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:6729:11558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:46120:10517":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:16151:9468":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"4:1610:2504":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:2699:10137":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:16198:9478":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:43869:2599":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11293:25236":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:9324:7702":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13399:8771":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:0:2488":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:11148:7654":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:2302:36933":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:10320:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"21:145:2271":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:14066:8905":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:39601:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"21:228:2272":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"4:3056:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:3058:137":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:12683:8081":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"4:9345:33311":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:15126:9183":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:8259:9806":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:564:10833":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:43893:6886":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:1636:8124":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11189:8556":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:4812:11679":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:46551:10552":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:47095:10600":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:3046:36991":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"0:0:2045":{"crate_id":0,"path":["idna"],"kind":"module"},"1:39619:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13116:8722":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:5222:31012":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:22775:10371":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"20:449:137":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"20:457:2586":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"17:15678:9353":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:23203:10402":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"4:5841:10170":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:47229:10610":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:12334:417":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"5:2249:7662":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:8555:8151":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:43739:8242":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:6471:11436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:9671:25184":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:7465:7673":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:42496:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:5344:11228":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:30995:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:0:1002":{"crate_id":6,"path":["libc"],"kind":"module"},"4:4345:8155":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11166:8555":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:43029:6924":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:13674:8822":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12289:8662":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:12388:8674":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5250:11191":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:3291:33962":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:2338:9497":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:774:7656":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6927:9721":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:1549:8120":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13899:8880":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:888:2552":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:11008:10168":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:42980:11923":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:883:10009":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:2369:10021":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:1184:37028":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:14986:9166":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:1603:7653":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"0:44:2238":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"1:39564:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:96:8019":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5588:11335":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:7727:7607":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:15190:9203":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:43690:8236":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:47150:10605":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"0:117:2030":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"1:6713:8197":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:1838:696":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:12704:6896":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:3388:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13844:8871":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:7537:11745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:40816:7724":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:45843:10487":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:7321:2665":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:586:10123":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:6300:9631":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:559:10831":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5002:11117":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7144:25141":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7686:9844":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6427:7589":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:9273:7683":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:40754:7723":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:290:38664":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"5:6958:2556":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:1739:38184":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:11115:8041":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:5579:10161":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:8513:7718":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:7584:11767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13922:8885":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:3869:2504":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"20:432:2594":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"6:5277:11208":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:7716:8216":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:5064:11149":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:7516:11731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:41795:12504":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:40772:8193":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:11622:8164":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:932:2549":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:14876:9126":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6542:11472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5630:11360":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"7:79:24116":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:14189:8937":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:837:10003":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:43482:11924":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:4062:9539":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:11051:8551":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6758:9690":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:5995:9590":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:3427:10145":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:1621:10935":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11702:8595":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:521:17894":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:8175:9906":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:22483:17977":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:5698:10168":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:13292:7504":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:2303:24245":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:12354:884":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:12008:6877":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:1570:7660":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:2175:25261":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:8244:10210":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:10776:30799":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:8253:11791":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4885:11061":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"22:1122:8368":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:43943:6887":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13814:8868":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:6173:10169":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:8792:10274":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:5917:11825":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:44192:6835":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:1559:7659":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:41000:8213":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:15197:9205":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:9788:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5160:11156":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:9721:34078":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:5191:11165":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:5028:6828":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:12356:1833":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:11103:36232":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:670:8029":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:16138:9462":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:1025:10010":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:15655:9340":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:44468:12575":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:5376:11240":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:5617:11354":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6066:8083":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:44296:10451":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:872:8429":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:746:12213":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"20:667:2588":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"6:7452:11691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:46312:10527":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:11435:8253":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:5506:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:4660:10332":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:1707:10982":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11730:8598":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:5914:7568":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"22:728:38696":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"6:5653:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:46350:10529":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:11228:7730":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:4870:11054":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:8334:10212":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:2276:10329":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:44342:10460":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:41207:8219":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6962:7598":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:8874:10279":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:9312:10287":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:3331:10141":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:43791:8245":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6433:7591":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:15445:9268":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:6272:36237":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:43021:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:7595:12484":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:214:10000":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13412:8773":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"14:202:2503":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"9:238:10443":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4985:11107":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:9446:10191":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"6:1517:10862":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:15102:9181":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:2896:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:6678:11541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:4914:18033":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:45828:10486":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:12360:966":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:14341:8961":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:1083:10010":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:12355:1851":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:39716:10410":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:33873:12418":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:44835:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6782:25139":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:5722:9525":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:47176:10607":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12328:8664":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8220:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11853:8612":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5107:9562":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"22:966:8005":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"1:46283:10526":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:8645:10262":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:22882:10372":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:1855:8143":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:47135:10604":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12824:25208":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:9166:8163":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:12343:1811":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"11:2140:10010":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3221:12429":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:597:8433":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:2478:9504":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:635:8415":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:44325:10459":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11042:8550":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:5934:2504":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:7132:9748":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:951:10003":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:2869:17977":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10622:38607":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15616:9332":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12433:7497":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5671:11376":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"4:3429:10146":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:4316:8153":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6915:11624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:12335:1174":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"16:4976:9558":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:10917:11828":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"4:2774:10139":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5336:11227":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:8328:11807":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"3:0:2483":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:531:8400":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:9793:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"20:705:2591":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"4:674:17911":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11493:8576":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:11841:8062":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:6451:10169":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:7799:7611":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"9:357:24138":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:8769:10443":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"20:520:8011":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"1:10759:30795":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:3335:12436":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:5361:11233":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10661:8033":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:44876:10477":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:41981:10346":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:39503:12437":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11547:8485":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:45960:10500":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:632:2585":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"1:4729:11845":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11537:8578":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:573:8399":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:4552:10155":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:968:10006":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5515:11308":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:46904:10593":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6821:11587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:5102:11151":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:32322:6742":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:7461:11694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:15116:9182":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:470:2587":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"1:44210:6833":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:15463:9271":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:1478:7653":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:7493:2552":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7604:7603":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:403:8430":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:14599:9010":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:8493:17976":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:42085:2666":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:2974:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:10092:25206":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:33527:12417":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:1077:38184":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:12359:1827":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"9:53:7627":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:3614:9533":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7355:9786":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6664:11536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:12695:8692":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:12516:8686":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:12915:6869":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7168:10288":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:6849:9715":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:5219:11178":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:44390:10461":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5225:11181":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:10893:10307":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:46705:10558":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12969:8705":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12127:8652":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:14436:8985":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:46410:10547":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:46859:10592":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:5307:9563":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10018:25185":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11877:7493":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:22993:11848":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"16:6026:7536":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:2636:9511":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:7393:8125":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:1997:7049":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:10933:10291":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:22152:7732":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:956:7653":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7509:9827":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:14177:8935":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5037:9560":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"15:306:8094":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:43264:10443":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:22843:7711":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2646:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:13551:7723":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"11:2383:7653":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:12768:25186":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12993:25209":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:507:8399":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:5470:18149":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"11:2542:10764":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5565:11328":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:261:8429":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5352:11229":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"4:10416:12092":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:9716:8147":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:6940:7554":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2708:9514":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:44611:6863":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:113:8022":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:21726:17977":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:22915:10374":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"12:0:2489":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:491:8398":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6606:8085":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:1699:10978":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10044:25205":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:8317:11806":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:5249:10160":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7910:25145":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"5:7435:36899":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:947:7660":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:4916:18035":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"20:0:2046":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"0:119:2043":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"4:11263:11830":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"4:8067:17915":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:7325:36230":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:7870:8433":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:46056:10506":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:2684:9513":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5581:11333":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:11822:10150":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:9356:2667":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:32293:6743":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:623:38620":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:843:10093":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"20:306:2569":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"17:10887:38609":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:9180:10171":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:2548:8099":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:75:1839":{"crate_id":1,"path":["core","u32"],"kind":"module"},"1:21854:7731":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:4786:12461":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:39729:8368":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:15778:9376":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11341:8048":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10419:7489":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:4202:18024":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:46610:10555":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"4:9137:10280":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:44043:6892":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:10642:36215":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"16:4913:9556":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11647:8591":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:44417:10357":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:2902:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:15273:9222":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11788:8607":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:749:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:47036:10597":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:3050:36990":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:22609:17711":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:12851:7500":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:5756:9571":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5528:11309":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:2770:11821":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:2562:10767":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6460:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:12278:8073":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:15400:9257":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:6090:8188":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:22637:17712":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:43765:8180":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:7473:7550":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:2629:10135":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:46477:10550":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:23159:10398":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"4:3668:17996":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:22931:29934":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:7385:2552":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:44661:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:909:7658":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:2418:9501":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:3292:8121":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:44889:31038":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:15992:9434":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11016:8038":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:8172:8310":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"20:482:2588":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"4:7354:12144":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:40389:6842":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6263:9629":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:15931:8735":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:12900:7503":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:4560:9545":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11661:8592":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:12357:1839":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:7006:9725":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5445:11280":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:11605:33305":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:13497:8788":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2355:7527":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8689:6847":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:3297:36945":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7590:7602":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12238:8660":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:12362:1419":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"6:5236:11185":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:43810:8247":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:1168:8127":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:8073:17948":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"11:328:8103":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:10959:10297":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:3672:12439":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6532:11465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:44623:6868":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:8857:7653":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:15521:9313":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:47007:10596":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:15582:9320":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:11102:8554":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2374:9499":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:12895:2512":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:481:8397":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12494:8681":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13946:8886":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:13875:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:1914:8145":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:12808:8700":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11354:8571":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:40825:8204":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:4663:18045":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:3329:9531":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:15138:9186":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:9980:7725":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:2713:30799":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:3258:8122":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"11:844:17927":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:8236:7674":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:13538:8800":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:46522:10551":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:1069:9749":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:6857:10187":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:1207:8044":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14051:8902":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:5089:18065":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:10979:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"11:1107:10014":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:16187:9477":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:5347:9564":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:9124:7678":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"22:534:7999":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:21624:30702":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:11899:7707":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:11246:10191":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"22:948:29413":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"6:7429:11684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:7415:8126":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:6698:11550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:21673:17977":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:10275:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"13:229:7619":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:7539:9528":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1496:10854":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:1625:8122":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:22642:17710":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:14414:8974":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:13838:10369":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:5557:11326":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:2461:11844":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:2545:12378":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:5624:11357":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:8339:7697":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:2309:10134":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10317:7487":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:8341:11811":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:538:7453":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:9224:18109":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:8199:10208":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"5:3805:7699":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:16050:8763":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:7645:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12107:7467":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:553:10828":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12485:25329":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:43778:8244":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:12336:471":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"5:5729:2555":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:4332:18043":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13553:8806":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11075:7479":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:7983:17977":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:6204:7722":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:15023:9173":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12175:8655":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:718:8421":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:30648:29967":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"4:3550:11825":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:22828:7733":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:2808:9519":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:22966:29961":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:31022:7739":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"18:589:8403":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:4587:9546":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13972:8619":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:538:10820":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:9332:10288":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6872:9716":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:14489:8989":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:43718:8240":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:6433:18115":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:6160:24244":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:1547:10882":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10335:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:21746:7731":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:8259:11792":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11915:25303":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10137:25182":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:2529:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:41223:8221":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9755:25181":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:43274:7875":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:9405:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:3620:32999":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:4685:18046":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:40521:6832":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:8351:11813":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6895:9717":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:8197:11789":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:33460:2508":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:22285:17631":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:15368:9249":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:7339:11654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:15301:9230":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10997:8549":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:7314:11636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:22509:32781":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:43911:6884":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:7602:11770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:14012:8897":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"8:0:2485":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:5593:10165":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11392:8049":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11421:6888":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:11293:8233":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:21728:17629":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:14847:9115":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:8549:8149":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:4800:11002":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:980:10009":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:41963:10344":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:40784:8199":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5112:11152":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2893:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:30616:2542":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"20:8:2593":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"6:6650:11534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5536:11314":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:3191:2507":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6880:11599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:1355:10010":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:3658:17975":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"16:2878:9522":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:1540:7658":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5122:11153":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:40712:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:43046:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:4397:10153":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"18:735:29386":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"21:0:2047":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"1:44061:6893":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:5629:10167":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:9858:25200":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:219:10091":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:8560:18015":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:47161:10606":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:1916:8146":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"11:1676:38587":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:3590:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:8271:11794":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:2037:8050":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:1603:10018":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:7132:38204":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:47057:10598":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:11097:36225":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4965:11097":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11497:8057":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:46365:10530":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"11:1896:2549":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:39579:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:11843:10151":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:922:2504":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:4152:18021":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3607:12435":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:6588:9658":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:30622:6956":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:3196:12413":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7528:9836":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11621:7476":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:7767:12487":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:2539:11818":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:3206:9763":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:1101:10016":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"15:394:24236":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12043:8646":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:562:17899":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:11674:8593":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:14977:9165":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:1087:38589":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:40399:6843":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:32235:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:7857:9855":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:6176:11825":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:41238:8224":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:9260:10282":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:6189:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:13528:10361":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:7999:7682":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13187:8735":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6689:11544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:4538:7717":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:3371:12427":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"11:2403:7654":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:46266:10525":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:3754:38184":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"0:24:618":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"1:22283:17977":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:41907:29973":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4916:11079":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:5827:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:39709:10409":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:7610:10114":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:12348:754":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:46251:10524":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:2479:17967":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:8231:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:8252:10211":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11142:7467":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:4656:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:7428:25142":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:45907:10493":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:16235:9487":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:15799:9379":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:3023:10140":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11755:8602":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:8265:11793":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:6738:11560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:1593:10911":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:938:8120":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:8344:18008":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:14386:8968":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:12584:8035":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"22:879:29412":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"17:13308:7508":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:22421:17716":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:8006:11777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:752:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:12849:2518":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:3394:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4891:11063":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:34046:12419":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"7:32:24109":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:11216:6896":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:42713:6915":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:8073:9896":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:43235:7873":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:6364:36222":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:3294:33963":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5598:11340":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:8483:10148":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:2210:17894":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:41256:8227":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:46219:10522":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"22:43:29410":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"4:8088:10206":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:651:8399":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:974:10008":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:3475:9532":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:40587:12470":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:6335:7553":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:2312:10292":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:23104:10393":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:11574:7625":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:2548:9507":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:8294:11800":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:43863:2231":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:6768:11570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:10544:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:11227:8558":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:12666:6901":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6609:11514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:16269:8773":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:8240:2648":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:10759:8617":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:1723:10987":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:4739:6927":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:12351:891":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:22907:10373":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"10:36:10769":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:44805:11925":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:44696:12585":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"11:1566:24203":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:15168:9197":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:3601:10147":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:4252:11825":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:23000:10386":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13999:8895":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:44810:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:7813:9847":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:11085:36217":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:16212:9482":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:13818:10368":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:7727:2549":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:1369:10016":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:42379:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:40433:6836":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:2768:9517":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:8606:18044":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:4856:9554":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:23655:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:21842:17977":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"10:0:2487":{"crate_id":10,"path":["adler"],"kind":"module"},"1:42126:10349":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:14356:8965":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:22893:29993":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13363:8764":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:40642:8180":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:3140:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:4424:9541":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7570:9529":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:2067:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:15624:9333":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:4798:18022":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:611:8389":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"1:41941:10152":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12201:8659":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"14:160:9995":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:15769:9374":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6634:7595":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:10710:8034":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"11:1160:10016":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:1565:10892":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15596:9326":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:42020:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:8182:10207":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:13375:8767":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"0:46:693":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"16:5960:9587":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:41214:8220":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:11023:33285":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:13930:2546":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:46152:10519":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:15410:9260":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:811:2549":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:11173:6886":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:44311:10456":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:4882:9555":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:4117:38184":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11269:25235":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:22511:12377":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:16165:9471":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:12352:897":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"11:1917:8123":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10534:38613":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:42418:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:706:6871":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11865:8063":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12792:8504":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:7652:6849":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10536:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:7306:11631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:11911:33458":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"11:2423:2552":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:44502:6872":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:41741:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:14752:9032":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:3384:10143":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:15222:9210":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:15760:9370":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:2066:12390":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"0:7:2020":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"9:424:24125":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:40350:6841":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:11812:8608":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:2572:9508":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:1510:10859":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:11124:7653":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:40990:8212":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:2203:8053":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"14:40:8750":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:11649:10192":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"14:31:9995":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:36268:9769":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:7306:38602":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"20:620:2584":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:13015:7497":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:2838:9520":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:21609:30692":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:16032:8753":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:4373:10330":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:7582:10111":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:6051:7671":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:1887:2552":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"4:9546:8145":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:5457:11289":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6648:9665":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11715:8596":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"20:534:8014":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"6:6714:11556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:4830:9553":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"0:118:2035":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"5:4162:7654":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11583:8586":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13832:8869":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:40615:10423":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:491:10788":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"15:0:2491":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:30367:12174":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:7888:9859":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4959:11095":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:13613:32906":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:47078:10599":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14025:8898":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"20:696:2590":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"1:32210:10407":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:46572:10553":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:22125:17977":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"4:12363:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"5:6612:38184":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:12303:7708":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:939:17929":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:6505:11458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:12308:17916":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11328:6884":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:39467:12440":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:30637:6924":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"9:178:7642":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:11595:7490":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:3601:12433":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5643:11366":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:12340:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:10339:6919":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:266:2624":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"4:1853:8142":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:2489:17972":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"16:4352:9540":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:10579:12531":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:40693:7721":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"5:3318:8124":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13146:8726":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:10693:12551":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:6802:9702":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:12337:1873":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:3520:8222":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:40855:8207":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:8536:6886":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:40539:10415":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7741:7609":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:8601:11823":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:4481:11825":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:8807:18088":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"11:430:8112":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:44827:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13526:8797":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13774:8860":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11324:8568":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:8155:9905":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:16176:9476":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:11220:36028":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:2304:9749":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:40426:6835":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:10439:7465":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:6027:7681":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:15814:9380":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:1607:2552":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:11616:7694":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:2569:2514":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:10185:7483":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:8543:6881":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:11743:8599":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12300:25327":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10759:7467":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2080:11842":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:15569:9314":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6317:9634":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:16105:9455":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"9:447:24123":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14271:8952":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:12122:34264":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10671:38610":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:11000:10206":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:40635:10424":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:11311:11831":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:42615:7870":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5296:11216":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:39547:2544":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:3778:9534":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:4158:18022":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5472:11298":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:13855:8872":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:13089:8716":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:2699:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:4641:9548":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:8247:11790":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:42001:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:46589:10554":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:23082:10391":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:40506:6838":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6342:38605":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5385:7463":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:11825:8610":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:860:9493":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:11367:7479":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:4586:6926":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:15206:9206":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:12287:10321":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:5260:10336":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:14284:8954":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:8300:11801":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:9428:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:44868:10475":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:7634:10117":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"20:542:2269":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"17:15720:9359":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11405:8573":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"14:165:24209":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:14402:8972":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"11:299:8100":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:11782:10149":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:10599:8161":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:11281:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"18:754:8427":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:698:7458":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:41248:8225":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:3473:8066":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:14298:8955":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12659:8691":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:3333:10142":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:32324:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:13640:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:44520:6873":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10769:38608":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11524:8058":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:7412:11683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:8093:9897":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:8007:10199":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12707:8082":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:38199:12422":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:5846:9577":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:2231:7625":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:16259:8768":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:5466:11295":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:3138:6737":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:3263:36946":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:1490:10851":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:7085:9740":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6379:11383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11419:7467":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:2890:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:10333:6917":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:40:2548":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5031:11131":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:6672:10183":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:6466:9650":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:40731:8187":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:3899:9537":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:34219:12420":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:4397:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:3583:10255":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:8189:7698":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:9886:25201":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5370:11239":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13437:8775":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:43839:2516":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11605:7491":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:41200:8218":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:6013:11825":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:0:2492":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:787:7658":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:47104:10601":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:9388:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:9420:10190":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:45995:10502":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6749:9689":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:46684:10557":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"4:4206:18025":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13325:7510":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:8216:9910":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:9781:25199":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:23137:10396":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"16:6494:9653":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11567:8581":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"22:449:38696":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"4:9393:10180":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:4743:9550":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12408:7496":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6519:11459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2323:24271":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:10573:38615":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:8465:7700":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"5:7540:2514":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:6775:38184":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:11418:10074":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:26055:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6811:11584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"20:511:2590":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"1:4:1256":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:8306:11802":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13738:8851":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:1619:8121":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"19:0:1291":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:1968:7048":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:2870:12173":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:11407:6889":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:1971:6954":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:10507:34077":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:9938:25203":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:9709:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:4420:12452":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:9150:7679":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"6:4932:11083":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13986:8894":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:11918:10196":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:5422:38184":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:10952:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:14587:9003":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"11:2124:9749":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2741:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:4468:9542":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:40865:8209":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"14:220:10002":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:22722:10370":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:1964:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:4952:11092":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:15734:9361":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6756:11568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"4:11694:8168":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:4992:11110":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:3832:18016":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:7695:9845":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:10915:38611":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2985:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:617:17909":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:3820:10098":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:4144:18020":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"23:0:2614":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"4:4478:10154":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12443:8676":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:42262:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6047:9596":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:6670:11539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:6991:38595":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5802:25132":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13344:7517":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8187:12496":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:598:38619":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:44185:6894":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:4802:9552":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:44619:6864":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:832:8120":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:1686:10974":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:3410:2549":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:856:10006":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12353:8672":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13797:8865":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:2089:10326":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:6913:11846":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:4909:11075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:38888:12425":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6775:11571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:46099:10516":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:32157:10766":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:6398:7587":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:4282:11825":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:10170:7464":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:4874:18067":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6278:7569":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:15701:9354":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6231:9626":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:586:10845":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:42720:6914":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:32764:9762":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:12350:909":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"16:6560:7593":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:8612:10259":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:21626:30698":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:14968:9161":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"14:187:24216":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:44817:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:570:10836":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:22859:7734":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:14723:9012":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:10222:10434":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"4:9158:7653":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12030:8064":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:40793:8200":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:6414:18114":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7618:7604":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:14868:9125":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4385:10331":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:12347:738":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:13424:8774":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:1066:24202":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:15836:9386":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12572:7467":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"4:878:7654":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5260:11197":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15289:9224":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:5230:7671":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:9975:33258":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:43961:6885":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:5077:11825":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"0:22:2193":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"4:4192:18023":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5863:25133":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:5897:7563":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:9107:8161":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"16:7098:9743":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:8288:11799":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:6019:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:15176:9200":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13211:8749":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:44643:7730":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:11688:8594":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:3649:34079":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:40472:6837":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:33661:12414":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:44201:6834":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:44631:6867":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:123:7620":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:8002:10197":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:14260:8951":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:3029:8441":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:14560:9000":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:13795:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:44813:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:3640:6846":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:12318:8434":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:46181:10520":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:7473:8165":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:15281:9223":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:883:17928":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:22:817":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:42037:7654":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:6874:11598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10350:7488":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:10348:8172":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:11467:8575":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:11663:10193":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:40740:8189":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:2508:9505":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:44097:6890":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:40671:7718":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:7485:11705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:40550:12484":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:2004:785":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:14111:8910":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:16249:9488":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:42953:11915":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:2322:7665":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:11443:8574":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:6072:18163":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:13272:8763":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:15058:7518":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"11:742:7660":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:2352:10012":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"4:10971:10148":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"4:8474:7701":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:7397:35972":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:6908:11847":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12530:8076":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:2906:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"5:1590:8130":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:494:36228":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"9:392:24124":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:3842:9536":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:11196:7678":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:1631:8123":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12076:8649":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:40410:6833":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:10325:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:15434:9264":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"11:364:8108":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:23192:10401":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:33728:12416":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:7718:36130":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:15646:9338":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:2220:10100":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:3353:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:4817:6745":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13252:8753":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10720:38614":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:40418:6834":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:6902:8201":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:5174:11157":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:46234:10523":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:16069:9448":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"21:276:2636":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"17:12478:8679":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13024:25210":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15266:9221":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:40320:10411":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:22459:17717":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"20:319:17977":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"11:102:10762":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:9365:7704":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:4924:11081":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:6098:25134":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12464:25328":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:396:8110":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12371:8703":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:39551:8178":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:2001:1358":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:47199:10608":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5400:7464":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:2155:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:43008:29951":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:41763:10341":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:14246:8949":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:15342:9239":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:5700:9523":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:3039:7652":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:7743:2550":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:4130:18019":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:43800:8246":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:43252:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:14079:8906":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:7984:10122":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13877:8879":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:12353:903":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:22550:17719":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:4986:8078":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:4787:10993":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:22377:17715":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:42134:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:9239:18111":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6442:9647":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12264:8661":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:33188:12412":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:45945:10499":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:2899:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:8136:9902":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:8620:8149":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12929:8703":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"21:301:2637":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"5:7376:2547":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7668:2506":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:4808:11675":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:44910:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:32224:8177":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:43879:6880":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:11688:8167":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:434:8113":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:4515:38191":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:40763:8192":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4876:11056":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:3145:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"11:1910:8122":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:9954:802":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"16:4771:9551":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:3150:2540":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11764:8603":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:12358:1845":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:6562:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12508:8684":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:700:2552":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:5831:7561":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"11:1923:8124":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2735:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:6668:8220":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:10877:8036":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:44115:6891":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:1503:10857":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:21734:17632":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:6912:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:608:8410":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:578:10841":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:12627:6902":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"22:386:7446":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"4:5080:18064":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:10350:10298":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:12671:8080":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:43067:6925":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"4:10922:10207":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:6480:7592":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5290:11213":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:38144:12421":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:485:10786":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:3264:8065":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:5477:11300":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:5834:10169":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:7939:36223":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:43227:7871":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:42045:2552":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:14091:8907":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6435:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:10329:6915":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:15456:9269":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:2728:9515":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12189:8068":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:7330:11648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:46439:10548":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:40605:10417":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:13125:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:6693:2552":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:12349:733":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"17:13485:8787":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:43852:6879":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:42096:2668":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:42199:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:2316:17959":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:5280:10160":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:2116:10098":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:7648:9843":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3595:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:45813:10483":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11557:8580":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:42727:6916":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:4451:38191":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:44157:6883":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:43708:8239":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:5502:11307":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:13753:8856":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:40806:8202":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:4821:8077":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"4:1891:8144":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"18:613:38618":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:44635:6861":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6620:9664":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:11773:8604":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:23013:10387":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:40684:7719":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:10276:6846":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:39659:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:15390:9254":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6665:25138":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:13511:10358":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:22951:29966":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:15473:9276":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:2102:7699":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:14933:9160":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5677:11379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"20:655:2587":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"1:23126:10395":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:10828:38612":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:643:8399":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:15822:9383":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:5320:11223":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11510:8577":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:41779:10343":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:680:10092":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:10912:11826":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"4:9738:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:33594:12415":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:4214:18027":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10524:8030":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:7059:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14449:8986":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4897:11066":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:15376:9252":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:2469:2549":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:45892:10492":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:4918:18036":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6504:9654":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:2438:9502":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:44489:10467":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:515:8396":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:726:7459":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:32199:10406":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:45928:10498":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:1204:8128":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7755:7610":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:11355:10313":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:3180:6739":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:11926:10196":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:9291:33313":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"21:319:8372":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"17:9737:25183":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:5407:1243":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:6499:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:7107:38200":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:40577:6880":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"11:875:10008":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:15151:9192":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:9415:10189":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:2788:9518":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:14545:8996":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:3885:2549":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:12904:6871":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:373:10120":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6763:11569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:10155:7463":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5483:11301":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:3382:2647":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:11040:7679":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:15010:9168":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:10490:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"4:3477:18003":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:44615:6865":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:5948:10173":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12150:8653":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:8183:12497":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:14325:8959":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12949:8434":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:12910:6870":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8695:12495":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:5039:11136":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:45860:10490":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"22:470:7993":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:46202:10521":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:2528:9506":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6813:9703":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:46949:10594":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12362:8673":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:16121:9460":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:5046:11138":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:38254:12423":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:13665:10363":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:12454:8677":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5244:11189":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:47124:10603":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:4763:18063":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:2127:10099":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:9467:2512":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:479:10783":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:8649:11664":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:3366:12426":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2643:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10905:8037":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:46070:10507":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:12361:1912":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:13046:8712":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:2535:2419":{"crate_id":4,"path":["std","io"],"kind":"module"},"6:6597:11509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5329:11226":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:497:10791":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:2068:12391":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:15078:9177":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:80:8016":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:8177:8147":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"11:2151:10012":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:15426:9263":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:7880:10318":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:4002:2552":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7457:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13723:8847":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:6396:7687":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:16223:9484":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:46782:10591":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:46333:10528":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:9278:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:12346:735":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"16:6120:25135":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:8594:10152":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:3674:7654":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8322:2235":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4979:11105":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:44015:6888":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15748:9368":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:23024:12226":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:46460:10549":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5423:11264":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:10969:17977":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:11255:8232":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:44176:6895":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5181:11158":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:5466:18148":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:12436:6874":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:4972:10159":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7497:9826":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:41929:10437":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:8686:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:22595:17977":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:40361:29953":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:4665:10333":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"22:752:8001":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"4:426:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:3423:2545":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2704:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:22130:17635":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:2735:10136":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:256:8428":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"22:669:7448":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:40534:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:2936:24273":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:16093:9453":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"10:44:7626":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6706:11553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:4942:11089":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:3284:8123":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:5159:18071":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"5:1531:7656":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:2660:9512":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"9:0:2486":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:14994:9167":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12557:7479":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"4:666:10124":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:23045:17977":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:3894:10149":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:1324:9749":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13455:8783":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11313:8566":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:896:7656":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"20:599:38639":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"17:11214:8045":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:5864:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:10337:6918":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:6843:7690":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:15092:9180":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5200:11170":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:44937:10023":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"11:2443:2504":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:46655:10556":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"16:7823:25144":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:669:10126":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:4322:7653":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:4614:9547":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3226:12430":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"4:3897:10150":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5283:11211":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12089:8650":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:5201:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:13064:8715":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:5982:7680":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6721:11557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:44454:10462":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:4940:9557":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5781:9524":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:12590:6900":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:21597:30692":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"4:367:10118":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:9113:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:32234:2649":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:3580:12432":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:43639:8235":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:43997:6889":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:3925:9538":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:47291:10612":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:44900:10480":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:41014:8214":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:15608:9329":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:523:10811":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:6789:18105":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:14212:8946":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14575:7497":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:12339:1314":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:14912:9155":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:15944:8749":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:21655:30696":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"9:330:10770":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:4531:9544":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:15635:9337":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:8053:17914":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:40841:8206":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:40662:8181":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:4875:471":{"crate_id":1,"path":["core","char"],"kind":"module"},"17:14463:8987":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:2854:9521":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10251:7485":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:43282:7876":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:14311:8956":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:14529:8994":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:8863:8160":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:11256:8560":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:2748:9516":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:10329:8144":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:7622:10116":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:0:1713":{"crate_id":4,"path":["std"],"kind":"module"},"1:42117:6911":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:11759:8173":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"13:0:2484":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12420:10353":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:14372:8966":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:5955:10177":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:517:10808":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:5613:10166":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:5326:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"5:7658:2505":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:23181:10400":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"4:4995:18032":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1628:10939":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:8523:8212":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"5:1493:7654":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:46978:10595":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:44639:6862":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:6900:11613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:710:7659":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:4439:12453":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:6441:11426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:7485:2552":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6543:9657":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:4502:9543":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:23115:10394":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:7467:11695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"13:110:38591":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:6348:10368":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:0:2494":{"crate_id":18,"path":["memchr"],"kind":"module"},"20:527:8013":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"6:7366:11664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:957:17927":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:12404:12537":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:45974:10501":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:7014:25140":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:4087:2504":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6456:25137":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:3026:7053":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:10818:8035":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:7405:2504":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14516:8993":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"15:327:7615":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:5438:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"20:642:2586":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:42174:7653":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:6788:11578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:32233:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:8025:8617":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:3517:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:1485:10849":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:8029:11788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:7920:36235":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:10120:6935":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"20:201:2268":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"16:2998:9530":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:1671:10965":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:1614:2549":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:11634:8590":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:9174:2552":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:351:8105":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"4:12342:1721":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"22:1034:29414":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"4:11677:10195":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:2458:9503":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:44147:6881":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6385:9644":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:7561:11755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5266:11200":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:532:10817":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:6491:11447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:42223:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:2612:9510":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:289:38184":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:15957:9404":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"11:687:7654":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:11089:8040":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:4296:11825":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"5:7449:2552":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:4094:18018":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:44479:10463":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:2463:17962":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:6657:11535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:3762:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:6786:10184":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:11449:8254":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6948:7597":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:12341:1687":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:5546:11320":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"11:2326:10010":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:4718:9549":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:43467:10447":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:5817:7558":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1585:10906":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10982:25217":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:4824:11020":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:1761:12332":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:5146:11155":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:41229:8222":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4864:11053":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:1475:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:6934:2555":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5306:11219":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"21:259:38665":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"6:1639:10947":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:9807:25189":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1663:10964":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:44926:10481":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:21852:17630":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:8202:7613":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6417:11410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:765:29387":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:8282:11798":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6478:11438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7580:9841":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:3040:38577":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:10980:36025":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:15383:9253":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:4810:11677":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:7379:38604":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3391:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6976:7599":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:67:2270":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"4:10716:10143":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:8377:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"14:0:2490":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3218:12428":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"20:681:2589":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"17:13568:8812":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:8188:9909":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:7549:9839":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:8530:6880":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:6524:11460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:22564:12377":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"11:800:2504":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:42963:6924":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"11:1903:8121":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:9197:10281":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:867:8428":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:14855:9118":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7061:9739":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:15249:9214":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:15039:9176":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5075:9561":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7111:9746":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:2307:138":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:21641:30694":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:30584:2541":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:5390:11248":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"18:659:8024":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6562:11488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:15333:9238":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:14147:8916":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:21587:7739":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11242:8046":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12887:7501":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:40702:8182":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:23093:10392":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:12597:8689":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:1891:2504":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:8269:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:21675:17633":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:15418:9261":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12422:8074":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:5742:9567":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:1692:10975":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:47214:10609":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"15:288:8089":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:10294:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"11:1582:10017":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:5052:11140":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8733:33257":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5014:11123":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:1526:10867":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:7984:11776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:5766:11585":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"20:496:2589":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"1:3276:9764":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:6708:7689":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:8118:9900":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"21:198:2639":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"17:12399:8675":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12213:8070":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:7546:6770":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:15356:9246":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:9319:7686":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"7:0:1902":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:2226:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"4:9464:10290":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:7446:11689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:9401:11825":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"5:1340:10012":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:8225:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:11508:36219":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:0:2493":{"crate_id":17,"path":["object"],"kind":"module"},"16:542:7540":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:46041:10505":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:150:7446":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:3661:7653":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:12319:33304":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:8626:10260":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:14131:8911":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:5302:977":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:16079:9449":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:6353:7584":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:8671:10156":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13959:8889":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:3810:9535":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12724:25207":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:1142:10015":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:44627:6866":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:8260:7699":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:4294:8152":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:7769:9846":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"20:197:2598":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:40376:6840":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"11:1007:9749":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:14475:8988":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:563:7455":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:5636:11363":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6746:11561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:43243:7874":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:650:7050":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10284:7486":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:4100:18017":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:40513:6839":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:4837:11030":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:3251:7653":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13785:8863":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13581:8816":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:3014:24274":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:44275:12574":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:9209:18110":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:39639:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:513:8432":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:4811:11010":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:43728:8241":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:6566:2504":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:7551:17926":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:9984:25204":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5769:9576":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2902:24272":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:11128:8527":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:8704:18075":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:8721:10271":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:10713:10141":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"18:581:7739":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13594:8817":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:5103:18066":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:2477:17966":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:5769:18093":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:7939:7700":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:1680:10971":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:7546:11748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:44949:10482":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:7359:11660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:40314:6834":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:15:2460":{"crate_id":1,"path":["core","write"],"kind":"macro"},"16:3669:8446":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:15313:9231":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6629:11522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:4795:6928":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:46027:10504":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6447:11427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}