{"root":"0:0:1632","crate_version":"0.3.0","includes_private":false,"index":{"2:11590:28983":{"id":"2:11590:28983","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1630":{"id":"0:115:1630","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11486:32316":{"id":"2:11486:32316","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11473:37339":{"id":"2:11473:37339","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11471:37338"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[519,0],"end":[533,1]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2557:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5281:38013":{"id":"5:5281:38013","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2520:1438":{"id":"2:2520:1438","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11498:37343":{"id":"2:11498:37343","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50373:6453","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11579:37359":{"id":"2:11579:37359","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11169:6297","prim@char":"1:12335:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11560:37353":{"id":"2:11560:37353","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11482:32314":{"id":"2:11482:32314","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:157:1609":{"id":"b:2:2237-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:27281"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:39:596":{"id":"0:39:596","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[225,0],"end":[230,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11477:37340":{"id":"2:11477:37340","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2236:2073":{"id":"2:2236:2073","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:157:1609":{"id":"b:5:683-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:6381","5:686:6382","5:687:6383"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2665:225-0:157:1609":{"id":"a:2:2665:225-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11520:32348":{"id":"2:11520:32348","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:6297"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10993:6441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11563:37355":{"id":"2:11563:37355","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:166:1610":{"id":"b:2:2237-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:27281"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2239:27281":{"id":"2:2239:27281","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1609":{"id":"0:157:1609","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[510,0],"end":[516,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:90","a:2:7786:2235-0:157:1609","a:2:7787:2234-0:157:1609","a:2:2651:217-0:157:1609","a:2:2665:225-0:157:1609","a:2:2715:2199-0:157:1609","b:2:2237-0:157:1609","b:2:3306-0:157:1609","b:2:2506-0:157:1609","b:2:2510-0:157:1609","b:2:2234-0:157:1609","b:2:2516-0:157:1609","b:2:2521-0:157:1609","b:5:683-0:157:1609","0:88","0:163","0:165"]}},"2:11544:1880":{"id":"2:11544:1880","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:11544:1880","self::pattern":"2:11169:6297","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50313:6456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11538:37346":{"id":"2:11538:37346","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11517:1925":{"id":"2:11517:1925","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:11523:32350","self::pattern":"2:11169:6297","`DoubleEndedIterator`":"2:7120:120","prim@char":"1:12335:409","str::split_whitespace":"2:11495:34172"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50109:6459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,39],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Idna","name":"Idna","id":"0:151:1611","glob":false}},"2:11591:37362":{"id":"2:11591:37362","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4495:37362"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50408:6408","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:166:1610":{"id":"b:2:2506-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:1942"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:113:1617":{"id":"0:113:1617","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11500:32356":{"id":"2:11500:32356","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:6297"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:59":{"id":"0:156:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11484:32315":{"id":"2:11484:32315","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:96:1619":{"id":"0:96:1619","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[567,4],"end":[571,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11491:32340":{"id":"2:11491:32340","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11490:32339"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:1610":{"id":"0:166:1610","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[600,0],"end":[613,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:7786:2235-0:166:1610","a:2:7787:2234-0:166:1610","a:2:2651:217-0:166:1610","a:2:2665:225-0:166:1610","a:2:2715:2199-0:166:1610","b:2:2237-0:166:1610","b:2:3306-0:166:1610","b:2:2506-0:166:1610","b:2:2578-0:166:1610","b:2:2510-0:166:1610","b:2:2234-0:166:1610","b:2:2516-0:166:1610","b:2:2521-0:166:1610","b:5:5542-0:166:1610","0:104","0:102","0:107","0:106","0:179"]}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,16],"end":[509,20]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2663:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11529:37345":{"id":"2:11529:37345","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11526:37344","self::pattern":"2:11169:6297","str::split":"2:11517:1925","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50177:6462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11541:37347":{"id":"2:11541:37347","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:166:1610":{"id":"b:2:2516-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,31],"end":[42,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Errors","name":"Errors","id":"0:166:1610","glob":false}},"2:11499:34199":{"id":"2:11499:34199","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50401:6439","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:157:1609":{"id":"b:2:3306-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2651:217-0:166:1610":{"id":"a:2:2651:217-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5544:1417":{"id":"5:5544:1417","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2512:680":{"id":"2:2512:680","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:157:1609":{"id":"a:2:2651:217-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2715:2199-0:151:1611":{"id":"a:2:2715:2199-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:2199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2234-0:151:1611":{"id":"b:2:2234-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:2073"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11469:1909":{"id":"2:11469:1909","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,23],"end":[42,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Config","name":"Config","id":"0:157:1609","glob":false}},"2:11588:28981":{"id":"2:11588:28981","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11496:34197":{"id":"2:11496:34197","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11495:34172"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50392:6440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11593:10874":{"id":"2:11593:10874","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4496:10874"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50417:6406","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:6382":{"id":"5:686:6382","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2525:1437":{"id":"2:2525:1437","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:157:1609":{"id":"b:2:2234-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:2073"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3306-0:151:1611":{"id":"b:2:3306-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11576:37358":{"id":"2:11576:37358","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11169:6297","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:151:1611":{"id":"b:2:2506-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:1942"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2509:1942":{"id":"2:2509:1942","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2483:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11587:1778":{"id":"2:11587:1778","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11535:32354":{"id":"2:11535:32354","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12335:409","str::splitn":"2:11532:32352","self::pattern":"2:11169:6297"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50231:6460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11594:37363":{"id":"2:11594:37363","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4493:37363"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50426:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2510-0:166:1610":{"id":"b:2:2510-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:685:6381":{"id":"5:685:6381","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2521-0:166:1610":{"id":"b:2:2521-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2510-0:151:1611":{"id":"b:2:2510-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11467":{"id":"2:11467","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10732:1363","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11468:796","2:11469:1909","2:11470:37337","2:11471:37338","2:11473:37339","2:11476:30750","2:11477:37340","2:11478:310","2:11479:32317","2:11480:1802","2:11482:32314","2:11484:32315","2:11486:32316","2:11488:37341","2:11489:37342","2:11490:32339","2:11491:32340","2:11492:1764","2:11493:9166","2:11494:1783","2:11495:34172","2:11496:34197","2:11497:7227","2:11498:37343","2:11499:34199","2:11500:32356","2:11503:1904","2:11506:1905","2:11509:6360","2:11513:1777","2:11517:1925","2:11520:32348","2:11523:32350","2:11526:37344","2:11529:37345","2:11532:32352","2:11535:32354","2:11538:37346","2:11541:37347","2:11544:1880","2:11547:37348","2:11550:37349","2:11553:37350","2:11556:37351","2:11558:37352","2:11560:37353","2:11562:37354","2:11563:37355","2:11564:37356","2:11567:37357","2:11570:1927","2:11573:32357","2:11576:37358","2:11579:37359","2:11582:37360","2:11585:37361","2:11587:1778","2:11588:28981","2:11589:28982","2:11590:28983","2:11591:37362","2:11593:10874","2:11594:37363"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:95:1873":{"id":"0:95:1873","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[561,4],"end":[564,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7787:2234-0:151:1611":{"id":"a:2:7787:2234-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:2234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:164:413":{"id":"0:164:413","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11476:30750":{"id":"2:11476:30750","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10737:6443"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2651:217-0:151:1611":{"id":"a:2:2651:217-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2651:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:94:1903":{"id":"0:94:1903","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[555,4],"end":[558,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2519:127":{"id":"2:2519:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:2:2578-0:166:1610":{"id":"b:2:2578-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2571:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3355:16278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2580:6528"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:11478:310":{"id":"2:11478:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11479:32317","`u8`":"1:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:151:1611":{"id":"b:2:2516-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11556:37351":{"id":"2:11556:37351","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2524:127":{"id":"2:2524:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39377:9594","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"5:5292:38015":{"id":"5:5292:38015","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[535,0],"end":[580,1]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:91:1623","0:92:1869","0:93:1624","0:94:1903","0:95:1873","0:96:1619","0:98:1631"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:92:1869":{"id":"0:92:1869","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2557:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:180:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:91:1623":{"id":"0:91:1623","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[537,4],"end":[540,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:86:1631":{"id":"0:86:1631","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[500,4],"end":[506,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11550:37349":{"id":"2:11550:37349","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"2:11553:37350","`DoubleEndedIterator`":"2:7120:120","self::pattern":"2:11169:6297","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50259:6454","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17:530":{"id":"0:17:530","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6591:241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:38016":{"id":"5:5293:38016","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:7148:221","`Box<str>`":"5:288:2205"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:6827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11526:37344":{"id":"2:11526:37344","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:12335:409","str::rsplit_terminator":"2:11529:37345","str::split":"2:11517:1925","self::pattern":"2:11169:6297","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50159:6463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:59":{"id":"0:180:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:1808":{"id":"0:37:1808","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[216,0],"end":[219,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2516-0:157:1609":{"id":"b:2:2516-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2486:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:127","2:2520:1438"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2665:225-0:166:1610":{"id":"a:2:2665:225-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:89:59":{"id":"0:89:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[520,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[439,0],"end":[507,1]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:923","0:81:1932","0:82:1619","0:86:1631"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11509:6360":{"id":"2:11509:6360","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12335:409","`None`":"2:48127:176","self::pattern":"2:11169:6297"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11523:32350":{"id":"2:11523:32350","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7120:120","self::pattern":"2:11169:6297","prim@char":"1:12335:409","str::split":"2:11517:1925"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50127:6458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93:1624":{"id":"0:93:1624","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[549,4],"end":[552,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3306-0:166:1610":{"id":"b:2:3306-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3304:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3308:1451"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11589:28982":{"id":"2:11589:28982","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[701,0],"end":[709,1]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:105:680"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80:923":{"id":"0:80:923","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[440,4],"end":[446,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["config",{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11470:37337":{"id":"2:11470:37337","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2237-0:151:1611":{"id":"b:2:2237-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2231:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2239:27281"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11492:1764":{"id":"2:11492:1764","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50079:1800","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11468:796":{"id":"2:11468:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12335:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5542-0:166:1610":{"id":"b:5:5542-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8654:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5540:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5544:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11532:32352":{"id":"2:11532:32352","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11169:6297","str::rsplitn":"2:11535:32354","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50213:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1762":{"id":"0:15:1762","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[45,0],"end":[47,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2557:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5296:28980":{"id":"5:5296:28980","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11590:28983"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:2235-0:166:1610":{"id":"a:2:7786:2235-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11493:9166":{"id":"2:11493:9166","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50085:6446","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[713,0],"end":[717,1]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8654:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:98:1631":{"id":"0:98:1631","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[574,4],"end":[579,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11547:37348":{"id":"2:11547:37348","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11169:6297","`DoubleEndedIterator`":"2:7120:120","prim@char":"1:12335:409","str::matches":"2:11544:1880"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50331:6457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:680":{"id":"0:105:680","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[702,4],"end":[708,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2580:6528":{"id":"2:2580:6528","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3367:9084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11558:37352":{"id":"2:11558:37352","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11570:1927":{"id":"2:11570:1927","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11169:6297","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11585:37361":{"id":"2:11585:37361","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11130:6450","FromStr::Err":"2:11131:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11130:6450","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11130:6450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11513:1777":{"id":"2:11513:1777","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:6297","`None`":"2:48127:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11480:1802":{"id":"2:11480:1802","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:2138":{"id":"5:5294:2138","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5276":{"id":"5:5276","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5187:1363","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5277:38012","5:5278:1934","5:5281:38013","5:5284:38014","5:5292:38015","5:5293:38016","5:5294:2138","5:5295:28979","5:5296:28980"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[646,0],"end":[699,1]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8649:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11562:37354":{"id":"2:11562:37354","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2665:225-0:151:1611":{"id":"a:2:2665:225-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2665:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:151:1611":{"id":"0:151:1611","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[433,0],"end":[437,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:79","a:2:7786:2235-0:151:1611","a:2:7787:2234-0:151:1611","a:2:2651:217-0:151:1611","a:2:2665:225-0:151:1611","a:2:2715:2199-0:151:1611","b:2:2237-0:151:1611","b:2:3306-0:151:1611","b:2:2506-0:151:1611","b:2:2510-0:151:1611","b:2:2234-0:151:1611","b:2:2516-0:151:1611","b:2:2521-0:151:1611","0:155"]}},"b:2:2521-0:151:1611":{"id":"b:2:2521-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11564:37356":{"id":"2:11564:37356","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:6297"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11194:6432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2510-0:157:1609":{"id":"b:2:2510-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2512:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2506-0:157:1609":{"id":"b:2:2506-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2483:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:1942"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2715:2199-0:157:1609":{"id":"a:2:2715:2199-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:2199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3:1607":{"id":"0:3:1607","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[315,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:15:1762","0:17:530","0:37:1808","0:39:596"],"is_stripped":false}},"5:5284:38014":{"id":"5:5284:38014","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:656":{"id":"0:108:656","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[714,4],"end":[716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11553:37350":{"id":"2:11553:37350","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11550:37349","self::pattern":"2:11169:6297","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50277:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2251:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:164:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11479:32317":{"id":"2:11479:32317","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5277:38012":{"id":"5:5277:38012","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:6827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2205","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:6827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11573:32357":{"id":"2:11573:32357","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:6297"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:687:6383":{"id":"5:687:6383","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7787:2234-0:157:1609":{"id":"a:2:7787:2234-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:2234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[711,0],"end":[711,27]},"visibility":{"restricted":{"parent":"0:46:1608","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","provide","source","description","type_id"],"trait":{"name":"Error","id":"2:2571:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11471:37338":{"id":"2:11471:37338","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:656":{"id":"0:103:656","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[647,4],"end":[698,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8609:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8598:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2521-0:157:1609":{"id":"b:2:2521-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2480:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2490:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2524:127","2:2525:1437"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11489:37342":{"id":"2:11489:37342","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12341:1363","crate::ops::IndexMut":"2:2974:10907","str::slice_unchecked":"2:11488:37341"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2234-0:166:1610":{"id":"b:2:2234-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2658:2198","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2228:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2236:2073"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11488:37341":{"id":"2:11488:37341","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"2:11489:37342","`str`":"1:12341:1363","crate::ops::Index":"2:2970:10906"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11506:1905":{"id":"2:11506:1905","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11169:6297","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2715:2199-0:166:1610":{"id":"a:2:2715:2199-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2715:2199","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:7787:2234-0:166:1610":{"id":"a:2:7787:2234-0:166:1610","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7787:2234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11494:1783":{"id":"2:11494:1783","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50095:6445","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1632":{"id":"0:0:1632","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[74,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3:1607","0:110","0:111","0:112","0:113:1617","0:114:1622","0:115:1630"],"is_stripped":false}},"0:114:1622":{"id":"0:114:1622","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[57,0],"end":[62,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11567:37357":{"id":"2:11567:37357","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11169:6297","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3308:1451":{"id":"2:3308:1451","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46617:9139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11497:7227":{"id":"2:11497:7227","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50363:6452","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11503:1904":{"id":"2:11503:1904","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11169:6297","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11582:37360":{"id":"2:11582:37360","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11169:6297","prim@char":"1:12335:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82:1619":{"id":"0:82:1619","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[478,4],"end":[496,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:2235-0:151:1611":{"id":"a:2:7786:2235-0:151:1611","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1611","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11490:32339":{"id":"2:11490:32339","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11491:32340"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5278:1934":{"id":"5:5278:1934","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11495:34172":{"id":"2:11495:34172","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11496:34197"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50383:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81:1932":{"id":"0:81:1932","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[448,4],"end":[474,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1610","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5295:28979":{"id":"5:5295:28979","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11589:28982"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7786:2235-0:157:1609":{"id":"a:2:7786:2235-0:157:1609","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7786:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"paths":{"16:6781:8700":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:6469:6334":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:50417:6406":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:11706:9330":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4317:9950":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2557:8477":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:46640:6511":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"5:5804:6723":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"15:175:7221":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8447:7268":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:10497:23225":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12347:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:51715:9189":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:49977:7333":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4913:10406":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:6635:6737":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:609:7536":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:8398:7069":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:21040:11145":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:7892:6433":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:9350:11100":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:4662:9301":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:9193:38160":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:51066:9182":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4273:11015":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:4977:11040":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:11146:9456":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:12934:8265":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7603:8817":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:1771:7188":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:29587:6551":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:2433:8472":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4768:10113":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:6479:10459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:10894:9279":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:8561:6894":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:39417:7259":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:10708:6912":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:54133:9247":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7289:10538":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:3188:8499":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:50067:6449":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:7148:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:46901:6413":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1505:9682":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:1756:9079":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:11300:7861":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2705:8483":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:29649:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:5628:8548":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11485:7908":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:96:7158":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:2867:10541":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:4545:8518":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6298:8623":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"0:15:1762":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"1:2385:10954":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:545:6712":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:11199:7836":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6842:8710":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:420:7557":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:6629:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:4122:9297":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4653:10065":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:2282:8465":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9183:7176":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:7237:8790":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:9165:38161":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6463:8654":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:21978:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:1686:9796":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:8598:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:5163:8532":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"21:198:2185":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"5:288:2205":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12617:8179":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:12781:8238":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:5715:6731":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:6243:6789":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:4590:9300":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:54043:9241":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:9317:7178":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:755:7553":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:6981:10510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:4019:9295":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8106:7347":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"18:681:7542":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:21465:11008":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6345:7000":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"22:948:26886":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"1:598:9263":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7249:8791":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:872:7244":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"13:108:38145":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:91:2136":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"17:9857:7694":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:738:7247":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:6558:16453":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11721:7950":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7970:8872":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:6865:8712":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:1574:9721":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:8017:9133":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:46456:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:661:2112":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:8881:38154":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7298:8803":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11822:9295":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:1889:7346":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6200:8618":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"20:368:2127":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"17:9061:6882":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:52718:9220":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:21879:9125":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:7319:8804":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5433:8535":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:1632:7251":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6322:10387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:20775:11147":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:8899:9153":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:11323:29914":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13459:8419":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"9:863:21973":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3996:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3958:11006":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11137:7828":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:5837:11084":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:2257:10951":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:3199:9278":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:49656:10627":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:624:38165":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:3249:7205":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:6266:6328":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5772:10311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11503:31803":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6496:23051":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"12:1029:8971":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5595:10225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"14:40:7811":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:9118:38162":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10088:7731":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6690:7003":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:7288:8802":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:47381:7303":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"22:728:6665":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"17:9601:7672":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:3566:8502":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4126:9842":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:10321:7745":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:6070:6991":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"13:220:7024":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:6969:7061":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:12345:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4417:9983":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6676:7002":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4592:10041":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:8754:9409":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:2487:8474":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:7183:10822":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:49964:7266":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:11198:31799":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7557:8809":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:5691:9309":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:3089:37011":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4540:10013":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:1454:7256":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:48552:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:50860:7076":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:50383:6442":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12046:8015":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:10897:9281":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:1707:9806":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:973:8963":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:560:9650":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11087:6921":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:1320:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"0:39:596":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"6:4239:9913":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:7242:6740":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:5839:23048":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:46998:6410":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:9424:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"16:7659:23057":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11235:7845":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:2589:6767":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:9337:9432":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:1643:9770":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6034:8600":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4449:9986":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1722:9813":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:21274:7062":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:9930:7697":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:8393:23114":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:2916:7203":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:4294:6511":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:20932:7079":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:5568:10218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:2571:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:1413:7248":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:21432:10554":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"21:266:2170":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"1:5585:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:52764:9221":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:6509:10476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10385:7755":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6517:8666":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:4611:10049":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:3689:8505":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:8252:9347":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:1580:9723":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:50632:9099":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"21:302:2183":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"1:11168:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"12:1138:8975":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4489:9989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:51104:9187":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10583:23118":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:9738:6890":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:574:7525":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:21237:9105":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:8981:7172":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:50694:9171":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10270:7743":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:9293:7658":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:9328:7660":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:46945:6405":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:2785:16461":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:6593:8680":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:2702:6309":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:4398:9982":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:4749:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12485:8073":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13404:8403":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:54171:9249":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:6899:6827":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:2658:2198":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:3237:9280":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:6503:6745":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:990:8966":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:3559:6700":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:1021:7182":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:3140:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:12342:1441":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:2921:2203":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:11691:9328":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:3927:6723":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:11123:10642":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:53064:9227":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:6474:6733":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:12340:1333":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:49417:7094":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:3077:7244":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:3048:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:51839:9194":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:4346:9963":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:4210:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:50840:10632":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13231:8341":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:8911:38158":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:12350:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6392:10412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:9751:7684":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:5095:11025":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:4206:9895":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:784:6703":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:7197:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"23:0:2160":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"16:2579:8478":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:8872:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:3457:7570":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2801:16464":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3274:9281":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"12:1628:6694":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:8339:23112":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4461:9987":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:4217:8509":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:9350:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:20247:11150":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:6990:6328":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:21945:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:54148:9248":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:5504:10186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:20050:7088":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:0:1972":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3475:27521":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7511:8808":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:135:16895":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:4408:7352":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:20095:34606":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:7042:16451":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"9:0:1974":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13141:8318":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:4558:6400":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:719:10879":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:12797:8241":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5741:10302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:50844:10633":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10796:7780":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"9:19:7027":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:4510:9299":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:2046:6712":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:38204:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:6545:10495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:12335:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12836:8242":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13203:8333":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8981:7356":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1600:9737":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:20097:34608":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:4:993":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:13134:8317":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:727:6874":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:6466:7110":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:9691:7677":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:11034:7824":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:4357:8513":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:8656:6496":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:3319:10991":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:56977:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48590:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11259:7849":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:53214:9228":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:9517:7245":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:51761:9191":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11054:6915":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12237:8049":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:586:9663":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8831:2224":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4921:8530":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"12:353:6687":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:7255:10531":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"12:1518:22128":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11418:6816":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:7883:11027":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:54069:9243":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:1639:6548":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:6448:10433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:11751:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:11530:9326":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:3221:16220":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:54118:9246":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:21341:9108":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"12:815:8963":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:48871:6496":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:10490:7762":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:47177:7268":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13436:8418":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:592:9666":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:2366:10545":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:1082:7255":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:47370:7300":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:8951:38153":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:600:9671":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10921:7790":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6161:23049":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5733:10300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:9340:11027":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8680:7351":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:2769:8727":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:9631:7195":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:6341:6700":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:47360:7298":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:3276:9282":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6186:6997":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:47228:7274":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:50511:9159":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:38221:7088":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:14:2090":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:6163:6793":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:50053:6451":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5841:10326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12674:8216":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:29721:34236":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:8798:9302":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:9472:7109":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12337:6908":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:3123:37012":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:1046:7254":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:1828:7343":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4102:9825":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:47395:7304":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:2749:8485":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:47055:34212":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10420:6907":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12060:8016":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:3690:6700":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2811:16466":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:7059:2231":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:2316:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:2871:6786":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:3934:7245":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13366:8394":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:9820:7691":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:48320:7245":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:9566:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:6702:6484":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7637:8821":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4899:11015":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:5374:6967":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:13572:8445":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:5671:9308":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:48328:6328":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:7956:7018":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:7225:6689":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:1668:9789":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:7083:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10455:7759":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:9790:6460":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:47621:7313":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4506:9997":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:20413:7077":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:1378:6328":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:291:38211":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"2:54014:9238":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:3382:6723":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2915:2201":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:52094:9204":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11288:7858":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:47599:7310":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:8658:6497":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:9071:38157":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:20944:36492":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:3599:8503":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:5072:6787":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:22011:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:12307:8057":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"9:586:9598":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"20:0:1633":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"20:314:38186":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"6:4559:10022":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4551:10018":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:6493:6743":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3157:16297":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:48312:7244":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:6434:6800":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6903:9439":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1248:8975":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"21:145:1835":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"2:2900:10896":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"12:1859:7250":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12896:8251":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7483:7014":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4280:9930":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:46925:6416":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4737:10103":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:6500:10473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:4808:6723":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:2715:2199":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:11989:9331":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"12:853:8968":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:20366:11144":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:50912:16595":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"20:8:2131":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"16:6359:8630":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6316:7217":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:50704:9175":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:10296:7744":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:652:7525":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:50683:16250":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:1967:2111":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:5219:6879":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2789:16463":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:6939:37009":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6352:10409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11740:6820":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:9520:7121":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:8540:11005":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:51074:9184":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:660:7163":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11774:7958":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:11194:6432":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12177:6826":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:2280:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:50489:16245":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:2595:10548":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:4329:11020":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:21131:9103":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5541:8545":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9274:7654":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12926:8262":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:5749:10305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"9:505:7052":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:50159:6463":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"9:676:21981":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:4367:9972":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:12336:1475":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"5:6961:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:52537:9217":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:4749:11040":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12265:8053":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:4843:11056":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:10642:23119":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:9885:7696":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:2516:9272":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:7249:10530":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:9401:7662":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:51087:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6528:8667":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"14:165:22133":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:2631:8480":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:21912:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:12306:10880":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4698:10085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:4421:409":{"crate_id":2,"path":["core","char"],"kind":"module"},"1:11883:9297":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6829:8707":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:3599:27562":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:20525:7077":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:3118:7249":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:3184:16219":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"22:879:26885":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"12:0:1977":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:52560:9218":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:46339:16296":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:8494:6878":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:4103:7068":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:49155:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:9658:7196":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:12339:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"12:1832:7244":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:5540:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:0:1982":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9382:7661":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:6293:10375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9031:38159":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:4459:7355":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:50392:6440":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:11407:6815":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11188:9284":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:47043:9149":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:6259:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:49927:7330":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"7:79:21967":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:56990:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49938:7331":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:51970:9199":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11909:7977":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10479:7372":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"22:534:7153":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"9:592:21992":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"18:707:6435":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:7333:7366":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:545:9641":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:46566:10885":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:54054:9242":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:46864:9141":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:9446:7184":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5660:10269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:9158:6772":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:11567:9325":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:9419:7106":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:8660:6498":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:47168:7267":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6330:8629":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13536:8441":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:58312:9258":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:20284:11151":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:12768:8233":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"12:2190:38143":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:10958:9098":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:52408:9214":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:22044:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"18:113:7161":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:9539:7670":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:8748:7349":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"14:215:8960":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11997:8008":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:5664:8555":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:3159:30403":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:762:6689":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:10993:6441":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:699:6873":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"14:7:8955":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:12333:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:6919:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:4231:9911":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:2952:16221":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"12:1840:6718":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:53996:9237":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:131:16894":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:8612:9403":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:1636:9766":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8405:7117":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:2909:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13082:8300":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"22:1122:7502":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:944:6718":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:636:7541":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13039:8288":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:12338:1027":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:6210:8619":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12638:8187":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:766:26862":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:8055:23095":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:50824:10628":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:10283:7210":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:53030:9226":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"5:1367:7245":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:1864:7344":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:12352:1459":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:12348:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:9873:7200":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"22:1034:26887":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"17:8162:23107":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:50526:9164":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:11724:7369":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:11311:9312":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:5443:10144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:3491:10986":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7426:8806":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:20063:36488":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:2773:11137":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:967:7181":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:481:7523":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1541:9698":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:8631:6896":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:6706:9321":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:54034:9240":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:49456:7096":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4771:11041":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:574:6780":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7567:23056":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4598:10044":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:29621:6552":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:1637:7252":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:1950:7116":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:10139:6882":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:49409:7093":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:47190:7269":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:5412:7278":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:48176:1801":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7942:8871":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:2490:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:7895:31126":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:9108:7174":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:8418:23115":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:3427:9283":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11748:7955":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5727:10297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10075:7729":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"21:67:1834":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"5:2153:10544":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:1219:8971":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:52286:9209":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11125:7825":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11828:7966":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:47648:7316":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:50852:10635":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:6953:6328":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:7117:38150":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5498:10183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11617:7933":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:513:9618":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:46968:6407":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"22:449:6665":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"17:10108:7732":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:247:7555":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8776:10391":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:2825:8488":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"12:2053:8713":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"9:956:21976":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:515:7522":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:5014:11026":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:50856:10636":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:9672:7345":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:646:17235":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:5905:6790":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:12251:8050":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:5672:10274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:671:7168":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6975:10508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:3236:6689":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"12:320:6685":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:2806:16465":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:51023:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:1445:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:13221:8336":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7372:38147":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"20:335:2124":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"9:896:21974":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"14:187:22140":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"12:1866:7251":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:8262:10994":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:48185:7244":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:11395:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11800:7961":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:13158:8322":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:4761:10110":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:50737:6465":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:9485:9439":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:12341:1363":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"9:382:7037":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13168:8325":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:242:7554":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"15:193:7226":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:12739:8226":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:47269:7284":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:39413:9133":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:9776:6461":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8729:10640":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:2875:37047":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:4339:6754":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:5606:6718":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4515:10002":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13340:8385":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:20323:11027":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:5328:9303":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10854:23121":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:10942:9097":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10520:7767":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:1595:9735":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:7574:30165":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:9561:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:7118:9074":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:2261:22162":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:10891:9277":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:690:7544":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:5878:22161":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:10919:9096":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:1002:8969":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8426:10968":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:7159:9077":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:5180:11063":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:2253:6749":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:52384:9213":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:581:9661":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:5359:9303":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:5720:9311":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:3635:6328":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:49641:9157":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:1434:7243":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:47289:7290":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:4217:9087":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10894:7789":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:2683:8482":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:7170:9078":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:51785:9192":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:4288:6725":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:9571:9325":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"12:2069:8970":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"22:470:6669":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"2:20118:34603":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4427:9984":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:12029:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:2437:11027":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:20492:11027":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:47118:6755":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:52240:9208":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"0:115:1630":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"18:531:7526":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10506:7764":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11161:7832":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:9242:7362":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:10707:16552":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:2285:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:9405:9433":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:230:2132":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"16:2771:8486":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8997:7361":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:47148:7266":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:632:9056":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:6931:6708":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:6052:6963":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"22:752:6675":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"7:32:21960":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:21387:34218":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11014:7814":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:11240:16247":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:0:1355":{"crate_id":1,"path":["std"],"kind":"module"},"16:7357:7009":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11500:7912":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:51116:8979":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2832:16468":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:1603:6700":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:6815:9322":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11606:7932":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:3972:9085":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:9303:6900":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"12:1852:7249":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:6668:6964":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:47592:7309":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:12103:8022":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4745:10105":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13024:8286":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12073:8017":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:5614:6976":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:5706:9310":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:50540:9167":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7469:7012":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"20:326:7514":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"2:50373:6453":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:4284:6753":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:4911:10404":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:7135:38149":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:2133:38126":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:7279:10536":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9764:7685":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:539:9638":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:6885:6804":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4683:10080":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:52362:9212":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:48885:6499":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9501:6900":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4191:9888":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:538:6868":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3151:16298":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:3263:8500":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:10466:7760":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:11957:10647":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:9909:6904":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2665:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:6017:8597":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4307:9943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:46873:6414":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10207:7738":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10350:7560":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"12:1085:8973":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:54210:9250":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:6953:10507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:9624:7321":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13557:8444":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11491:9430":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:952:6700":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10682:7777":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4816:10140":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:12358:1512":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9865:7347":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12211:8047":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:501:9613":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:50408:6408":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"12:1065:38144":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7847:8859":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:5835:10325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:487:7240":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:47278:7285":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:8141:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:2816:8732":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6619:8681":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:5558:23046":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"9:33:7029":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:4804:10135":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:7102:34212":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51807:9193":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:0:1976":{"crate_id":11,"path":["adler"],"kind":"module"},"1:3484:10967":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:50177:6462":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2793:8487":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"2:2845:16471":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:48269:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:22077:9126":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:4606:8520":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13091:8303":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:2662:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:48210:2231":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:58291:9257":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:8216:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:3468:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4706:10090":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:6302:10381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:12334:920":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:575:9658":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2557:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:6109:8611":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"12:725:7246":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:9143:6767":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:5949:8592":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4215:11011":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:9804:7340":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6719:38146":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8457:7303":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:10882:9093":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5480:10170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:13007:8279":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:7226:10524":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:48666:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:11972:6777":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:1632:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:7974:10877":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13071:8296":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:8380:7070":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:9465:9438":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:5554:10207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13100:8304":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:11130:6450":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6123:6994":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:6914:7253":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:8368:23113":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:7166:10520":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:7343:7008":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:2742:11136":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:5891:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:47330:7295":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:9433:7664":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:1604:7244":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:46617:9139":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"8:0:1973":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:9248:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"12:1872:7252":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:6193:6700":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:9155:7175":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:52170:9206":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1608:9742":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:3026:7566":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13413:8405":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:9526:7187":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4605:10046":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:1525:9690":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9296:7244":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:8802:9091":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:8110:23093":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:51013:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:4574:8519":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:11939:7124":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46915:6415":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:47071:9150":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:2868:8490":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:5703:8558":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7166:23054":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:9870:6812":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"20:222:7510":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"16:7278:8496":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:1123:8975":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1654:9778":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:2663:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:12351:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:9371:7174":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:49999:7335":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:7143:1805":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8158:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12550:8124":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13031:8287":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:25286:7087":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:9499:29251":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"21:320:7506":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"16:4144:8508":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11974:8007":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7497:7015":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:21290:7081":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:4974:11065":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:4255:6723":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12349:8064":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:11424:6817":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:5388:8491":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:5720:10296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4335:9959":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:4267:11014":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:48628:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:276:2182":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"5:3479:7244":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"12:387:7236":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12225:8048":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:6277:10363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:36:9597":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11862:9296":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:1701:9805":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:5981:8595":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:46500:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6877:23053":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:3614:9059":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:20497:11143":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:6998:10519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"15:0:1979":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:5472:8492":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:8211:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11271:7850":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:2231:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"19:0:1009":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:10529:9442":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:2613:9273":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:48193:7245":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12609:8176":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"21:0:1634":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"1:678:9264":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10356:9400":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4257:9922":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:4262:8510":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:313:2184":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"17:10221:7206":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13594:8451":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"12:985:8713":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:6816:8704":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4212:9898":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8660:9292":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:9126:6766":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11676:9327":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"12:697:7243":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13126:8314":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:524:6779":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:960:7248":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:10685:9311":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"12:669:7242":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:53958:9236":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13393:8402":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10670:6911":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10245:7208":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:2864:6381":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7980:23058":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:5996:6977":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:47199:7270":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:4368:6314":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:6269:10358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:21747:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:8991:38155":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11841:7967":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:5993:11180":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:49167:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"0:3:1607":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:7884:9261":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:53920:9235":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11536:7921":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:50363:6452":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:7435:8807":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12291:8055":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10434:7212":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:3162:31307":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3144:7252":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:6021:9315":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9553:6882":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:21366:34232":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:50836:10631":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:4702:10881":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:46685:7502":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:50009:7336":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4673:10074":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:10737:6443":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:49426:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4437:9985":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:2794:8728":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:10336:7339":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:50401:6439":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:11637:7111":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4797:10132":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:8375:36424":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:8056:8879":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4438:7354":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:1821:9082":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:5596:6972":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12322:8061":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:54080:9244":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10310:7211":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:6171:8615":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:386:7556":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:57003:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9805:7688":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10233:7742":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8589:29934":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:56938:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:7088:9071":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:2661:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:9609:9441":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:484:6820":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:5411:8493":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8922:9423":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:21813:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:21714:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:48201:6328":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:10949:7796":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:5898:6789":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:8666:6897":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:12317:30746":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:21403:34250":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11559:7926":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:2411:10964":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:6871:11099":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:52010:9201":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4565:10024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12730:8222":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:12357:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:8662:6499":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:10460:7344":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:7787:2234":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:969:7243":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"22:636:7154":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"1:11511:7076":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:29827:34216":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:519:9621":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:2842:8489":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10121:7733":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:1511:9685":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:6665:9320":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:4527:10009":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:48261:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:4221:11010":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10528:7214":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13580:8448":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:1626:7250":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:5656:36346":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:1695:9802":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"0:17:530":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"2:12003:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:48864:6497":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:2757:8723":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:9897:7201":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:1845:6689":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:47640:7314":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:582:7088":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:48514:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:2970:10906":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"12:659:6328":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:8886:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12695:8221":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12850:8245":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4294:9938":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:49241:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12972:8273":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11708:7947":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8740:9408":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"12:1555:8977":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"12:2080:8971":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"20:248:127":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"1:1105:8970":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4629:10055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:2399:10958":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"9:188:7034":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:4247:9916":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5587:10220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11643:7365":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:353:9259":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:53562:9230":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:4888:8529":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:3409:9404":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:9488:7668":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:9818:7341":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:5381:6733":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4810:10137":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:8871:7169":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:1747:10551":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:11149:7829":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13176:8326":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:10752:7778":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"14:160:8955":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:3352:7313":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10625:7775":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12955:8270":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:1608:6328":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12909:8257":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:9318:9313":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:50879:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"12:60:7231":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2828:16467":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:8464:6445":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:50605:9169":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:11799:6822":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:53812:9233":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4267:9925":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:3716:8506":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:29627:6553":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:9947:23198":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"12:1003:8970":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8365:9385":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:1404:7247":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:3235:9279":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:4076:7067":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:5713:10294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"9:827:22065":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:5625:10248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5692:10282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"12:1534:8976":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11594:7930":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:1678:9795":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:52640:9219":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:50095:6445":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:10936:6486":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8101:7431":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:50848:10634":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7388:8805":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:6342:6793":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:11761:7956":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46937:6404":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5582:10219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10721:6914":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6241:8621":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:359:9260":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:50331:6457":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:9475:7186":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6284:6999":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:50085:6446":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8648:9290":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"12:1120:8974":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4179:9885":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10159:7735":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:21184:9104":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11734:7702":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:4354:9968":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:8625:9298":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"12:300:7235":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:8523:9289":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:12353:1456":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:50127:6458":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12008:8010":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7396:23055":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12278:8054":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12148:8029":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:5510:6968":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:2483:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:11298:9341":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:49448:7095":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:20335:11142":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:8666:6500":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:7467:6419":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:7783:9461":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:7092:2204":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:7214:10522":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2836:16469":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:2056:9060":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:53874:9234":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4659:10066":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:7055:10891":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:20078:36488":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:4321:11018":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:979:10892":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:3671:6689":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:7046:16450":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"12:861:8969":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:3402:8501":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:1938:2110":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12964:8271":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:13184:8328":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:11812:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:9382:11102":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:46633:9140":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:6430:10423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:7090:11140":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"12:777:6693":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:52954:9224":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:11183:6435":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"12:834:8966":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:562:7559":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:153:6681":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:954:6689":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"12:1044:22127":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:48243:2232":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:48704:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:50426:6404":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:48878:6498":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"22:966:6680":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"6:4665:10069":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13527:8439":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:9288:9431":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:7225:6806":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:5472:10168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:21846:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"9:111:7030":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:3854:8507":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"22:43:26883":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"6:7237:10528":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:46544:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:21038:11027":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:6996:6328":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:50019:7337":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:9791:7687":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:46522:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:50259:6454":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:7825:8858":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"0:113:1617":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"16:2509:8475":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:8752:6445":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4152:9862":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12630:8186":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:521:26863":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:219:6698":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2465:8473":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:3893:6700":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:50277:6455":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:6415:10419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:10374:7751":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"9:920:21975":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1714:9809":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:11174:6433":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:49838:7324":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:273:6700":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:12360:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8477:6452":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:9550:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4778:10118":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:46991:6409":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:1903:23156":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:1532:9693":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2752:8726":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6654:8685":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:6569:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:7120:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:5238:2223":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:46378:16222":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:11813:7963":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:11178:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:8414:9284":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:51891:9196":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:3010:22190":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2763:16460":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:10445:6908":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"2:49104:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4300:9940":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:49225:6495":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:50313:6456":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:8470:6459":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:2653:9274":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:5761:8564":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"18:491:7524":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"5:4621:656":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:4689:8523":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12874:8247":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"20:95:1832":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"16:5235:8533":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13148:8319":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8506:9287":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:7909:8867":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:9260:9429":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:7931:6486":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:11764:16311":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9722:6903":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:4496:9990":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:47630:6761":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:5510:10187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4224:9907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:0:1980":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:47208:7271":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:9274:9430":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:46626:8770":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10774:7560":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:47298:7291":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4621:10052":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6252:8622":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:4446:11036":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:47038:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:9430:9434":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:7905:9332":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12860:8246":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:6954:9320":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"14:0:1978":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:7872:8862":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6790:8703":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7267:8799":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:6524:10483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6538:10492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:0:1981":{"crate_id":17,"path":["object"],"kind":"module"},"16:5494:23045":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"12:2198:9595":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:4022:9296":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:54023:9239":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:50669:9170":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:567:9653":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11106:6928":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13279:8378":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:3110:7251":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:12084:10909":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:1931:7191":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:2651:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:3466:2113":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12033:8013":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:5834:10312":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:2474:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:6329:10391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:10394:7756":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"0:114:1622":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"2:9662:7322":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:52047:9203":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4185:9886":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:49137:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:50231:6460":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:9008:9428":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:20310:11152":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:10257:7209":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:2728:6311":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:49189:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:46858:6406":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13478:8424":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:4817:8527":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:8137:23106":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:46599:9138":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:11837:9101":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1562:9713":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7890:8864":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:4286:9933":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:10615:10785":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:8257:7114":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"21:228:1836":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"14:202:16257":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4274:9928":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:52459:9215":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9263:7177":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:2367:8469":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"14:221:8962":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:46962:6406":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:5657:9304":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:4519:8517":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4690:982":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:29402:11007":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:10973:7810":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:8510:6879":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11684:7946":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5605:10232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:1964:9059":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4096:9824":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:2150:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"9:649:21994":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:7786:2235":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:9304:7364":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7071:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:21349:9109":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:20516:11027":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:608:9676":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:4635:8521":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46480:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:47218:7273":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:6908:6328":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:8014:8770":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13382:8398":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:4055:6723":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:9671:7675":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3091:9275":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:5122:8531":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:51869:9195":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:6923:6718":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:4222:9088":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:8128:9343":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2251:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"9:977:9042":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:12301:7125":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10403:7778":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5523:10188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:2659:6306":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:4251:11012":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:8774:6899":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1887:18211":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:9542:6459":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:52316:9210":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4909:10402":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:3165:31311":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"20:256:1833":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"2:47237:7277":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:48252:16543":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:9700:7680":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:2777:11139":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:13327:8379":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4361:9970":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10332:23223":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:6735:8689":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"14:31:8955":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:6270:6998":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:20372:11146":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7309:8497":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12948:8268":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:8174:9346":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5525:6971":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5699:10283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:6818:11097":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:56964:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10833:6813":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:50213:6461":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:51739:9190":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"20:347:2125":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:12756:8228":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:51031:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:1887:7345":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:62:16828":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:2781:16462":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:6605:7307":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:1620:7249":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11982:9331":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:6521:6789":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:9477:7119":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:46425:7261":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:4297:8511":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:6311:10382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1395:7246":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:8772:9411":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:259:38210":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"17:487:7558":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:8701:6898":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"9:622:21993":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"5:3492:7245":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:50900:9179":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:1733:16497":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11070:6919":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13518:8435":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:5405:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:2894:22188":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:1091:8713":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:1699:6689":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:47409:7305":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:590:7529":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:9043:6763":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:51695:9188":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4575:10030":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2657:8481":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11853:7968":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:7910:9334":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:49401:7091":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:29663:34237":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:2477:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:9844:7692":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"12:2178:9591":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:1668:1065":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:8295:23111":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:7990:7103":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:46885:34246":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:614:38163":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:5018:11030":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11343:7877":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"12:822:10892":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:53420:9229":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:49438:9153":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:13506:8433":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:2322:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"12:646:7245":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:6375:10410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"12:632:7244":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8674:7349":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:887:7244":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:47615:7311":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1738:9818":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:12134:8027":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"9:709:9153":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:11128:10644":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7329:7007":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:996:8968":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:2480:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:1423:7242":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12748:8227":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:736:26861":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:4721:8524":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:10845:6908":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:9442:29235":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:7208:10521":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5780:7215":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12176:8035":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:7470:10895":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"12:119:6683":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:50828:10629":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11247:7848":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8991:7244":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:8722:9298":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:5129:6437":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4534:10010":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:8241:23109":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6376:23050":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9644:7674":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5793:6952":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:9627:7673":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8734:11037":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2918:2202":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:47346:7297":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:11893:7972":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9362:6882":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:48438:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:47606:6484":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:534:6950":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:47311:7292":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2228:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4329:9956":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:47260:7283":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:7079:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:50079:1800":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:12355:1458":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10546:23117":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:4317:11017":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:3484:6718":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:20780:11170":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:8849:9420":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:9366:11101":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:5877:7288":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:9697:6458":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:495:9610":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:4441:8516":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:48362:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:2389:8470":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:22476:7086":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:3602:7116":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12118:8026":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:10303:7338":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:1962:7194":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:9778:7686":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6146:8612":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5541:10198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:8475:23094":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:1357:7244":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:51940:9198":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:6567:8679":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:4213:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"0:37:1808":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"2:52140:9205":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:8111:9342":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:8921:16313":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:56581:11179":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:1826:7342":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6743:23052":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:3367:9084":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:8654:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:11785:35599":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"12:274:7232":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:6591:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:5731:16802":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:8569:7118":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"15:214:7020":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"9:800:9600":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:9493:7244":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9577:7671":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9350:7640":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:1611:6718":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10822:23120":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:53000:9225":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4379:9981":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:681:9266":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11576:7929":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:6137:6996":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:8182:7116":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:7788:2233":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:2871:37048":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:50717:6464":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:9681:7603":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4716:10096":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2974:10907":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11515:7917":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"22:669:6864":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:2579:6783":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:57016:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6472:8655":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:9223:23126":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:8939:11075":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:6572:10501":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:5016:11029":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"10:0:1975":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:900:7245":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:4259:11013":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6554:10498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:39426:6310":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:7997:10917":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:49122:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:3169:36538":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:4786:8526":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:20523:11148":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:12346:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:5189:11064":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10360:7747":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:4139:9852":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8685:11003":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12514:8093":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11873:7971":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:965:7242":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:7474:16449":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:7772:7559":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:10723:9092":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:5774:9312":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:7840:6810":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:21314:9107":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:4713:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:8822:38156":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"22:0:2159":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"1:11158:7115":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:5517:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:7131:9076":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4200:9893":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:56951:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:2911:2200":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:3197:9277":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:4849:8528":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"12:2184:9592":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:2320:8467":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:2411:8471":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:11189:6434":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:9585:6441":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9250:7653":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"0:0:1632":{"crate_id":0,"path":["idna"],"kind":"module"},"1:6054:7105":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:644:7525":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"22:386:6681":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"2:4019:16218":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:918:7246":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:5489:7279":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11528:7919":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9312:6328":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:2747:11138":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:36:6696":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12022:8012":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11368:7881":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:2907:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:4225:6725":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:2605:8479":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3863:6718":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2401:10959":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:8013:9341":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8118:7115":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:49889:7325":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:53672:9231":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:2865:37071":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:12087:8020":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:4394:6513":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:44:7026":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:1548:6723":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:13047:8289":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:2930:22189":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:931:7247":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:1203:8713":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:3130:16472":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11661:7941":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:11479:9429":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5876:10351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11133:9342":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:53750:9232":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:10702:30808":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:2486:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:8649:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:2670:6307":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"18:599:38164":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:2205:9070":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:2300:6938":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:8441:23116":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:52338:9211":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:21258:7080":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2341:8468":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:7929:8868":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13192:8329":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11787:7959":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:49917:7329":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:11718:7368":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:7243:10529":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:2438:16307":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:49898:7326":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"12:751:6718":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:5684:10281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:11620:6818":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"12:810:7248":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:48400:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:8941:7171":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:6097:6791":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:7044:38148":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:12359:1101":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:7043:9070":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:51992:9200":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"20:382:2128":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"17:11639:7940":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:2250:9271":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11436:7883":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13114:8311":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:50109:6459":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12361:8071":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:2383:10553":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:52506:9216":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:11302:9039":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:8609:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"12:98:9590":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:6079:6737":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:12884:8248":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:3304:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"20:355:2126":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:1615:6689":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:11939:7996":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:13214:8334":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:8796:6880":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11217:7844":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:2840:16470":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:564:6870":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:6147:6718":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:5203:6878":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:12354:1457":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10062:7202":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:11547:7924":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:1500:9680":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:1550:9704":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13354:8391":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:49660:7319":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:9422:7183":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:7266:10535":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:12356:1455":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:51909:9197":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4644:10059":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:20364:11027":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:554:9647":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:686:10878":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:46440:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:49907:7328":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:910:6328":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"12:393:7237":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:9283:7656":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:21326:34228":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:3355:16278":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:20116:34605":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11330:7873":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11356:7878":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9339:7179":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:3125:7204":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9831:7197":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:8212:23108":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46984:6408":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12980:8275":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:21453:9121":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:49128:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:5782:10314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:719:7547":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11341:9431":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:52794:9222":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:6742:6803":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1234:8970":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:7821:6808":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"13:0:1971":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:10790:7362":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:4094:7244":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:52029:9202":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:21780:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:4929:6731":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:3632:8504":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:54095:9245":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:6424:10422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:6660:6748":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:9021:7173":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13374:8397":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:507:9616":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:4413:8515":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:5133:6438":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:10608:7623":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:1114:8971":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:7093:8750":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:8664:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:73:1457":{"crate_id":2,"path":["core","u32"],"kind":"module"},"16:4662:8522":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11315:7867":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:48476:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:48742:7090":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:5447:8539":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7211:6960":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11174:7834":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4475:9988":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:1062:36604":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:50832:10630":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:6651:16445":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6704:7004":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:8166:9345":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:47024:6412":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:21439:9120":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:4726:10097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:4749:8525":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5815:23047":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4430:7353":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12198:8046":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4115:9834":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:3984:9086":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:52876:9223":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:11104:9451":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:48337:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:10997:7811":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5861:10340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:47321:7294":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:8526:6893":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:11548:10646":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4581:10033":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13059:8295":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"7:0:1502":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:5085:6700":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:8926:7075":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"12:1836:6328":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:8272:23110":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:48125:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:5695:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:2993:8498":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:7543:7016":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11951:7998":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:6028:9318":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:6059:38151":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:39377:9594":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:9458:7665":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10182:7736":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:9735:7323":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:1915:9083":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:12349:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:5184:22160":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:4025:6723":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:5534:10196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:50557:9168":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4635:10056":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:47128:9151":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:52192:9207":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:11961:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:7959:10875":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:6860:6792":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:4307:11016":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:11169:6297":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:47005:6411":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2727:8484":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5737:6946":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:9858:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:3067:10908":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:47246:7280":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:7220:10523":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:6800:7069":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:6418:6777":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:12816:6929":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:8596:6895":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10875:7786":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:507:7525":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:2085:10540":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:4327:8512":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:4385:8514":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11186:7835":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10476:23224":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:8599:2113":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:2535:8476":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:6409:10417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:7980:7104":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:628:10872":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:80:7155":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:8668:6501":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5460:8544":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12164:8033":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9712:6902":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:855:6706":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:4723:35384":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:49990:7334":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13492:8426":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:3084:7250":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2822:8733":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8483:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:9590:9326":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:4145:6510":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:4348:6512":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:1518:9688":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"}},"external_crates":{"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"unicode_bidi","html_root_url":null},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"22":{"name":"tinyvec","html_root_url":null},"23":{"name":"tinyvec_macros","html_root_url":null},"21":{"name":"unicode_normalization","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"}},"format_version":24}