{"root":"0:0:1622","crate_version":"0.3.0","includes_private":false,"index":{"0:115:1620":{"id":"0:115:1620","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:151:1601":{"id":"b:2:2528-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2662:217-0:151:1601":{"id":"a:2:2662:217-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2523-0:157:1599":{"id":"b:2:2523-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11427:1791":{"id":"2:11427:1791","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48136:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:2224-0:151:1601":{"id":"a:2:7735:2224-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:2224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:164:412":{"id":"0:164:412","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11433:60522":{"id":"2:11433:60522","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11429:60520":{"id":"2:11429:60520","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48136:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5083":{"id":"5:5083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:4994:1352","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5084:65383","5:5085:1923","5:5088:65384","5:5091:65385","5:5099:65386","5:5100:65387","5:5101:2127","5:5102:57839","5:5103:57840"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:7736:2223-0:166:1600":{"id":"a:2:7736:2223-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11505:64741":{"id":"2:11505:64741","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:166:1600":{"id":"b:2:2517-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11435:64730":{"id":"2:11435:64730","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12306:1352","crate::ops::Index":"2:2987:6785","str::slice_mut_unchecked":"2:11436:64731"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:684:6367":{"id":"5:684:6367","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:164:412"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:94:1892":{"id":"0:94:1892","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[555,4],"end":[558,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11460:1766":{"id":"2:11460:1766","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:12300:408","`None`":"2:48136:176","self::pattern":"2:11116:6286"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,16],"end":[509,20]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2674:108","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11440:7210":{"id":"2:11440:7210","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50086:6432","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91:1613":{"id":"0:91:1613","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[537,4],"end":[540,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2532:1426":{"id":"2:2532:1426","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:157:1599":{"id":"a:2:2676:225-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11491:1869":{"id":"2:11491:1869","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12300:408","str::matches":"2:11491:1869","self::pattern":"2:11116:6286","`DoubleEndedIterator`":"2:7079:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50314:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:180:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11447:60561":{"id":"2:11447:60561","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:6286"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[701,0],"end":[709,1]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:105:673"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2585-0:166:1600":{"id":"b:2:2585-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3370:6632","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2587:6514"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:2240:2062":{"id":"2:2240:2062","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5099:65386":{"id":"5:5099:65386","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:62702":{"id":"2:11443:62702","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11442:62720"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50393:6426","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:2188-0:166:1600":{"id":"a:2:2726:2188-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2726:2188-0:151:1601":{"id":"a:2:2726:2188-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2517-0:151:1601":{"id":"b:2:2517-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11438:60545":{"id":"2:11438:60545","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11437:60544"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11426:60523":{"id":"2:11426:60523","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12317:1448"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11464:1914":{"id":"2:11464:1914","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:12300:408","str::split_whitespace":"2:11442:62720","str::rsplit":"2:11470:60555","self::pattern":"2:11116:6286","`DoubleEndedIterator`":"2:7079:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50110:6445","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:93:1614":{"id":"0:93:1614","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[549,4],"end":[552,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11479:60557":{"id":"2:11479:60557","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11482:60559","self::pattern":"2:11116:6286","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50214:6447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:151:1601":{"id":"b:2:3321-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11538:64750":{"id":"2:11538:64750","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4467:64750"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50409:6394","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:157:1599":{"id":"b:2:2528-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11541:64751":{"id":"2:11541:64751","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4465:64751"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50427:6390","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:59":{"id":"0:180:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81:1921":{"id":"0:81:1921","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[448,4],"end":[474,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:166:1600":{"id":"b:2:2238-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2062"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:681-0:157:1599":{"id":"b:5:681-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:677:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:683:6366","5:684:6367","5:685:6368"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11494:64737":{"id":"2:11494:64737","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:12300:408","`DoubleEndedIterator`":"2:7079:120","str::matches":"2:11491:1869","self::pattern":"2:11116:6286"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50332:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11485:64735":{"id":"2:11485:64735","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5101:2127":{"id":"5:5101:2127","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,39],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Idna","name":"Idna","id":"0:151:1601","glob":false}},"2:11437:60544":{"id":"2:11437:60544","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11438:60545"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2517-0:157:1599":{"id":"b:2:2517-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2519:673"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:103:655":{"id":"0:103:655","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[647,4],"end":[698,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:62713":{"id":"2:11446:62713","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50402:6425","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:166:1600":{"id":"b:2:2241-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:57809"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:89:59":{"id":"0:89:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[520,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11423:60472":{"id":"2:11423:60472","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10684:6429"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2587:6514":{"id":"2:2587:6514","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3382:6631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5091:65385":{"id":"5:5091:65385","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2519:673":{"id":"2:2519:673","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:157:1599":{"id":"b:2:2513-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:1931"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11520:60562":{"id":"2:11520:60562","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11116:6286","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[519,0],"end":[533,1]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3321-0:166:1600":{"id":"b:2:3321-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7736:2223-0:151:1601":{"id":"a:2:7736:2223-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11482:60559":{"id":"2:11482:60559","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11479:60557","prim@char":"1:12300:408","self::pattern":"2:11116:6286"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50232:6446","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11420:64728":{"id":"2:11420:64728","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11418:64727"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:151:1601":{"id":"b:2:2513-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:1931"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5088:65384":{"id":"5:5088:65384","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11473:64733":{"id":"2:11473:64733","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:11464:1914","self::pattern":"2:11116:6286","prim@char":"1:12300:408","`DoubleEndedIterator`":"2:7079:120","str::rsplit_terminator":"2:11476:64734"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50160:6449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11476:64734":{"id":"2:11476:64734","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"2:11473:64733","self::pattern":"2:11116:6286","str::split":"2:11464:1914","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50178:6448","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11444:7954":{"id":"2:11444:7954","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50364:6438","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2726:2188-0:157:1599":{"id":"a:2:2726:2188-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2726:2188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2676:225-0:151:1601":{"id":"a:2:2676:225-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11514:64746":{"id":"2:11514:64746","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:6286"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2241-0:151:1601":{"id":"b:2:2241-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:57809"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11488:64736":{"id":"2:11488:64736","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11418:64727":{"id":"2:11418:64727","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:166:1600":{"id":"a:2:2662:217-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11424:64729":{"id":"2:11424:64729","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:789":{"id":"2:11415:789","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12300:408"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11500:64739":{"id":"2:11500:64739","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7079:120","prim@char":"1:12300:408","str::match_indices":"2:11497:64738","self::pattern":"2:11116:6286"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50278:6441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[646,0],"end":[699,1]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8596:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11431:60521":{"id":"2:11431:60521","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9298:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:62720":{"id":"2:11442:62720","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11443:62702"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50384:6428","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1751":{"id":"0:15:1751","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[45,0],"end":[47,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11497:64738":{"id":"2:11497:64738","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"2:11500:64739","prim@char":"1:12300:408","self::pattern":"2:11116:6286","`DoubleEndedIterator`":"2:7079:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50260:6440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11526:64748":{"id":"2:11526:64748","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:6286"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11510:64744":{"id":"2:11510:64744","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11503:64740":{"id":"2:11503:64740","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7736:2223-0:157:1599":{"id":"a:2:7736:2223-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7736:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11416:1898":{"id":"2:11416:1898","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11523:64747":{"id":"2:11523:64747","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11116:6286","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:64732":{"id":"2:11445:64732","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50374:6439","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11450:1893":{"id":"2:11450:1893","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11116:6286","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:1797":{"id":"0:37:1797","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[216,0],"end":[219,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11511:64745":{"id":"2:11511:64745","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11116:6286","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11141:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:1772":{"id":"2:11441:1772","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50096:6431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11532:7246":{"id":"2:11532:7246","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11077:6436","FromStr::Err":"2:11078:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11077:6436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11077:6436","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11414":{"id":"2:11414","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10679:1352","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11415:789","2:11416:1898","2:11417:64726","2:11418:64727","2:11420:64728","2:11423:60472","2:11424:64729","2:11425:309","2:11426:60523","2:11427:1791","2:11429:60520","2:11431:60521","2:11433:60522","2:11435:64730","2:11436:64731","2:11437:60544","2:11438:60545","2:11439:1753","2:11440:7210","2:11441:1772","2:11442:62720","2:11443:62702","2:11444:7954","2:11445:64732","2:11446:62713","2:11447:60561","2:11450:1893","2:11453:1894","2:11456:6345","2:11460:1766","2:11464:1914","2:11467:60553","2:11470:60555","2:11473:64733","2:11476:64734","2:11479:60557","2:11482:60559","2:11485:64735","2:11488:64736","2:11491:1869","2:11494:64737","2:11497:64738","2:11500:64739","2:11503:64740","2:11505:64741","2:11507:64742","2:11509:64743","2:11510:64744","2:11511:64745","2:11514:64746","2:11517:1916","2:11520:60562","2:11523:64747","2:11526:64748","2:11529:64749","2:11532:7246","2:11534:1767","2:11535:57841","2:11536:57842","2:11537:57843","2:11538:64750","2:11540:6642","2:11541:64751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:95:1862":{"id":"0:95:1862","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[561,4],"end":[564,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2662:217-0:157:1599":{"id":"a:2:2662:217-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2662:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2527:1427":{"id":"2:2527:1427","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17:529":{"id":"0:17:529","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6400:240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5103:57840":{"id":"5:5103:57840","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11537:57843"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5354:1406":{"id":"5:5354:1406","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:915":{"id":"0:80:915","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[440,4],"end":[446,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["config",{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,31],"end":[42,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Errors","name":"Errors","id":"0:166:1600","glob":false}},"b:2:2241-0:157:1599":{"id":"b:2:2241-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2243:57809"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11456:6345":{"id":"2:11456:6345","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11116:6286","`None`":"2:48136:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[439,0],"end":[507,1]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:915","0:81:1921","0:82:1609","0:86:1621"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:39:595":{"id":"0:39:595","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[225,0],"end":[230,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:1601":{"id":"0:151:1601","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[433,0],"end":[437,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:79","a:2:7735:2224-0:151:1601","a:2:2676:225-0:151:1601","a:2:2662:217-0:151:1601","a:2:2726:2188-0:151:1601","a:2:7736:2223-0:151:1601","b:2:2523-0:151:1601","b:2:2238-0:151:1601","b:2:2517-0:151:1601","b:2:2513-0:151:1601","b:2:2241-0:151:1601","b:2:2528-0:151:1601","b:2:3321-0:151:1601","0:155"]}},"0:3:1597":{"id":"0:3:1597","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[315,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:15:1751","0:17:529","0:37:1797","0:39:595"],"is_stripped":false}},"b:2:2523-0:166:1600":{"id":"b:2:2523-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2531:127":{"id":"2:2531:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39378:6628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"5:5102:57839":{"id":"5:5102:57839","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11536:57842"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2243:57809":{"id":"2:2243:57809","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2528-0:166:1600":{"id":"b:2:2528-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2531:127","2:2532:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5084:65383":{"id":"5:5084:65383","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6718:6753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2194","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6718:6753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1621":{"id":"0:98:1621","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[574,4],"end":[579,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5100:65387":{"id":"5:5100:65387","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6967:221","`Box<str>`":"5:286:2194"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6718:6753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:655":{"id":"0:108:655","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[714,4],"end":[716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8556:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8545:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113:1607":{"id":"0:113:1607","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:673":{"id":"0:105:673","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[702,4],"end":[708,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11536:57842":{"id":"2:11536:57842","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:309":{"id":"2:11425:309","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12317:1448","str::as_mut_ptr":"2:11426:60523"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11436:64731":{"id":"2:11436:64731","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12306:1352","str::slice_unchecked":"2:11435:64730","crate::ops::IndexMut":"2:2991:6786"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11467:60553":{"id":"2:11467:60553","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11116:6286","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10940:6427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[713,0],"end":[717,1]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:655"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:114:1612":{"id":"0:114:1612","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[57,0],"end":[62,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3323:1440":{"id":"2:3323:1440","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46617:6633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11417:64726":{"id":"2:11417:64726","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:59":{"id":"0:156:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11537:57843":{"id":"2:11537:57843","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2676:225-0:166:1600":{"id":"a:2:2676:225-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2676:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11529:64749":{"id":"2:11529:64749","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11116:6286","prim@char":"1:12300:408"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:2224-0:157:1599":{"id":"a:2:7735:2224-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:2224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11470:60555":{"id":"2:11470:60555","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:120","prim@char":"1:12300:408","self::pattern":"2:11116:6286","str::split":"2:11464:1914"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50128:6444","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,23],"end":[42,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Config","name":"Config","id":"0:157:1599","glob":false}},"0:92:1858":{"id":"0:92:1858","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3321-0:157:1599":{"id":"b:2:3321-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3319:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3323:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2238-0:157:1599":{"id":"b:2:2238-0:157:1599","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2062"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11540:6642":{"id":"2:11540:6642","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4468:6642"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50418:6392","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11453:1894":{"id":"2:11453:1894","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11116:6286","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11136:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11439:1753":{"id":"2:11439:1753","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50080:1789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1622":{"id":"0:0:1622","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[74,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3:1597","0:110","0:111","0:112","0:113:1607","0:114:1612","0:115:1620"],"is_stripped":false}},"2:11517:1916":{"id":"2:11517:1916","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11116:6286","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48134:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7735:2224-0:166:1600":{"id":"a:2:7735:2224-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7735:2224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:86:1621":{"id":"0:86:1621","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[500,4],"end":[506,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11535:57841":{"id":"2:11535:57841","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2526:127":{"id":"2:2526:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:82:1609":{"id":"0:82:1609","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[478,4],"end":[496,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[535,0],"end":[580,1]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1599","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:91:1613","0:92:1858","0:93:1614","0:94:1892","0:95:1862","0:96:1609","0:98:1621"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[711,0],"end":[711,27]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","cause","provide","source","description"],"trait":{"name":"Error","id":"2:2578:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11534:1767":{"id":"2:11534:1767","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5352-0:166:1600":{"id":"b:5:5352-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8601:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5350:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5354:1406"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:157:1599":{"id":"0:157:1599","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[510,0],"end":[516,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:90","a:2:7735:2224-0:157:1599","a:2:2676:225-0:157:1599","a:2:2662:217-0:157:1599","a:2:2726:2188-0:157:1599","a:2:7736:2223-0:157:1599","b:2:2523-0:157:1599","b:2:2238-0:157:1599","b:2:2517-0:157:1599","b:2:2513-0:157:1599","b:2:2241-0:157:1599","b:2:2528-0:157:1599","b:2:3321-0:157:1599","b:5:681-0:157:1599","0:163","0:165","0:88"]}},"5:683:6366":{"id":"5:683:6366","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:166:1600":{"id":"0:166:1600","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[600,0],"end":[613,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:7735:2224-0:166:1600","a:2:2676:225-0:166:1600","a:2:2662:217-0:166:1600","a:2:2726:2188-0:166:1600","a:2:7736:2223-0:166:1600","b:2:2523-0:166:1600","b:2:2238-0:166:1600","b:2:2517-0:166:1600","b:2:2513-0:166:1600","b:2:2241-0:166:1600","b:2:2528-0:166:1600","b:2:2585-0:166:1600","b:2:3321-0:166:1600","b:5:5352-0:166:1600","0:179","0:102","0:104","0:106","0:107"]}},"2:2516:1931":{"id":"2:2516:1931","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2490:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2513-0:166:1600":{"id":"b:2:2513-0:166:1600","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2490:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2487:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2516:1931"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5085:1923":{"id":"5:5085:1923","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6967:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11121:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2523-0:151:1601":{"id":"b:2:2523-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2497:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2493:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2526:127","2:2527:1427"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11509:64743":{"id":"2:11509:64743","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2238-0:151:1601":{"id":"b:2:2238-0:151:1601","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2669:2187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2240:2062"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:685:6368":{"id":"5:685:6368","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":{"restricted":{"parent":"0:46:1598","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2564:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1601","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:96:1609":{"id":"0:96:1609","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[567,4],"end":[571,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48278:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6967:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1600","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11507:64742":{"id":"2:11507:64742","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"2:46873:6400":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6415:11460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2578:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:48561:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:2321:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:7237:11569":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6277:11404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:6516:6585":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2817:6654":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:4439:655":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:2253:7061":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:11684:9429":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:9501:8383":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:38221:6635":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:52504:7309":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:3561:8662":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7319:8193":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8147:6869":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1078:7689":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:9328:8489":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:58387:10398":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:5525:7648":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:52288:7343":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"12:2053:6937":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:52336:7328":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:12300:408":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11873:9453":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:0:485":{"crate_id":2,"path":["core"],"kind":"module"},"2:21296:8818":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:4246:6699":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:661:2101":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5510:11230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:4921:9979":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:3542:6684":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:8429:6431":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:3125:8900":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:8871:8881":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:12317:1448":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:2670:6295":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:10476:51210":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:8749:10327":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13059:9776":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:5614:8037":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13168:9806":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10062:8899":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:20372:7018":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:50633:7193":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:4217:9958":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:1722:10857":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12164:9515":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:4042:8666":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:1500:10725":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4506:11040":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10108:8415":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:2030:64225":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:49908:6767":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4268:6702":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4706:11133":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:8131:7082":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:4906:11445":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:6075:6313":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:2903:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:4403:7161":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11106:8794":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:266:2159":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"1:11903:8845":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"12:738:6928":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:25292:7237":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:47209:6590":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:50010:6773":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7890:8135":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10949:9280":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:56677:7475":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:6538:11533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:47169:6584":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9458:8348":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11373:8718":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:50833:7461":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"15:214:7931":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8694:7162":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:9947:51138":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8379:6800":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12349:9546":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:0:282":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:8422:6611":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:8596:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"18:507:9094":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9824:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:8645:7105":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:4014:7102":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:20378:7020":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"12:1852:6685":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12781:9720":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:11124:7060":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:54016:7325":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:3363:6771":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:575:10703":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:20522:6647":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:12320:1447":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:8272:8480":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:6302:7620":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:7001:6600":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:6572:11542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:636:9105":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:9347:6913":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:50409:6394":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:6781:8139":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:12314:721":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:10684:6429":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:5660:6788":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11436:9367":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3160:7090":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:11390:8720":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:0:1971":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11186:9319":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:46340:6581":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"12:320:7910":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2383:7064":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"21:313:2173":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"5:1415:6930":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:4003:7010":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"12:810:6929":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:2681:6296":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:47385:6611":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:1826:8941":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:7435:8160":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9601:8374":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:21951:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12307:9539":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:11732:63785":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:12318:1445":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:1695:10847":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:10250:6769":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:6690:8127":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"12:1845:6684":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:51067:7468":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:521:8538":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4294:10982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:9298:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:4441:9965":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11661:9425":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10420:8509":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"21:0:1624":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"2:52633:10377":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:50086:6432":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:9644:8367":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4683:11123":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"12:2178:10639":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:5350:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:50861:7535":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:9532:6427":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12909:9739":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:4749:9974":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:2535:8290":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"12:1085:7906":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:9165:65540":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13382:9879":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6241:8175":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:1828:8942":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12874:9729":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4185:10930":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:2261:8017":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"8:0:1962":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:719:14415":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:12306:1352":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:7388:8143":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:47630:6879":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:8881:65538":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:5498:11226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:7805:8714":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:6146:8164":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"22:1122:7269":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"5:6780:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:46617:6633":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6161:8172":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11774:9440":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8590:6646":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:21720:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:4433:7164":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:6718:6753":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:11368:9365":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:9637:8944":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:5672:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:49113:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9658:8895":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:7737:2222":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:21347:10332":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:52555:10375":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:7372:8330":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:20084:63619":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:0:1969":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:2282:7993":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"19:0:999":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:29627:6539":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:8814:6957":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"12:1840:6683":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13492:9907":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5587:11263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13557:9925":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3473:6869":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12237:9531":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:1825:6821":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:8741:11432":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:21885:7052":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:534:8045":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:9401:9207":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10385:8451":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5472:11211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:52458:7305":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:2800:6747":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13404:9884":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:5596:8036":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"0:39:595":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"17:9293:8492":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:11784:10329":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:6496:8181":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:7896:6472":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"18:690:8531":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10310:8906":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:48185:1790":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12176:9517":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11708:9430":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:9791:9211":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:5709:6791":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:6874:6944":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12087:9502":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:2300:8313":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:5839:8049":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:11070:6827":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7117:7983":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12955:9751":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8370:6880":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:21137:7485":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:4312:6704":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:4689:9972":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:50427:6390":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:6316:8702":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4565:11067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6975:11549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:1227:6938":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11536:9405":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:50080:1789":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:7156:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:6444:8672":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:7300:8946":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:7429:7000":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4804:11178":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:12313:720":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:9577:8376":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7309:8192":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:481:8539":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:12211:9529":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9371:8886":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:4849:9977":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"14:31:10232":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10520:9266":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:4437:11029":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:7909:8137":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:12142:8724":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:2749:8295":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5625:11291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:49650:10366":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:1580:10768":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:54092:7310":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:4748:7648":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:501:10658":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:2669:2187":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:6719:8319":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:2763:6730":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"12:1029:6939":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13393:9883":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:4417:11027":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12934:9747":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:3271:6872":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:12321:1444":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12836:9724":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"12:1534:7918":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1654:10823":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6359:8178":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13572:9926":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:4385:9963":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7249:7988":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:48321:6682":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:12299:912":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:4262:9959":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:20329:6647":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:678:10400":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:48447:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:2894:8304":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"23:0:2149":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"2:4200:7395":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5523:11231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:50068:6435":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1525:10735":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:153:7990":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:50384:6428":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4152:10906":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:954:6684":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"15:175:7926":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:3168:6582":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7497:8125":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:8217:6986":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11576:9413":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"12:1866:6687":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:52860:7341":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:242:9109":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"9:0:1963":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:9857:8423":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6070:8061":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:20938:7019":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:9609:6779":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:4191:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:3594:6837":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:1387:6927":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13126:9795":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:50332:6443":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:29649:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:10651:6791":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:53846:7322":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:50738:6451":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:6544:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5720:11339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:2676:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:2444:6647":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12265:9535":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:50705:7197":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:9183:8888":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:53908:7342":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:6727:6313":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:6733:7675":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"20:368:2116":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:6886:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4545:9967":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8577:7158":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"14:7:10232":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4191:10932":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6210:8174":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10245:8903":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8071:7058":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:48599:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3086:6881":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:48337:6313":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4280:10974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9395:7048":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:3566:9951":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:50606:7192":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:47247:8928":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:1105:6938":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6509:11517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:4302:6703":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:50232:6446":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:20253:7389":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"15:193:7927":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6554:11539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:7288:8190":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8083:7060":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:6472:7924":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13100:9785":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:49965:6586":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:52125:7304":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:8545:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"22:636:8564":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"1:990:6934":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10233:9254":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:47400:6612":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:2050:7690":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:21320:7248":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:51791:10370":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:135:43380":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:9531:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:1626:6686":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6735:8142":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:9118:65543":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9239:6795":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:8160:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"20:95:1821":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"21:302:2172":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"17:1931:8369":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:9071:65536":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:50128:6444":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6034:8170":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"22:470:8559":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:8687:6646":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13413:9886":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:5841:11367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:2825:8297":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:21372:62924":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10670:8478":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:9464:6771":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:10670:7591":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:2847:6673":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4398:11026":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:54267:10390":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10506:9263":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10796:8472":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:8056:7998":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:113:8877":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5510:8031":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10403:8353":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"18:707:6421":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:8615:6487":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:20370:6647":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:967:8891":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11264:10425":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:8442:6438":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:2662:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:9261:6682":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:10654:7589":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:20124:63657":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:5416:6683":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12860:9728":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4102:10869":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:21459:7503":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:1938:2099":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4635:11099":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"12:659:6313":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:50374:6439":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4427:11028":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"12:632:6682":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7872:8136":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:3908:6846":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"12:0:1966":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"10:0:1964":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:12148:9511":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6200:8173":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:247:9110":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:46633:10352":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13478:9905":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4329:11000":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:5624:64053":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:9061:8385":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:2839:6669":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10583:8355":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:52088:7319":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:4719:773":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:2932:2190":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7226:11565":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:11826:7103":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:5664:8039":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4761:11153":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:996:6935":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13527:9920":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:9930:9213":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:8391:6855":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:8611:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:5793:8047":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:1608:10787":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:12304:307":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8123:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9339:8490":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:6921:7523":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:21409:62920":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:3689:9954":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:49131:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:53658:7318":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5733:11343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4239:10957":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:1370:6313":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5699:11326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:353:7024":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7298:8191":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"20:355:2115":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"2:20503:19619":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:10875:8418":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:49669:6756":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:495:10655":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:1738:10862":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:4817:9976":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:10434:8907":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:681:8530":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9250:9202":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:20101:63662":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11343:9361":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:5394:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:4606:9969":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:49928:6766":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:887:6682":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:9681:9154":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:1620:6685":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:4126:6496":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:5861:11381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:1615:6684":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:20498:6647":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:5888:8672":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"12:1836:6313":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"12:387:8916":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:782:7673":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:6479:11500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"14:165:49249":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:11969:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:4659:11109":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"0:37:1797":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"17:9433:9208":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:10445:8475":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:7736:2223":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"12:60:8912":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"12:1003:6938":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3236:7360":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8946:6970":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"12:98:7908":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:5880:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2713:6298":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:21819:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:21852:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:4672:14417":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:50490:7183":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:2739:11581":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:3347:6879":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:10445:8952":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12008:9492":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11134:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:2827:6663":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:12271:14416":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:13594:9932":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5646:6787":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:2557:8291":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:592:10711":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:2805:6656":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:646:43715":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:6640:10412":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:6681:7141":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:21280:8812":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:52005:10372":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12797:9723":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:8613:6486":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:9384:8831":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:6809:6313":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:54139:10382":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:660:8528":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11356:9362":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9225:6794":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:11921:11668":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:50853:7457":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:7955:6941":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:73:1446":{"crate_id":2,"path":["core","u32"],"kind":"module"},"17:9263:8889":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:48194:6682":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:48637:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:22050:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"21:198:2174":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"1:4894:6702":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5534:11239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4346:11007":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:8603:6482":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:47229:6592":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:3147:7517":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6352:11450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:9738:8441":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:12850:9727":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:53160:7306":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:2290:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8650:7106":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:11485:9392":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"12:762:6684":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:4393:408":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:21984:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:12322:9543":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:11533:6917":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"9:800:10645":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:54130:10381":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11787:9441":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:80:8873":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:2981:6687":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:51105:6820":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:12310:629":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:9873:8897":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:29587:6537":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:6838:7098":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"20:256:1822":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"1:910:6313":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:7102:1794":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:2904:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11247:9332":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:8819:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:4144:9957":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:0:1970":{"crate_id":17,"path":["object"],"kind":"module"},"6:4496:11033":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4534:11053":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12337:8475":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"12:777:7896":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6186:8120":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:8981:8884":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:10495:6955":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:6709:6950":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13536:9922":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:7511:7999":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:7059:2220":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:4585:7120":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:3911:6682":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13031:9768":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:29721:7513":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:5582:11262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:12312:723":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:9836:8716":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:51987:7339":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:4357:9962":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:5380:6595":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:9430:10493":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"20:314:65557":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"16:7825:8196":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:5878:8050":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:10866:7449":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:7748:10512":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"9:863:7741":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:5494:8028":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:11077:6436":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:8596:8771":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:8526:8454":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:20069:63619":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:5996:8168":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7343:8128":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:9488:8372":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:567:10698":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:11268:6954":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:9751:6778":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:54214:10387":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2833:6666":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6409:11458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:11759:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:51014:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:57112:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10455:8510":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:538:8543":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:600:10716":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:5894:6908":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4475:11032":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10546:50950":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:50393:6426":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"12:393:8917":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4559:11065":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"0:113:1607":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"17:11528:9403":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:4:983":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:10497:51211":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:50096:6431":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:49410:6652":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7737:9113":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"22:752:8566":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:4838:7006":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:2657:8302":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:49978:6754":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6877:7977":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6376:8179":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:46501:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:2917:6858":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:51032:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:46441:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11445:6794":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:10075:9245":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:50110:6445":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:9475:8373":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:8241:8477":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:9464:58252":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:11384:8719":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:58408:10399":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:7038:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:1811:597":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:5826:6799":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:52972:7329":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:9389:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11034:9308":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2367:8288":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6329:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:1751:11584":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4210:7005":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9764:9210":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:8139:6867":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:11698:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:10581:6803":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10721:8780":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:2255:7694":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:2477:7693":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:6862:6690":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"9:111:7799":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:4115:10878":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:8329:7434":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:4574:9968":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10774:8351":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:49447:6967":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:1359:6771":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:4027:241":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8763:6826":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:9288:6647":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:11457:6795":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7603:8145":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:50178:6448":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:9437:8834":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4139:10896":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:20529:7302":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8488:6835":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8471:6834":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:7289:11579":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:50837:7460":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:2320:7994":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:48346:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:50364:6438":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"16:5203:8766":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:6043:7132":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4200:10937":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:8368:8352":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7237:7987":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8330:6882":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:10829:7448":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:12298:366":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:9820:8496":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:7214:11563":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4690:973":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:11271:9334":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3199:7361":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:4059:7392":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9274:9203":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"13:220:8811":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"12:2198:10642":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10894:8417":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:47178:6587":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4354:11012":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:1114:6939":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:6998:11560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:47299:6604":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"20:347:2114":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:11547:9408":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:9671:8408":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:2578:6866":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:7243:11570":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11640:10415":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11137:9312":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:11496:6923":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:7357:8141":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:47055:7523":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3968:7369":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11951:9480":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:4778:11161":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:47118:8677":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:1760:7558":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11289:58228":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:47024:6398":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11125:9309":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:7557:8123":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:8510:8767":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:29827:7514":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:49839:7446":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:0:1961":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"22:534:8560":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"12:2069:6938":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5568:11261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13506:9914":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:7939:14413":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:3422:6801":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:4519:9966":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6654:8185":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:9515:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:53310:7330":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:46937:6390":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:727:8534":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46626:8000":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:13158:9803":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:420:8062":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:50402:6425":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:7150:11841":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:3377:6846":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:6750:7676":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"9:676:7829":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:13436:9899":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:6524:11524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:2842:8057":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:6978:7642":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:6610:7003":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:8609:6485":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"12:1859:6686":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:5823:6797":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:8055:8349":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8796:2213":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:8705:7115":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:3184:7290":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"11:36:10644":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2490:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:49991:6772":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:6921:10412":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"12:2184:10640":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:581:10706":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:766:8537":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:10159:9247":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:2588:8689":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:13340:9866":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:9213:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:1643:10815":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11174:9318":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:48261:42903":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:4297:9960":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4698:11128":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:11655:10416":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:11164:60432":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:48219:2220":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:1707:7116":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:7166:7985":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1562:10758":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:21445:7554":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:6829:8324":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:507:10661":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:7860:60027":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:2674:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:10756:6792":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:50857:7458":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:5613:6846":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2389:7991":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:47261:6594":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1678:10840":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:8666:8773":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:20341:7390":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:11927:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:6079:7140":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:5009:6714":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:5348:10409":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:8212:8473":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:9700:8437":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:47364:6609":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:545:10686":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:8941:8883":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:8713:7104":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:7005:6599":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7469:8129":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5780:8046":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5541:8033":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:9555:6923":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:5541:11241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:50829:7459":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:6788:7639":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6269:11399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:7396:8195":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:1091:6937":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8962:6972":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:49665:7593":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:50670:7194":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10822:50951":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"15:0:1968":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:49176:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:8110:50943":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:53516:7350":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:9370:7137":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10845:8475":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:2991:6786":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:57060:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:1120:7907":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:20786:19637":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:21393:62927":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:0:1965":{"crate_id":11,"path":["adler"],"kind":"module"},"18:590:9095":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11682:8948":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"9:709:6967":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:62:43313":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:11277:6793":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:21471:7502":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:9553:8385":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:950:8662":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:54054:7345":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:286:2194":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:4627:6846":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11054:8781":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:52656:10378":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:1123:6940":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9193:65544":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:4657:7121":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:755:8536":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:2726:2188":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:11606:9416":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:1611:6683":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:5815:8048":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:3249:8424":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:1349:6682":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4361:11014":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:4317:7401":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5447:8025":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:2257:6854":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46545:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:8546:2102":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"13:0:1960":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:11130:6421":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:54306:10391":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13141:9799":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:6322:11428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:8631:8772":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"9:592:7782":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:47219:6591":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:228:1825":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"1:8719:7124":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:5480:11213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11477:7535":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:21355:10333":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4611:11092":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:8165:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:4086:7393":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5605:11275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10854:8435":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:6409:8709":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12617:9661":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:3404:6718":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13231:9822":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"12:2205:6690":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4527:11052":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:3616:6313":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"12:1628:8660":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10283:8905":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:11954:7935":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:5457:6596":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"9:188:7807":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:6815:6313":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:4653:11108":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"22:449:8653":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"20:91:2125":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"5:6742:6683":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:3230:6875":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:6496:6907":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:8911:65542":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:8833:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:11853:9450":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:50541:7190":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10121:8416":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:8093:6712":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:3953:6893":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:49250:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11800:9443":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:1686:10841":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:6759:6878":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11330:9357":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:6937:7681":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:52036:7327":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:4262:6701":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3479:6807":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9805:8495":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:48202:6771":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:3174:7276":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:10889:7450":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:12303:1017":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:8605:6483":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:50000:6775":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:5595:11268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:20419:7296":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:944:6683":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:1714:10853":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10394:8452":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11144:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:48880:6482":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:5558:8034":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:8561:8434":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"9:956:7739":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:513:10663":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8956:6682":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:47043:7522":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:487:8920":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:52736:7349":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:3314:6862":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:6758:64133":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:10905:7451":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2993:8300":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:48210:6313":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:9712:8775":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:562:9113":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:1532:10738":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12225:9530":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:3015:6688":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:47415:6601":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:652:9094":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:8774:8350":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:50418:6392":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6676:8126":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:9539:8370":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10139:8385":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:3154:7088":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:12316:718":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:7567:8148":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:8951:65545":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:853:7674":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:5169:6643":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:9283:6909":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:47349:6608":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4716:11139":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:47601:8933":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6865:8326":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:9737:6446":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:2916:8412":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:12322:767":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"18:564:8544":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"7:0:1491":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:11342:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:6907:7680":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:20316:7367":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13024:9767":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12884:9730":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:11836:63783":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"16:6017:8169":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4598:11087":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:2955:6686":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"12:2080:6939":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10374:8450":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11748:9437":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:4530:6386":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:49164:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:1872:6688":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:3457:9122":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:50695:7196":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6704:8140":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:12033:9495":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2780:6738":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:1864:8943":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6842:10044":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:10973:9294":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:2739:6300":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:54229:10388":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11594:9414":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:6393:7470":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"12:353:7909":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:2399:7069":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:5013:6723":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:5628:8038":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12948:9749":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:4286:10977":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:3470:62291":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:11121:6419":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"12:1044:7904":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:54150:10383":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:8701:8774":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"20:326:9085":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7483:8130":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:48523:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:47374:6610":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6619:8184":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:1889:8945":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:11995:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:4346:6303":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12118:9508":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"0:3:1597":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:11514:11667":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:8737:6824":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:47649:8937":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:8601:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:2487:8289":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:7192:8711":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:2411:8307":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46858:6392":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:6002:8662":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12485:9555":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:50512:7184":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:5433:8024":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1060:7688":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46962:6392":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10321:8507":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:5525:8032":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:624:65546":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:6109:8016":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:6563:7233":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:53096:7321":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13327:9860":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:719:8533":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:12301:1464":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:2771:8296":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:39418:6630":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:3157:230":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6790:8187":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:1608:6313":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11617:9417":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:7945:6693":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:13580:9929":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:11089:11663":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:4300:10984":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4505:7112":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:3402:9950":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12674:9698":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8505:6836":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:8137:50947":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:7279:11577":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:8339:50949":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:52480:7308":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:47624:8935":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:7978:10425":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:222:9081":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"2:21:665":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:48873:6483":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:9031:65537":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9844:8499":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:8162:8421":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:0:794":{"crate_id":6,"path":["libc"],"kind":"module"},"1:7982:7697":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:47332:6607":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:8699:7165":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"12:1518:7917":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:12291:9537":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:11136:6420":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:2493:234":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:51935:7347":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:2154:577":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"9:505:7731":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:50684:7195":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:7735:2224":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:1446:7686":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6517:7923":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5737:8043":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10642:8481":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:5956:6683":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2768:6732":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:2672:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:9571:6768":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:3269:6871":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:386:9111":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:47005:6397":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:8613:6895":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:11847:7110":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:47128:10361":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:586:10708":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:8607:6484":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:48713:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13354:9872":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5472:8027":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:51024:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2341:8306":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"12:1065:7905":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10708:8474":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:1701:10850":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:7539:60161":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:973:6932":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:7220:11564":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12739:9708":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:4635:9970":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4413:9964":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:54165:10384":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:9446:8893":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:6293:11416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:2812:6658":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:1396:6928":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"12:725:6927":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:50314:6442":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12278:9536":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:11763:6898":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"14:221:10239":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:10997:9295":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:7057:7017":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:7841:6419":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"12:1832:6682":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:3382:6631":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:21753:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:12311:630":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:5763:6793":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:11813:9445":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:13221:9817":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:51965:7335":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:515:8541":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:5235:9981":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:560:10695":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:22083:7489":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:11094:11665":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:46599:7291":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:4441:7166":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:9778:8440":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5184:49322":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:5191:7619":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"20:248:127":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"16:5703:8040":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8448:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11639:9424":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:10863:6871":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:4904:8662":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:9021:8885":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:46885:7264":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:1771:8375":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7847:8197":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8904:6969":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:7659:8117":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:7433:7002":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:48485:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"0:15:1751":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"2:12050:6752":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:9302:6910":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:7962:15418":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:9283:9204":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10088:9246":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:6782:7138":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12046:9497":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:554:10692":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2758:6691":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:52434:7323":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:36:7614":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11154:6800":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:5064:6724":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"12:822:6933":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"0:17:529":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"17:9631:8368":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:6441:8835":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:5741:11345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:46685:7269":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:2487:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:52602:10376":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4768:11156":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"3:0:432":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11670:10418":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12073:9499":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:6463:8180":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:2747:64140":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:900:6771":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7942:8199":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"12:669:6930":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:48751:7527":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5684:11324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:8599:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:49939:6755":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:1405:6929":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5554:11250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8106:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:9066:8687":{"crate_id":2,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"9:33:7832":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:7135:7984":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:11938:7470":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13192:9810":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:1636:10811":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:1595:10780":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:54110:10379":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:20531:7296":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10270:9255":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:2612:6859":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5504:11229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13374:9878":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:6819:6951":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:2793:8298":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:11786:7102":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4551:11061":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:7637:8134":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:50825:7456":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:46523:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:52412:7320":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:49465:8826":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:49426:6651":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:271:8662":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4335:11003":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:1212:6939":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:11141:6418":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12361:9553":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4379:11025":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11087:8787":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:5505:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"21:145:1824":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:10257:8904":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:1021:8493":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:4693:62991":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"22:948:8569":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"6:4605:11089":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:8475:8362":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:7255:11572":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:10799:8717":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:22482:7223":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12514:9575":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13518:9916":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:12134:9509":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:54119:10380":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:21786:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:50160:6449":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6052:8171":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:1600:10782":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:8418:8420":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2327:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5692:11325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:14:2079":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:4017:7103":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9155:8887":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:9440:6682":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"14:187:49255":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4206:10939":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:11469:60429":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11315:9351":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"14:215:10237":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:5845:6598":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5713:11337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:47615:6470":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7929:8198":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:931:6928":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:6852:7099":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:2631:8303":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9831:8498":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11288:9342":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5749:11347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:57086:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:699:8532":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11259:9333":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12980:9756":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:5011:6721":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:49890:6764":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10322:7117":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5219:8767":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:52814:7337":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:2652:6868":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:5887:6907":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:9831:7058":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:7051:2193":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:5411:8023":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6816:8323":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10207:9250":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5727:11340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:2509:8301":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7278:8189":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13459:9900":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:52890:7344":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"12:646:6771":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:8990:8684":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:48329:6771":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:12305:1322":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:49435:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:9080:8688":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:5695:6790":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:8324:7433":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:9574:6924":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"22:669:8565":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"2:48270:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:48134:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"22:879:8568":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"6:4726:11140":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11947:7935":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:3370:6632":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:11734:9218":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:46984:6394":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:54191:10386":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4096:10868":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"22:966:8570":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"2:47200:6589":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:39378:6628":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:9489:6445":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"12:815:6932":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:7044:6684":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:6217:6907":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:598:7009":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:6150:8662":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:21438:11586":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:9331:6912":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:53126:7324":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:1919:7011":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13039:9769":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:52106:10373":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7870:7029":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:52066:7315":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:9362:8385":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:217:7671":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:2928:2189":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:46901:6399":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:1672:1055":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7543:8122":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:9277:6313":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:49137:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:12730:9704":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:1954:7638":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2938:2192":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:1903:51033":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:51857:7334":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:47290:6603":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"22:0:2148":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"2:47313:6605":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:2515:6865":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:50913:7537":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4644:11102":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:50278:6441":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11909:9459":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:50901:6926":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"13:108:65534":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6528:8182":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:47238:6593":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:50845:7462":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4257:10966":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:2465:8312":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11500:9396":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:1643:6534":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11235:9329":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"18:599:65547":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7426:8144":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"22:1034:8571":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"1:1967:2100":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:4367:11016":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"12:119:7912":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:4745:11148":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:4908:11447":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:4786:9975":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"20:0:1623":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"16:6298:8146":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:52143:10374":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:21332:7249":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:54176:10385":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:38204:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:7042:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:2869:6989":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:4262:7400":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:57034:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7329:8194":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:1241:6940":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4575:11073":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:3854:9956":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"9:977:7744":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:6890:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"12:853:6935":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:4744:6825":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:3188:9948":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:2445:6629":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2905:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:10283:6770":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"20:8:2120":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"6:4581:11076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:4952:6424":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:46426:7372":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:12266:8846":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12756:9710":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:10221:8901":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:11116:6286":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:8393:8407":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:50841:7464":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46457:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:46864:10353":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:609:9100":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12550:9606":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"9:622:7783":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:6017:7131":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:20290:7292":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:11307:6796":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"14:160:10232":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8625:6896":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:2727:8294":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5772:11353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13203:9814":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:7426:6405":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:8822:65539":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:2930:8059":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:4105:8666":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:3194:6874":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:2868:8058":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:11070:8785":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:4327:9961":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:11112:10507":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9223:50995":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:1604:6682":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:47071:7524":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:9315:6911":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:10625:8360":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:9526:8371":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4665:11112":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:46998:6396":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13007:9760":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:1887:8944":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:1541:10743":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12324:1091":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:6171:8165":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:5374:8119":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:9897:8898":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:7924:14411":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11704:8723":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:11974:9489":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:47639:8683":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:46481:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:736:8535":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:52236:7336":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:686:14414":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:870:6682":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:48371:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6123:8118":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:4515:11045":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"12:985:6937":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:7079:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:21046:7297":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:3486:6806":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:2960:7635":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:6312:7621":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:2433:7992":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6981:11551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"14:0:1967":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:49146:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:131:43379":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:10528:8471":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11721:9433":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:10921:9276":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6375:11451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"9:827:7738":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4540:11056":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:3350:6682":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:46968:6393":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"16:5981:8055":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12816:8795":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"20:335:2113":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"2:29621:6538":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:1552:6846":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11149:9313":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:6785:6994":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:20122:63659":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:3805:6771":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7980:8001":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:8752:6431":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1505:10727":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:681:10402":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2822:6661":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:524:8699":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4307:10987":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:1044:8922":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:9723:6447":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:50849:7463":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13071:9777":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:6950:7682":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:2948:6682":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11199:9320":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12964:9752":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:9526:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:6772:6313":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:4721:9973":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:6430:6319":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11014:9298":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4247:10960":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:1982:7691":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:10902:6472":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11515:9401":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"7:79:48523":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4461:11031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:53768:7338":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:47657:8939":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11099:6711":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:3162:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:10682:8479":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:6500:11514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:52266:7340":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:48675:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11939:9478":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:96:8874":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:47148:6586":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"12:834:6934":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4621:11095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"12:300:7911":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:13176:9807":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:519:10666":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:51075:7469":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:12315:722":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:628:6640":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:6469:8676":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:9407:58225":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:2737:6366":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:46567:7515":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"0:114:1612":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"17:9722:8776":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:46945:6391":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:1737:7559":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4126:10886":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4212:10942":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"21:320:9077":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"6:4737:11146":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:10860:6875":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:8227:6870":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"0:0:1622":{"crate_id":0,"path":["idna"],"kind":"module"},"16:7956:8132":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:3107:6684":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:51811:10371":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:9682:6776":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1196:6937":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:2851:6675":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:2856:6678":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:11601:8836":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:4969:6823":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:1944:7044":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:8868:6649":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:918:6927":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12638:9669":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:1511:10730":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:8014:8000":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:6953:11548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:1138:6940":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:51117:6818":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:5163:8060":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:2285:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:47608:8934":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:6392:11453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:5761:8044":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:48252:2221":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10608:8358":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:1887:44690":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11997:9490":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:12092:6636":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"6:4179:10929":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:2605:8343":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:12307:1430":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:46915:6401":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:47279:6597":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:57047:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6316:8147":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:3157:7089":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:2774:6735":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9317:8488":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5122:9980":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:3430:8662":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:2969:7220":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:11688:8949":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:1637:6688":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:8534:8839":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"1:4216:7004":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:21918:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12630:9668":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12609:9658":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:20781:7298":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:52190:7348":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:1595:8662":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12198:9528":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:8494:8766":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:9536:6917":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:6330:8177":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:1550:10749":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:5178:6891":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:20950:63622":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4766:6831":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:896:7743":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:50558:7191":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:7044:7979":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:11585:8721":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:5460:8026":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2579:8342":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"12:861:6936":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:8556:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:969:6931":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13184:9809":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:49234:6481":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:11607:6805":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13091:9784":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"22:386:7990":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"17:9303:8383":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4797:11175":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:51881:7326":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:7875:7047":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:46640:6497":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:1002:6936":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:10426:8943":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:4316:6698":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:51835:7346":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:7970:8133":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:8873:6650":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:2784:6726":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8864:6967":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:3599:9952":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:11711:36594":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:8973:6973":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4224:10951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10490:9261":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:2705:8293":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:9450:7978":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4267:10969":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:4662:9971":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:6424:11463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11841:9449":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:6545:11536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:608:10721":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7211:7986":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3632:9953":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:2994:7636":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:5835:11366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:8295:50948":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:12325:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4629:11098":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:48894:6485":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9422:8892":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:3232:6876":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12103:9504":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:12282:59857":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:7166:11561":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:13047:9770":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:6400:240":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:9485:8842":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:50880:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:4972:6825":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:20103:63660":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13148:9800":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"14:202:7645":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:531:8542":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"7:32:48516":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10296:9256":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:359:7025":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:8639:7104":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:5541:7649":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11828:9448":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:11187:7186":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:491:9093":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10360:8508":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9627:8381":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6311:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11161:9316":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"21:291:65588":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"1:8222:6987":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:5802:19831":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6284:8131":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:46925:6402":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:7266:11576":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"9:382:7736":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:57073:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4816:11183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9691:8438":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:5574:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:630:10313":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:1426:6931":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"12:751:6683":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:1636:576":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:6448:11474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:5317:10409":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12768:9715":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:10940:6427":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"22:43:8555":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"17:11761:9438":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:3192:6873":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:4948:6423":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13082:9781":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10350:8351":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:20056:6635":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:47323:6606":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:2989:6685":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:49899:6763":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:4904:11443":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:5506:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8076:6711":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:7249:11571":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10752:8353":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:4532:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:4425:7163":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:965:6930":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:7786:8712":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1518:10733":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:2385:7065":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:9909:8777":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2753:6727":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:46379:7221":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7093:7980":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:671:8529":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11217:9328":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11893:9454":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12251:9532":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:484:8723":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"20:382:2117":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"6:5876:11392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4673:11117":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:9253:6796":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"12:1555:7919":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:3956:7368":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:57099:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11300:9345":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:21044:6647":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:49457:8825":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"14:40:9295":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:4272:6497":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2987:6785":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:9885:9212":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6137:8116":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12695:9703":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6345:8124":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2250:7059":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:6233:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:6283:7619":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12896:9733":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:49198:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:3010:8299":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:21264:7253":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:4324:6706":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13366:9875":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:9751:8439":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:614:65549":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"21:276:2171":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"2:48409:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6593:8183":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4449:11030":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:9442:8840":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:1632:6687":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6567:8138":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:12323:1501":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4810:11180":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:48278:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"9:920:7740":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:5443:11187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10668:59856":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:21243:10330":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:6010:7129":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:54244:10389":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:53050:7317":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2564:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:6302:11422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:10182:9248":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:0:1344":{"crate_id":1,"path":["std"],"kind":"module"},"2:3084:7516":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6743:8186":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:46991:6395":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:9098:8689":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:3716:9955":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:9108:8886":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:5949:8053":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4454:7167":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:1668:10834":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:9350:8491":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12060:9498":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8412:6587":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:8441:8476":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4592:11084":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:12022:9494":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7267:8188":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4231:10955":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:2738:64149":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:2683:8292":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:5680:6789":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6252:8176":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:6967:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"9:586:7780":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:6677:6470":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:50718:6450":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:49418:8824":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:47191:6588":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:47270:6602":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:6604:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:47038:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:7848:6647":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:4195:7394":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:6989:7643":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:7061:7615":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"21:67:1823":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"1:2411:7075":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:6137:8702":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"2:50260:6440":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:53970:7307":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4489:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11559:9410":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:1691:6684":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:50527:7187":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:49918:6765":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:12926:9744":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:12972:9754":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:12319:1446":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"9:19:7831":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:12748:9709":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:51088:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6903:7978":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10332:8515":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:5227:2212":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10466:9259":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"0:115:1620":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"2:21190:7486":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2401:7070":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:2673:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:9644:6444":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:2792:6743":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4317:10994":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:582:6635":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"12:697:6931":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:50214:6447":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"20:230:2121":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"12:274:8913":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:44:7894":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:4072:6846":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:5087:6713":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9269:6906":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:8554:7157":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"5:3485:7717":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6059:8287":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5388:8022":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13214:9815":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:574:7049":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:6430:11464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:9382:9206":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:8991:65541":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13114:9792":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:8796:8359":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5782:11355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:2788:6741":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2796:6745":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:29408:7549":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2935:2191":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:50020:6774":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6668:8321":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:7849:7037":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13134:9798":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:9113:8694":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:545:7044":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:50054:6437":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:7208:11562":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:1962:8436":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"12:2190:65533":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:9207:6792":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:2743:64141":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:2497:233":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:539:10683":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"22:728:8653":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:979:6933":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:8887:6968":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:22017:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"18:644:9094":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13279:9859":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:4117:7110":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"21:259:65589":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"16:6270:8121":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:1574:10766":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:9765:6777":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"9:649:7784":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:3026:9118":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:3764:8662":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:574:9094":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:39414:7697":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:4369:6499":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:48887:6484":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:487:9112":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:4254:6700":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:8435:6445":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:4274:10972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:51903:7314":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:5660:11312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:29663:7512":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:3263:9949":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:3734:6683":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:39427:6299":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8363:6878":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:52382:7316":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8066:7022":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:2843:6671":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:4888:9978":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:4326:6498":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:960:6929":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:10857:6873":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:3461:2102":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"}},"external_crates":{"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"21":{"name":"unicode_normalization","html_root_url":null},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"tinyvec_macros","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}