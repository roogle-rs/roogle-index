{"root":"0:0:1834","crate_version":"0.4.0","includes_private":false,"index":{"1:12602:36080":{"id":"1:12602:36080","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12225:6609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2272-0:170:1812":{"id":"b:1:2272-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2266:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2274:2190"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5536:36748":{"id":"5:5536:36748","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2287","`String`":"5:7490:255"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2287","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12532:1999":{"id":"1:12532:1999","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43633:6617","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2272-0:155:1813":{"id":"b:1:2272-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2266:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2274:2190"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12529:33606":{"id":"1:12529:33606","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12528:33605"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12623:36085":{"id":"1:12623:36085","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12161:134","`FromStr`":"1:12160:2292"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12160:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12160:2292","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1833":{"id":"0:102:1833","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2275-0:155:1813":{"id":"b:1:2275-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2269:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2277:28320"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12611:33623":{"id":"1:12611:33623","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2591:135":{"id":"1:2591:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12564:36070":{"id":"1:12564:36070","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12200:2296","str::split":"1:12555:2138","prim@char":"4:12019:457","`DoubleEndedIterator`":"1:7582:128","str::rsplit_terminator":"1:12567:36071"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43697:6625","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2597:1626":{"id":"1:2597:1626","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2629:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2022":{"id":"0:44:2022","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1825","0:96:2081","0:97:1826","0:98:2116","0:99:2085","0:100:1821","0:102:1833"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2272-0:161:1811":{"id":"b:1:2272-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2266:101","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2274:2190"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2787:249-0:170:1812":{"id":"a:1:2787:249-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2787:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:109:751":{"id":"0:109:751","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12628:32966":{"id":"1:12628:32966","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12555:2138":{"id":"1:12555:2138","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12200:2296","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::split_whitespace":"1:12533:28643","str::rsplit":"1:12561:33615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43647:6624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2844:2401-0:155:1813":{"id":"a:1:2844:2401-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2844:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2787:249-0:161:1811":{"id":"a:1:2787:249-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2787:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12506:879":{"id":"1:12506:879","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12019:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12614:36082":{"id":"1:12614:36082","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1819":{"id":"0:117:1819","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1834":{"id":"0:0:1834","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1809","0:114-0:161:1811","0:115-0:170:1812","0:116-0:155:1813","0:117:1819","0:118:1824","0:119:1832"],"is_stripped":false}}},"b:1:2593-0:161:1811":{"id":"b:1:2593-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:135","1:2597:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12600:36078":{"id":"1:12600:36078","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12515:36066":{"id":"1:12515:36066","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12551:1993":{"id":"1:12551:1993","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41687:202","prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12585:36072":{"id":"1:12585:36072","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12200:2296","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::matches":"1:12582:2092"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43869:6629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12620:36084":{"id":"1:12620:36084","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2352":{"id":"5:5537:2352","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5795:1603":{"id":"5:5795:1603","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2593-0:170:1812":{"id":"b:1:2593-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:135","1:2597:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:1039":{"id":"0:86:1039","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12594:36075":{"id":"1:12594:36075","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1821":{"id":"0:100:1821","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2629:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114-0:161:1811":{"id":"0:114-0:161:1811","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1811","glob":false}}},"0:22:1978":{"id":"0:22:1978","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12536:36069":{"id":"1:12536:36069","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43911:6621","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1039","0:87:2145","0:88:1821","0:91:1833"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12633:36087":{"id":"1:12633:36087","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4582:36087"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43964:6578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12561:33615":{"id":"1:12561:33615","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12200:2296","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::split":"1:12555:2138"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43665:6622","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2081":{"id":"0:96:2081","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12526:36067":{"id":"1:12526:36067","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12025:1544","str::slice_mut_unchecked":"1:12527:36068","crate::ops::Index":"1:3084:2283"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:725":{"id":"0:107:725","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9600:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9581:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12511:36065":{"id":"1:12511:36065","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12509:36064"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12596:36076":{"id":"1:12596:36076","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1826":{"id":"0:97:1826","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12531:10252":{"id":"1:12531:10252","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12019:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43623:6618","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2787:249-0:155:1813":{"id":"a:1:2787:249-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2787:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12524:29072":{"id":"1:12524:29072","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:36747":{"id":"5:5535:36747","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1832":{"id":"0:119:1832","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12547:6541":{"id":"1:12547:6541","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41687:202","prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2844:2401-0:161:1811":{"id":"a:1:2844:2401-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2844:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2578-0:170:1812":{"id":"b:1:2578-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2581:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12509:36064":{"id":"1:12509:36064","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12567:36071":{"id":"1:12567:36071","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12200:2296","str::split":"1:12555:2138","prim@char":"4:12019:457","str::split_terminator":"1:12564:36070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43715:6623","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2578-0:155:1813":{"id":"b:1:2578-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2581:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2584:751":{"id":"1:2584:751","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2582-0:155:1813":{"id":"b:1:2582-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99:2085":{"id":"0:99:2085","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8671:2421-0:170:1812":{"id":"a:1:8671:2421-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8671:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7:1809":{"id":"0:7:1809","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1978","0:24:590","0:44:2022","0:46:662"],"is_stripped":false}}},"5:5520:36744":{"id":"5:5520:36744","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2287","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2287","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2582-0:161:1811":{"id":"b:1:2582-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2592:1628":{"id":"1:2592:1628","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2288:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12516:349":{"id":"1:12516:349","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12517:348","`u8`":"4:12036:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12630:36086":{"id":"1:12630:36086","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4584:36086"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43946:6580","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:1812":{"id":"0:115-0:170:1812","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1812","glob":false}}},"1:12591:36074":{"id":"1:12591:36074","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12200:2296","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::match_indices":"1:12588:36073"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43815:6631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:2422-0:161:1811":{"id":"a:1:8670:2422-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8670:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2588-0:155:1813":{"id":"b:1:2588-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2558:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2591:135","1:2592:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2275-0:161:1811":{"id":"b:1:2275-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2269:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2277:28320"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2804:259-0:170:1812":{"id":"a:1:2804:259-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2804:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2582-0:170:1812":{"id":"b:1:2582-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5793-0:170:1812":{"id":"b:5:5793-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9630:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5791:263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5795:1603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12573:33619":{"id":"1:12573:33619","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12019:457","str::splitn":"1:12570:33617","self::pattern":"1:12200:2296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43769:6626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:725":{"id":"0:112:725","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9600:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9581:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12537:28646":{"id":"1:12537:28646","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43939:6632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8671:2421-0:161:1811":{"id":"a:1:8671:2421-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8671:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2629:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:662":{"id":"0:46:662","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12617:36083":{"id":"1:12617:36083","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:36744","5:5521:2147","5:5524:36745","5:5527:36746","5:5535:36747","5:5536:36748","5:5537:2352","5:5538:32963","5:5539:32964"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12558:28697":{"id":"1:12558:28697","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12016:6634","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2588-0:170:1812":{"id":"b:1:2588-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2558:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2591:135","1:2592:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12505":{"id":"1:12505","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12506:879","1:12507:2122","1:12508:36063","1:12509:36064","1:12511:36065","1:12514:33176","1:12515:36066","1:12516:349","1:12517:348","1:12518:2016","1:12520:29070","1:12522:29071","1:12524:29072","1:12526:36067","1:12527:36068","1:12528:33605","1:12529:33606","1:12530:1980","1:12531:10252","1:12532:1999","1:12533:28643","1:12534:28654","1:12535:7969","1:12536:36069","1:12537:28646","1:12538:28538","1:12541:2117","1:12544:2118","1:12547:6541","1:12551:1993","1:12555:2138","1:12558:28697","1:12561:33615","1:12564:36070","1:12567:36071","1:12570:33617","1:12573:33619","1:12576:33621","1:12579:33622","1:12582:2092","1:12585:36072","1:12588:36073","1:12591:36074","1:12594:36075","1:12596:36076","1:12598:36077","1:12600:36078","1:12601:36079","1:12602:36080","1:12605:36081","1:12608:2140","1:12611:33623","1:12614:36082","1:12617:36083","1:12620:36084","1:12623:36085","1:12625:1994","1:12626:33493","1:12627:32965","1:12628:32966","1:12629:32967","1:12630:36086","1:12632:12062","1:12633:36087"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:2116":{"id":"0:98:2116","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12632:12062":{"id":"1:12632:12062","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4585:12062"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43955:6579","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1813":{"id":"0:116-0:155:1813","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1813","glob":false}}},"1:12544:2118":{"id":"1:12544:2118","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1821":{"id":"0:88:1821","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:682-0:161:1811":{"id":"b:5:682-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2288:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:7780","5:685:28325","5:686:28326"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2804:259-0:155:1813":{"id":"a:1:2804:259-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2804:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12582:2092":{"id":"1:12582:2092","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12200:2296","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::rmatches":"1:12585:36072"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43851:6628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3425:1641":{"id":"1:3425:1641","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39447:10210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","description","source","type_id","provide"],"trait":{"name":"Error","id":"1:2640:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12608:2140":{"id":"1:12608:2140","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:36745":{"id":"5:5524:36745","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:32964":{"id":"5:5539:32964","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12629:32967"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1825":{"id":"0:95:1825","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12507:2122":{"id":"1:12507:2122","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12530:1980":{"id":"1:12530:1980","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12019:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43617:2015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:7780":{"id":"5:684:7780","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:5527:36746":{"id":"5:5527:36746","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12598:36077":{"id":"1:12598:36077","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2593-0:155:1813":{"id":"b:1:2593-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2596:135","1:2597:1626"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2277:28320":{"id":"1:2277:28320","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:2147":{"id":"5:5521:2147","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:255"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12570:33617":{"id":"1:12570:33617","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296","str::rsplitn":"1:12573:33619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43751:6627","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12538:28538":{"id":"1:12538:28538","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2275-0:170:1812":{"id":"b:1:2275-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2269:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2277:28320"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2799:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:161:1811":{"id":"0:161:1811","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:2787:249-0:161:1811","a:1:8670:2422-0:161:1811","a:1:8671:2421-0:161:1811","a:1:2804:259-0:161:1811","a:1:2844:2401-0:161:1811","b:1:2582-0:161:1811","b:1:2593-0:161:1811","b:1:2272-0:161:1811","b:1:2588-0:161:1811","b:1:2275-0:161:1811","b:1:3423-0:161:1811","b:1:2578-0:161:1811","b:5:682-0:161:1811","0:169","0:92","0:167"]}}},"0:170:1812":{"id":"0:170:1812","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2787:249-0:170:1812","a:1:8670:2422-0:170:1812","a:1:8671:2421-0:170:1812","a:1:2804:259-0:170:1812","a:1:2844:2401-0:170:1812","b:1:2582-0:170:1812","b:1:2593-0:170:1812","b:1:2272-0:170:1812","b:1:2588-0:170:1812","b:1:2275-0:170:1812","b:1:3423-0:170:1812","b:1:2578-0:170:1812","b:5:5793-0:170:1812","0:111","0:183","0:108","0:106","0:110"]}}},"1:12522:29071":{"id":"1:12522:29071","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:686:28326":{"id":"5:686:28326","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9625:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12528:33605":{"id":"1:12528:33605","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12529:33606"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12533:28643":{"id":"1:12533:28643","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12534:28654"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43921:6620","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1813":{"id":"0:155:1813","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:2787:249-0:155:1813","a:1:8670:2422-0:155:1813","a:1:8671:2421-0:155:1813","a:1:2804:259-0:155:1813","a:1:2844:2401-0:155:1813","b:1:2582-0:155:1813","b:1:2593-0:155:1813","b:1:2272-0:155:1813","b:1:2588-0:155:1813","b:1:2275-0:155:1813","b:1:3423-0:155:1813","b:1:2578-0:155:1813","0:159"]}}},"1:12588:36073":{"id":"1:12588:36073","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12200:2296","`DoubleEndedIterator`":"1:7582:128","prim@char":"4:12019:457","str::rmatch_indices":"1:12591:36074"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43797:6630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12626:33493":{"id":"1:12626:33493","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39634:28533","Self::is_ascii":"1:12625:1994"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39634:28533","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2804:259-0:161:1811":{"id":"a:1:2804:259-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2804:259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12518:2016":{"id":"1:12518:2016","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41687:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12535:7969":{"id":"1:12535:7969","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43901:6619","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:28325":{"id":"5:685:28325","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12627:32965":{"id":"1:12627:32965","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12527:36068":{"id":"1:12527:36068","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12025:1544","crate::ops::IndexMut":"1:3088:2284","str::slice_unchecked":"1:12526:36067"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:2422-0:170:1812":{"id":"a:1:8670:2422-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8670:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12520:29070":{"id":"1:12520:29070","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41687:202"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10290:251","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12579:33622":{"id":"1:12579:33622","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12220:6610","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3423-0:155:1813":{"id":"b:1:3423-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3421:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3425:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2596:135":{"id":"1:2596:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32105:10490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2578-0:161:1811":{"id":"b:1:2578-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2555:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2552:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2581:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168:461":{"id":"0:168:461","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:590":{"id":"0:24:590","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6915:276","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1833":{"id":"0:91:1833","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2581:2155":{"id":"1:2581:2155","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2555:143"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2844:2401-0:170:1812":{"id":"a:1:2844:2401-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2844:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:118:1824":{"id":"0:118:1824","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41830:238","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12508:36063":{"id":"1:12508:36063","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12541:2117":{"id":"1:12541:2117","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12601:36079":{"id":"1:12601:36079","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8670:2422-0:155:1813":{"id":"a:1:8670:2422-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8670:2422","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12605:36081":{"id":"1:12605:36081","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12019:457","self::pattern":"1:12200:2296"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12625:1994":{"id":"1:12625:1994","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12629:32967":{"id":"1:12629:32967","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12514:33176":{"id":"1:12514:33176","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11760:6613"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2274:2190":{"id":"1:2274:2190","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12576:33621":{"id":"1:12576:33621","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41685:205","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12205:2285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3423-0:161:1811":{"id":"b:1:3423-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3421:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3425:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5538:32963":{"id":"5:5538:32963","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12628:32966"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8671:2421-0:155:1813":{"id":"a:1:8671:2421-0:155:1813","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8671:2421","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2588-0:161:1811":{"id":"b:1:2588-0:161:1811","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2562:269","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2558:270","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2591:135","1:2592:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9630:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3423-0:170:1812":{"id":"b:1:3423-0:170:1812","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2794:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3421:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3425:1641"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:87:2145":{"id":"0:87:2145","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7490:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1812","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12534:28654":{"id":"1:12534:28654","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12533:28643"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43930:6633","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12517:348":{"id":"1:12517:348","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12036:1650"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:6873:6514":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:21399:17587":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"4:12022:1154":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:11295:7954":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:14355:9176":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:21814:17260":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:43201:8083":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:21565:17246":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:1550:7989":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12846:8752":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4968:10991":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"5:687:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13989:9060":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:569:10555":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:21024:28374":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:1760:8000":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:43751:6627":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4902:10956":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:12877:10182":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:8297:9961":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:0:2266":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:10588:8440":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:10328:32704":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:47980:10328":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:9867:8392":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:8686:24320":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:5573:7452":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:4418:7527":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12043:7650":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:1184:7924":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14076:9088":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:8195:9647":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"22:449:7399":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"16:4719:9289":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11086:7950":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11991:7637":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11381:8527":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:6352:7723":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:2961:7780":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:7121:8022":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:2178:7933":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:1075:7923":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:46976:10314":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:44236:10257":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:2849:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:3565:7947":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11306:7630":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6386:9388":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:7639:11471":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:3266:12043":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:35:2319":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7436:7682":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:9638:6654":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:3975:17629":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:44366:6600":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:42942:7854":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:10528:9858":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:10680:8087":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:9102:7615":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:2510:11810":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4947:10976":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:2950:12037":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:2172:7786":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:1376:98":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:423:7981":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13085:8804":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:14460:9206":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13274:7630":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:3491:17585":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"11:829:17539":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11742:8548":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:8050:9633":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:2225:36055":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:41622:9865":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:3722:9863":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6456:9394":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:40373:8038":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:363:9838":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:42001:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6059:11217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6171:218":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:12038:1648":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:8196:6617":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:11905:6638":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:588:10565":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7708:7741":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:9282:28594":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:2940:135":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:4951:17684":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:4179:7827":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:48026:10332":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"9:507:7257":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:8341:9869":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:3154:32933":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:2085:9749":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:555:10547":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6499:7726":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:4651:6573":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:44658:10274":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:4053:9279":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6682:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:2804:259":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:8181:7745":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:41745:7152":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:1743:664":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:23005:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"22:669:7585":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"16:7492:9573":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10685:8452":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4860:10940":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13101:8808":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1691:10696":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12598:8716":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:1505:7785":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:40923:8078":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:41609:10231":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:10735:6626":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:5798:7695":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:2074:9747":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:7862:9596":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:727:7595":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7067:9484":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:43930:6633":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:3052:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:2794:2400":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:9921:8395":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:527:10532":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:11503:9863":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:636:8265":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:41736:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:10749:8106":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:357:9837":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:491:8248":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:2810:9258":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6545:9402":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"4:11803:7522":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:580:10560":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"18:707:6611":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:44147:10255":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:5322:9303":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10603:8442":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:3195:9855":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:7391:24269":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:14378:9189":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:11524:9864":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:2321:9237":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9051:24308":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:1842:7152":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"22:386:7415":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"4:1567:7992":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:39267:8031":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:7272:35882":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13611:8991":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:11277:7516":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:22807:199":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:12496:8701":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:8040:28557":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:7343:11448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:4727:17641":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:836:7152":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:2198:7474":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:39364:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5928:11141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:9644:6656":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12024:7643":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:11730:12159":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:4478:17653":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11098:7951":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:893:2274":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11617:8539":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:7012:7503":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:11201:8507":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11448:24332":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:2744:9255":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:12042:1706":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:44374:6605":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:6666:7428":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:1072:37063":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:40434:8048":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14269:9150":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11337:24453":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:6597:7500":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:7674:7511":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:12019:457":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:12790:148":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"21:320:8225":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"17:14001:9066":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"22:636:7891":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"1:41586:28699":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:1040:9487":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:40511:8061":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4824:10921":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:3665:2323":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:1275:9749":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:3084:2283":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:10280:17587":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:3917:17626":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:2472:9244":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:9010:7802":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:40898:8076":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4549:10832":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:1545:2320":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:4624:11346":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"14:187:23344":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"9:237:10237":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:3055:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:10728:10004":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:6092:8052":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:2373:17582":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:14514:9216":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:48117:10337":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:7479:7461":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:40050:6586":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:3182:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6318:9384":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4610:10862":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:44620:10269":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:42040:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:46586:10307":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:4556:17670":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:12825:29504":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13554:8954":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:6915:276":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:637:9841":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:45685:10278":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:7613:9580":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:2494:2288":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:7890:7793":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:7544:9578":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:43955:6579":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:2891:12031":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:40130:6580":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:7240:7993":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:9457:136":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:12154:8619":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:9488:37075":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:563:10552":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"20:97:2044":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"6:4841:10932":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:12030:699":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:5111:11067":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"14:165:23337":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:43623:6618":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:44390:6607":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:5015:11018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:6721:24266":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"10:0:2259":{"crate_id":10,"path":["adler"],"kind":"module"},"17:12267:8648":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10547:8437":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:4032:10156":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:2644:9251":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:20977:31894":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:42118:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:75:1648":{"crate_id":1,"path":["core","u32"],"kind":"module"},"4:10420:8018":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:46116:10294":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10240:7622":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6485:7725":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6666:11305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"0:117:1819":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"0:0:1834":{"crate_id":0,"path":["idna"],"kind":"module"},"1:4833:29704":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:12016:6634":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2797:257":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4666:10875":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:2654:9853":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:1304:9753":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13758:7651":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4914:10960":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6929:7731":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:41822:217":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"0:22:1978":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"1:9582:6591":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:482:7475":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"11:1562:9755":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:4585:9286":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:44458:12202":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:2972:35572":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:7610:11464":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:2959:12039":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:6687:9427":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:11760:6613":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:40904:8077":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12750:8738":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:47942:10325":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:43911:6621":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:3461:9272":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:43815:6631":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:12031:805":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:475:7986":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"15:288:7963":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6711:11329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:11023:8496":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:3157:33427":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:39408:12041":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:41645:10170":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5009:11017":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:22030:17248":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:21593:7841":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"0:7:1809":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:44225:12196":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10088:7479":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"13:226:7751":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:4687:17679":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"14:215:9737":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"4:5619:7495":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:9998:8372":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6261:7685":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:3317:17613":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6401:7724":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:8134:9642":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:2787:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:7702:11485":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:1010:9747":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10646:8448":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11535:7633":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"11:1687:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:21382:17250":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:7692:11483":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12685:8730":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:9640:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:8275:17651":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:22335:10187":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12711:8733":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:2260:9747":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:14434:9197":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:3967:17628":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6913:11424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:30551:29176":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:1913:19207":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10186:8410":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:9701:7915":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:43443:8092":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:0:538":{"crate_id":1,"path":["core"],"kind":"module"},"1:2798:256":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:22343:10188":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:21481:7841":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:640:9843":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:21158:17587":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:9625:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:9117:9891":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"11:427:7982":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:46710:10309":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:14156:9105":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:7702:17527":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:30949:7850":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:207:7427":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:44211:10256":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:47989:10329":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10456:8430":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:11463:9862":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:43453:8093":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:41813:6648":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:10462:7781":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:5691:7833":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:2938:238":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:880:7783":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"11:1869:7990":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:42989:7858":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5897:11130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12208:8625":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:5069:9870":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:7912:9912":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:22426:11517":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:7884:126":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"4:7904:9911":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:1646:640":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:32166:8030":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:6222:11267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:46262:10298":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:11281:7629":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:5419:7600":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:9185:11500":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:9350:7621":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:40913:7535":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:6798:17728":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11281:8103":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:7920:7809":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:4138:8010":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:2809:2313":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:2852:6487":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11971:8599":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:8126:7810":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:3923:17625":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:22939:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:4004:2274":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10637:8447":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:690:8268":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:13162:8823":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:4079:12063":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:10771:8457":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:13710:9004":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13693:9003":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:45837:10284":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:40196:105":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11124:7952":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:5372:17762":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:5049:9300":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:10383:8421":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:2877:12027":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:8926:24327":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12305:8656":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13188:8825":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:4462:9282":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:5740:9885":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:41416:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"14:160:9732":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:9277:7620":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:47010:10315":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12196:8624":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:6101:7452":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3802:2320":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:5068:11042":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6120:11242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:3272:9858":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:6107:11238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:5138:7460":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7342:37070":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:22320:28684":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7884:24272":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4455:10788":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3034:12040":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:12220:6610":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:9172:7617":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6753:9441":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:3232:9236":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:3482:32354":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:10012:7603":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:4222:6661":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"18:538:7589":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:10410:8422":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:1558:10607":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:14401:9190":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10430:8424":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5891:11129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:7622:11466":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:3173:7152":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:7423:9831":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6569:7727":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:10698:8454":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9896:24343":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:951:9746":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:564:7591":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:3180:7990":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"9:177:7770":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:6883:7502":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"20:315:37092":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"4:11342:9893":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:40182:6577":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:3332:2320":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:298:7974":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7041:9478":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:4628:10873":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:515:8246":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5023:11023":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:45916:10287":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:8893:17725":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"9:393:23253":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1703:10700":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:897:7152":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:784:7431":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:21005:28370":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:22146:10184":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:10958:32368":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11389:7956":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:41685:205":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:44279:2286":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:8465:9975":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:45661:10277":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:6827:2328":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"22:43:28313":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:2629:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:2899:12028":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:14173:9112":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:8839:7152":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:42782:76":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:7252:2274":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:4731:17644":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5044:11035":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:1639:10664":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:13008:7491":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"18:574:8249":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1718:10707":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:8189:8067":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:2202:17569":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:7648:9897":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:40411:8045":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12621:8721":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:7739:9906":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:22199:10185":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:46186:10296":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:22252:7844":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:483:10504":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:2334:7781":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:1596:10631":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6136:11247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1683:1193":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:8072:9634":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7462:9564":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1507:10579":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:41439:10167":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:2614:9852":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7284:2418":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11710:7630":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6086:11226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14296:9162":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:43964:6578":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5146:11079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:6204:7701":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:6236:7495":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10494:7612":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:40102:6588":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:44031:12195":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12983:8790":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:10812:9861":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:2341:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:6813:11363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"22:948:28316":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"1:43665:6622":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:40149:6582":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:8205:24273":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:46822:10311":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12945:8785":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7054:9481":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5866:9327":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:7565:7505":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:41873:7152":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"21:145:2047":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:256:8278":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:5958:7495":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:3206:7991":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:6970:11795":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5574:7689":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:30317:2314":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:7437:28707":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4535:10825":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14536:9222":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:9015:7812":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:8848:24325":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:2799:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:44382:6608":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:7990:9913":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:1855:2320":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:8281:9654":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:5121:9302":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:22447:10200":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4955:10981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:11968:10020":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"13:110:37064":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4449:10786":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:44259:6612":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:44378:6604":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:8534:7152":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:41770:2418":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:43500:8036":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:30351:2315":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:2866:9500":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5859:11111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:20992:31894":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:6817:2327":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:7525:10017":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"12:0:2261":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11872:8570":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10023:7915":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:2526:9246":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12007:7641":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:4641:9288":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7015:9477":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:43769:6626":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:6837:11374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:11062:7948":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:40229:10216":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:45753:10281":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:40286:10217":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:5088:9301":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:12237:8636":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13148:8822":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9242:7619":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:5712:7690":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5816:7700":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7360:37072":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:652:8249":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"22:728:7399":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:40355:7829":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13906:9042":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:7388:11460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2969:23401":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:7598:11462":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:44402:7840":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:5130:11076":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13244:8832":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:1051:23331":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:21160:17251":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10227:8415":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:3049:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:5382:9875":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:1556:7990":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13451:8868":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14083:9089":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:4488:10806":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:42677:11584":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11137:8504":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4871:10162":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:5115:215":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:40675:8068":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:671:7909":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11162:8505":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:7453:9834":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:7999:12113":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:2847:6485":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:13667:8997":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:261:7428":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:8215:8006":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:48156:10338":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:7768:7743":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:5791:263":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:824:7434":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:11157:33105":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:9095:83":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5969:11162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:9630:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:23071:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"11:122:7418":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:1749:12011":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:3235:9857":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:47160:10316":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:47969:10327":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10316:8418":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:4474:6664":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4364:10727":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:47758:10321":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:1674:7428":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14522:9219":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"11:1127:9752":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6901:7729":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:2288:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:9445:7910":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:13567:8961":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:5939:7668":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:6631:245":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11358:24454":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:12111:8609":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:10522:9854":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4434:10779":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13286:8839":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:574:10557":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9762:37077":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:14478:9212":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"20:257:2045":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"1:6974:12119":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"21:67:2046":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"1:44082:10253":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:11599:9896":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:2722:9254":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:9372:7601":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:2269:102":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:8803:7796":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4556:10835":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:5976:7460":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:928:17539":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:13046:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:2511:9851":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:6133:7491":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:481:8247":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:5626:9879":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:44567:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10628:8446":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:39440:10209":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:9058:7814":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:6583:17721":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"15:394:23364":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"4:4626:11348":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:3388:7452":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"5:7515:2276":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:41502:7852":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:6012:11191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9650:7603":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:7635:2019":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:11357:9895":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:7628:17587":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4516:10817":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:3274:9859":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:4710:10879":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:4527:9284":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:9003:9988":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:44585:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3300:12048":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:10087:9994":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:5921:11139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10265:7929":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:40313:8036":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6100:11237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:10530:6634":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:4986:9298":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10139:24360":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13215:8829":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4401:10755":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4724:10880":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:96:7899":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:8817:9981":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:6276:11516":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"15:0:2263":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6425:9392":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"21:0:1836":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"1:3272:12045":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:7651:11473":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4789:10905":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11951:8589":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:1036:9749":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4529:10822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:1862:7989":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:8202:6624":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:4893:17677":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14100:9093":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:3285:31892":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:5830:9320":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13973:9058":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:10397:7938":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:11375:8025":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:914:7784":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:47366:10317":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"21:259:37126":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"1:21329:17254":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:11040:7515":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:2546:79":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:1546:10598":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:10929:8491":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:46232:10297":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12876:8771":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:9153:9992":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:7089:12106":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"0:118:1824":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"16:5727:7693":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13487:8899":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:43474:8095":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:4365:7454":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:9574:37079":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:7504:2275":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:621:6787":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:10962:8493":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10616:8443":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:7102:24268":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:4373:6662":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"11:796:2320":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:40163:6584":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"20:327:8233":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"1:2908:9502":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:45785:10282":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:3065:8291":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:14056:9082":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:2964:11487":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:1562:7991":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6268:37071":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:2864:9260":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:42997:7859":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4427:6663":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:13890:9039":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:14163:9107":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14448:9204":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:2696:9253":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:859:2323":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:3530:2274":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:40156:6583":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"15:327:7747":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6879:9459":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:8482:17701":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:536:7672":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:2788:9257":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"20:223:8229":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"4:8179:7828":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:41923:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4932:10971":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:1934:10028":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"14:31:9732":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:32145:9544":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:43617:2015":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:7128:9989":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:7996:2277":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:4076:7781":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12280:8652":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10126:8404":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:42451:6653":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:43374:8088":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14420:9195":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:4447:6489":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:30357:6748":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:3498:17605":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:4370:9868":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:2284:23373":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7554:7734":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11367:8524":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:41761:2323":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:13632:8996":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:48015:10331":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:21343:11996":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:39220:12047":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:4480:10804":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:45975:10290":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:3240:7992":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:6128:11244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:10103:7545":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:4676:10876":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:44394:6601":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:12029:697":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:12513:8704":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:6344:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12136:8611":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:11369:8024":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:9100:90":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:10763:8107":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:5328:7428":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:2193:136":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:21584:17587":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13778:9013":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:42444:6651":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:8158:17586":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:8097:9637":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"11:344:7978":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:13826:9019":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:46284:10299":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:3722:7809":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:3657:17624":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:2195:9850":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:40276:7528":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:45815:10283":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"7:78:23245":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:10085:8029":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:4350:277":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:14221:9149":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13922:9046":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:9175:32645":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"4:903:2320":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:5612:232":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:507:8249":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3737:9820":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:533:10535":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:4167:8012":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:2962:37054":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:47820:10322":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:9088:246":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:2907:9262":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:8315:9963":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:22360:28653":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:1664:10683":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:5487:9878":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:3045:2402":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"18:644:8249":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12970:8788":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:6798:2326":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6083:23372":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:629:9817":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4977:10997":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"14:202:2273":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:45938:10288":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13546:8951":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:22972:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:6079:11225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13816:9018":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:6181:7803":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:10525:9856":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"4:6284:232":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:1444:2323":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11639:8284":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:21022:28376":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"20:369:2343":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"17:434:8281":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:5696:24260":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:7574:2320":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:14042:9075":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6868:11400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4808:10913":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4870:10943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11074:8502":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"9:0:2258":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:9841:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:6700:11324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:41889:2323":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:2345:11515":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:13422:8848":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:1514:10582":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:42979:10237":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:22028:17587":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:599:37083":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:2143:9821":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:9886:7918":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:8713:24321":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:12778:8742":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:8221:8008":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:10770:10009":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:6514:7428":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11586:7636":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"11:759:7782":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:15:2233":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:3960:7452":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:22873:201":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:4830:10924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:2172:641":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:7645:11472":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:6453:7499":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:5052:11037":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:8980:32110":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:4690:17652":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5941:11150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12765:8741":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11490:8536":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:2245:7789":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:7534:9269":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4854:10937":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6764:11352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:8659:24307":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:5435:9305":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12724:8734":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:22459:11849":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6467:9395":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:32159:6662":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:13685:9002":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:41962:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:1772:10025":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:8289:8006":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11886:8571":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:7668:11478":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"22:879:28315":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"4:8146:9861":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:40463:8055":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:7371:11451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:6071:11224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:9287:7836":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:3764:9274":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:7503:12116":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:2640:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:7390:17538":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:8524:8014":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"18:590:8253":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:5945:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:9912:8393":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:5767:7798":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:40476:8057":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:2286:9749":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:1778:2320":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:7490:255":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:40062:28690":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13024:8795":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"16:6792:9453":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:10642:6622":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:10463:7510":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:2933:23400":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:7365:11449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:12041:854":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"22:1034:28317":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"4:1063:9749":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:8226:17623":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:14090:9090":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:13113:8810":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13897:9041":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:3953:17627":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7677:222":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:8319:11333":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:7294:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:6819:11364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14068:9085":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:21906:7843":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:7837:9908":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:12033:803":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"16:3655:8296":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:4783:10902":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"20:249:135":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"16:3797:9275":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:6228:11268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:6468:2274":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:8209:6619":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:11985:7818":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:11965:6637":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:7507:12115":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13040:8797":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:0:2265":{"crate_id":17,"path":["object"],"kind":"module"},"17:11226:8515":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:7691:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:7743:9907":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:12422:8683":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:1516:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:3473:6591":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:43901:6619":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11215:8511":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4884:10947":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4461:10791":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:40078:6585":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"0:24:590":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"11:1876:7991":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:11580:7817":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:14282:9156":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:46040:10292":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:13723:9009":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7597:37068":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:41881:7781":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:7653:9899":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:43647:6624":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"11:731:7785":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6804:11360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:8270:11495":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"7:0:1696":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:1837:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:10569:8085":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"21:291:37125":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"6:501:10512":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:12035:800":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:8953:24328":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:2549:78":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:9600:142":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:10980:7603":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11272:8518":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:14033:9074":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:1874:6785":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:3600:9273":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:12044:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:43425:8089":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:5905:9330":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:3219:35889":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:8003:12114":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11393:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11761:8551":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6934:11436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:3830:9276":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:5861:2274":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:12205:2285":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:9632:6651":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:8672:2420":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:11202:11508":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"11:822:9740":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:4800:10909":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:1821:8003":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1734:10712":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:8861:9880":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6560:7417":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:5117:11070":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:2692:11493":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12554:8708":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:4988:7452":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2895:12029":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:41803:2419":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:3160:33423":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"11:1882:7992":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:8442:10237":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"5:2133:7445":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:6270:8056":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:9642:6655":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:7331:2323":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:4622:11344":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:40689:8069":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:3434:9860":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:10568:7511":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"4:10976:7797":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:867:7782":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"11:703:7784":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:4428:7454":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"9:357:23267":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13838:9022":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:46354:10302":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:40889:8075":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:2182:11996":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:3255:266":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:4154:17650":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:47866:10323":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:44577:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:7621:24270":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:2578:7481":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:10145:9995":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:40092:6587":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:10943:9878":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:10290:251":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"11:2461:10487":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:9003:24330":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10507:8434":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:4456:17652":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:8135:7811":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:4922:10965":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6156:9366":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6279:7716":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:2372:206":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:1484:7988":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:43526:8098":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:40454:8054":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:45855:10285":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:42733:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:7038:8071":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:39298:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"11:2351:2323":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"4:12043:1253":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:2509:17587":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11111:8503":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:9634:6652":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:9136:9991":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:9884:12153":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:22268:7821":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:6984:7473":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:40525:8062":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13010:8792":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"11:1525:23332":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2406:9241":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:3049:23402":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:261:8279":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6114:11239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:21296:17259":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:43605:6616":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:47618:10319":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:10821:33107":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:5885:11126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:7319:7488":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:14013:9067":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:2150:24386":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:5743:9317":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4893:10950":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4440:10781":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:2844:2401":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:39322:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:1475:7783":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:22:738":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"14:221:9739":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:8925:17726":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"9:52:7755":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:4806:9292":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:10747:11504":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:5733:9882":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12172:8620":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:11131:7796":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:22284:7845":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:1120:35925":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:7006:9474":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:2558:270":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"21:198:2392":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"17:12934:8783":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:9137:7616":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:44446:10266":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:4812:426":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:4523:10820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:4196:7452":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:817:7988":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:41753:7781":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:46452:10304":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:2394:2320":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:1570:10615":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4388:10745":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:22381:28694":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12437:8687":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11934:8586":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"9:330:10494":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6915:7730":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:2968:35573":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:22906:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:40333:8037":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:5963:9336":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:1819:8002":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:41898:207":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:5982:11168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:12200:2296":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:47904:10324":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:12271:12189":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:12024:1512":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:12658:8725":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:1541:2274":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:40243:12079":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:7854:9909":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:8594:24309":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:12433:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:22774:198":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4745:10882":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:41473:12125":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:2861:11848":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:2552:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:5910:11131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:43851:6628":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7828:9592":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7378:2288":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10340:8419":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:22840:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:10366:8420":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:46086:10293":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:42742:70":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:6889:11414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6263:11293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12373:8658":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:596:10570":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12645:8722":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:12803:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:4774:9291":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5123:11073":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"15:306:7968":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:21007:28373":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13202:8828":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6041:24263":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:5384:24259":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:43633:6617":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:40665:8067":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:10916:8489":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"14:40:8586":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:42687:70":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:4501:457":{"crate_id":1,"path":["core","char"],"kind":"module"},"4:2419:2195":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:32141:9907":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:44641:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:4814:10915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:5485:7452":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:40535:8064":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:2339:7660":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14308:9165":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:5433:111":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:42276:96":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:1682:10690":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:3570:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:7474:9565":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7660:9582":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:6600:24265":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7736:9583":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:21809:17252":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12062:8600":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:880:7436":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"18:624:37084":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:4344:9280":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:1850:2274":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:2766:9256":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:43513:8097":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:548:10544":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12830:8747":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6332:7719":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:8794:24323":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:46664:10308":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:7582:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11661:8541":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4998:11012":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:39461:8221":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9752:7916":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:45956:10289":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12576:8715":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:80:7896":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3088:2284":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:8000:17616":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:6417:9887":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:2380:9240":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11788:8552":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:49980:17262":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:2936:9507":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:9660:37078":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:9521:7912":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:39282:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:9790:37076":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13174:8824":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12997:8791":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:4:1117":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"18:521:28293":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:45993:10291":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:4044:10157":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4603:10860":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1537:10592":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:39634:28533":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:11573:7634":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:849:7781":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12452:8692":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:4745:9290":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"11:2479:37062":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:6057:7489":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:9961:10228":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:1054:9747":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"22:752:7409":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:8670:2422":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6531:7959":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:582:8283":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9711:37082":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:5588:9263":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:4037:17635":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"21:276:2389":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"17:13575:8962":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6741:11351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3245:12042":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:6189:9369":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7694:7739":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:4298:9867":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:14024:9071":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:324:7977":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"11:357:7420":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"20:0:1835":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"1:7553:2403":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:4902:17678":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:8847:8020":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6415:9391":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:41664:10172":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:44099:10254":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12959:8787":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11327:8520":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:922:9740":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:44421:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:12698:8731":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:495:10510":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:2574:9248":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"21:302:2390":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"1:21196:17253":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:42705:116":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:507:10515":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:1758:7999":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:12293:8653":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:2487:10491":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10949:8492":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:30387:29177":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:47696:10320":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4908:10957":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:10934:7255":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:3232:7945":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:699:7594":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"8:0:2257":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:8785:8018":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4595:10855":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"11:992:9487":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:23518:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4616:10864":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:10792:137":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:3824:9864":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:4375:10735":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4989:11006":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:557:9840":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11000:8495":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:1413:7152":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11173:24452":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"22:534:7890":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"1:43463:8094":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11719:24335":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:0:320":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9780:7917":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:21591:17255":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:44386:6606":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1501:10576":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:678:262":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10036:8400":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"9:426:23254":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:32152:10207":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:48041:10333":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:12252:8642":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:7302:7791":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:2618:9250":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2359:9239":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:8780:2285":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10903:7944":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:1104:7994":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:32105:10490":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"11:2368:2274":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:12810:8746":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"4:11294:7804":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:9023:9989":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:42458:6654":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:8962:7799":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:6159:11253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10661:8451":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:3596:7781":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:2037:7809":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:4776:10901":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:8948:9983":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:736:28291":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:666:7152":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:4506:10814":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10738:7943":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:40443:8049":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:4218:9866":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:48000:10330":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:123:17857":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:11942:6640":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2887:2279":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:30921:207":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3003:12046":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:12225:6609":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6047:11212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:10237:11756":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:2363:17577":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:11473:8352":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:3337:12049":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:43921:6620":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:119:17856":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:4294:10158":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:2841:6483":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:40306:10218":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"9:486:23251":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"11:483:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:30090:11811":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:1494:7784":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13868:9033":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:5418:9877":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:44670:9760":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12671:8462":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:41830:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:10438:7152":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:0:482":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:9972:8399":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:945:9745":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13228:8830":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11981:6639":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:1259:9487":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:860:9745":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:11048:8498":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:43591:2290":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:1576:10617":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:4849:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:14469:9210":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10561:8438":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:12039:1649":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:40213:28707":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:4497:9283":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:4889:9295":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:12017:408":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"18:582:7850":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:12034:804":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:44053:10245":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:588:17522":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:7633:11470":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:1910:710":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"5:2051:9820":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4473:10800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:149:7415":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:13071:8802":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:9469:7509":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:40495:8059":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7269:37069":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:12040:1646":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:2209:7936":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"23:0:2367":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"4:7717:17528":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7503:9268":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:4729:17643":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5075:11045":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:7629:9839":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:9261:725":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"11:2165:7753":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:7259:7810":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:6527:9888":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13739:9012":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13298:8846":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4578:10848":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:3360:8077":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:7792:24271":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:40201:10215":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:9636:6653":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:10084:7925":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:7995:7807":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:12214:6611":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:1846:2323":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"4:5555:11254":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:6530:17719":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:22308:10186":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:12032:802":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:7365:32420":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:7232:2323":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:48079:10335":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:42950:7856":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:40114:6578":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:1140:7995":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:5558:17706":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:3981:17630":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:5368:9871":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:13876:9036":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:44246:10261":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:5997:17776":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:39342:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:39386:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:7844:7808":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:43797:6630":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:1635:7424":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:40364:7831":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2795:6481":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:4015:17631":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5363:9304":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12465:8694":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:3032:9270":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:11145:9981":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:44370:6603":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13802:9017":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"11:680:7781":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"21:313:2391":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"17:10726:8456":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:415:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:8239:9544":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10292:7603":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:8281:9960":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10607:8086":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"4:5402:9876":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1604:10636":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:40425:7834":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"1:21415:17245":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:3021:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:3583:7152":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:6248:11282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:12018:1036":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:10059:8401":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:1013:7428":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:918:7785":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:8791:210":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:12086:8604":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:1560:7452":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12911:8782":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"9:450:23252":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:8978:24329":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11316:8519":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:4862:9294":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:2883:9501":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:3719:9862":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:43434:8090":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:21252:17258":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:9823:24341":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:7867:137":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"16:6844:9455":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:9455:37074":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:0:2260":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:42196:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:10447:7753":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6376:24264":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:939:9743":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"21:266:2377":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"4:11300:8021":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:4148:7826":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:10930:9906":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:7590:2321":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:8374:17688":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5634:9307":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6927:11433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:2012:7930":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:1650:10672":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12888:8773":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:1796:8001":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:10782:7808":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:22433:10199":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:12997:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"16:6226:9371":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:6281:7534":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:1710:10703":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:9083:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:46308:10300":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:12036:1650":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:11235:8516":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7651:9581":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2428:9242":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7782:9584":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:10721:6627":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10468:7624":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:10214:7928":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:2317:7152":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:48094:10336":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4939:1103":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:7514:8283":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6017:24262":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:42157:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:772:7783":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:5955:11161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:11221:162":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"20:93:2351":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:44628:10271":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:39181:12050":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:7540:144":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10672:7939":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:5104:11064":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:12473:8696":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:7556:11461":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:4912:860":{"crate_id":1,"path":["core","iter"],"kind":"module"},"20:348:2341":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"6:4698:10878":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14118:9097":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9617:37080":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:43182:10241":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10278:8417":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:46946:10313":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:2856:2278":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:20964:7850":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:2238:9487":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"4:7723:17558":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:10005:7537":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:4417:9281":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:9959:7920":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:3214:7989":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5033:11029":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:42315:7853":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11845:8562":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:6169:11256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:6691:11323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:5867:11113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:1903:6786":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:46483:10305":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:8154:9643":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2378:213":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:4808:17640":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10534:8436":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5995:7674":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:46506:10306":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:47960:10326":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:4166:7452":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:3144:99":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:8551:9980":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:22741:197":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:1965:208":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:21467:17249":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"11:868:9746":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:2184:11997":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:30445:29179":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:44174:10180":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:13135:8821":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:40122:6579":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:62:17802":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:25920:279":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:4034:7428":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4363:7526":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:2942:12035":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:44398:6602":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"14:7:9732":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:9607:7914":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7523:9577":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:1591:10629":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10487:6624":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:2361:17576":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:30373:70":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4847:10935":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:10714:7942":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:12025:1544":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:43697:6625":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:47508:10318":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:7466:9836":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10420:8332":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:5634:2326":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:5648:9311":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11244:8539":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:6413:8075":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"13:0:2256":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:40342:7828":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:9933:8397":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"0:44:2022":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"1:46330:10301":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:6149:7494":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:4146:8011":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:44068:10250":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:766:28292":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:21461:17247":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:1406:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:13101:2317":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"20:8:2346":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:13914:9044":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4566:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:3260:145":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"21:228:2048":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"17:11407:24331":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11261:8517":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:654:18215":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:231:2347":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"4:533:7476":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"16:6960:9463":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:40393:8040":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:42079:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2915:12032":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:2905:7484":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:2881:9261":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3888:9277":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:10830:33101":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:9985:7921":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7568:7735":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:5829:11086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"20:336:2340":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:12484:8699":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:8967:113":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:8895:24326":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:8115:9639":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"10:44:7754":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:9945:7622":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:7722:7742":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:9427:6670":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:2463:11490":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:7584:7507":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:8973:9984":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"0:119:1832":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"4:1538:2323":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12543:8707":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:8825:24324":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:4613:9287":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"3:0:2255":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:7827:8163":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:2450:9243":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:2925:12034":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:4835:9293":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:6335:17729":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:4395:7452":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:11248:8102":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:2548:9247":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:9098:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:6361:9385":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:2347:17572":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:8671:2421":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:10478:7256":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12074:8603":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"7:31:23238":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13792:9016":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:113:7902":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:32253:6488":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:8263:9865":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13259:8836":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:785:2274":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"10:36:10493":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5152:11082":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:1541:9754":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"0:46:662":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"16:5661:9316":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:489:10507":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:43869:6629":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:40486:7835":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2266:101":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10165:24361":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:14499:9215":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:681:8266":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12852:216":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:14145:9104":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:12023:346":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:46138:10295":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:4557:9285":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:21560:17587":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:5376:17763":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"4:909:7988":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:9093:247":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12123:8610":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:13676:9001":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10097:8403":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:2596:9249":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4428:10778":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1763:11513":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:11034:7514":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:1632:10660":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12225:8633":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4543:10830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:40137:6581":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"5:1428:7781":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:7406:106":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:0:2264":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13966:9057":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"20:383:2344":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"1:42967:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:11990:17529":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:11606:9896":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:11592:32678":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:42437:6652":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4647:10874":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6944:37067":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:389:7422":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:42717:9611":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:43715:6623":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:9328:6617":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6968:24267":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:4116:8009":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:10311:111":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:6587:2323":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13981:9059":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12098:8607":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:9207:7618":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:12026:1631":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"16:2504:9245":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13949:9050":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14335:9173":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:11327:9892":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:42237:89":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:2058:9487":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:5403:7599":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:1521:10584":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6718:11333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6893:7686":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:8880:9982":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:7323:2323":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:9086:7600":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:48064:10334":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:4785:7485":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:4290:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:10071:7540":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:2555:143":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:2930:9506":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:3671:7428":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11191:8284":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:4056:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:5295:127":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:2681:6790":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:10757:9908":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:2336:212":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:6798:11358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4738:10881":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"22:470:7403":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"4:11165:7840":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:14110:9096":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:42760:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:10788:24428":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9852:24342":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:22397:28741":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:8540:8017":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:43545:8100":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7513:9576":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"19:0:1134":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:40383:7832":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:1466:7782":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"22:1122:8221":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:40035:6579":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11910:8585":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:12020:1666":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:43555:8101":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:5982:7957":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:8765:24322":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:40041:10211":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:3315:9271":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:755:8277":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4496:10808":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:8909:17724":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7318:9524":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6943:11439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:7616:11465":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"14:0:2262":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:14346:9174":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:5612:9265":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:2562:269":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3421:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:780:100":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:46405:10303":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:11746:10176":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:42958:7857":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:40402:8043":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:43197:11592":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10750:7626":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:6781:11353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:9889:7839":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13851:9028":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:1092:9751":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1528:10587":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:4236:7152":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:8392:9972":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:5038:9870":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"11:1145:9753":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:5974:11163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1525:7996":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:40882:8074":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10520:8435":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12737:8736":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:6513:9396":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:7604:11463":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:719:8271":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11507:24333":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:1674:10689":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:6658:11300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:7657:11474":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"11:101:10486":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:7895:7792":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"18:614:37086":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:10752:11506":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6818:9454":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:21918:31898":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:841:9743":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9070:7599":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:46740:10310":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"20:356:2342":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:40931:8080":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:8855:2323":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6583:9403":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:400:8280":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:2303:9758":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:43946:6580":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:5633:8044":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:39447:10210":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:9849:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:660:7904":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:6959:7470":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:2954:12038":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:43535:8099":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10575:8439":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4351:10718":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:1072:9753":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:1534:7152":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:5227:214":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:9531:37081":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:45731:10280":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6346:7721":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:7544:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7582:7736":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:504:8282":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:2467:10488":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:3441:7946":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:542:10541":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:0:1536":{"crate_id":4,"path":["std"],"kind":"module"},"17:10370:7937":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:5017:9299":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11351:8522":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6742:9440":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:8167:9646":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:46900:10312":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:2871:9497":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:4949:9297":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:11322:12009":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:7223:2318":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:1290:9747":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2946:12036":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:10802:126":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:5812:7487":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:2670:9252":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:9037:32367":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:9564:7913":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:2473:7973":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4755:10889":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:12001:32364":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:1653:6746":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:9464:8004":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"4:2592:7479":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"11:693:2323":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5140:11077":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:5974:232":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:22708:200":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:21208:29245":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:11815:8558":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"4:8831:7797":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:40875:8073":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:5085:11050":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11687:24334":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:12160:2292":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:12184:8623":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:5673:9264":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:7262:7439":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:12531:8705":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:609:8260":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:4612:17630":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:6243:9374":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4878:10946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:3233:9856":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:504:7445":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:9581:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:10112:7926":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:9390:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:2920:12033":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:43939:6632":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:3416:9956":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"5:7286:2323":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:4029:17633":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:14316:9168":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:45886:10286":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:7679:11479":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:5992:11175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:723:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:3193:9854":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:21459:17587":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:4025:17632":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4299:10159":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13055:8801":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11151:7953":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:276:2287":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:21210:11996":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:6898:11417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14126:9099":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"22:966:7414":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"1:23038:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2903:12030":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:14324:9169":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:2305:23399":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:6696:9428":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4686:10877":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:5004:11015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:44683:10275":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:12037:1647":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:1962:209":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:41456:10169":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:531:8250":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:11023:7513":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:3915:9278":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:645:17524":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:7090:9486":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:11440:7518":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:3185:35880":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10440:8425":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:7832:8004":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:4921:9296":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:1496:10574":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:14134:9100":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:6961:11442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5760:24261":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:9264:8002":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:2832:9259":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:11184:9891":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12790:8743":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"22:0:2366":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"6:4764:10894":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:45707:10279":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10197:8412":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:45641:10276":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:10066:8001":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11547:8538":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:1697:10699":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4584:10851":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}