{"root":"0:0:1783","crate_version":"0.4.0","includes_private":false,"index":{"5:5518:2098":{"id":"5:5518:2098","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8561:2375-0:155:1762":{"id":"a:1:8561:2375-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8561:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:736"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:647":{"id":"0:46:647","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:32131":{"id":"5:5536:32131","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12478:32129"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1782":{"id":"0:91:1782","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3413:1592":{"id":"1:3413:1592","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39310:9713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:161:1760":{"id":"b:1:2263-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:27902"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:1782":{"id":"0:102:1782","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12413:35538":{"id":"1:12413:35538","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12056:2246","str::split":"1:12404:2089","prim@char":"4:12051:446","`DoubleEndedIterator`":"1:7476:125","str::rsplit_terminator":"1:12416:35539"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43475:6578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:7265":{"id":"5:682:7265","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12474:1944":{"id":"1:12474:1944","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:170:1761":{"id":"b:1:2260-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:2141"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2832:2351-0:161:1760":{"id":"a:1:2832:2351-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:2351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12379:1930":{"id":"1:12379:1930","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43395:1965","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:2351-0:155:1762":{"id":"a:1:2832:2351-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:2351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88:1770":{"id":"0:88:1770","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12357:35531":{"id":"1:12357:35531","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1774","0:96:2032","0:97:1775","0:98:2067","0:99:2036","0:100:1770","0:102:1782"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112:710":{"id":"0:112:710","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12443:35545":{"id":"1:12443:35545","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12445:35546":{"id":"1:12445:35546","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12450:35549":{"id":"1:12450:35549","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12478:32129":{"id":"1:12478:32129","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12360:35533":{"id":"1:12360:35533","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12358:35532"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12382:29068":{"id":"1:12382:29068","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12383:29064"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43699:6573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12472:35555":{"id":"1:12472:35555","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12017:131","`FromStr`":"1:12016:2242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12016:2242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12016:2242","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:36213","5:5518:2098","5:5521:36214","5:5524:36215","5:5532:36216","5:5533:36217","5:5534:2302","5:5535:32132","5:5536:32131"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5535:32132":{"id":"5:5535:32132","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12477:32130"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12371:30019":{"id":"1:12371:30019","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12384:7460":{"id":"1:12384:7460","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43679:6572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:450":{"id":"0:168:450","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1762":{"id":"0:155:1762","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:2792:249-0:155:1762","a:1:8561:2375-0:155:1762","a:1:2775:240-0:155:1762","a:1:8560:2376-0:155:1762","a:1:2832:2351-0:155:1762","b:1:2263-0:155:1762","b:1:2570-0:155:1762","b:1:2581-0:155:1762","b:1:3411-0:155:1762","b:1:2576-0:155:1762","b:1:2566-0:155:1762","b:1:2260-0:155:1762","0:159"]}}},"0:95:1774":{"id":"0:95:1774","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:161:1760":{"id":"b:5:680-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:7265","5:683:28072","5:684:28073"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2775:240-0:170:1761":{"id":"a:1:2775:240-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3411-0:170:1761":{"id":"b:1:3411-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:1773":{"id":"0:118:1773","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12390:2068":{"id":"1:12390:2068","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12447:35547":{"id":"1:12447:35547","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12479:35556":{"id":"1:12479:35556","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4559:35556"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43724:6533","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:170:1761":{"id":"b:1:2566-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:2106"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2775:240-0:155:1762":{"id":"a:1:2775:240-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12404:2089":{"id":"1:12404:2089","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12056:2246","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::split_whitespace":"1:12382:29068","str::rsplit":"1:12410:32652"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43425:6577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12354":{"id":"1:12354","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12355:864","1:12356:2073","1:12357:35531","1:12358:35532","1:12360:35533","1:12363:33803","1:12364:35534","1:12365:338","1:12366:337","1:12367:1967","1:12369:30018","1:12371:30019","1:12373:30020","1:12375:35535","1:12376:35536","1:12377:32642","1:12378:32643","1:12379:1930","1:12380:9754","1:12381:1949","1:12382:29068","1:12383:29064","1:12384:7460","1:12385:35537","1:12386:29071","1:12387:28207","1:12390:2068","1:12393:2069","1:12396:6494","1:12400:1943","1:12404:2089","1:12407:29062","1:12410:32652","1:12413:35538","1:12416:35539","1:12419:32654","1:12422:32656","1:12425:35540","1:12428:35541","1:12431:2043","1:12434:35542","1:12437:35543","1:12440:35544","1:12443:35545","1:12445:35546","1:12447:35547","1:12449:35548","1:12450:35549","1:12451:35550","1:12454:35551","1:12457:2091","1:12460:32658","1:12463:35552","1:12466:35553","1:12469:35554","1:12472:35555","1:12474:1944","1:12475:33756","1:12476:32133","1:12477:32130","1:12478:32129","1:12479:35556","1:12481:11547","1:12482:35557"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:993","0:87:2096","0:88:1770","0:91:1782"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:2067":{"id":"0:98:2067","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:249-0:161:1760":{"id":"a:1:2792:249-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2832:2351-0:170:1761":{"id":"a:1:2832:2351-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:2351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12469:35554":{"id":"1:12469:35554","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2265:27902":{"id":"1:2265:27902","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2032":{"id":"0:96:2032","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:155:1762":{"id":"b:1:3411-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12378:32643":{"id":"1:12378:32643","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12377:32642"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12386:29071":{"id":"1:12386:29071","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43717:6585","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1762":{"id":"0:116-0:155:1762","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1762","glob":false}}},"0:7:1758":{"id":"0:7:1758","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1928","0:24:575","0:44:1973","0:46:647"],"is_stripped":false}}},"b:1:2570-0:155:1762":{"id":"b:1:2570-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:736"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12454:35551":{"id":"1:12454:35551","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8560:2376-0:155:1762":{"id":"a:1:8560:2376-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8560:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:24:575":{"id":"0:24:575","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6900:265","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1768":{"id":"0:117:1768","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12367:1967":{"id":"1:12367:1967","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41465:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12476:32133":{"id":"1:12476:32133","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:1761":{"id":"0:170:1761","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2792:249-0:170:1761","a:1:8561:2375-0:170:1761","a:1:2775:240-0:170:1761","a:1:8560:2376-0:170:1761","a:1:2832:2351-0:170:1761","b:1:2263-0:170:1761","b:1:2570-0:170:1761","b:1:2581-0:170:1761","b:1:3411-0:170:1761","b:1:2576-0:170:1761","b:1:2566-0:170:1761","b:1:2260-0:170:1761","b:5:5778-0:170:1761","0:108","0:111","0:110","0:183","0:106"]}}},"1:12419:32654":{"id":"1:12419:32654","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246","str::rsplitn":"1:12422:32656"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43529:6580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2585:1577":{"id":"1:2585:1577","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:170:1761":{"id":"b:1:2263-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:27902"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2572:736":{"id":"1:2572:736","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12428:35541":{"id":"1:12428:35541","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:36217":{"id":"5:5533:36217","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2237","`String`":"5:7475:245"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2268","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8561:2375-0:170:1761":{"id":"a:1:8561:2375-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8561:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:107:710":{"id":"0:107:710","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:450"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2581-0:161:1760":{"id":"b:1:2581-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1577"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12457:2091":{"id":"1:12457:2091","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12385:35537":{"id":"1:12385:35537","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43689:6574","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12356:2073":{"id":"1:12356:2073","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3411-0:161:1760":{"id":"b:1:3411-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1592"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:22:1928":{"id":"0:22:1928","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12437:35543":{"id":"1:12437:35543","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12056:2246","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::rmatch_indices":"1:12440:35544"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43575:6583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:1973":{"id":"0:44:1973","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1783":{"id":"0:0:1783","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1758","0:114-0:161:1760","0:115-0:170:1761","0:116-0:155:1762","0:117:1768","0:118:1773","0:119:1781"],"is_stripped":false}}},"1:12407:29062":{"id":"1:12407:29062","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11872:6587","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12410:32652":{"id":"1:12410:32652","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12056:2246","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::split":"1:12404:2089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43443:6575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12481:11547":{"id":"1:12481:11547","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4560:11547"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43733:6532","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12369:30018":{"id":"1:12369:30018","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41465:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1770":{"id":"0:100:1770","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2569:2106":{"id":"1:2569:2106","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2543:137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2617:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12422:32656":{"id":"1:12422:32656","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12051:446","str::splitn":"1:12419:32654","self::pattern":"1:12056:2246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43547:6579","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12380:9754":{"id":"1:12380:9754","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43401:6571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12434:35542":{"id":"1:12434:35542","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12056:2246","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::matches":"1:12431:2043"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43647:6582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:36216":{"id":"5:5532:36216","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12475:33756":{"id":"1:12475:33756","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39497:28270","Self::is_ascii":"1:12474:1944"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39497:28270","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:155:1762":{"id":"b:1:2566-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:2106"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12466:35553":{"id":"1:12466:35553","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5780:1554":{"id":"5:5780:1554","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2581-0:170:1761":{"id":"b:1:2581-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1577"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","description","cause","provide","source"],"trait":{"name":"Error","id":"1:2628:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2580:1579":{"id":"1:2580:1579","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12431:2043":{"id":"1:12431:2043","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12056:2246","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::rmatches":"1:12434:35542"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43629:6581","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12358:35532":{"id":"1:12358:35532","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12381:1949":{"id":"1:12381:1949","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43411:6570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2263-0:155:1762":{"id":"b:1:2263-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:27902"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12451:35550":{"id":"1:12451:35550","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12081:6562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12463:35552":{"id":"1:12463:35552","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12377:32642":{"id":"1:12377:32642","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12378:32643"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:28073":{"id":"5:684:28073","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:28072":{"id":"5:683:28072","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12416:35539":{"id":"1:12416:35539","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12056:2246","str::split":"1:12404:2089","prim@char":"4:12051:446","str::split_terminator":"1:12413:35538"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43493:6576","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12375:35535":{"id":"1:12375:35535","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12057:1495","str::slice_mut_unchecked":"1:12376:35536","crate::ops::Index":"1:3072:2233"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:1760":{"id":"0:114-0:161:1760","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1760","glob":false}}},"1:2262:2141":{"id":"1:2262:2141","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:36214":{"id":"5:5521:36214","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5778-0:170:1761":{"id":"b:5:5778-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9490:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5776:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5780:1554"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5517:36213":{"id":"5:5517:36213","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2237","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2268","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2237","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2268","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12373:30020":{"id":"1:12373:30020","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12363:33803":{"id":"1:12363:33803","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11616:6566"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2787:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12482:35557":{"id":"1:12482:35557","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4557:35557"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43742:6531","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2570-0:170:1761":{"id":"b:1:2570-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:736"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2570-0:161:1760":{"id":"b:1:2570-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:736"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8560:2376-0:161:1760":{"id":"a:1:8560:2376-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8560:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9485:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12365:338":{"id":"1:12365:338","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12366:337","`u8`":"4:12068:1601"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12383:29064":{"id":"1:12383:29064","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12382:29068"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43708:6586","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12387:28207":{"id":"1:12387:28207","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12400:1943":{"id":"1:12400:1943","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41465:194","prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12477:32130":{"id":"1:12477:32130","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:1760":{"id":"0:161:1760","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:2792:249-0:161:1760","a:1:8561:2375-0:161:1760","a:1:2775:240-0:161:1760","a:1:8560:2376-0:161:1760","a:1:2832:2351-0:161:1760","b:1:2263-0:161:1760","b:1:2570-0:161:1760","b:1:2581-0:161:1760","b:1:3411-0:161:1760","b:1:2576-0:161:1760","b:1:2566-0:161:1760","b:1:2260-0:161:1760","b:5:680-0:161:1760","0:167","0:92","0:169"]}}},"5:5534:2302":{"id":"5:5534:2302","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:249-0:155:1762":{"id":"a:1:2792:249-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5524:36215":{"id":"5:5524:36215","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7475:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2775:240-0:161:1760":{"id":"a:1:2775:240-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:109:736":{"id":"0:109:736","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12355:864":{"id":"1:12355:864","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12051:446"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:993":{"id":"0:86:993","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8561:2375-0:161:1760":{"id":"a:1:8561:2375-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8561:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12376:35536":{"id":"1:12376:35536","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12057:1495","crate::ops::IndexMut":"1:3076:2234","str::slice_unchecked":"1:12375:35535"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12393:2069":{"id":"1:12393:2069","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8560:2376-0:170:1761":{"id":"a:1:8560:2376-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8560:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2260-0:155:1762":{"id":"b:1:2260-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:2141"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2260-0:161:1760":{"id":"b:1:2260-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:2141"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2581-0:155:1762":{"id":"b:1:2581-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1577"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2576-0:155:1762":{"id":"b:1:2576-0:155:1762","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12364:35534":{"id":"1:12364:35534","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12396:6494":{"id":"1:12396:6494","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41465:194","prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12449:35548":{"id":"1:12449:35548","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12460:32658":{"id":"1:12460:32658","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12056:2246"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12366:337":{"id":"1:12366:337","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12068:1601"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2576-0:161:1760":{"id":"b:1:2576-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:1775":{"id":"0:97:1775","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:1761":{"id":"0:115-0:170:1761","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1761","glob":false}}},"0:99:2036":{"id":"0:99:2036","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2096":{"id":"0:87:2096","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2576-0:170:1761":{"id":"b:1:2576-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1579"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9490:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:119:1781":{"id":"0:119:1781","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7475:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41608:229","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12425:35540":{"id":"1:12425:35540","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41463:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2579:132":{"id":"1:2579:132","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:2584:132":{"id":"1:2584:132","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31968:9990","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:2792:249-0:170:1761":{"id":"a:1:2792:249-0:170:1761","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1761","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2566-0:161:1760":{"id":"b:1:2566-0:161:1760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1760","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:2106"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12440:35544":{"id":"1:12440:35544","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12056:2246","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::match_indices":"1:12437:35543"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43593:6584","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12061:2235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12076:6563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:12945:8278":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:2783:6434":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"4:6616:6983":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:8948:17207":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3023:2355":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:47536:9823":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:9493:6992":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:12252:8135":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:44345:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:42465:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4889:10476":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9494:6605":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:4706:10394":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12208:8118":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:40267:7534":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4552:10362":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:1631:10160":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:21445:16730":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:4749:17122":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:1751:11007":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:2461:10984":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:47720:9827":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:32004:9410":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:44180:7325":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:41401:9733":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7597:36818":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:4915:17158":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"22:728:6880":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"17:9921:7887":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:2883:11514":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:14522:8712":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12225:8126":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:45818:9794":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:8825:23733":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:1671:1146":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:3254:11528":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12970:8281":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12007:7127":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:7281:10943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:1575:10117":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14346:8667":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:12051:446":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:14420:8688":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:42560:74":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"22:636:7382":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"20:0:1784":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"1:44160:6561":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:30220:6701":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10507:7927":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:2384:17061":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:21262:16734":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4520:10348":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12305:8149":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:11761:6591":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:6574:10794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:5612:8758":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:14134:8593":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10616:7936":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:9945:7107":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:676:252":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4465:10320":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:44363:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:9350:7106":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:21908:17071":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:39303:9712":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:40531:7557":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:3226:9358":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6156:8859":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:4641:8781":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7015:8970":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:7936:7294":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3017:2353":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:14110:8589":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:145:1998":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"1:21040:16735":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:39271:11526":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6598:10811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:291:36857":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"5:3800:2270":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:1840:7491":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:3939:17107":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7792:23680":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:3441:7437":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:11586:11643":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"15:394:22773":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"4:12066:790":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:12052:1617":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:5017:8792":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:261:7770":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:46364:9809":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:14100:8586":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12830:8240":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13162:8316":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:43724:6533":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:14033:8567":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13693:8496":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:9886:7409":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:447:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:1048:36813":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:12054:1107":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"6:4951:10517":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10420:7824":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3233:11527":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:45716:9790":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:4806:8785":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:8870:7509":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:4687:10382":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10726:7949":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:22754:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:541:10041":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:4789:10435":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:5776:10605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:622:6740":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:2849:11342":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6657:10845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11872:6587":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13973:8551":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:8212:7556":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:2543:137":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:9102:7100":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:3330:2270":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:491:7739":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12098:8100":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:43304:7588":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:10545:9357":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:39083:11532":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7006:8967":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"11:798:9233":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9931:7023":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:6944:6953":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:45563:9784":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:2499:9351":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:21038:17071":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:2550:258":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:6086:10750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10637:7940":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:74:1599":{"crate_id":1,"path":["core","u32"],"kind":"module"},"6:4570:10373":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:8465:9739":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"4:11632:9399":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:11573:7120":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"14:215:9230":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:35:2269":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:5746:10580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5046:10564":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:43401:6571":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"11:2033:8980":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:853:7267":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:3679:17105":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:2035:7294":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:12846:110":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:41358:7337":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11448:23741":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13890:8532":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12658:8218":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2540:156":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:12701:207":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:44355:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12452:8185":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:630:7266":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:40239:7317":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:7360:36821":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:47738:9828":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:2368:17056":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:40019:6536":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:40367:7550":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"7:32:22647":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:12071:1600":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:10548:9359":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13244:8325":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:1611:6905":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11108:7592":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:6546:9391":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:1495:10074":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:4051:17114":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5121:8795":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12465:8187":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:10292:7088":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:6783:2276":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:6017:23671":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:6817:17209":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:4002:2224":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:6256:6978":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14024:8564":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"21:228:1999":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"17:13802:8510":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:11189:33941":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:8115:9132":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6583:8896":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:7464:6944":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:8304:9464":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:7316:2273":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:3054:11531":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:10440:7917":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:11098:7442":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:10167:9501":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:2178:7424":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:6735:10858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4856:10460":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:21209:16738":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13202:8321":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:12017:7303":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12934:8276":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:6499:6911":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:7855:7654":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:10126:7896":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:3989:17109":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1595:10131":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:9140:9394":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:9852:23751":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13259:8329":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6879:8952":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:93:2301":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"1:42222:6604":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:1776:2270":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:568:10055":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:2832:2351":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"11:1838:7478":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:20885:28781":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5995:7160":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4508:10342":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:40092:9719":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:6549:17200":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:5317:124":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:2497:17071":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:6987:11289":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:1517:9247":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:40149:9720":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:10351:34375":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4403:10291":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:30414:28716":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:7595:10973":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:9051:23717":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9328:6570":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:536:7158":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:8181:17070":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14378:8682":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:2989:121":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:40342:7320":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11074:7995":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:4986:10535":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:22328:9703":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:3020:2354":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"20:356:2292":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"6:4471:10322":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:8562:2374":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:4498:10335":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:6086:6935":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:22224:9691":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:45531:9783":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:43629:6581":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"16:3764:8767":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"13:226:7237":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:11253:155":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:46788:9817":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10547:7930":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:46108:9803":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:3191:35032":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:44144:6553":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:4158:7312":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:2879:11516":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:5137:206":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:47747:9829":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:11332:7510":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:558:9340":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"11:1121:9246":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:12061:2235":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:5646:9382":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:4931:10506":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:42775:7344":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:44148:6556":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:14308:8658":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"15:306:7459":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:5787:7283":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10227:7907":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:2254:99":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:5369:17243":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:895:7266":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:1536:10092":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1696:10199":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:14460:8699":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5060:10570":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:7397:11600":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:46724:9815":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:20904:28780":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:1663:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11062:7439":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:12067:786":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:10468:7109":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:4787:415":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"16:7568:7221":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:40545:7558":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:9711:36830":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:6680:10846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:8862:7266":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:7153:7295":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:6456:8887":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2844:2228":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"0:44:1973":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"1:41531:7267":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:12983:8283":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"4:10259:11250":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"12:0:2211":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:8134:9135":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11821:6590":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12086:8097":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1482:7477":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:8953:23737":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"9:507:9303":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"18:521:27702":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:3669:6911":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4415:10300":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:14269:8643":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"15:288:7454":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:12000:9526":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:2321:8730":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:41779:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:3243:255":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:22314:9702":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"20:348:2291":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:11687:23743":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:1924:6739":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"16:6361:8878":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:45734:9791":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:3830:8769":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:6346:7207":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:285:7465":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13024:8288":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:6795:6467":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:8097:9130":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"21:320:7716":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:45664:9788":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"9:357:22676":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:46230:9806":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:5712:7176":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13685:8495":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:1503:7271":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:8342:10827":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:40769:7018":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:4527:8777":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:1826:2224":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:43547:6579":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:42511:72":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:8312:7495":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:2933:22809":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:41378:29797":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13876:8529":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"0:119:1781":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:12081:6562":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:41449:9675":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10370:7428":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:7733:17012":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11235:8009":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:43809:11679":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:7575:2271":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"14:31:9225":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:1067:9242":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:9496:6606":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6696:8921":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5858:10644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:231:2297":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"17:9564:7404":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:5830:8813":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:7401:11599":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4438:10308":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:707:6564":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:10802:9515":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:43443:6575":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:6651:6911":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:8971:9489":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:7375:17022":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11710:7116":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:3273:31753":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:47598:9824":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:907:2270":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:6850:10930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:8149:7295":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:13981:8552":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:21464:17071":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:8016:17097":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:43647:6582":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:9172:29759":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13838:8515":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4766:10421":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:22216:9690":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6929:7217":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:5845:10635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:8286:9368":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:41437:9673":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:119:17337":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:32015:9710":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:39145:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12184:8116":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:9752:7407":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"22:752:6890":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:43291:7587":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4558:10364":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:2284:22782":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10672:7430":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:10789:9411":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"20:383:2294":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"1:22622:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:0:1487":{"crate_id":4,"path":["std"],"kind":"module"},"1:40000:6534":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:22027:9687":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"22:948:27725":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"6:6607:10817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13487:8392":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"14:160:9225":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:2472:8737":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:7513:9069":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:41701:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:6318:8877":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:10278:7909":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:8547:7503":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"11:644:7267":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:1523:7485":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10581:6580":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:7363:2238":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10771:7950":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:7102:23677":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2574:8741":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11951:8082":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:12063:791":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:4850:10457":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13298:8339":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4812:10443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:7920:9414":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:9046:9495":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:4697:10389":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:4479:446":{"crate_id":1,"path":["core","char"],"kind":"module"},"1:45485:9781":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:43152:7578":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:12076:6563":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:6616:10818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9617:36831":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:47895:9839":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:6902:6985":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:45771:9793":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:1983:200":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4545:10360":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:4745:8783":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:5424:9379":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"20:327:7724":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"5:2970:36706":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:7573:10968":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10534:7929":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:47819:9835":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:2744:8748":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"22:966:6895":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"16:6352:7209":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:46938:9818":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"4:3115:9354":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:3170:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:44037:6565":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:6003:10720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:6814:10911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:43575:6583":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:8561:2375":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:2638:9353":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:1702:10200":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:8557:7266":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:9933:7889":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:20844:7335":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4897:10481":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6843:10927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4820:10446":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:11495:9365":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:31968:9990":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:5403:7084":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:40754:7565":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10561:7931":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:207:6909":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:41414:9368":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4370:10278":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:44152:6558":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:11616:6566":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:5727:7179":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:1579:7479":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:4835:10450":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:2180:7464":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:534:6959":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:8249:17104":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:44014:9759":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:47286:9820":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10628:7939":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:41463:196":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:4430:10306":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:1818:7266":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:10779:10998":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:40059:103":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:11407:7514":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6792:8946":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:40198:7313":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:97:9986":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:8202:7313":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:42215:6605":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:6884:11603":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7503:8761":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:4585:8779":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:22149:7306":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:14145:8597":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5384:23668":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7708:7227":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"21:302:2340":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"20:223:7720":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"4:6077:6972":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:1044:8980":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7660:9075":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9207:7103":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"14:165:22746":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8560:2376":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7217:2273":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:44168:6560":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11798:6593":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13816:8511":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:1273:9242":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:41539:2273":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:10347:6577":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:21223:11481":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:2787:112":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:276:2237":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:727:7080":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:2628:132":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:6582:10799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:646:17008":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:5760:9388":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:6572:2273":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:47842:9836":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:4986:8791":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9488:36824":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:22278:28728":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:11625:34294":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"19:0:1087":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13010:8285":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11742:8041":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:45864:9795":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12473:8189":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:21295:16729":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:46132:9804":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:3217:36700":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10390:6587":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:4731:10405":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:259:36856":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"1:10540:7577":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:12050:990":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"14:202:2223":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:500:10012":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"4:1573:7478":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:8238:7495":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:7408:9331":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4477:10325":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:5673:8757":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4526:10351":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:2923:132":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:42979:7573":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:47804:9834":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:1569:10115":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:5632:223":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:44172:6554":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13914:8537":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:3447:9460":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:4:1070":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:14335:8666":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"14:0:2212":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9502:6608":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:43475:6578":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:7271:2273":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:11177:9486":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:20887:28776":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13422:8341":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:1663:10183":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12123:8103":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:2209:7427":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:0:527":{"crate_id":1,"path":["core"],"kind":"module"},"1:2797:2263":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12671:7955":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:9500:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12154:8112":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:723:7268":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13868:8526":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10903:7435":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:2324:203":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:46488:9811":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"11:365:6903":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:49740:16746":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:11163:7282":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"11:2194:9991":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:7434:138":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:14056:8575":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5082:10576":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:3945:17106":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:749:2224":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:7567:10967":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13676:8494":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:5555:7533":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:14478:8705":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:8505:17182":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:4924:17159":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:7912:123":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10916:7982":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:8713:23730":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:4985:6935":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:41818:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13632:8489":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:5619:2276":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11215:8004":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"22:43:27722":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"4:10088:7490":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:11309:6999":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:6753:8934":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6165:10776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4330:10245":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:636:7756":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"22:1122:7712":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"17:10714:7433":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:43369:2240":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:41523:7266":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:21473:7326":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11261:8010":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4725:10402":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:43733:6532":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:11326:7289":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:2450:8736":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:32116:6441":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:43252:7585":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:7304:10954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:4320:9370":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:14083:8582":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:2329:129":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:10383:7913":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:5407:6935":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:39955:6540":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:41514:1966":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"11:399:7469":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10929:7984":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:11815:8051":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:7549:10964":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7608:10977":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10059:7893":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:43679:6572":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:1520:10084":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:8244:7497":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12172:8113":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:554:10047":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:40299:7538":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:47778:9832":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:9744:11637":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:44398:9771":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:10661:7944":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:2223:17053":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:11327:8013":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:8050:9126":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:45633:9787":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:9504:6609":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:573:10057":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:6473:6982":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:8169:9364":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"5:1672:6911":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:8814:201":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:6189:8862":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5886:10656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:46261:9807":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:755:7768":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:45593:9785":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:7137:7511":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:6968:23676":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:30250:28715":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:2012:7421":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:43221:7582":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:836:9238":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:7029:6986":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:681:7757":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:9460:136":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:13135:8314":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:6014:7541":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:1011:6911":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:10862:33946":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:40351:7548":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:4189:7501":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:42736:7342":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:2921:229":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:44436:9776":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7768:7229":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:2865:11512":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:0:2215":{"crate_id":17,"path":["object"],"kind":"module"},"16:6844:8948":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:40521:7556":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:7890:2227":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:9003:23739":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13949:8543":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:47872:9838":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:4874:10471":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2938:11522":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:4058:11548":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2504:8738":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:40026:6537":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:949:9238":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:2696:8746":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:44057:2236":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7492:9066":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:3232:8729":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"20:336:2290":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"4:8320:9465":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11602:9679":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:6145:10762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12711:8226":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:8916:17206":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:22340:11343":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4035:105":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"14:187:22753":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7544:9071":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:5798:7181":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7862:9089":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"22:386:6896":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"1:41329:11609":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:7391:23678":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:15:2184":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:8985:7284":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:13055:8294":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:8985:81":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:9159:9497":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:5390:9374":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"16:7067:8977":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:1585:7480":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:9948:6962":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:7534:8762":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:12062:684":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:10036:7892":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:1842:7492":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"20:8:2296":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"4:7541:9523":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:9959:7411":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:0:1785":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"17:10980:7088":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:9111:237":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:3232:7436":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:32022:6615":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:43323:7590":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:14013:8560":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:3171:7266":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6045:10738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:2887:11513":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:14282:8649":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:7767:9409":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:12075:1206":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:12674:29304":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11086:7441":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:2875:2229":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:7561:10966":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:4640:10378":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"0:7:1758":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"5:2131:6928":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:2934:11521":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12750:8231":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4589:10374":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:2526:8739":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"0:117:1768":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"1:2835:6438":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:4802:10440":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:2782:2350":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"16:8239:9037":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:41312:9672":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:7621:23679":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:3188:35031":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12373:8151":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5808:10623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:11934:8079":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:1986:199":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:10107:7518":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13667:8490":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:3315:8764":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"4:5639:6978":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:42975:11086":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10340:7911":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:10853:33937":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:7739:7279":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:14401:8683":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"11:311:7468":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:1779:7488":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:14324:8662":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11547:8031":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:10844:9364":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:9607:7405":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"9:0:2208":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8990:88":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:1102:7483":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12136:8104":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13710:8497":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:41608:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:10814:7293":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"4:943:9236":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:8006:9416":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11295:7445":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9701:7406":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2829:6436":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:2214:133":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:8397:17169":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:9455:36826":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12074:8096":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:863:2273":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:3260:11530":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:3391:7567":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"11:1845:7479":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:3076:2234":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:22262:28720":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13966:8550":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:39925:28708":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:4613:8780":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10588:7933":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:21910:16732":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13071:8295":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:7489:2225":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:3529:17089":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:45419:9778":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:7651:9074":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:30784:198":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4608:10375":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:10140:17071":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"11:986:9240":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:80:7387":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:22165:7330":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:7438:9334":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:1506:10079":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:4074:7267":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:6829:10918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:6433:7564":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:43689:6574":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7287:7277":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:4478:17133":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:10520:7928":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:3939:6935":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:5455:108":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:22820:183":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"11:695:7271":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"20:369:2293":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"5:1426:7267":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:10084:7416":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:0:869":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12531:8198":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:2618:8743":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4397:10288":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:3409:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:10265:7420":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:5832:6970":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:9485:115":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:7514:10956":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:25801:268":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:3305:9362":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12237:8129":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:6859:10933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:9865:7020":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:10962:9409":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:2380:8733":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:4234:7266":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:4391:10286":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10214:7419":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:10990:33934":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:41676:198":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:39130:7520":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"4:7664:9400":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:11472:7001":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:8154:9136":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12422:8176":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13611:8484":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:11337:23862":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:5905:8823":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2644:8744":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"11:1852:7480":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:5909:10669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:47758:9830":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:5091:9373":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2276:107":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:43383:6569":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:1442:2273":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"0:24:575":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"4:416:177":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:1058:9240":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:45916:9797":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:2243:7275":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13113:8303":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:6364:178":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:782:6914":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:2060:9242":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:6180:10787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:46040:9800":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:21798:28230":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6243:8867":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"22:879:27724":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"1:22080:9688":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"22:1034:27726":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"17:10186:7902":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:39227:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:7529:1970":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:7475:245":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:14221:8642":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"10:44:7239":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:44003:11680":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:39310:9713":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:13851:8521":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:878:6919":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3212:7478":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14499:8708":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:7559:2270":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:7645:9339":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:43529:6580":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:22133:7329":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11617:8032":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:14126:8592":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:3461:8765":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:11201:8000":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7128:9495":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:3185:34559":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:4138:7498":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:9038:7297":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"16:6425:8885":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:2546:259":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:7897:11598":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"5:4363:6937":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:2918:8999":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:7472:10955":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:5404:9378":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"18:481:7738":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5495:6935":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:43241:7584":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:10623:7597":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4127:7311":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:40064:9718":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:9242:7104":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:5634:8800":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:5373:17244":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:43742:6531":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:7669:9402":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:20857:28226":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:4921:8789":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:4240:9369":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1500:10076":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:2924:9000":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:6453:2224":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:2785:247":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:21132:16742":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:22787:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:7090:8979":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5982:7448":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6720:10854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:1649:10172":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"21:198:2342":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"1:2903:11517":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:9762:36827":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:41600:208":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:11023:7989":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6721:23675":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:12639:142":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:12282:115":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:46600:9813":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12790:8236":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:6024:10732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:11389:9398":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:2881:8754":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:12056:1463":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:589:17006":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:3013:2352":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:14163:8600":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:7257:36701":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:43231:7583":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:11359:9395":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:40211:7314":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:10467:7576":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:40745:7564":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:5760:23670":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:1764:649":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:2837:109":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:45894:9796":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:1641:6699":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:44024:9763":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:12846:8245":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:7213:6971":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:4751:17124":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:11197:7325":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"11:2186:36812":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"14:7:9225":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6944:36817":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:14076:8581":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:42720:7339":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:4949:8790":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:12894:146":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11281:7115":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:40310:7543":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5010:10542":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:2913:11519":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:2966:36708":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:2537:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:10962:7986":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:11055:6996":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:3513:34804":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:2219:6957":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:5363:8797":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:657:2273":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4485:10330":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:4023:9663":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:8895:23735":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:41548:2372":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:40738:7563":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:4348:266":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:6900:265":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:7447:2356":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:506:10015":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:47767:9831":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:9442:6544":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:11244:8032":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:12068:1601":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:922:7271":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:13989:8553":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11845:8055":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"11:844:9239":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"11:1027:22740":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13148:8315":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:4862:8787":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:21471:16739":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:9060:33930":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:7451:9336":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"0:22:1928":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"6:6053:10741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:3183:36696":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:1564:2224":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:12280:8145":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:14536:8715":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"11:403:7470":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:12065:789":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"17:10410:7914":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:12726:9685":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5070:10571":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:41581:2373":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:1690:10196":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:3049:22811":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:47396:9821":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11358:23863":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:5988:10718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:4709:17160":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:39904:9714":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:4957:10518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:9176:9498":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:47934:9840":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:494:10010":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:9984:9730":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:7884:23681":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6877:10936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:6812:2278":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:7934:29757":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"18:96:7390":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:39044:11535":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:6153:6974":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:6893:7172":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:1545:10098":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:47644:9825":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4351:6615":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:3997:17110":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:538:7074":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:41651:7266":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"13:0:2206":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:14001:8559":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:9116:238":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:43203:7579":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:7895:134":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:46754:9816":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"21:313:2341":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:42015:87":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4826:10447":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"15:327:7233":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13778:8506":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:4200:6614":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:11191:7775":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:9521:7403":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"21:67:1997":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"1:9151:710":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:3002:11525":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4376:10279":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7722:7228":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:14355:8669":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5088:8794":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:5613:7318":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:2598:9352":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"7:0:1647":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11048:7991":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:7532:10959":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:2548:8740":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:10366:7912":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"10:36:9993":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:10966:9300":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:46062:9801":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:11639:9399":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:40249:7529":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:44176:6555":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7523:9070":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:8219:6570":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:9033:7287":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:46442:9810":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:3720:7294":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:14316:8661":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:4164:6935":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:40189:7526":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:736:27700":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13758:7137":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:5982:17257":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:8072:9127":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:6729:10857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4965:10523":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:42229:6606":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:4277:9665":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:5440:9380":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"16:3915:8771":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"0:118:1773":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"4:5994:223":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:9277:7105":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:42960:9743":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"22:534:7381":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"6:1911:18686":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:7600:6990":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:6932:7560":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:14042:8568":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:123:17338":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:955:9239":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6386:8881":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:4011:9662":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12645:8215":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:4500:17134":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:41659:7267":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:4946:10515":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:22853:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:4176:17131":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:8415:9476":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:6753:10868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"20:249:132":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"11:760:2270":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:21090:11481":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"4:4753:17125":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:2596:8742":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13906:8535":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:42767:7343":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:531:7741":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:9441:229":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"17:11111:7996":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4343:10255":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:483:6958":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:2366:204":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:2617:120":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:43708:6586":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:41740:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:526:10032":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:9998:7864":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10949:7985":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:9288:7491":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:1825:181":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:5929:10685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3652:2273":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:9481:133":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:9867:7884":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:12061:682":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:43717:6585":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:2962:10981":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"11:1822:2273":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"4:6437:9390":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:2766:8749":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:4053:8772":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:42745:151":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1590:10129":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:40381:7551":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:41857:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:43846:9752":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:671:7400":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"4:8903:9488":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:39977:6531":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:5017:10545":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:14448:8697":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:1717:10207":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1603:10136":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:699:7079":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:12072:1597":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"5:1473:7269":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7474:9058":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7736:9076":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:39185:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7582:7222":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:8878:2273":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12043:7136":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:7584:10972":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13174:8317":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:44224:9768":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:4396:7010":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:4344:8773":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:4834:846":{"crate_id":1,"path":["core","iter"],"kind":"module"},"20:315:36841":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"16:8167:9139":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:0:471":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:46183:9805":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11381:8020":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:7644:17071":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:43212:7580":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:11788:8045":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:12073:840":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:1590:7481":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:1184:7415":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"23:0:2317":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"17:10447:7920":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:10298:7266":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:8932:17205":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:40391:7553":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:13567:8454":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:3465:9363":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5435:8798":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:7500:2226":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:11008:9487":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12778:8235":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:22919:182":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"8:0:2207":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:14118:8590":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4317:10235":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2969:22810":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13826:8512":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10595:6579":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"13:110:36814":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4458:10317":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:4405:6616":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:926:9233":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"9:393:22662":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:14173:8605":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:4194:6935":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:2942:11523":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:39941:6538":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:1513:10082":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12997:8284":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13188:8318":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:21088:29370":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:39985:6532":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:22307:11011":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:40220:7316":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:20902:28778":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:1429:150":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:43493:6576":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:3266:9360":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:1257:8980":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:3504:6544":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:1931:695":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"16:2305:22808":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:45753:9792":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:39205:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:0:2214":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:3522:17069":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:39993:6533":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:23399:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4718:10401":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6139:10761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6805:10908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:43313:7589":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:2786:246":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:7872:7293":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:10112:7417":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:840:7266":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:21339:17071":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:4634:17111":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:1548:6935":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:3797:8768":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11407:23740":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4652:10379":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:9003:31933":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:44156:6557":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:507:7740":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:2871:8994":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:10646:7941":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:7928:9415":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:7860:7493":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12196:8117":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"22:669:7070":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"4:3348:17094":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:3975:17108":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12698:8224":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6017:10731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:8848:23734":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:1492:7270":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10456:7923":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:4272:9664":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12959:8280":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"9:450:22661":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"11:119:6899":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:7526:10958":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7208:2268":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:4537:10355":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"11:1858:7481":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:12022:17013":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:12293:8146":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:5753:9385":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:5961:6943":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:8978:23738":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:11401:7513":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4680:10381":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12111:8102":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:9749:7324":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10150:242":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:41272:164":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:8594:23718":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:6320:17210":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"20:97:1995":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"4:3741:9365":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11151:7444":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:12765:8234":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13575:8455":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:4578:17151":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:2498:11304":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12062:8093":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:5816:7186":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:11072:6998":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12024:7129":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10430:7916":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:11162:7998":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:3518:2224":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10316:7910":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4783:10432":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10397:7429":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9372:7086":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"18:624:36834":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:22241:28730":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10750:7112":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4864:10465":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12576:8208":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:11000:7988":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:579:10060":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:474:7475":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:1568:2270":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:11761:8044":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:12724:8227":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11991:7123":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6037:10736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:40258:7532":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5827:10625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:21694:16744":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:7538:10960":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"11:332:6901":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13922:8539":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:4994:10537":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:44406:9773":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:482:10004":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:2690:10987":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1138:7484":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:690:7759":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10603:7935":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:22721:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4772:10424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:44419:173":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:4462:8775":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12484:8192":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:2366:11009":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:9650:7088":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:42483:113":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:2896:8995":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4422:10304":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:6983:11590":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:46518:9812":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:6627:10823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:595:10070":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:5963:8829":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4618:10376":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:8996:9490":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:805:17023":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:10834:123":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:4796:10437":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:11374:9396":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:42236:6607":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13723:8502":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:6784:10894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:434:7772":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:40760:7567":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6687:8920":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:4032:6911":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11141:7593":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:41935:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:10698:7947":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:12064:788":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:6499:7212":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:22886:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:7279:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6513:8889":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:8181:7231":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:364:9338":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:8765:23731":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:42728:7341":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9490:124":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"16:6545:8895":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"9:237:9739":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:22189:9689":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4881:1056":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:42495:9104":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:41295:9670":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:4268:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:8011:7292":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"22:0:2316":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"5:3594:7267":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:3238:7481":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10738:7434":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:45463:9780":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:5076:10573":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:10824:134":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:2832:8752":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"0:0:1783":{"crate_id":0,"path":["idna"],"kind":"module"},"6:4491:10332":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"10:0:2209":{"crate_id":10,"path":["adler"],"kind":"module"},"1:46284:9808":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:2409:6633":{"crate_id":4,"path":["std","io"],"kind":"module"},"11:1831:2270":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:10012:7088":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:7554:7220":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:2223:36772":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:4426:6937":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:5578:17187":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:43425:6577":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:3655:7787":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:1638:10164":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:43593:6584":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:43395:1965":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:42054:94":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:21176:16743":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:7269:36822":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:8840:9486":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:2160:626":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:1076:9246":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:14469:8703":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:2792:249":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:7744:7278":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:10322:7267":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13101:8301":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:9531:36829":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12876:8264":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:1527:10087":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:4160:7499":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:7247:6922":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:2201:2238":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:3325:11534":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6634:10827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11226:8008":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:40281:7319":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:6203:7017":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:2840:6440":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:6600:23674":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4425:6442":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:9498:6607":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:12857:6974":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:10551:9361":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"14:40:8079":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:12554:8201":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:9985:7412":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:5996:10719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:113:7393":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:47474:9822":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:884:7269":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:39898:6532":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:8563:7506":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:10109:9500":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:7828:9085":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:12057:1495":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:9912:7885":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:5060:9373":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:40229:7527":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:2257:100":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:8205:23682":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:4774:8784":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:7436:7168":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:40779:7568":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:7893:11597":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:7438:159":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11367:8017":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4742:10409":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"15:0:2213":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:9445:7401":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:11835:7005":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:5588:8756":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"9:426:22663":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:11234:11002":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:12737:8229":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:2382:17060":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:11137:7997":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:2049:9320":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:653:17695":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:719:7762":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11535:7119":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:6560:6898":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:14068:8578":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6376:23673":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:9574:36832":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11971:8092":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:2359:8732":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"9:52:7240":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:40332:7546":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:1075:7414":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:1922:9534":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:5575:10748":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:2891:11515":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:9488:7493":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:3065:7782":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:4807:6968":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:9896:23752":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13546:8444":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10494:7097":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"4:3744:9366":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:2576:6962":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:6802:2277":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:12016:2242":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:41896:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"11:1538:9248":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:5696:23669":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:3288:11533":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7782:9077":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"20:257:1996":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"21:266:2327":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"4:9026:9494":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:10575:7932":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13274:7116":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:488:10007":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"11:2049:9240":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:10334:108":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7613:9073":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:43278:7525":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4919:10497":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:2534:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:13897:8534":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6041:23672":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:5135:6943":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10788:23837":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:30308:28723":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:5419:7085":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:5891:10657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13085:8297":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:40076:29799":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:1817:7490":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:39497:28270":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:11351:8015":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:6198:11010":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:638:9341":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:5846:2224":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11306:7116":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4448:10314":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2141:9321":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:8232:6572":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:9823:23750":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:9198:34913":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:3600:8766":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:358:9337":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:4392:9371":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14514:8709":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4382:10281":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:22201:29796":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5964:10706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:9709:151":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:4973:17165":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"21:276:2339":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"9:330:9994":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:47682:9826":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:6485:7211":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:7555:10965":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12888:8266":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"18:644:7740":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6915:7216":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:3264:9359":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:20872:28226":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"4:12070:1599":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"14:221:9232":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:3178:7479":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:6415:8884":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:12055:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:9972:7891":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6697:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"11:793:7477":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:5648:8804":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:1781:7489":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"3:0:2205":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:6192:7545":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:0:2210":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:5976:10711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:5249:205":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"16:6204:7187":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:652:7740":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13554:8447":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:1557:7266":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10685:7945":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:532:10035":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:5814:10624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4975:10529":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:47857:9837":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:9106:179":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:10197:7904":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:8225:6577":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:1709:10203":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"0:46:647":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"4:11613:7302":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:10023:7406":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9790:36825":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4666:10380":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:43831:9747":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:12070:6564":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:2722:8747":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6261:7171":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:1760:9531":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:4497:8776":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:2216:9350":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5802:10620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:8158:7296":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:43989:9758":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:6401:7210":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:2960:36707":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:8686:23729":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:7381:31977":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"1:40139:7011":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13739:8505":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:30236:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:43952:9683":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:12074:1657":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"5:6969:6956":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:39249:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:22655:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:8659:23716":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:14296:8655":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:62:17283":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:12621:8214":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:22688:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:41591:6601":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:12049:397":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:1561:2273":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:42093:7338":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:2339:7146":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:4644:10838":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:2947:11524":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9660:36828":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12810:8239":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13228:8323":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:44448:9250":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:21361:7326":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13451:8361":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:4168:7500":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:14090:8583":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:2930:11520":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:5930:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:4059:17116":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:2170:7272":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"18:614:36836":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:46086:9802":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:6031:10733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5661:8809":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:45439:9779":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:3419:6935":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"11:1068:9244":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4756:10415":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:4648:10842":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:44164:6559":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:30214:2265":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:39913:6539":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10165:23770":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:7259:10942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:8298:17132":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13792:8509":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1288:9240":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:2864:8753":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:2170:11481":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:13215:8322":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:2394:17066":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"11:667:7270":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11719:23744":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:10502:6575":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:39161:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"16:5322:8796":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:40290:7537":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:629:9317":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:8826:7282":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:5866:8820":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11886:8064":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:2859:8990":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:149:6896":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:7342:36820":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:2172:11482":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"4:641:9343":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:42520:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:7581:6988":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:897:2224":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:4889:8788":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:822:6917":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:3032:8763":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:7530:7774":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:1118:36704":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:41974:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:7690:6994":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"18:564:7076":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:504:7773":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:21786:7328":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:8338:9467":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:6169:6977":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:2888:6967":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4:4712:17133":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5838:10633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:6279:7202":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:10975:9381":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:7284:2372":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:10478:7110":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:8121:9454":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:21076:16737":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:7237:2224":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11173:23861":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:4844:10456":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:11216:9394":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:42538:132":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:9208:10994":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"9:177:7255":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:42455:11078":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:1737:11496":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:4341:7009":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"11:968:8980":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:4047:17113":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:2406:8734":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10240:7107":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"4:8293:10989":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:7520:10957":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:43333:7591":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"11:1501:22741":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:766:27701":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6818:8947":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:8926:23736":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6569:7213":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:6650:236":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:1103:9245":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:2150:23795":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:9081:7299":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:913:7477":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:41667:2273":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:10760:9510":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:7751:17042":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"9:486:22660":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:11557:9367":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:10139:23769":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:44199:126":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"16:2428:8735":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:22952:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:40319:7544":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4940:10512":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:6201:7288":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:9492:6604":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:11586:7122":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:1302:9246":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:8884:9383":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:40106:11564":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:6602:17202":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:10486:6993":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:660:7395":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:22:723":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:11910:8078":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:1411:7266":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6742:8933":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12685:8223":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11490:8029":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:3248:139":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:9780:7408":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:1895:6738":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"17:12598:8209":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:10784:11000":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:0:2216":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13040:8290":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:3581:7266":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:21279:17071":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:4452:6617":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:12056:2246":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:5325:6911":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:505:6928":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:9172:7102":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:6076:10747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:4417:8774":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7318:9017":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11639:7775":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5053:10567":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:1673:10189":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:261:6911":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:11507:23742":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"11:736:7269":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:1557:10107":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:8808:7507":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12911:8275":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7462:9057":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:3204:7480":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:7618:10979":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:817:9236":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"22:470:6884":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:43925:9757":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:4626:6526":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:4293:10218":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6714:10852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2907:8755":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:10591:6994":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:7287:10945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:6226:8864":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:12949:2267":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:43860:9755":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:39324:7712":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:6083:22781":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:4646:10840":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:1464:7268":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5872:10655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1681:10190":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:7476:125":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:3303:9361":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:43411:6570":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5899:10662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:10429:7575":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:8990:110":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11124:7443":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:400:7771":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:3565:7438":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:21440:17071":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:12033:33949":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:3888:8770":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:44461:9777":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:40731:7562":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:574:7740":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:12069:1598":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:12496:8194":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11661:8034":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:11066:6997":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:3735:9320":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:7054:8974":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5574:7175":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:3224:9357":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11837:6592":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:32008:9037":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:11389:7447":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9086:7085":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3072:2233":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:6332:7205":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:2959:7265":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:43699:6573":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:587:10065":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:8670:2235":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12437:8180":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:8281:9147":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:582:7774":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4628:10377":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:7882:9412":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:5743:8810":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:12127:11673":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:515:7737":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:8195:9140":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2669:6743":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:4830:17121":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:30812:7335":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"18:599:36835":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:2854:8993":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6268:36819":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9177:7321":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:2788:8750":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:45964:9798":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:918:7270":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:14434:8690":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:4393:6935":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:5784:10607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:7718:17011":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:2670:8745":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:46010:9799":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:6960:8956":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:40787:7570":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:8488:9479":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:10609:7596":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:46678:9814":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:43877:9756":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:7585:171":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:7041:8971":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:29965:11305":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:256:7769":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:9121:155":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:4719:8782":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:590:7744":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4910:10491":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:11272:8011":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:7422:29799":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11316:8012":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:9137:7101":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:7391:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:1634:625":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:14156:8598":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:8574:9485":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:727:148":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12543:8200":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:47793:9833":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12513:8197":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:4808:30151":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:609:7751":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:11536:9366":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11473:7844":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9701:147":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:7308:2273":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:10097:7895":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:4003:17111":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12267:8141":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:8854:9487":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:5509:9381":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:6467:8888":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:30180:2264":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7694:7225":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:547:10044":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:9070:7084":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:932:17023":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:45509:9782":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:45615:9786":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:9963:7028":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:40012:6535":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:8794:23732":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"4:7865:9411":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"4:2562:6964":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:11182:11494":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"7:79:22654":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2775:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:39965:6541":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:12058:1582":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:12652:158":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:21689:16736":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"4:4037:17112":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:12076:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:5049:8793":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:1733:10212":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11872:8063":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:3846:9367":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:42757:9739":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:21341:16731":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:6901:7215":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:7771:9410":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"16:4557:8778":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:5939:7154":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5027:10550":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:2360:197":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"11:2174:9988":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:582:7335":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:45694:9789":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:6304:223":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:7225:7482":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2908:11518":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6531:7450":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2810:8751":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:8364:9372":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:22589:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:871:7268":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:5776:253":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:5978:6978":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13286:8332":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"11:1012:9242":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:562:10052":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:10443:7507":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:32029:7519":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:40169:7525":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4750:10413":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:21347:16733":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"22:449:6880":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:40045:6530":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:47144:9819":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:44236:11686":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:4835:8786":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"11:2168:9987":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4306:10227":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}