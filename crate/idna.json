{"root":"0:0:1610","crate_version":"0.2.3","includes_private":false,"index":{"2:3500:2181":{"id":"2:3500:2181","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3501:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:7112":{"id":"2:3364:7112","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3366:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3489:6592":{"id":"2:3489:6592","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3490:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3476:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13390:59379":{"id":"2:13390:59379","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12489:6414"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13387:64021":{"id":"2:13387:64021","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15945:1976"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3294:2180":{"id":"2:3294:2180","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3159:135":{"id":"2:3159:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3161:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13746:150":{"id":"2:13746:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13747:181","2:13748:150","2:13749:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13437:59951":{"id":"2:13437:59951","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8428:120","prim@char":"1:15939:1971","str::split":"1:15945:1976","self::pattern":"2:13018:6271"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49425:6429","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:10:2111":{"id":"21:10:2111","crate_id":21,"name":"BidiDataSource","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:11:1806"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3342:7104":{"id":"2:3342:7104","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3561:6680":{"id":"2:3561:6680","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3563:181","2:3564:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13037:6406":{"id":"2:13037:6406","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13039:7064","2:13040:922","2:13041:63822","2:13042:63823"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3321:6768":{"id":"2:3321:6768","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:181","2:3324:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13504:59320":{"id":"2:13504:59320","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5831:6507":{"id":"1:5831:6507","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5832:9086"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"23:103:8400":{"id":"23:103:8400","crate_id":23,"name":"Array","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["23:104:1775","23:105:65257","23:106:62584","23:107:65258","23:108:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8428:120":{"id":"2:8428:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8429:6289","2:8430:6290","2:8431:6291","2:8432:6292","2:8436:6293","2:8439:1751"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5823:6514":{"id":"1:5823:6514","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5824:61261"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8860:6387":{"id":"2:8860:6387","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,23],"end":[41,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Config","name":"Config","id":"0:182:1585","glob":false}},"2:8347:7042":{"id":"2:8347:7042","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8349:6341"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13391:64022":{"id":"2:13391:64022","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3231:115":{"id":"2:3231:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13393:59922":{"id":"2:13393:59922","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15956:1985"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13396:59919":{"id":"2:13396:59919","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:64670":{"id":"5:6103:64670","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:22:532":{"id":"0:22:532","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:4035:2088":{"id":"2:4035:2088","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4036:6497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3503:130":{"id":"2:3503:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3506:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22902:6628":{"id":"2:22902:6628","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22892:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6088:64668":{"id":"5:6088:64668","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13408:1757":{"id":"2:13408:1757","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49393:6416","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,39],"end":[41,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Idna","name":"Idna","id":"0:176:1587","glob":false}},"2:13434:12543":{"id":"2:13434:12543","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12810:6412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3395:7004":{"id":"2:3395:7004","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3724:6982":{"id":"2:3724:6982","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3726:58539"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3701:7458":{"id":"2:3701:7458","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3632:7457","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13410:12542":{"id":"2:13410:12542","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15945:1976"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49690:6411","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1079:6548":{"id":"1:1079:6548","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:6349","1:1081:1752","1:1082:59316","1:1083:59317","1:1084:59318","1:1085:59319","1:1086:59320"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3415:7014":{"id":"2:3415:7014","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3417:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3265:220":{"id":"2:3265:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3380:6647":{"id":"2:3380:6647","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:181","2:3383:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2941:177":{"id":"2:2941:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2942:415","2:2943:2117","2:2944:1796","2:2945:6287"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13383:1888":{"id":"2:13383:1888","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3331:7099":{"id":"2:3331:7099","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:181","2:3334:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13406:1738":{"id":"2:13406:1738","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15939:1971"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49377:1774","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13496:64041":{"id":"2:13496:64041","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8863:7025":{"id":"2:8863:7025","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13490:64039":{"id":"2:13490:64039","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13382:793":{"id":"2:13382:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15939:1971"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4735:6569":{"id":"1:4735:6569","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4736:62193","1:4737:44020","1:4738:62194","1:4739:62195"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5819:6513":{"id":"1:5819:6513","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5820:61395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13398:59920":{"id":"2:13398:59920","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13028:6404":{"id":"2:13028:6404","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13030:6406","2:13031:63465","2:13032:63466","2:13033:63467","2:13034:63469","2:13035:63468","2:13036:63470"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8343:7040":{"id":"2:8343:7040","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8345:6340"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9240:2214":{"id":"2:9240:2214","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13446:59953":{"id":"2:13446:59953","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971","str::rsplitn":"1:15945:1976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49511:6432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3713:224":{"id":"2:3713:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3714:181","2:3715:6982","2:3716:686","2:3717:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3718:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3718:137":{"id":"2:3718:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3720:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:6408":{"id":"5:5833:6408","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13413:12282":{"id":"2:13413:12282","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49699:6410","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"22:344:1810":{"id":"22:344:1810","crate_id":22,"name":"UnicodeNormalization","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:346:6498","22:347:6499","22:348:1894","22:349:6500","22:350:6501","22:351:2149"],"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2905:183":{"id":"2:2905:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2907:604","2:2908:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3352:6769":{"id":"2:3352:6769","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[41,31],"end":[41,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Errors","name":"Errors","id":"0:191:1586","glob":false}},"2:3509:132":{"id":"2:3509:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3511:181","2:3512:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10279:119":{"id":"2:10279:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10280:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:1877":{"id":"2:13420:1877","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3150:75":{"id":"2:3150:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6091:64669":{"id":"5:6091:64669","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3336:7101":{"id":"2:3336:7101","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:44:598":{"id":"0:44:598","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[225,0],"end":[230,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2847:97":{"id":"2:2847:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2849:2041"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13392:304":{"id":"2:13392:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15956:1985","str::as_mut_ptr":"1:15945:1976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5753:6508":{"id":"1:5753:6508","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5754:62274","1:5755:62276","1:5756:62275","1:5757:62277"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:140:1606":{"id":"0:140:1606","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[71,0],"end":[73,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:191:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:23427:7090":{"id":"2:23427:7090","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23428:1268","2:23429:1267","2:23430:1265","2:23431:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22839:7093","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13458:1582":{"id":"2:13458:1582","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15945:1976","self::pattern":"2:13018:6271","prim@char":"1:15939:1971","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49611:6427","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13409:12544":{"id":"2:13409:12544","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15945:1976"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49681:6413","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6471:6553":{"id":"1:6471:6553","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6472:6912","1:6473:6913","1:6474:10298","1:6475:61987","1:6477:61991","1:6479:61988","1:6480:61989","1:6482:61990"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10281:6464":{"id":"2:10281:6464","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10282:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13385:64020":{"id":"2:13385:64020","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3348:7107":{"id":"2:3348:7107","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3326:6650":{"id":"2:3326:6650","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3328:181","2:3329:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13443:64026":{"id":"2:13443:64026","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971","str::split":"1:15945:1976","str::split_terminator":"1:15945:1976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49475:6433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14130:141":{"id":"2:14130:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14131:277","2:14132:518","2:14133:280","2:14134:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8393:2182":{"id":"2:8393:2182","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8395:1893","2:8397:6294","2:8398:6295"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3166:227":{"id":"2:3166:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:127","2:3169:1413"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23736:7038":{"id":"2:23736:7038","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23737:7089"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23732:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13499:7280":{"id":"2:13499:7280","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12957:6421","FromStr::Err":"2:12957:6421"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:6421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:6421","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139:1598":{"id":"0:139:1598","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[56,0],"end":[61,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:191:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13440:64025":{"id":"2:13440:64025","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15945:1976","self::pattern":"2:13018:6271","prim@char":"1:15939:1971","`DoubleEndedIterator`":"2:8428:120","str::rsplit_terminator":"1:15945:1976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49457:6434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3356:6770":{"id":"2:3356:6770","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3358:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1338","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:64667","5:6085:2148","5:6088:64668","5:6091:64669","5:6103:64670","5:6104:64671","5:6105:2118","5:6106:59316","5:6107:59317"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:51:1584":{"id":"0:51:1584","crate_id":0,"name":"uts46","span":{"filename":"src/uts46.rs","begin":[9,0],"end":[727,1]},"visibility":"crate","docs":"[*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:176:1587","0:182:1585","0:191:1586"],"is_stripped":true}},"2:13414:59957":{"id":"2:13414:59957","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13455:64028":{"id":"2:13455:64028","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10285:6466":{"id":"2:10285:6466","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10286:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12465:7526":{"id":"2:12465:7526","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12466:1775","2:12467:62584"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14204:6761":{"id":"2:14204:6761","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14205:59389","2:14206:59390","2:14207:59391","2:14208:59392","2:14209:59393","2:14210:59394","2:14211:6318"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3506:131":{"id":"2:3506:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5687:6563":{"id":"1:5687:6563","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5688:8298","1:5689:59379"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3424:7019":{"id":"2:3424:7019","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3426:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22839:7093":{"id":"2:22839:7093","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22840:7089","2:22841:1245","2:22842:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13381":{"id":"2:13381","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12478:1338","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13382:793","2:13383:1888","2:13384:12333","2:13385:64020","2:13387:64021","2:13390:59379","2:13391:64022","2:13392:304","2:13393:59922","2:13394:1776","2:13396:59919","2:13398:59920","2:13400:59921","2:13402:6782","2:13403:64023","2:13404:59941","2:13405:59942","2:13406:1738","2:13407:7071","2:13408:1757","2:13409:12544","2:13410:12542","2:13411:7877","2:13412:64024","2:13413:12282","2:13414:59957","2:13417:1876","2:13420:1877","2:13423:6329","2:13427:1751","2:13431:1899","2:13434:12543","2:13437:59951","2:13440:64025","2:13443:64026","2:13446:59953","2:13449:59955","2:13452:64027","2:13455:64028","2:13458:1582","2:13461:64029","2:13464:64030","2:13467:64031","2:13470:64032","2:13472:64033","2:13474:64034","2:13476:64035","2:13477:64036","2:13478:64037","2:13481:64038","2:13484:11929","2:13487:59958","2:13490:64039","2:13493:64040","2:13496:64041","2:13499:7280","2:13501:1752","2:13502:59318","2:13503:59319","2:13504:59320","2:13505:64042","2:13507:6550","2:13508:64043"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3263:106":{"id":"2:3263:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9371:6625":{"id":"1:9371:6625","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9372:61370","1:9373:61371","1:9374:61372","1:9375:61373","1:9376:61374","1:9377:43626","1:9378:61369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4767:6995":{"id":"2:4767:6995","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4768:1775","2:4769:63075","2:4770:1778"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22802:7250":{"id":"2:22802:7250","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22803:62968","2:22804:1225","2:22805:1226","2:22806:62969","2:22807:62970","2:22808:62971","2:22809:62972","2:22810:62973","2:22811:62974","2:22812:62975"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13384:12333":{"id":"2:13384:12333","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9239:2215":{"id":"2:9239:2215","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13477:64036":{"id":"2:13477:64036","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13461:64029":{"id":"2:13461:64029","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8428:120","str::matches":"1:15945:1976","prim@char":"1:15939:1971","self::pattern":"2:13018:6271"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49629:6428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3419:7016":{"id":"2:3419:7016","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13467:64031":{"id":"2:13467:64031","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15945:1976","prim@char":"1:15939:1971","`DoubleEndedIterator`":"2:8428:120","self::pattern":"2:13018:6271"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49575:6426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3632:7457":{"id":"2:3632:7457","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:63805","2:3635:63806","2:3636:59957"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13487:59958":{"id":"2:13487:59958","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15939:1971","self::pattern":"2:13018:6271"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13478:64037":{"id":"2:13478:64037","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13048:6403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:176:1587":{"id":"0:176:1587","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[436,0],"end":[440,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:20:1736":{"id":"0:20:1736","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[45,0],"end":[47,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:4717:2091":{"id":"1:4717:2091","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4718:2058","1:4719:62434","1:4721:62435","1:4722:7800","1:4723:62436","1:4724:11974","1:4725:59489","1:4734:6318"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4742:6589":{"id":"1:4742:6589","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4743:59167","1:4744:59168","1:4745:59170","1:4747:6588","1:4748:59169","1:4750:1899","1:4751:7877"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4660:6528","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13404:59941":{"id":"2:13404:59941","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15945:1976"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10272:109":{"id":"2:10272:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23432:20500":{"id":"2:23432:20500","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23433:62718","2:23434:62719","2:23435:62720"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23427:7090","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3156:149":{"id":"2:3156:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:1910"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2910:124":{"id":"2:2910:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3984:68":{"id":"2:3984:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3985:1426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3401:7007":{"id":"2:3401:7007","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6895:6555":{"id":"1:6895:6555","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6896:61174"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5775:6511":{"id":"1:5775:6511","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:10856","1:5777:61395","1:5778:9086","1:5779:61396","1:5780:6912","1:5781:6913","1:5782:61397","1:5783:1302","1:5784:61398","1:5785:61399","1:5786:61400","1:5787:61401","1:5788:61402","1:5789:61403","1:5790:61404","1:5791:61405"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13503:59319":{"id":"2:13503:59319","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13402:6782":{"id":"2:13402:6782","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15945:1976","crate::ops::Index":"2:3561:6680","`str`":"1:15945:1976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:6719:6511":{"id":"1:6719:6511","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6720:61276","1:6721:11199","1:6722:11200","1:6723:11202","1:6724:11201","1:6725:11203","1:6726:11204","1:6727:11206","1:6728:9122","1:6729:11209","1:6730:11210","1:6731:11211","1:6732:11212","1:6733:11213","1:6734:11214","1:6735:11207","1:6736:11208"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:6349","5:785:6350","5:786:6351"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3262:217":{"id":"2:3262:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5769:6510":{"id":"1:5769:6510","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5770:9086","1:5771:10304"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3390:6649":{"id":"2:3390:6649","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3392:181","2:3393:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7829:6705":{"id":"1:7829:6705","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7830:61391"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3476:116":{"id":"2:3476:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:221","2:3478:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13731:138":{"id":"2:13731:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13732:181","2:13733:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4660:6528":{"id":"1:4660:6528","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4661:6848","1:4662:61770","1:4664:61771","1:4665:61772","1:4666:6584","1:4667:11886","1:4668:11885","1:4670:61773","1:4671:6318","1:4672:1757","1:4673:6301","1:4675:6312"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:182:1585":{"id":"0:182:1585","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[500,0],"end":[506,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:2951:184":{"id":"2:2951:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2953:997","2:2954:826","2:2955:792","2:2956:713","2:2957:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13470:64032":{"id":"2:13470:64032","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:64671":{"id":"5:6104:64671","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2183","`String`":"5:8368:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2183","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:7544","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:6494","1:2579:1954","1:2580:6495","1:2581:6496","1:2582:6497"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10272:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13431:1899":{"id":"2:13431:1899","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8428:120","str::split_whitespace":"1:15945:1976","self::pattern":"2:13018:6271","prim@char":"1:15939:1971","str::rsplit":"1:15945:1976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49407:6430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13412:64024":{"id":"2:13412:64024","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49671:6424","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6824:6553":{"id":"1:6824:6553","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6825:10299"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8582:157":{"id":"2:8582:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8583:1775","2:8584:922","2:8585:6297","2:8588:1778","2:8589:495","2:8591:1869","2:8594:6298","2:8595:6299","2:8596:6300","2:8597:6301","2:8599:6302","2:8601:6303","2:8602:6304","2:8604:841","2:8607:6305","2:8614:1795","2:8616:6306","2:8619:6307","2:8620:6308","2:8621:6309","2:8623:6310","2:8625:6311","2:8628:1306","2:8629:6312","2:8630:6313","2:8634:6314","2:8637:6315","2:8638:6316","2:8639:6317","2:8641:6318","2:8642:1739","2:8644:6319","2:8647:6320","2:8649:6321","2:8659:6322","2:8674:6323","2:8676:6324","2:8680:6325","2:8689:6326","2:8692:6327","2:8694:6328","2:8697:276","2:8704:294","2:8711:6329","2:8718:6330","2:8727:6331","2:8737:1014","2:8744:6332","2:8751:2117","2:8752:1796","2:8753:6333","2:8765:6334","2:8772:6335","2:8784:6336","2:8791:1861","2:8792:6337","2:8797:1788","2:8800:6338","2:8803:6339","2:8804:6340","2:8806:6341","2:8808:415","2:8811:6342","2:8814:997","2:8817:6343","2:8820:604","2:8823:6344","2:8826:907","2:8828:826","2:8830:792","2:8832:713","2:8834:696","2:8836:6345","2:8837:6346","2:8845:6347"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5809:6512":{"id":"1:5809:6512","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5810:59353","1:5811:59354","1:5812:59355","1:5813:59356"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22766:7085":{"id":"2:22766:7085","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22767:7089","2:22768:62968","2:22769:1225","2:22770:1226","2:22771:46993","2:22772:63005","2:22773:12501","2:22774:63006","2:22775:63007","2:22776:63008","2:22777:62969","2:22778:62970","2:22779:62971","2:22780:62972","2:22781:62973","2:22782:62974","2:22783:62975"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3258:2179":{"id":"2:3258:2179","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8380:136":{"id":"2:8380:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8382:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5681:6561":{"id":"1:5681:6561","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5682:59349","1:5683:7648"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8384:151":{"id":"2:8384:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8385:1775","2:8386:6296","2:8387:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6105:2118":{"id":"5:6105:2118","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4:1583":{"id":"0:4:1583","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[315,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:20:1736","0:22:532","0:42:1782","0:44:598"],"is_stripped":false}},"1:6993:6522":{"id":"1:6993:6522","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6994:61245"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13464:64030":{"id":"2:13464:64030","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13018:6271","str::rmatch_indices":"1:15945:1976","prim@char":"1:15939:1971","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49557:6425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13423:6329":{"id":"2:13423:6329","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15939:1971","`None`":"2:47440:176","self::pattern":"2:13018:6271"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13507:6550":{"id":"2:13507:6550","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15939:1971"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49715:6374","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42:1782":{"id":"0:42:1782","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[216,0],"end":[219,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:138:1593":{"id":"0:138:1593","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[50,0],"end":[52,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:191:1586","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:5020:6531":{"id":"1:5020:6531","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5021:6637","1:5022:61948"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13452:64027":{"id":"2:13452:64027","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:191:1586":{"id":"0:191:1586","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[590,0],"end":[603,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13476:64035":{"id":"2:13476:64035","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5761:6509":{"id":"1:5761:6509","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5762:9086","1:5763:59516","1:5764:59517"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23099:7197":{"id":"2:23099:7197","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23736:7038","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23090:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13508:64043":{"id":"2:13508:64043","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15939:1971"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49724:6372","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13411:7877":{"id":"2:13411:7877","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49661:6423","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13484:11929":{"id":"2:13484:11929","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15939:1971","self::pattern":"2:13018:6271"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3253:211":{"id":"2:3253:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23051:20481":{"id":"2:23051:20481","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23052:10438","2:23053:62889","2:23054:62890"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23044:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13048:6403":{"id":"2:13048:6403","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10291:6468":{"id":"2:10291:6468","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2850:6402":{"id":"2:2850:6402","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2852:59163"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13407:7071":{"id":"2:13407:7071","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15939:1971"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49383:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3368:7114":{"id":"2:3368:7114","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13043:6405":{"id":"2:13043:6405","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13045:6289","2:13046:62946","2:13047:62947"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13037:6406","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6493:6630":{"id":"1:6493:6630","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6494:61224","1:6495:11275","1:6496:61225","1:6497:61226","1:6498:61227","1:6499:61228"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10520:146":{"id":"2:10520:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10521:652","2:10522:2058","2:10523:61050","2:10524:61051","2:10525:61052","2:10526:61053","2:10527:61054","2:10528:61055","2:10529:61056","2:10530:61057","2:10531:61058","2:10532:61059","2:10533:61060","2:10534:61061","2:10535:61062","2:10536:1530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3153:74":{"id":"2:3153:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:6288"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:7908:7027":{"id":"2:7908:7027","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7909:63501","2:7910:63502","2:7911:63499","2:7912:63497","2:7913:63503","2:7914:63500","2:7915:63498"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3543:7022":{"id":"2:3543:7022","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3545:237","2:3546:206","2:3547:62650"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13472:64033":{"id":"2:13472:64033","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3385:6648":{"id":"2:3385:6648","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3387:181","2:3388:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10510:142":{"id":"2:10510:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10511:715","2:10513:12312"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13394:1776":{"id":"2:13394:1776","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2872:104":{"id":"2:2872:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2873:408","2:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22713:7092":{"id":"2:22713:7092","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22714:7089","2:22715:62968","2:22716:63398","2:22717:63399","2:22718:63400","2:22719:46993","2:22720:63401","2:22721:63402","2:22722:63403","2:22723:63404","2:22724:63405","2:22725:63406","2:22726:63407","2:22727:63408","2:22728:12335","2:22729:63409","2:22730:63008","2:22731:11659","2:22732:62719","2:22733:62718","2:22734:62720","2:22735:62969","2:22736:62970","2:22737:62971","2:22738:62972"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13502:59318":{"id":"2:13502:59318","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13493:64040":{"id":"2:13493:64040","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15939:1971","self::pattern":"2:13018:6271"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3360:7096":{"id":"2:3360:7096","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3362:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3088:7095":{"id":"2:3088:7095","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3087:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3759:6990":{"id":"2:3759:6990","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3373:6999":{"id":"2:3373:6999","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:181","2:3375:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3411:7012":{"id":"2:3411:7012","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:64667":{"id":"5:6084:64667","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2183","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:7544","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2183","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:7544","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3407:7010":{"id":"2:3407:7010","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3409:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:6409":{"id":"5:5837:6409","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:37414"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3796:6991":{"id":"2:3796:6991","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10289:189":{"id":"2:10289:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10290:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6591:6565":{"id":"1:6591:6565","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6592:61269","1:6593:61270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13481:64038":{"id":"2:13481:64038","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15939:1971","self::pattern":"2:13018:6271"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3162:228":{"id":"2:3162:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164:127","2:3165:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13474:64034":{"id":"2:13474:64034","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:2148":{"id":"5:6085:2148","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12957:6421":{"id":"2:12957:6421","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12958:126","2:12959:59299"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13501:1752":{"id":"2:13501:1752","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13417:1876":{"id":"2:13417:1876","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8867:7024":{"id":"2:8867:7024","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7908:7027","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10222:2091":{"id":"2:10222:2091","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10223:1530","2:10224:59490","2:10226:59489"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13405:59942":{"id":"2:13405:59942","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15945:1976"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6897:6556":{"id":"1:6897:6556","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6898:61926"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13403:64023":{"id":"2:13403:64023","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15945:1976","crate::ops::IndexMut":"2:3565:7123","`str`":"1:15945:1976"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:6893:6523":{"id":"1:6893:6523","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6894:62325"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8453:1779":{"id":"2:8453:1779","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8454:793","2:8455:1888"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13505:64042":{"id":"2:13505:64042","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15939:1971"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49706:6376","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3565:7123":{"id":"2:3565:7123","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3567:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3561:6680","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6106:59316":{"id":"5:6106:59316","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15945:1976"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1610":{"id":"0:0:1610","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[73,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:4:1583","0:138:1593","0:139:1598","0:140:1606","0:129","0:132","0:135"],"is_stripped":false}},"2:3261:218":{"id":"2:3261:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13427:1751":{"id":"2:13427:1751","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13018:6271","prim@char":"1:15939:1971","`None`":"2:47440:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10555:6646":{"id":"2:10555:6646","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10556:146","2:10557:12026","2:10558:62162"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10293:6469":{"id":"2:10293:6469","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10294:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6821:6551":{"id":"1:6821:6551","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6822:59371","1:6823:59372"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6107:59317":{"id":"5:6107:59317","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15945:1976"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13400:59921":{"id":"2:13400:59921","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10283:6465":{"id":"2:10283:6465","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10284:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13449:59955":{"id":"2:13449:59955","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15939:1971","self::pattern":"2:13018:6271","str::splitn":"1:15945:1976"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49529:6431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:6405","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10914:214":{"id":"2:10914:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10916:181","2:10917:1776","2:10918:59919","2:10919:59920","2:10920:59921","2:10921:753","2:10922:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10905:6527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10287:6467":{"id":"2:10287:6467","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10288:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"1:15175:6785":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:53410:10189":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:8343:7040":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:2843:8183":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11186:8621":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:12465:7526":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"14:11:10033":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:4995:9784":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:979:6670":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12521:9307":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4377:10891":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:6126:8057":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:15921:59315":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10502:9022":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:9689:65230":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:9954:7360":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:46716:7183":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:22902:6628":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:13094:7049":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:11094:6637":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2462:8787":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"7:38:48812":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:10967:6745":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:45867:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:45846:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:5753:6508":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:24177:11339":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:8298:7645":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:13602:6692":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:12645:9334":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:605:10504":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:5505:7908":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:4465:6610":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:51870:10182":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:14573:6586":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:13365:6905":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:8384:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:3375:7594":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:14186:6610":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"7:85:48819":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4262:10831":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"12:472:8758":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:1607:6660":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:49699:6410":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11932:9190":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:15954:1983":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:14183:6608":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:14583:62144":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10448:8276":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4060:10780":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10673:51330":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10304:8253":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4145:10823":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:49511:6432":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:4428:6609":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:563:10481":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:15296:6890":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:46618:7169":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:6897:6556":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:3759:6990":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:9332:8258":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9719:8723":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:3162:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7111:8521":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:6682:8027":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:3294:2180":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"18:821:8376":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:23975:10132":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:13041:9463":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4364:10886":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:22839:7093":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:53286:7239":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:294:8927":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:47482:6637":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:23427:7090":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:5169:6285":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11140:6590":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:51069:7220":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11328:9080":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:15962:1991":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:46298:6384":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12632:9333":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:23638:63699":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:50366:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"23:1122:8417":{"crate_id":23,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"5:3341:7593":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:3064:8245":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:10850:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:49326:7391":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:12957:6421":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5386:11092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:9794:8554":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"13:0:1940":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:51021:7240":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:3218:8191":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"19:117:10389":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:51342:10178":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:9746:6884":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:10287:6467":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"22:0:1609":{"crate_id":22,"path":["unicode_normalization"],"kind":"module"},"12:162:7830":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:45821:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13540:9608":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"9:749:7699":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:51323:7198":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:53399:10188":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12051:9213":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:3348:7107":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:4347:10875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:994:7601":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:48787:8674":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"10:0:1944":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5945:11165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:56283:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48765:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"12:1121:6672":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"12:2253:6671":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:14892:8564":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:51125:7241":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"0:139:1598":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"1:7366:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:46934:8776":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:4127:10812":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5312:11057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10028:9014":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:52077:7235":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:14264:6452":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:1717:10645":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:4272:10838":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:3018:8187":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:14043:7420":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"9:963:7761":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:2816:8202":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:12205:6930":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:9886:8726":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:3317:6851":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:12385:9284":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12182:9238":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:0:1941":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:22526:63695":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:4157:8317":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:11080:6613":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:11888:7392":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:4448:9768":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"12:777:6296":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:11045:51146":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:4955:9783":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6691:8073":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:6614:63104":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:15950:1979":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4281:10843":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7786:8024":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:6085:11224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:3338:7933":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:7894:8049":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13842:9709":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:3038:6349":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:12700:6846":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:8837:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:3320:8247":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"12:0:1946":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:49245:7385":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:5960:7931":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:24835:7434":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:2872:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"18:668:8388":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:830:8377":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13733:9670":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:8197:6296":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11779:9162":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13942:9732":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6605:8028":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:6999:8076":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:4735:6569":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9943:65229":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7826:6703":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:4317:10860":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6208:8060":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12552:9313":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:10656:9029":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:9959:7361":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:730:65234":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4255:6910":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:9240:2214":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:6591:6565":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:1472:6672":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11147:6416":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4052:10775":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:14744:10225":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:767:8923":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:1630:10585":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"9:686:7695":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"17:1236:8731":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:5428:11111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:7824:8521":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4183:10825":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4426:6608":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1676:10621":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:699:6811":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:11921:7393":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:9280:8609":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13331:9551":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12537:9309":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:6233:6908":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:38753:2084":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6166:8058":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:670:44312":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:12041:8684":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:11847:9182":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:1708:10639":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"12:1256:6674":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"18:645:8386":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:46244:6382":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13258:9535":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:10972:6602":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6238:8016":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:1908:45283":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12568:9314":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4394:6877":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12195:9239":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:3503:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:10405:10306":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"12:399:7832":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:4242:8507":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"12:815:6665":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"9:900:10443":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:3321:6768":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10128:8358":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:6768:8224":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13924:9726":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:11130:2081":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:51814:10180":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:46747:7174":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12262:9249":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:8144:8775":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:2951:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:14498:6559":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:3336:6641":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:49196:7380":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8061:6836":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:5532:6898":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:584:10493":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13564:9613":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:14959:6700":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:755:65233":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:51846:10181":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:46665:7178":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11100:8328":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:57644:10203":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:578:10490":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:14189:6606":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"21:439:2107":{"crate_id":21,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"16:6744:8222":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:3271:6280":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:47440:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:6185:11283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:661:8387":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7236:8086":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:4823:9779":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"21:324:1807":{"crate_id":21,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"1:6353:6909":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:3632:7457":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:3159:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13532:9605":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:14050:8562":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:3429:7938":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"22:436:8898":{"crate_id":22,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:5775:6511":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:49724:6372":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6780:8074":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"23:712:8412":{"crate_id":23,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"2:5611:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:6413:7846":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:1103:6671":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:10071:8361":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"12:1682:7841":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:4506:6607":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:6731:11211":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:632:10519":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"9:996:7762":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1450:6661":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:3796:6991":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:9361:6404":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:1843:8507":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:13306:9542":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:15951:1980":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:5231:9786":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10095:8355":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:10293:6469":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:4601:6614":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5414:11106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:695:8389":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:9748:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:4767:6995":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:6873:7173":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11822:9178":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:15012:11421":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:2847:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3951:6639":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:11298:6429":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:3488:6639":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:50307:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:15433:7858":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:4215:6638":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:48224:6467":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:3040:11335":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:9245:8257":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12155:9234":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:1045:6568":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:3368:7114":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:46358:6376":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4494:10936":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:1635:6661":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:5130:10953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:3200:6584":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:3411:7012":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:47636:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7856:8092":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4040:10770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11411:6552":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:8867:7024":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:24055:7282":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"12:2059:6641":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:37596:6992":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:4949:6478":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:3166:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:51951:7243":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:46576:7166":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:3772:9760":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11555:8628":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13488:9591":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45890:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:3549:9758":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:2991:8197":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5228:11007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:24529:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:4869:7319":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:53448:10191":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:4417:9767":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:3287:8194":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:47559:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10179:9019":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:6491:8067":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:8087:6613":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:6852:11316":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13054:9470":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:13348:9556":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:745:65232":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:53478:10193":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:511:8761":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:4120:10810":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9799:8725":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:5192:6482":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:6895:6555":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:14518:11419":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:10510:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:5191:10995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:927:48916":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:1653:6663":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:5029:9785":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:46627:7175":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:2401:8784":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:9667:61938":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:13582:9617":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:69:7569":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:12116:6802":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:5095:6479":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10001:51192":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:2553:7666":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:1528:6669":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"12:933:6666":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:51390:7242":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"23:965:8414":{"crate_id":23,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"6:5969:11182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:12200:6758":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:8160:6689":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8942:6450":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7928:7141":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:4515:7635":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"5:3882:6601":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:32121:7488":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:7884:8021":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:5707:7916":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:10571:9026":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13819:9696":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:11533:6725":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:1153:10204":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:4726:59488":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:6176:11280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:6464:8026":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3352:6769":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"12:2066:6642":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7042:8232":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11406:9084":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:22498:6992":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:3258:2179":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7966:59382":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"21:316:127":{"crate_id":21,"path":["unicode_bidi","level","Error"],"kind":"enum"},"1:10892:6601":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:32296:6688":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"12:2280:6673":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7158:8079":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:10638:6452":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13192:9518":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:12699:7399":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:1195:8763":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10458:8968":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:46952:8778":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:8873:10216":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:3197:6848":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:57623:10202":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:10455:8557":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:3087:6527":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:8130:6638":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5717:7918":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10814:8313":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:52995:7232":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13377:9563":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:15939:1971":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12011:6702":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:2598:10211":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:11482:6715":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11378:8260":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:15940:1972":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:2968:8186":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:7320:10214":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:2262:7663":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6239:11305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5273:7940":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"23:0:2139":{"crate_id":23,"path":["tinyvec"],"kind":"module"},"1:9622:8552":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"12:2040:6638":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:3356:6770":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:10435:8735":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9264:8608":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:4035:2088":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:12741:9344":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:10520:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:8203:6296":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:11981:6700":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:15905:8686":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12982:9411":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13933:9730":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:50186:7475":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:11419:7379":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:53137:7236":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:4599:8510":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:9769:65224":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:6688:7622":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:23833:7430":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:53325:7204":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:3360:7096":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:5927:7929":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:13866:6697":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"14:56:9103":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:161:43981":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:46336:6374":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:6719:6511":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5185:10992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"14:216:49493":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:15953:1982":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:13243:10129":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:14523:6520":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:50147:7408":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:11415:11198":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10317:8256":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4517:10946":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10420:8332":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:6176:8059":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"24:0:2140":{"crate_id":24,"path":["tinyvec_macros"],"kind":"module"},"5:6257:7574":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:14985:62148":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:11096:6586":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:23904:7431":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1457:6673":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:6366:7847":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:2905:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"21:297:2112":{"crate_id":21,"path":["unicode_bidi","level","Level"],"kind":"struct"},"6:6614:11311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:49611:6427":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:3281:6282":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11665:9135":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:15274:6542":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6881:11323":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4439:10916":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:48467:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:10887:9063":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:3333:6856":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"12:1238:7829":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5221:11005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:50396:2085":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:6554:8069":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11255:8683":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:6821:6551":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:24699:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:10905:6527":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7549:8022":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:9495:11588":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5433:7902":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:1486:6674":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:9759:8724":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:3365:7934":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:46288:6383":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6964:2211":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:10666:15255":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7257:8507":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10788:8741":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:3966:10735":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:48506:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"9:234:7722":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:3972:10737":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:11223:6541":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:12442:9296":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:616:10509":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:543:10464":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:2777:7665":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:24184:7493":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13172:9512":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7279:8233":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:10403:8277":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:48756:7138":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:6100:11229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:47473:1775":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:1602:10566":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13547:9609":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12494:9303":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:1021:6836":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:10594:6812":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:3772:6660":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:48443:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7379:6296":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5456:7903":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:45805:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:10222:2091":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:4072:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:10950:8746":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:50343:7418":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:50003:7060":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:9088:51143":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:3048:63901":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:11643:6731":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7342:8046":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:4614:9772":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:1463:6662":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:49529:6431":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:12082:6798":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:22566:63731":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:2399:8783":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6518:8068":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:23736:7038":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:52030:7231":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:5407:7900":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12712:9341":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:11626:6637":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"0:4:1583":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"2:51156:7229":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11588:9124":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:1658:10609":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:8347:7042":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"9:27:7745":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:2912:8185":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:23626:6627":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:15958:1987":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:24733:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:9065:51142":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5167:10979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11367:6959":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:7804:8023":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:13822:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:1554:10536":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:49690:6411":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:56309:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49706:6376":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:12019:11416":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:47490:6660":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"12:353:8754":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:53463:10192":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8772:6928":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:45913:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:1572:10547":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:12090:6296":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:14000:9742":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:7650:6302":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4470:10929":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:53540:10195":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:3652:8536":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:425:2106":{"crate_id":21,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"12:1203:7828":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5736:7919":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1563:10541":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:12480:9301":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3262:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9005:51140":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12756:9348":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:4699:8512":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10558:8736":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10516:8280":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8166:6836":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"6:5987:11189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:12145:6804":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10160:9018":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:22802:7250":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:47550:43555":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:24461:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:11360:6533":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:8176:7548":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:13986:9739":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:8446:6639":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:5790:7924":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10844:8278":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6136:8052":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:8313:7464":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:50119:7409":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6577:8070":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5274:11029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:11434:9088":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"12:379:7833":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:47619:6660":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:9241:2213":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:52270:7211":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"22:382:2151":{"crate_id":22,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"1:3335:6857":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5978:11188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12343:9263":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:2773:8209":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:49839:7053":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:9371:6625":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:6002:6963":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:13788:9689":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12168:9034":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:12598:9320":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"21:404:2104":{"crate_id":21,"path":["unicode_bidi","Direction"],"kind":"enum"},"2:47871:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:6893:6523":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:607:8930":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11738:9150":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11993:9206":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:7264:8029":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:3241:8192":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"14:189:10033":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:4341:10872":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:53200:7201":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:2267:7128":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:47567:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:5472:7906":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"12:843:6661":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"9:809:6725":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:3642:6598":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:48795:8675":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:50131:7414":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:49297:7388":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:24147:43354":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:15956:1985":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:23432:20500":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:3489:6592":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:569:10484":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:10868:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:2753:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8009:8538":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:10635:8618":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:5085:7327":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:12775:7402":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:11767:9159":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11147:8620":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:47541:2212":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:15942:1973":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:37572:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:3800:9761":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"12:869:6638":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:3565:7123":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:8582:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46963:8780":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:15955:1984":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12456:9298":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:2330:7662":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:74:1432":{"crate_id":2,"path":["core","u32"],"kind":"module"},"2:46727:6590":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:13453:9580":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:1527:10525":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:46684:7180":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7823:8025":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:903:6816":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11159:9076":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:13048:6403":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:721:8913":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10106:8356":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:547:7920":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"12:2036:6296":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:775:8912":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:4762:9777":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12307:9257":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7961:6835":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"16:2794:7937":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:3604:8937":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11573:6727":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:13627:9627":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11464:2203":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:49982:7058":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:24131:43345":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:15964:1993":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:6718:8220":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13598:9620":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"0:140:1606":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"16:3145:8198":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11190:6534":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:7119:7943":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5282:11034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"22:344:1810":{"crate_id":22,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"2:50135:7412":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:6923:11331":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:4717:2091":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:6252:8062":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"9:157:7714":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:11225:7374":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:3264:8193":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46235:10154":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:3396:6643":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:10480:8559":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11337:8262":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11604:9125":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11323:6894":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4066:10782":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:5788:8507":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:49825:7050":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:10232:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4033:10767":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:47627:6296":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:5564:15261":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:15937:1969":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:6636:8030":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:4395:10897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:46056:7264":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:1486:6639":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"18:705:8912":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:10427:10128":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:49306:7389":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:2170:6639":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:2512:8334":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13296:9541":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7303:8088":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:49316:7390":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"9:603:8652":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:3091:8246":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:3561:6680":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"18:611:8384":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:5875:8516":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:9210:51145":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:5595:7913":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:46604:8769":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:537:10461":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:2733:7936":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:2910:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8522:6800":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:15169:6784":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:24109:43353":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:858:8379":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:7289:10214":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11231:8326":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:7541:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:48039:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:49457:6434":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"9:692:7697":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:2062:6576":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:48528:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:1215:7660":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:157:43980":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:1136:2090":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5436:11113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10599:8739":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:52108:7238":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10477:8274":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:48580:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:783:8912":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:4712:7081":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13590:9619":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:10721:10225":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:1161:15258":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:9186:8266":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:38816:6283":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:10836:6521":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:11386:6892":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:3345:6862":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:10730:2081":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:45997:7141":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:4660:6528":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12610:9322":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:7663:6694":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:3868:10667":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:1622:10580":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13574:9616":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:8724:6919":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:5330:8609":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:49810:7047":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11996:6701":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11001:9071":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:22545:63736":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11226:6658":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"6:4431:10911":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:46413:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:12215:6750":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:50384:2086":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:7333:8032":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:49629:6428":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:48081:7468":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"22:429:2165":{"crate_id":22,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:1194:15259":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13163:9511":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11118:51147":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:4306:6660":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:51714:7203":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10801:9061":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:13857:10131":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:13904:6699":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:15960:1989":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:11143:6430":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6391:8065":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:10331:8278":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:9162:8325":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:49393:6416":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:3509:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13772:9685":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6021:8182":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12073:9222":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:6101:8009":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:8391:7535":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"14:194:49487":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"23:602:8411":{"crate_id":23,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"17:10081:8250":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13282:9540":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:2310:7680":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:47955:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"22:375:65245":{"crate_id":22,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"2:13731:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:1501:6665":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:3326:6650":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6644:11314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:46506:10162":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:4459:10923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:2192:6643":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:624:10514":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:10291:6468":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13370:9561":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:9133:51144":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:12023:59312":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:51540:7222":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:610:10506":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"22:392:2163":{"crate_id":22,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"1:15957:1986":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:4724:7082":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:2543:8272":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:15409:8685":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7761:8090":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13446:9579":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:51092:7208":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"12:895:7825":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:5823:6514":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:1597:6637":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:51491:7237":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:4736:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:432:2183":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4371:10888":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:50173:6771":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"12:2045:6639":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"12:2392:10437":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12685:9337":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:50127:7410":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:3951:10728":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:651:8383":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:24631:6839":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:599:10501":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:49968:7057":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:5140:7328":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:10543:9024":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"12:971:6669":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:13530:8788":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:5522:7909":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:2276:7129":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:49205:7381":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"14:250:10040":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:5831:6507":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:8146:65090":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:7711:6697":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:15141:6777":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:5994:6961":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7453:8014":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:22892:6527":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:3172:8189":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:12759:7401":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:7908:7027":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:11193:6535":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:3390:6649":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:681:8931":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:10221:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"13:120:49459":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"23:452:8409":{"crate_id":23,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"1:3555:6597":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:923:7600":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:3088:7095":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"23:806:8498":{"crate_id":23,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:7649:6693":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:9007:6687":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"12:787:6664":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:1939:6639":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:5020:6531":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:49993:7059":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:23051:20481":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:10687:6652":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:7453:8507":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:4905:7320":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:8453:1779":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13963:9735":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:46548:7163":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"9:1020:7763":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:14033:6997":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:52741:7244":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12142:9231":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:3419:7016":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13098:9501":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:6357:8064":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:4535:9771":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:6155:11266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:24030:8667":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:6015:6964":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:13729:6707":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:3743:8310":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:11696:9145":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:48748:8673":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:5216:404":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:49284:7387":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"23:745:8403":{"crate_id":23,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"6:4511:10944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:13882:59388":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:3476:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:4008:8743":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:4443:6637":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1655:6674":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11714:9146":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12275:9250":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7378:8018":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:46636:7172":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:1505:6666":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4133:10814":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:12096:6801":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:531:10459":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:12240:6765":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"12:2072:6643":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:15910:15260":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11318:6893":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8444:7653":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"6:4215:10828":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7420:8034":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:1419:6637":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:3713:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:1637:6672":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5347:11078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10200:8732":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:14130:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:15952:1981":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:9094:6925":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12771:9080":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:4391:6876":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:5819:6513":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:11263:7375":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:5766:7923":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4083:10792":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46011:6479":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4005:10755":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4293:10850":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:750:6637":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10697:6675":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:11458:9102":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:2314:8338":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:2171:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:13465:9586":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:6028:11216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:49425:6429":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7392:8019":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"12:114:8753":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:53373:10186":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:15944:1975":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:9440:8616":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46418:7463":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10962:8747":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:3195:8190":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:51666:7199":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:8160:6296":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:3701:7458":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"22:217:1809":{"crate_id":22,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:11539:8624":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13780:9688":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:10489:8279":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"23:1054:8416":{"crate_id":23,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"1:14549:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:11750:9151":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:4477:9769":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11254:8324":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:3041:8188":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:15945:1976":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"12:1784:8505":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:9849:65226":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:9729:65221":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6887:11324":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6032:7942":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"14:244:10038":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:47703:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:46372:6378":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:53384:10187":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5855:7926":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:786:8556":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:6636:11312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10827:8314":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:169:8717":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:11336:7376":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13180:9513":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:9404:8615":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:22815:6527":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"12:952:6668":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"23:103:8400":{"crate_id":23,"path":["tinyvec","array","Array"],"kind":"trait"},"2:25205:7310":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5371:11090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:49856:7054":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13810:9694":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4193:10826":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:838:6406":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"9:469:8638":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13912:9724":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6005:11198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:1760:10660":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:542:7946":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:15963:1992":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"18:621:8911":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:7475:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:897:6815":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:8250:6645":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:49365:6420":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:7838:7248":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:9889:8556":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:10377:8337":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4203:10827":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3319:6852":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:6491:7171":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2751:2082":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:2166:6638":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10975:9070":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"0:138:1593":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"1:12129:6803":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:10279:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:51261:7209":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:3488:8196":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:15943:1974":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:51766:10179":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:713:6992":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:8121:7602":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11026:8750":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8323:6836":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:9239:2215":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7620:7574":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:46675:7179":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:2889:8203":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46586:7167":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7406:8017":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:1596:10564":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:46319:6373":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:45969:6987":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:8428:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"9:722:7698":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:6864:11318":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13609:9624":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4095:10798":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6152:8013":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:48461:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:5420:11109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:510:8929":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:2159:6637":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10864:9062":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13356:9559":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"12:1183:7827":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:7843:8091":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11304:51148":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:50151:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:5415:6576":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46273:6381":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5561:7911":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12208:9241":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4325:10864":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:9896:65223":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12234:9244":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5953:11170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:7151:2202":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10149:8726":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:15946:1977":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:4230:9763":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:24199:7448":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:23101:7089":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"12:940:6667":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13884:9715":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11199:8623":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12693:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:11640:9132":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:47787:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:8414:6836":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:24801:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:4074:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:24083:10134":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:10681:15257":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:22511:63695":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:49350:6422":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:46925:6450":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:867:8380":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5753:7922":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:23997:7287":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:1665:10613":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5407:11105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:3997:10753":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:13018:6271":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"11:54:7817":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:6221:11302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46379:6379":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:11616:6728":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:14204:6761":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:3407:7010":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:12074:6637":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:2492:6996":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:11118:6660":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:5964:6958":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11108:6587":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"12:856:6662":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"5:1618:6296":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:13746:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"14:231:7537":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:49931:7056":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6949:8228":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11358:8261":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:0:1329":{"crate_id":1,"path":["std"],"kind":"module"},"17:9476:8617":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:3990:10749":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:10819:6635":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"11:0:1945":{"crate_id":11,"path":["adler"],"kind":"module"},"2:51618:7214":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:11405:7378":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:10275:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:11628:9129":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11970:9201":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:7226:8085":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:10824:6846":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:3945:10727":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4358:10883":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:53074:7216":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:12210:6749":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12659:9335":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4023:10764":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10052:9015":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"12:1162:7826":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13685:9669":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13318:9545":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13394:9566":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11653:9134":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:7642:7575":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"23:515:8498":{"crate_id":23,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"6:6893:11325":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:3156:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:52348:7218":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11962:6698":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:46696:7181":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6014:8056":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:6672:7611":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:15949:1978":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12028:9210":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13554:9610":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10912:9065":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:50289:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:1011:6637":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:3039:63899":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:5889:8519":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:2941:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:7697:6696":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:3401:7007":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:2484:51230":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:1694:7658":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:1522:6668":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46943:6614":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:49407:6430":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:4467:6611":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:48740:6679":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:49681:6413":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:14513:11417":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:49214:7382":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:22955:7089":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13760:9682":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11277:9077":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:3329:6637":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11794:9168":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"15:248:7850":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5815:7925":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:3881:10676":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:1623:6671":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:11220:6540":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:1497:6664":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12034:61977":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:50123:7411":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:11186:6412":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:5360:7898":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:3862:10666":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12118:9229":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:5295:49564":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:51198:10176":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:9600:65225":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:23099:7197":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:3342:7104":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:10560:7137":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:6971:6557":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:10829:6520":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:1235:7661":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:51437:7230":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13240:9527":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:3939:9762":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:11166:6533":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"9:1075:7764":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"9:41:7746":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:12247:9246":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:1703:7842":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:6993:6522":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:10962:6744":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4410:10901":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10117:8357":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:32462:62729":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:15032:6764":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:10926:8744":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11962:9199":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:9173:2207":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"12:2052:6640":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"12:183:7834":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13386:9564":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"23:1210:7264":{"crate_id":23,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"2:2381:6751":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:10272:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:49271:7386":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:2203:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:1156:10206":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"12:2398:10438":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:3118:8199":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:4050:2087":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:10394:8931":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:3263:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12795:9358":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:9551:8323":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:5687:6563":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:10725:7669":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:12699:9340":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:48476:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:5018:7321":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:4734:9776":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:46918:8774":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4164:10824":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"12:2269:6672":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:5672:7915":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"0:44:598":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"2:12489:6414":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"22:298:2166":{"crate_id":22,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"2:3424:7019":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:12431:9294":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:4304:9764":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:11160:6423":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:14876:8563":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:49904:7055":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:6091:11226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12671:9336":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:5014:6480":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"18:136:8713":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:8463:7570":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:4350:9765":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:10236:8271":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11312:6892":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:3676:6593":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:6910:11330":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:8902:51138":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"6:3957:10730":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:50352:7419":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:7295:8031":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:13511:8785":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:5892:6955":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:9933:8727":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:3362:6642":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:4362:6296":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:10605:61389":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"12:2032:6637":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:22896:6626":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:13272:9539":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13637:9632":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:24212:7447":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:7216:8084":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3506:8195":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"14:0:1947":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:3153:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4073:10785":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:14761:6702":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13119:9506":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:24767:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:4387:10894":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:3892:10684":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:47997:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:1646:6673":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:11391:6431":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:5585:7256":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:10407:8333":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:5314:8608":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10353:8339":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:10611:9028":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11981:9204":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"15:0:1948":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:3259:6279":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5459:11119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:5809:6512":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:8508:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:5548:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2793:2083":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12221:9242":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:3522:8933":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6591:8071":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:7766:6699":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:12185:6924":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:9528:6416":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6644:8072":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:8263:6678":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:3742:6986":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:3718:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"15:269:7854":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"21:0:1608":{"crate_id":21,"path":["unicode_bidi"],"kind":"module"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"16:7174:8080":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13221:9526":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:48991:7530":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:3724:6982":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:1522:10523":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13506:9595":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4419:10907":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11809:9174":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:3392:8200":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13402:9568":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6110:8051":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:637:8912":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11392:6911":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:1729:6904":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"21:10:2111":{"crate_id":21,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"2:5149:6481":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:2178:10125":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:10285:6466":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3415:7014":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4401:10898":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:14972:6701":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"7:0:1478":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:2460:8786":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:7185:8081":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8515:6799":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:2218:7596":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:6620:8215":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"22:119:1808":{"crate_id":22,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"5:8330:7646":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"23:1036:8415":{"crate_id":23,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"6:4112:10805":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:46448:7465":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:5769:6510":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:3543:7022":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:46342:6375":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"15:230:7849":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"21:394:8903":{"crate_id":21,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"14:47:10033":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:4678:6585":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:5408:6891":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13477:9587":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46706:7182":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:3839:8507":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6219:8061":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:12736:7400":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:47745:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"22:418:2164":{"crate_id":22,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"2:46311:6372":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:12021:8534":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:24665:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:5998:11194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5522:11132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:1476:6638":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:1079:6548":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:880:6639":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"8:0:1942":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:10281:6464":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:4046:10772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:8849:8322":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:13043:6405":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:525:10456":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:15156:6778":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:14748:6564":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:45976:2089":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:10620:6834":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:1584:10556":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:0:1582":{"crate_id":20,"path":["matches"],"kind":"module"},"2:50975:10174":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:5761:6509":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:14094:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:32310:62730":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"18:740:8918":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:4506:9770":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:11082:8267":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:46526:7161":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10938:9069":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:5528:11133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:53344:10183":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3253:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:9799:8555":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:12373:9282":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"12:1147:6673":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10704:16246":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4501:10939":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:3759:6637":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:46595:7168":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:519:10453":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9655:61940":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:9649:8721":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4306:10854":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"12:432:7831":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:9208:10216":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:11835:9179":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10253:8336":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5421:7901":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7073:8077":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:4922:9782":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:3373:6999":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:9296:8613":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:8362:11337":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:10584:8316":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9809:65228":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4227:10829":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:3500:2181":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:24597:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:24014:8660":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:15938:1970":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13520:9602":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5159:10977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:46431:7464":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51587:7210":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:3905:10694":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"12:2412:10440":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:124:1806":{"crate_id":21,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"12:764:6660":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:4504:6606":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:49787:7046":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:50016:10168":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:13205:9523":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:46398:6380":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:5023:7322":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5210:10997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1540:10531":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"9:1056:7756":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:5632:7914":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4523:10949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12095:9223":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5488:7907":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"9:0:1943":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:8106:7544":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:10876:6869":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:46257:7307":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13154:9507":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:1311:8362":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11968:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:14993:6765":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"13:232:8637":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2850:6402":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:49383:6417":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:46656:7177":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:51044:7228":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:1442:6296":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:12507:9304":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:7477:8035":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:7195:8082":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:8380:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:1492:6663":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"0:42:1782":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"5:3370:6640":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4331:10866":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:8344:7647":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:6954:7538":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:52191:7223":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10061:9016":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10468:8275":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4425:10908":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:4026:6747":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:10289:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8422:6725":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:6935:11333":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:0:1950":{"crate_id":17,"path":["object"],"kind":"module"},"5:3894:7654":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:5255:11027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:50139:7413":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:152:8714":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:11377:6432":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7467:8015":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:3231:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:1744:10655":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2866:8184":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:53425:10190":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:6733:11213":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:4742:6589":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:3331:7099":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10623:8740":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:5405:6890":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:51230:7221":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:50299:10173":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:48777:6725":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9961:8728":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"12:466:8757":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:48494:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:4241:10830":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12946:9380":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:6475:6638":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"12:2419:6645":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13799:9693":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13898:9717":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:10615:6820":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:5359:11083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:32362:62727":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"17:11915:9184":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6731:8221":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:8138:7603":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:1644:6662":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:22564:63735":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"22:407:65244":{"crate_id":22,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"6:5197:10996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:5986:6960":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:3970:8507":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:3730:6985":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:11437:6554":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:10283:6465":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:4013:10758":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11947:9194":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10529:9023":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:9743:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:49557:6425":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:47498:6296":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:51284:7213":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:10593:6527":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7514:8033":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:7829:6705":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:5563:11158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10211:9020":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:11196:6539":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:6870:11319":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:47507:2211":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:50996:10175":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:50143:7407":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:3265:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:6116:6900":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11482:9103":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:13037:6406":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:13781:63782":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:5536:7611":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:4641:9773":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:7205:8083":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5580:7912":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:2945:8208":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:13927:62740":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"6:1736:10651":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6899:11326":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6068:11219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:7212:6638":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:46:10442":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:10266:8335":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:13865:9710":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:55912:7034":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:6269:8063":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:28016:7045":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:9368:8614":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:50115:7406":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:46647:7176":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:9839:8278":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:47829:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:49224:7383":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:24091:10135":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"21:416:2105":{"crate_id":21,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"6:4300:10851":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5400:11103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:8959:6938":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:15062:8680":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:11372:6962":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:3194:6847":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:6087:8011":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12327:9258":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:6812:11315":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:6124:11240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:2163:6296":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:45729:6988":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"12:1666:7840":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:53364:10185":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:0:1951":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:5241:11016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:7683:6695":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12467:9299":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:46004:7142":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:4671:9774":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:51689:7202":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"12:928:6663":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:22713:7092":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:49145:7377":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:22543:63733":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:3506:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13978:9736":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:47611:6637":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:6200:11290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13497:9594":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6072:7996":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:5837:6409":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12408:9293":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:24563:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:11378:6903":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:13248:8782":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:51303:10177":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:51641:7217":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"0:20:1736":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"2:49377:1774":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:8954:8268":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:9662:8553":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"5:1441:6671":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6106:11230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:48564:6463":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:6471:6553":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:49671:6424":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:49234:7384":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8680:6918":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:14:2058":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:46535:2081":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:5681:6561":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:6214:11299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:15418:61390":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:3978:10740":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3730:6600":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:12220:6764":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"18:802:8374":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:1663:6664":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:8860:6387":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:6493:6630":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:24495:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:3261:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:52383:7200":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7870:8020":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:5469:11121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:10914:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12783:9351":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:823:8556":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:23044:6527":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:5975:8054":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6051:11217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13620:9625":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:7250:8087":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:6729:11209":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"9:776:7743":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:9761:6885":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:46496:8528":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:2175:6640":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:53501:10194":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:374:7592":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:14566:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:591:10496":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:52317:7215":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:11153:6430":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:52534:7224":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:47913:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5379:11091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:8863:7025":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11678:9136":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10884:6599":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:886:8381":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:1533:10528":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10279:8250":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:4890:9781":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:6824:6553":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4101:10801":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"23:830:8404":{"crate_id":23,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:11087:6615":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:4704:9775":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:3385:6648":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:14898:8565":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:5384:7899":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:3364:7112":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:46229:6374":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6807:8075":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:12363:8786":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:51468:7234":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:10555:6646":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:45757:7023":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7024:8231":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"18:791:8373":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:52884:7212":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:15125:6776":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:12917:9360":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:48987:7531":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:299:8928":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:1432:6660":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:32302:7478":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:48210:6464":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:7849:8526":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:9034:51141":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:11632:6730":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"21:382:65241":{"crate_id":21,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:15070:6709":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:1674:6665":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3150:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:6858:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13429:9572":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:1547:10533":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:49475:6433":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:4790:9778":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:49715:6374":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:7736:7162":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11499:9108":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:8929:51139":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:812:8375":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:9574:8269":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:2437:8785":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:13028:6404":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:6764:6576":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:32261:7455":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:4633:6576":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13062:9472":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:10224:8733":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:53353:10184":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:1534:6670":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:3044:63898":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:15334:6891":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:1091:8507":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1690:10632":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:46365:6377":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:6424:8066":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:9971:65222":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"0:22:532":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"2:48217:6466":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:8379:7534":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10041:8729":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:53247:7219":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5269:11028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:56296:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46566:7165":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:15959:1988":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:2754:7935":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"18:850:8378":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:11726:9149":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:3395:7004":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:8115:6296":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:2187:6642":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12040:9212":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:4386:9766":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:13977:6698":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:7571:8010":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:3336:7101":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"12:2404:65218":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:4654:6576":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:8673:6916":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:3380:6647":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:15355:6898":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:7146:8078":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:12161:6805":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:88:43914":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:3714:9759":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:3984:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13746:9676":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:15961:1990":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:24068:7283":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:10988:8748":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:4643:8512":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:47661:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4478:10931":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:2200:8509":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"0:0:1610":{"crate_id":0,"path":["idna"],"kind":"module"},"17:9659:65227":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:2181:6641":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:51179:7233":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:46557:7164":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:6569:8217":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:14536:10305":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:5833:6408":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11275:59313":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:1700:10638":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:46737:7184":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12010:9209":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:1511:6667":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:4388:6875":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:5292:11041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:49661:6423":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:22766:7085":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:2253:7125":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:23090:6527":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:11556:6726":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:4294:6616":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"2:23732:6527":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:3918:10704":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:8227:8538":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"17:11616:9128":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:12810:6412":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:454:2108":{"crate_id":21,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"16:5996:8055":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:49575:6426":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:9097:6753":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:11298:10276":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:0:1949":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:1617:10578":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:12260:6766":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12725:9342":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11015:8749":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:15689:8566":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10140:8278":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"21:120:2116":{"crate_id":21,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"23:538:8410":{"crate_id":23,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"16:5346:8012":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:897:8382":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11519:9118":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:4852:9780":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:7738:8089":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:1723:10648":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12582:9316":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:8393:2182":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:56270:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12702:8561":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:5392:6368":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11572:9119":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:6418:7170":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:45936:7456":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:15444:7858":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:48203:6465":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4449:10922":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12287:9251":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"}},"external_crates":{"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"tinyvec","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"tinyvec_macros","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"matches","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"unicode_normalization","html_root_url":null},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_bidi","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}