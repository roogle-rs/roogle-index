{"root":"0:0:1616","crate_version":"0.3.0","includes_private":false,"index":{"0:94:1883":{"id":"0:94:1883","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[555,4],"end":[558,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2709:2179-0:166:1592":{"id":"a:2:2709:2179-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:114:1604":{"id":"0:114:1604","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[57,0],"end":[62,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5339-0:166:1592":{"id":"b:5:5339-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:8581:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5337:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5341:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:164:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:2709:2179-0:157:1591":{"id":"a:2:2709:2179-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11331:60542":{"id":"2:11331:60542","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12369:1997"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112":{"id":"0:112","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,39],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Idna","name":"Idna","id":"0:151:1593","glob":false}},"2:11412:64285":{"id":"2:11412:64285","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11323:64270":{"id":"2:11323:64270","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11408:64283":{"id":"2:11408:64283","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11332:1782":{"id":"2:11332:1782","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48019:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:157:1591":{"id":"b:2:2496-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:1922"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:80:908":{"id":"0:80:908","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[440,4],"end":[446,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["config",{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11341:64274":{"id":"2:11341:64274","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12358:1988","crate::ops::IndexMut":"2:2974:6927","str::slice_unchecked":"2:11340:64273"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:3:1589":{"id":"0:3:1589","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[315,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:15:1742","0:17:525","0:37:1788","0:39:590"],"is_stripped":false}},"b:2:2221-0:166:1592":{"id":"b:2:2221-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2053"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5341:1398":{"id":"5:5341:1398","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:166:1592":{"id":"b:2:2224-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:57481"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2709:2179-0:151:1593":{"id":"a:2:2709:2179-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2709:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2515:1418":{"id":"2:2515:1418","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81:1912":{"id":"0:81:1912","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[448,4],"end":[474,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:59":{"id":"0:156:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11428:64290":{"id":"2:11428:64290","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12352:1983","self::pattern":"2:11021:6262"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5090:58732":{"id":"5:5090:58732","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11442:58735"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7717:2215-0:166:1592":{"id":"a:2:7717:2215-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5071:64926":{"id":"5:5071:64926","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2185","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6700:6958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2185","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6700:6958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:89:59":{"id":"0:89:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[520,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,31],"end":[42,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Errors","name":"Errors","id":"0:166:1592","glob":false}},"2:11352:60580":{"id":"2:11352:60580","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12352:1983","self::pattern":"2:11021:6262"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:671-0:157:1591":{"id":"b:5:671-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2238:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:673:6342","5:674:6343","5:675:6344"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11390:64278":{"id":"2:11390:64278","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11350:64275":{"id":"2:11350:64275","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50249:6415","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11446:64294":{"id":"2:11446:64294","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4451:64294"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50302:6366","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11375:60574":{"id":"2:11375:60574","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11021:6262","`DoubleEndedIterator`":"2:7061:119","prim@char":"1:12352:1983","str::split":"2:11369:1905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50003:6420","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:60578":{"id":"2:11387:60578","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11384:60576","self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50107:6422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:166:1592":{"id":"a:2:2659:222-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11334:60539":{"id":"2:11334:60539","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48019:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2214-0:151:1593":{"id":"a:2:7718:2214-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11330:306":{"id":"2:11330:306","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12369:1997","str::as_mut_ptr":"2:11331:60542"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,16],"end":[509,20]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2657:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5078:64928":{"id":"5:5078:64928","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2221-0:157:1591":{"id":"b:2:2221-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2053"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:7717:2215-0:157:1591":{"id":"a:2:7717:2215-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:108:650":{"id":"0:108:650","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[714,4],"end":[716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8536:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8525:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2645:214-0:151:1593":{"id":"a:2:2645:214-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2226:57481":{"id":"2:2226:57481","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2214-0:157:1591":{"id":"a:2:7718:2214-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2511-0:166:1592":{"id":"b:2:2511-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:126","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11361:6321":{"id":"2:11361:6321","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:48019:173","self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2499:1922":{"id":"2:2499:1922","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2473:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:1884":{"id":"2:11355:1884","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12352:1983","self::pattern":"2:11021:6262"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11415:64287":{"id":"2:11415:64287","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11322:64269":{"id":"2:11322:64269","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1591":{"id":"0:157:1591","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[510,0],"end":[516,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:90","a:2:2709:2179-0:157:1591","a:2:7717:2215-0:157:1591","a:2:2645:214-0:157:1591","a:2:7718:2214-0:157:1591","a:2:2659:222-0:157:1591","b:2:2506-0:157:1591","b:2:3304-0:157:1591","b:2:2221-0:157:1591","b:2:2496-0:157:1591","b:2:2224-0:157:1591","b:2:2500-0:157:1591","b:2:2511-0:157:1591","b:5:671-0:157:1591","0:163","0:165","0:88"]}},"a:2:7717:2215-0:151:1593":{"id":"a:2:7717:2215-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:7717:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3304-0:151:1593":{"id":"b:2:3304-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3306:1432":{"id":"2:3306:1432","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46490:6609","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:157:1591":{"id":"a:2:2659:222-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3304-0:166:1592":{"id":"b:2:3304-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2645:214-0:157:1591":{"id":"a:2:2645:214-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2645:214-0:166:1592":{"id":"a:2:2645:214-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2645:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11378:64276":{"id":"2:11378:64276","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"2:11381:64277","prim@char":"1:12352:1983","`DoubleEndedIterator`":"2:7061:119","self::pattern":"2:11021:6262","str::split":"2:11369:1905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50035:6425","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:59":{"id":"0:180:59","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5087:64930":{"id":"5:5087:64930","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:6955:218","`Box<str>`":"5:276:2185"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:276:2185","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6700:6958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11342:60563":{"id":"2:11342:60563","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11343:60564"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11348:63291":{"id":"2:11348:63291","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11347:63293"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50268:6402","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:151:1593":{"id":"b:2:2511-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:126","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:103:650":{"id":"0:103:650","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[647,4],"end":[698,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:8536:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:8525:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:151:1593":{"id":"b:2:2500-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:674:6343":{"id":"5:674:6343","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:157:1591":{"id":"b:2:2224-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:57481"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[713,0],"end":[717,1]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:8581:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2221-0:151:1593":{"id":"b:2:2221-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2215:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2223:2053"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11338:60541":{"id":"2:11338:60541","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5088:2118":{"id":"5:5088:2118","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[519,0],"end":[533,1]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:95:1853":{"id":"0:95:1853","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[561,4],"end":[564,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15:1742":{"id":"0:15:1742","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[45,0],"end":[47,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11358:1885":{"id":"2:11358:1885","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12352:1983","self::pattern":"2:11021:6262"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5075:64927":{"id":"5:5075:64927","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11410:64284":{"id":"2:11410:64284","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:1601":{"id":"0:96:1601","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[567,4],"end":[571,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:64291":{"id":"2:11431:64291","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11345:7221":{"id":"2:11345:7221","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12352:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49961:6408","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11365:1757":{"id":"2:11365:1757","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:48019:173","self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:7336":{"id":"2:11437:7336","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:10982:6412","FromStr::Err":"2:10983:125"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10982:6412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10982:6412","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11414:64286":{"id":"2:11414:64286","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11442:58735":{"id":"2:11442:58735","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2509:126":{"id":"2:2509:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:2223:2053":{"id":"2:2223:2053","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:673:6342":{"id":"5:673:6342","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:2:2568-0:166:1592":{"id":"b:2:2568-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2561:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3353:6608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2570:6490"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"2:11381:64277":{"id":"2:11381:64277","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11021:6262","str::split":"2:11369:1905","prim@char":"1:12352:1983","str::split_terminator":"2:11378:64276"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50053:6424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2659:222-0:151:1593":{"id":"a:2:2659:222-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2659:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11343:60564":{"id":"2:11343:60564","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11342:60563"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,23],"end":[42,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Config","name":"Config","id":"0:157:1591","glob":false}},"2:11425:60581":{"id":"2:11425:60581","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5072:1914":{"id":"5:5072:1914","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:166:1592":{"id":"b:2:2500-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3304-0:157:1591":{"id":"b:2:3304-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3302:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3306:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11439:1758":{"id":"2:11439:1758","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[701,0],"end":[709,1]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:105:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[439,0],"end":[507,1]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:908","0:81:1912","0:82:1601","0:86:1613"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11384:60576":{"id":"2:11384:60576","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11387:60578","self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50089:6423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11405:64282":{"id":"2:11405:64282","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7061:119","self::pattern":"2:11021:6262","str::match_indices":"2:11402:64281","prim@char":"1:12352:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50153:6417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11440:58733":{"id":"2:11440:58733","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:7933":{"id":"2:11349:7933","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50239:6414","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2224-0:151:1593":{"id":"b:2:2224-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2652:2178","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2218:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2226:57481"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:115:1612":{"id":"0:115:1612","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91:1605":{"id":"0:91:1605","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[537,4],"end":[540,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11329:64272":{"id":"2:11329:64272","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:93:1606":{"id":"0:93:1606","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[549,4],"end":[552,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11372:60572":{"id":"2:11372:60572","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10845:6403","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11445:6930":{"id":"2:11445:6930","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4454:6930"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50293:6368","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:63293":{"id":"2:11347:63293","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11348:63291"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50259:6404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5086:64929":{"id":"5:5086:64929","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6955:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[646,0],"end":[699,1]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:8576:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2506-0:157:1591":{"id":"b:2:2506-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:126","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1616":{"id":"0:0:1616","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[74,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3:1589","0:110","0:111","0:112","0:113:1599","0:114:1604","0:115:1612"],"is_stripped":false}},"b:2:2506-0:166:1592":{"id":"b:2:2506-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:126","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2502:668":{"id":"2:2502:668","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1849":{"id":"0:92:1849","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2500-0:157:1591":{"id":"b:2:2500-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2502:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2514:126":{"id":"2:2514:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39262:6604","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:151:1593":{"id":"0:151:1593","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[433,0],"end":[437,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:79","a:2:2709:2179-0:151:1593","a:2:7717:2215-0:151:1593","a:2:2645:214-0:151:1593","a:2:7718:2214-0:151:1593","a:2:2659:222-0:151:1593","b:2:2506-0:151:1593","b:2:3304-0:151:1593","b:2:2221-0:151:1593","b:2:2496-0:151:1593","b:2:2224-0:151:1593","b:2:2500-0:151:1593","b:2:2511-0:151:1593","0:155"]}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2547:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:180:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11369:1905":{"id":"2:11369:1905","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:7061:119","prim@char":"1:12352:1983","self::pattern":"2:11021:6262","str::split_whitespace":"2:11347:63293","str::rsplit":"2:11375:60574"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49985:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:409":{"id":"0:164:409","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11344:1744":{"id":"2:11344:1744","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12352:1983"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49955:1780","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11416:64288":{"id":"2:11416:64288","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11046:6394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11319":{"id":"2:11319","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10584:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11320:782","2:11321:1889","2:11322:64269","2:11323:64270","2:11325:64271","2:11328:57484","2:11329:64272","2:11330:306","2:11331:60542","2:11332:1782","2:11334:60539","2:11336:60540","2:11338:60541","2:11340:64273","2:11341:64274","2:11342:60563","2:11343:60564","2:11344:1744","2:11345:7221","2:11346:1763","2:11347:63293","2:11348:63291","2:11349:7933","2:11350:64275","2:11351:63287","2:11352:60580","2:11355:1884","2:11358:1885","2:11361:6321","2:11365:1757","2:11369:1905","2:11372:60572","2:11375:60574","2:11378:64276","2:11381:64277","2:11384:60576","2:11387:60578","2:11390:64278","2:11393:64279","2:11396:1860","2:11399:64280","2:11402:64281","2:11405:64282","2:11408:64283","2:11410:64284","2:11412:64285","2:11414:64286","2:11415:64287","2:11416:64288","2:11419:64289","2:11422:1907","2:11425:60581","2:11428:64290","2:11431:64291","2:11434:64292","2:11437:7336","2:11439:1758","2:11440:58733","2:11441:58734","2:11442:58735","2:11443:64293","2:11445:6930","2:11446:64294"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11340:64273":{"id":"2:11340:64273","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2970:6914","`str`":"1:12358:1988","str::slice_mut_unchecked":"2:11341:64274"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:675:6344":{"id":"5:675:6344","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2570:6490":{"id":"2:2570:6490","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3365:6607","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:590":{"id":"0:39:590","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[225,0],"end":[230,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11419:64289":{"id":"2:11419:64289","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5070":{"id":"5:5070","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:4981:1344","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5071:64926","5:5072:1914","5:5075:64927","5:5078:64928","5:5086:64929","5:5087:64930","5:5088:2118","5:5089:58731","5:5090:58732"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:105:668":{"id":"0:105:668","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[702,4],"end":[708,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11399:64280":{"id":"2:11399:64280","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"2:11396:1860","prim@char":"1:12352:1983","self::pattern":"2:11021:6262","`DoubleEndedIterator`":"2:7061:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50207:6419","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2510:1419":{"id":"2:2510:1419","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:7718:2214-0:166:1592":{"id":"a:2:7718:2214-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:7718:2214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11393:64279":{"id":"2:11393:64279","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:86:1613":{"id":"0:86:1613","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[500,4],"end":[506,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11396:1860":{"id":"2:11396:1860","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:7061:119","str::matches":"2:11396:1860","prim@char":"1:12352:1983","self::pattern":"2:11021:6262"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50189:6418","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37:1788":{"id":"0:37:1788","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[216,0],"end":[219,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113:1599":{"id":"0:113:1599","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:1592":{"id":"0:166:1592","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[600,0],"end":[613,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2709:2179-0:166:1592","a:2:7717:2215-0:166:1592","a:2:2645:214-0:166:1592","a:2:7718:2214-0:166:1592","a:2:2659:222-0:166:1592","b:2:2506-0:166:1592","b:2:3304-0:166:1592","b:2:2221-0:166:1592","b:2:2496-0:166:1592","b:2:2568-0:166:1592","b:2:2224-0:166:1592","b:2:2500-0:166:1592","b:2:2511-0:166:1592","b:5:5339-0:166:1592","0:179","0:102","0:104","0:106","0:107"]}},"2:11422:1907":{"id":"2:11422:1907","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12352:1983","self::pattern":"2:11021:6262"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[711,0],"end":[711,27]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"2:2561:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11328:57484":{"id":"2:11328:57484","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10589:6405"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11441:58734":{"id":"2:11441:58734","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:166:1592":{"id":"b:2:2496-0:166:1592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:1922"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11325:64271":{"id":"2:11325:64271","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11323:64270"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:60540":{"id":"2:11336:60540","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9118:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:17:525":{"id":"0:17:525","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48017:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6382:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:63287":{"id":"2:11351:63287","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50277:6401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11321:1889":{"id":"2:11321:1889","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:1763":{"id":"2:11346:1763","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49971:6407","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:64293":{"id":"2:11443:64293","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4453:64293"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50284:6370","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2506-0:151:1593":{"id":"b:2:2506-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2476:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2509:126","2:2510:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:82:1601":{"id":"0:82:1601","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[478,4],"end":[496,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2511-0:157:1591":{"id":"b:2:2511-0:157:1591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2480:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2514:126","2:2515:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11320:782":{"id":"2:11320:782","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12352:1983"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[535,0],"end":[580,1]},"visibility":{"restricted":{"parent":"0:46:1590","path":"::uts46"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:91:1605","0:92:1849","0:93:1606","0:94:1883","0:95:1853","0:96:1601","0:98:1613"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11402:64281":{"id":"2:11402:64281","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11021:6262","`DoubleEndedIterator`":"2:7061:119","prim@char":"1:12352:1983","str::rmatch_indices":"2:11405:64282"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50135:6416","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5089:58731":{"id":"5:5089:58731","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11441:58734"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:64292":{"id":"2:11434:64292","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11021:6262","prim@char":"1:12352:1983"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11026:6395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11041:6396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1613":{"id":"0:98:1613","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[574,4],"end":[579,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:6955:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:48161:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2496-0:151:1593":{"id":"b:2:2496-0:151:1593","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2473:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2470:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2499:1922"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}}},"paths":{"1:2406:7052":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:48220:6289":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"12:2198:10588":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"9:622:7762":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"21:259:65193":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"1:7522:58862":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:6597:160":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9691:8415":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2653:6271":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7581:8012":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9414:6794":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:50732:7436":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:50402:7198":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:2746:6643":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:6413:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:1605:6289":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:48996:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:9108:8853":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:49943:6411":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:842:7692":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10924:6735":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:4597:9919":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:2921:7970":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:8595:6463":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:7144:8083":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:9601:8351":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"9:676:7808":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:12359:1989":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:12638:9619":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:2947:7575":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:9469:6420":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:9897:8865":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12909:9689":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"9:709:6878":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:2311:7969":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:9280:180":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:8049:6804":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3986:6809":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9274:6853":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:48068:1781":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11186:9269":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:3994:238":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:51981:10322":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:12550:9556":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11288:9292":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:6949:11501":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:11514:57872":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:12362:1990":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8454:6820":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:54014:10331":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"12:659:6289":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:8047:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:2974:6927":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6820:9994":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:7907:8096":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:2935:6664":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:7221:7076":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5715:8052":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:10233:9204":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:6495:7902":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2984:8277":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:52257:7286":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:8122:6724":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:1964:2091":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3081:6741":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:13374:9828":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3373:6699":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4332:10960":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:2722:6276":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2783:6661":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:6294:8014":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:5424:8040":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:624:65181":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:56987:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4653:9921":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:1636:10757":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2864:6924":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:6709:6289":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:9336:6787":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:2800:6675":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5758:8054":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:49330:6878":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:20245:7165":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:3145:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:5450:8042":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:7447:7995":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:4915:6400":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:7227:8085":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:56909:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:614:65183":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:50107:6422":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:21822:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:8353:6740":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:13413:9836":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:50580:7208":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:7404:8011":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:8418:6421":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"12:1044:7882":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:987:6903":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:646:43436":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:52689:7307":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:6124:8034":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:7961:10374":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4228:10912":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10796:8449":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10708:8451":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:586:10654":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:48093:6289":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:2655:220":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2245:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:9590:6981":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13557:9875":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:3156:7067":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:1359:6289":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:48212:6895":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12322:9493":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:25196:7250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:247:9060":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10966:6448":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"9:863:7720":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:4072:7370":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:21349:7532":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6235:11346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:9582:161":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:539:10629":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:4258:6757":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:5344:10358":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:675:10349":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4652:11068":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11536:9355":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5612:11244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:49875:6979":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"0:37:1788":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"2:49318:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:548:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:50545:7205":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:4288:9910":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11034:9258":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5642:8050":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:985:6906":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:1943:7578":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11951:9430":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"22:636:8542":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"9:19:7810":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"16:2548:8268":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:11832:6812":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:7207:7075":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:12103:9454":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:0:1960":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:7049:7602":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:4912:9929":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4501:7089":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11300:9295":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:9587:212":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:9317:8465":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:5005:6623":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:3017:9068":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:96:8841":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7189:7977":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:11654:6864":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:5877:6788":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:46821:6366":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:1518:10679":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:7335:8007":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:771:7691":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"0:115:1612":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"2:11247:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:4288:10940":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"8:0:1953":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2396:7047":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:4581:7097":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"14:160:10182":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:6987:6575":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:4013:7080":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:1532:10684":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:2885:8281":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"12:98:7886":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:2039:7671":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"12:1836:6289":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:2380:8261":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:8313:6742":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:11708:10365":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:7020:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:50135:6416":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:4437:7143":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:12357:1987":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:1629:6669":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:5083:6622":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:21168:7343":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:12334:57697":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:6596:6991":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:7731:10458":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4592:11041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:3599:6289":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:2976:6667":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:660:8505":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11873:9403":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:1680:6666":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"18:507:9044":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:5472:8043":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:9488:8349":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:7084:1785":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:49340:8793":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11356:9312":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:5526:7638":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:5756:6854":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:50704:7437":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11606:9366":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"12:646:6895":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:6426:8651":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:50365:7194":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:48770:6460":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:4071:8641":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:11026:6395":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:46922:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:12373:2001":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:10682:8456":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:38089:177":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11326:6615":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:6545:8004":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:8881:65171":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9504:8802":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:49540:7572":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:8526:8431":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10159:9197":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8395:6563":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:52355:7278":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:976:6902":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:6294:7608":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:11014:9248":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:3590:9902":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:5379:8038":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:7121:11480":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:52065:7318":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:12265:9485":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11271:9284":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3365:6607":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:46742:6368":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4245:10918":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:223:1813":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"22:966:8546":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"5:2968:6669":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:48161:204":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:6190:11322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:5653:6849":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"12:320:7888":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:1903:50709":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:5488:8044":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:9909:8744":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:48520:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:8688:7092":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:1886:8912":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:50277:6401":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:554:10638":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:44:7873":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:4248:7377":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:0:481":{"crate_id":2,"path":["core"],"kind":"module"},"16:2718:8271":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:49961:6408":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:49309:6773":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4123:10852":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"12:1845:6666":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:12371:1999":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:10921:9226":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"20:349:2108":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"2:52379:7279":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:4408:10975":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:47485:8900":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:599:65182":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:6308:8669":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:4762:6800":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11247:9282":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"22:879:8544":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"6:5748:11284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:49971:6407":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:2734:63794":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:38106:6776":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5605:11243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:20220:7323":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:6778:6844":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:12176:9467":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:2648:8279":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:46517:10302":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"13:220:8778":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:9434:6983":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:10927:6731":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:12134:9459":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:590:9045":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:9552:8810":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:1771:8352":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"14:221:10189":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:6697:8296":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:2244:7675":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:2310:183":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"18:609:9050":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:1111:6908":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:11435:8687":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:6682:8006":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:8581:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:7139:11483":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:52971:7291":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:10257:8871":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:5490:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1574:10712":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:53891:7295":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7948:7999":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8517:8807":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2467:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"12:834:6903":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12884:9680":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:4593:6699":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:8813:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"20:281:65188":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:6633:10361":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:46524:6473":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:53391:7320":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:3751:8639":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:966:6900":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:9193:65179":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:11664:186":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10270:9205":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:1617:6667":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"22:669:8533":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"17:13126:9745":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9118:65170":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:9738:8418":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:2402:8284":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:50302:6366":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12198:9478":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:5313:10358":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2526:8267":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:2464:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:10481:8910":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"14:7:10182":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:4250:6756":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:10636:6862":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9873:8864":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:8579:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:20433:7272":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4432:10977":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9061:8362":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12022:9444":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:4714:7626":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:52508:10326":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:50963:155":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6037:8264":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"12:1681:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:53721:7292":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6139:8064":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"21:266:2150":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"2:50003:6420":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:12370:1998":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"12:861:6905":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:4516:6362":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:8110:50619":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:1935:2090":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:1962:8413":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:1185:6906":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:575:10649":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:4705:768":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:1525:10681":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5518:11193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5662:11265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12352:1983":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12363:1991":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:4740:6619":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:51963:7289":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:8510:8734":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:20007:63456":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:46785:6375":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6305:11371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:9576:6982":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:9398:6793":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:46510:8030":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:10455:8487":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:9475:8350":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:939:8639":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7133:11482":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:145:1815":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"12:2080:6908":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4714:11091":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:2252:8249":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:12674:9648":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:3393:9900":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:1824:6810":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10497:50887":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:51710:7316":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:4486:10991":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:12318:8814":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:771:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:507:10607":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:52000:7274":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:47207:6582":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:47216:6583":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:50207:6419":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"14:187:48936":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:21041:7463":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:1021:8470":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:1600:10728":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:9344:6289":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:21624:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"9:827:7717":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:2332:8283":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5467:11168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:1643:10761":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:276:2185":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:49803:6971":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"14:31:10182":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11999:7914":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6632:8077":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"12:2205:6672":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:5597:11242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:7202:11497":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11186:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4177:10885":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:10670:8455":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:47145:6570":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:46490:6609":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7276:8089":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"19:0:991":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:49774:6968":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6422:11435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"20:215:126":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"16:5574:8048":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:1642:6510":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46927:7500":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:5536:8047":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:2431:6614":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:198:2165":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"12:1029:6908":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:47093:6566":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6242:11350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:313:2164":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:7843:57992":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:6322:11376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:12896:9683":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:47075:6564":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11130:6629":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:3265:6731":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:11741:62778":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:11259:9283":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2596:8320":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:9328:8466":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:2915:2181":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:51880:10321":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:6791:6289":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13214:9765":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:21200:8786":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8682:7142":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7113:8260":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5423:11148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:11515:9351":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:51810:7317":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:5009:6626":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:12860:9678":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13039:9719":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:8304:7410":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:1612:6666":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"20:197:2112":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"6:135:43101":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:6732:7694":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:6911:11478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:9108:6614":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1505:10673":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:9701:8911":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:50712:7438":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:29712:7492":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4218:10906":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:9844:8476":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13091:9734":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4073:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:9553:8362":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10374:8427":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:48763:6458":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:50950:7447":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:6012:8062":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:49955:1780":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:4904:11365":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:2273:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:8536:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:9369:6791":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:9930:9163":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"3:0:429":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8797:6868":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:8066:7037":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:7098:11763":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:5178:7606":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"12:751:6665":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12361:9503":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:3897:6664":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:1562:10704":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:3721:6665":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10721:8747":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:50249:6415":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:20026:63453":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:47529:8904":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:50508:7204":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:49783:6972":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:48634:7505":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"21:320:9030":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"2:21342:11505":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:4210:10903":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:49020:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:3963:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13082:9731":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"9:977:7723":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:10949:9230":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8405:6587":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8200:6921":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:1654:10769":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:9451:8799":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10822:50627":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:5366:6571":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:6768:8079":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7374:8093":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:6834:211":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4135:9907":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:6451:8656":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"18:766:8514":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11893:9404":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7535:7989":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:10434:8874":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9031:65175":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7825:8095":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:8525:204":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:5681:8051":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10625:8337":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:0:1952":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:6670:6446":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:49047:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:9265:6664":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:1102:6907":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12307:9489":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:215:7646":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:4653:7098":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:49866:6976":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:46325:194":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:1750:11503":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:7307:8092":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:21259:10283":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:50259:6404":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:54142:10339":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:8441:8453":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:9517:8081":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7266:8088":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:4777:9925":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7037:2211":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:12850:9677":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:915:6896":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:5873:8651":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:49929:6413":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1971:7672":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:53185:7300":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:2478:8266":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:3949:6828":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:8162:8398":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:8295:50624":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:9857:8400":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:119:7890":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11500:9346":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:10794:7428":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:3680:9904":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:47510:6739":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:3228:6736":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11559:9360":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10062:8866":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:49985:6421":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:50416:7201":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:20323:7163":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"7:32:48197":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:52163:7313":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1580:10714":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:3548:8639":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4740:9924":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"12:387:8883":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5606:8049":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:9456:6812":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:50899:205":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:10820:6853":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6759:8005":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:4900:11361":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:9350:8468":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:524:8240":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:10744:6854":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:8212:8450":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:6506:8074":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:6754:6289":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:2730:63795":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:9314:6421":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4736:11101":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:20233:6614":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"12:697:6900":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:6209:6788":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8106:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:12006:7914":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:7822:6395":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6323:7990":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2026:178":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:7938:6910":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:46939:7501":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:14:2070":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:8589:6461":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9577:8353":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"9:592:7761":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:4658:14333":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:49301:8792":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:12376:2004":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:1338:6664":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:47197:6581":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:339:159":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:2696:8270":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:5695:11273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:755:8513":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:51686:10320":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:6844:6672":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:13168:9756":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:49081:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:12739:9658":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"15:214:7910":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:6740:63848":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:7415:6990":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:5495:11180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:3001:8276":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:39302:6606":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:49293:6774":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:48596:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6048:7976":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9526:8348":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"21:291:65192":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"6:4498:10998":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4350:10971":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:5175:49003":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:7718:2214":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:53783:7312":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"13:108:65168":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13404:9834":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5436:11149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:5673:6850":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:7858:7024":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:7140:8678":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:5598:6699":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4615:11048":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:13114:9742":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:2215:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:20690:19540":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:6894:11469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"0:0:1616":{"crate_id":0,"path":["idna"],"kind":"module"},"17:8055:8326":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:2900:6715":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7615:8000":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6230:8068":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:7033:2184":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:21184:8779":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8471:6821":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:11774:9390":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:2570:8319":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:7521:7988":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:2771:6655":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:5856:8058":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2291:8290":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:2674:8269":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:7192:11495":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:52287:7290":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"20:0:1614":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"2:54025:10332":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13031:9718":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:3182:7192":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:0:279":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7720:9063":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11828:9398":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:8034:7967":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:716:14331":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:11541:6684":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:13492:9857":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:46868:6370":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6807:8301":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:5941:188":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:652:9044":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6361:11392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6597:8076":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12609:9608":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:46310:7242":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:20435:7163":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:51941:7285":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:3326:157":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:242:9059":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:2394:7046":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:5519:8046":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:11490:6855":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:448:7004":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13176:9757":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:884:6664":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:46748:10303":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:153:7974":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:2952:7231":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:7637:7983":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:1823:8908":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:9274:9153":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:47501:8902":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:50728:7435":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:2724:6342":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:4318:9911":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:6843:8303":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5592:8238":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"12:1866:6669":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:8393:8384":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:8596:6826":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:39298:7678":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:4432:9915":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:21690:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13436:9849":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5654:11263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9791:9161":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:7061:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:5941:6665":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"22:534:8541":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"2:73:1438":{"crate_id":2,"path":["core","u32"],"kind":"module"},"16:4808:9926":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:47519:8663":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:11815:6830":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4630:11055":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:2657:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:9118:216":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:2696:6274":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:47131:8895":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:5500:184":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:2019:63866":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:495:10601":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"9:920:7719":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:46451:7493":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12797:9673":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5585:11235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:9895:7035":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:3157:7179":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:5793:8056":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:1678:10786":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:2736:6640":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2647:6725":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:3140:227":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"12:1065:7883":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7366:8009":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:50153:6417":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:8941:8850":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"22:470:8540":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:3466:58462":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4536:11013":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:51756:7296":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:5831:6574":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:9292:6855":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:7945:15327":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:50433:7202":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:56961:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11106:8761":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8628:7082":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:4968:6619":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5927:8059":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"22:449:8630":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"17:9071:65173":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13148:9750":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:21276:62434":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11429:8686":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11748:9387":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:29506:6514":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8696:7081":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11708:9380":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:48017:175":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10385:8428":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:4867:8639":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:4879:9928":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5646:11261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7803:8094":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:658:2092":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:10921:6733":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4467:10979":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:46769:7251":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:9548:6423":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:3448:9072":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:6434:8803":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:9382:6792":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:46429:197":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:21297:62441":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:5819:6860":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:131:43100":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6149:8035":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:6386:7448":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:2465:7674":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9183:8855":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"22:752:8534":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"21:228:1816":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"1:0:1336":{"crate_id":1,"path":["std"],"kind":"module"},"1:9592:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:8418:8397":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:11353:6857":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:46846:6368":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:9597:6683":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:5538:11209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"22:948:8545":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"2:50559:7206":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:4298:6754":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11502:6856":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:49714:7424":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11436:9317":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:1707:7093":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:11838:7079":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12118:9458":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"12:1085:7884":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:5987:8639":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:8054:7035":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:2023:179":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:970:6901":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:671:8506":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8130:6726":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:49895:6978":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:20948:6614":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:54005:10330":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13393:9833":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11617:9367":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:5639:6848":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:12816:8762":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6308:8069":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:6485:11460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:8870:6879":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"12:300:7889":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:19960:6776":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:10500:8918":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:9433:9158":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6087:8010":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:11693:10364":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"12:725:6896":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:21236:7339":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46407:195":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:8585:6459":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:7005:6781":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4195:10897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2561:126":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4460:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10894:8394":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:9635:6685":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:4840:9927":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:11637:62777":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:1884:8911":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"12:60:8879":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:49059:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:9658:8862":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:10108:6975":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"12:393:8884":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11202:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:6881:8081":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:9539:8347":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:3792:6895":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:7831:6614":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:9165:65176":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:50992:6997":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2839:6951":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:0:1962":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4388:10973":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:5390:185":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"12:1859:6668":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7850:8002":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:2741:6638":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:50035:6425":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:574:9044":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:4112:6472":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:48482:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11137:9262":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:736:8512":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:4206:6613":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:50613:6427":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5454:11159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:21921:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9371:8853":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:521:8665":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:2816:8274":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:53035:7276":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:4039:6699":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:8368:8329":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5393:11131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:20402:6614":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:5402:8039":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"9:111:7778":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:11146:11584":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6668:7993":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:2834:6948":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:7032:6666":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:19988:63397":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:8724:11350":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9631:8345":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11939:9428":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2432:6605":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4398:10974":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8431:150":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"2:52333:7275":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:727:8511":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:2500:8278":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5685:11271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:53001:7294":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:49117:6457":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:48330:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"9:382:7715":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:7922:14329":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:10528:8448":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:8537:7134":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"5:1301:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"12:632:6664":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:4009:8641":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7868:8001":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:9263:8856":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:10108:8392":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"9:649:7763":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:7215:8084":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:8939:6664":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12768:9665":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:7350:8307":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11974:9439":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"3:223:204":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:2740:8272":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6571:8075":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6164:7986":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:46908:6374":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12349:9496":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:6869:10361":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:8573:6808":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4110:10842":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:20274:6614":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4156:10876":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:620:10263":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:11021:6262":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11853:9400":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:5787:19734":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:48102:2211":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"9:188:7786":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:12366:1994":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:4338:10962":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13158:9753":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11761:9388":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46341:192":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:4042:7369":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:52111:7306":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:0:1956":{"crate_id":11,"path":["adler"],"kind":"module"},"16:7958:8031":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:20685:7166":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:7928:6678":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:2805:6676":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:9306:6856":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12369:1997":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10445:8452":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:4177:201":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:2664:6272":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4569:11033":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:12356:1986":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:10583:8332":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:49348:8794":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6337:11381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6467:11457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13231:9772":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:10088:9196":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:7719:2213":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:50481:7203":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:2273:8248":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:6770:7579":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:50387:7195":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6224:11341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:4086:10824":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:58283:10348":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:3167:7260":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:1216:6907":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:8583:6458":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:10589:6405":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:531:8519":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:6030:8063":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:7717:2215":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:5481:11179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:4010:7079":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:5060:6627":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:1348:6895":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:50755:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:6265:11368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:410:8690":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:50889:199":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:10185:8664":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:11164:10456":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:683:14330":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:47012:10311":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:4212:6611":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:7150:11487":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:515:8518":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:5701:6852":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:6441:8072":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:1595:10726":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:2247:7036":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:12358:1988":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:7297:8091":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12033:9445":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13518:9866":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:4450:7144":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7992:8030":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:62:43034":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:9700:8414":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:6903:7501":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51911:7297":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:52211:7298":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:562:9063":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4278:10933":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4300:10946":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:9462:7025":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3190:6734":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:3067:7494":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:595:6637":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:11734:9168":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"12:274:8880":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10360:8485":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:21723:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:1473:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11149:9263":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11735:8915":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:2607:6716":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:8991:65177":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:50570:7207":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7545:8015":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:47183:6580":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:13354:9822":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"22:0:2139":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"6:4097:10832":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:29472:6513":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:3418:6709":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5417:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"20:92:1812":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"16:6337:8070":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12008:9442":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"12:738:6897":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10854:8412":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:4208:9908":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:8593:6462":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:50716:7442":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:3179:9898":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"20:335:2107":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:8374:6711":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:8141:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:2916:8389":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:8137:50623":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:3337:6664":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:2218:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9422:8859":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:719:8510":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:1511:10676":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10466:9209":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:3302:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:12211:9479":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:4379:405":{"crate_id":2,"path":["core","char"],"kind":"module"},"22:728:8630":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:5174:6992":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10350:8328":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"12:810:6898":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5789:11310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:1668:10780":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3417:8639":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:29312:7527":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4672:11075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:3094:6666":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:47154:6578":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:6059:6289":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4477:10986":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7022:8256":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:8911:65178":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:10245:8870":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:5610:63083":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:12617:9611":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13007:9710":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:9627:8358":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"9:0:1954":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:2726:11499":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13366:9825":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:4253:9909":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:7079:11479":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:21657:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:46365:193":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8560:7135":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:10121:8393":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:52018:10323":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:50284:6370":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11594:9364":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13071:9727":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"12:353:7887":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:46483:7261":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:4902:11363":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:50189:6418":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2656:219":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:6416:6295":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:8494:8733":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:0:1961":{"crate_id":17,"path":["object"],"kind":"module"},"1:6489:6788":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:10139:8362":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:56922:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:3150:7065":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:853:6904":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:12972:9704":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:48406:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:2981:7576":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13024:9717":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:1426:192":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:1584:8639":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:7162:11489":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:4967:8649":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:4724:11096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"12:669:6899":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:581:10652":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9401:9157":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:48204:6664":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:1714:10799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:46852:6369":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:11547:9358":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:10283:8872":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"12:1518:7896":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:7769:8679":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:47540:8906":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:681:8507":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:47163:6573":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10476:50886":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:8631:8739":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:20028:63455":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:3457:2093":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:20282:6784":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:20950:7164":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5500:11181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:8205:6922":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:5165:6805":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:8059:6767":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5508:11186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10752:8330":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:11035:6397":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:2470:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"5:6932:7653":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:7408:6381":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:11996:6777":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:5567:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:2830:6946":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"14:215:10187":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:4348:9912":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:52430:10324":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:1201:6908":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:6775:7115":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:487:8887":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:678:10351":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:1601:6664":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:48558:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:11955:8813":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:52531:10327":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:3249:8401":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:4712:9923":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:3188:6733":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:2898:204":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:6715:7693":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13327:9810":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7287:8090":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12874:9679":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:5337:226":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:636:9055":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:5771:8055":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:4113:7087":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46955:7502":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:8796:8336":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:20407:19522":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:7127:11481":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7071:8082":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13047:9720":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:21855:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12934:9697":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13478:9855":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:501:10604":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:47174:6579":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:4242:6755":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:21987:7467":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:6646:8298":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:52309:7293":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:5113:9930":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:5226:9931":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"12:777:7881":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:50907:189":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4369:10972":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4306:10949":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:3707:9905":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:2358:8265":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12926:9694":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:6674:7118":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"20:293:9035":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"1:11522:7513":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:8346:6738":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:1861:8910":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:12368:1996":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4576:11035":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:8981:8851":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:53643:7308":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2810:6936":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:6474:8073":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"22:1034:8547":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"16:5210:8734":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:8587:6460":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:48368:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:9722:8743":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:48077:6664":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:29548:7490":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:9357:6403":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13506:9864":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:50724:7441":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:49840:6562":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:6402:8676":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:10182:9198":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"12:762:6666":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:9497:10442":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"13:0:1951":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:6502:6561":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4636:11058":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:21888:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:6537:200":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:10296:9206":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"21:0:1615":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"17:9283:9154":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:1551:6699":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9021:8852":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:3482:6713":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:2826:6944":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11909:9409":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:8596:8738":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:2833:8246":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:36:7601":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:51732:7304":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:7179:11494":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2659:222":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"7:0:1483":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4171:10883":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"12:1852:6667":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2911:2180":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5385:11129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:8576:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:1736:7537":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:52765:7314":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:56935:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:1759:7536":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:48153:187":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10490:9211":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:545:10632":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:3151:6558":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:967:8858":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:993:6904":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:56552:7453":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:6700:6958":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6215:11340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:4953:8646":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:9562:6422":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:8339:50625":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6354:8071":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11787:9391":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:21313:62435":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:5640:11258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13134:9748":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:9289:6895":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13279:9809":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4505:10999":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6276:8013":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4683:11081":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:54119:10338":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:11212:6710":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:897:6895":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:491:9043":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:11689:10279":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"9:33:7811":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:11235:9279":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:1918:6811":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:46224:6557":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:9328:6664":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:8362:6710":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:6328:11378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:50942:7446":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:1404:6899":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:4965:6621":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11721:9383":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11176:7037":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:1088:6906":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:4312:6474":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:48444:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:302:2163":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"1:12353:1984":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11054:8748":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:46809:6378":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:487:9062":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:3350:6895":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8956:6884":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:12350:1981":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:8871:8848":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:8309:7411":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:47248:6585":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:8412:6407":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:2268:182":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:7920:8097":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11199:9270":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13221:9767":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5774:11299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9155:8854":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:11741:8916":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13059:9726":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12164:9465":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:1825:8909":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:4582:11038":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4546:11019":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:50293:6368":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:5816:6858":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8089:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:50239:6414":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:58262:10347":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:6068:7117":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:10771:7427":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6101:7984":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:951:6666":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13572:9876":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:11646:8804":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:49029:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:9350:6790":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:1671:1047":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:48229:177":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4183:10888":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:49885:6977":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:46882:6372":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:8853:6772":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4257:10923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:53994:10329":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:7411:6988":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:4498:198":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:3845:9906":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"9:800:10591":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:8272:8457":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4511:11002":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:50089:6423":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:676:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:49133:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:1049:7669":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4271:10930":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6855:8080":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:2816:6939":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:4308:6759":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10075:9195":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:47113:6568":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:10705:6852":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:6721:8078":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:1623:6668":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2141:572":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4691:11083":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"14:165:48930":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:21756:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:8114:7059":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:2788:6931":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4563:11030":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7095:8259":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:2762:8273":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:5154:8250":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:5626:11255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:11899:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"10:0:1955":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:12364:1992":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:53845:7277":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:52847:7299":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:6032:7109":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:7489:7966":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:608:10667":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"0:17:525":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"6:600:10662":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"18:582:6776":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:29606:7491":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12046:9447":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"22:43:8539":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"22:1122:7172":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"17:9644:8344":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:8561:8411":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:7853:7009":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46569:7172":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:12375:2003":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2476:231":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:1385:6897":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7934:7998":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"20:314:2105":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"2:9507:6980":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:6702:6838":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:11141:11582":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:12377:2005":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:2456:8289":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5817:8057":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:6794:8300":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:6654:7992":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"0:15:1742":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"1:4834:6634":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"15:175:7905":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4522:11007":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"20:88:2116":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"17:10845:8452":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11757:8690":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:6451:11451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:3557:9901":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:8241:8454":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12836:9674":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6343:11382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:1415:6900":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:51840:7305":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4446:10978":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4317:10953":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2378:7041":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:2652:2178":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:2775:6657":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4202:10901":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:9396:6973":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:9947:50814":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:3472:7699":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8488:6822":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:5687:6851":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:3460:6726":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11343:9311":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12964:9702":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5633:11257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:2779:6659":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:1067:7670":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:12194:8691":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:8670:6808":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:21147:10280":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"7:79:48204":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:47053:6560":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:4679:62801":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:8591:188":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"6:0:787":{"crate_id":6,"path":["libc"],"kind":"module"},"2:3130:7495":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12237:9481":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:11873:199":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:11368:9315":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:2304:176":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:50788:7515":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:6133:8639":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10332:8492":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:11330:9307":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"20:322:2106":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"17:11125:9259":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:3226:6735":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:10420:8486":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:2473:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"12:1555:7898":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:48144:42661":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"15:193:7906":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"20:302:2104":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"6:4624:11054":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:10734:7426":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:5438:8041":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:9501:8360":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:21251:10282":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:4312:6760":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:4258:6473":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:957:6898":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:50720:7440":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:7887:8003":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:9474:57539":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:11041:6396":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:5007:6625":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:11222:57875":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:519:10612":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:10810:7429":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8677:7139":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:9320:6857":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:7156:11488":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:54040:10333":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:2921:2183":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:2906:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12781:9670":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"12:1628:8637":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"0:113:1599":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"5:1033:8889":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:52611:7319":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:48777:6461":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6888:11467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:3310:6719":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:6006:7108":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"15:0:1959":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:12148:9461":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:6872:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3267:6732":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:11559:11586":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:4251:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:8774:8327":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:6889:7651":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:667:225":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:11630:8688":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:6762:192":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:941:6665":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:521:8515":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9362:8362":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:50268:6402":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:1738:10808":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:4355:6475":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"12:822:6902":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:48085:6895":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:5573:11230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:5443:6572":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7256:8087":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:7461:7996":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:1808:592":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:7475:7991":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:50776:6687":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:5884:6789":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9223:50671":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:10875:8395":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:6809:6839":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11639:9374":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4067:10814":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:2424:8262":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4707:11088":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12337:8452":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:9751:8416":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"12:1872:6670":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:47258:6586":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11315:9301":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6262:7997":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7245:8086":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3400:6707":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:11954:6769":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11997:9440":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:5411:11144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6178:8065":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11151:6767":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:8945:6883":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:53967:7280":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:8702:7101":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:8146:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:5995:8061":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:21954:163":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:1701:10796":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11800:9393":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"9:505:7710":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:47299:6577":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13536:9872":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:47002:8657":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:386:9061":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:6219:8067":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:47284:6588":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13580:9879":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11161:9266":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:21789:7029":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10546:50626":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:39262:6604":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:567:10644":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:1550:10695":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"9:956:7718":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:56974:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:6983:6576":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:51778:7284":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:20276:6782":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:1635:571":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:20157:7160":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:10722:60508":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:12514:9525":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:49853:6959":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4399:7138":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:7788:8681":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:48292:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8887:6880":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:9446:8860":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:50980:6999":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:12323:14332":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2918:2182":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4150:10875":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11813:9395":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:9616:6684":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:4332:6279":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4644:11063":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:6225:200":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:6724:6665":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:11842:7448":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:29512:6515":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:50700:7434":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:2757:6648":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:7430:192":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12955:9701":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:11684:9379":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"0:114:1604":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"12:1003:6907":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2583:8667":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:3353:6608":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:5974:8060":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10550:6817":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10973:9244":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4265:10928":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:9820:8473":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:9671:8385":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:859:6664":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:47492:6446":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:3125:8867":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:10403:8330":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8929:6881":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:1435:7667":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:4:976":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:2573:6723":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:3891:6699":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:5510:7626":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12351:1982":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:54051:10334":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:2795:6674":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3153:7066":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:8425:6414":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:7413:8027":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:11174:9268":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:4320:6762":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:47269:6587":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"12:2069:6907":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:11528:9353":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:1608:10733":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:928:6897":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:7321:7994":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:2822:6942":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:10608:8335":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13203:9764":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3939:7324":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:3002:6670":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:53533:7288":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:10520:9216":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:9888:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:50053:6424":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13459:9850":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:6749:6738":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:2510:6722":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6288:11369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"12:2053:6906":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:4730:11098":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:12374:2002":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:1608:6665":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11087:8754":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:4303:7378":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:11616:36510":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"22:386:7974":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"2:21224:7338":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4606:11045":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:2763:6651":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11578:6683":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:6392:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:46799:6377":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"12:2184:10586":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"12:0:1957":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:52477:10325":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10774:8328":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:10845:6403":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:47062:6563":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:2751:6645":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:907:6289":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:11418:8685":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10310:8873":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:1840:6665":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:2767:6653":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2645:214":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:8746:6624":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:3475:6692":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"21:67:1814":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"6:1887:44411":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:50736:7513":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:11092:7197":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:21094:7464":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6206:11334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:49793:6970":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:3623:9903":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:5365:7985":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1695:10793":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:962:6899":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:2709:2179":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"11:36:10590":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"16:4404:9914":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:7138:154":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:50593:6426":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:29534:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12730:9654":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10532:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:4376:9913":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:1634:6670":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:47122:6569":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4162:10878":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4264:6758":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"12:2178:10585":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:10075:6974":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:999:6905":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:690:8508":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5754:11285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10221:8868":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:6450:7903":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:481:8516":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3590:6823":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"14:40:9245":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"20:8:2111":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"1:8720:6620":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:8729:10277":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:12365:1993":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:1230:6909":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:7832:7000":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:9509:8808":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:4911:6399":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:22386:7234":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9681:9104":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:6856:6913":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:19973:63397":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:513:10609":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:699:8509":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:5870:200":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12630:9618":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:11322:10374":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:54104:10337":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:1376:6896":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:13141:9749":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10394:8429":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:8608:6827":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:538:8520":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:6966:7647":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2900:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:2942:6668":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:51862:7309":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:4565:9918":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"12:1138:6909":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:1500:10671":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:5194:8733":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8779:2204":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11661:9375":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10506:9213":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:5356:11105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:2784:8275":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:6797:8901":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:54066:10335":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:644:9044":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:542:7021":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:9382:9156":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:707:6397":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:4890:6758":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:10982:6412":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:4626:9920":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:20426:6614":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:1722:10803":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:3951:7325":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:12948:9699":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5503:8045":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:8475:8339":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:6284:7607":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4530:11011":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5447:11157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:3529:6666":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:4600:11044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:46889:6373":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"14:0:1958":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:4405:650":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:11335:57690":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:47233:6584":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:20854:63395":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:560:10641":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11576:9363":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13382:9829":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:13527:9870":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:6265:7606":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:2725:64267":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4325:10958":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:46875:6371":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"23:0:2140":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"1:2380:7042":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:2887:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:8847:6878":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:1931:8346":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:113:8844":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:47103:6567":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9458:8325":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:13100:9735":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12980:9706":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12695:9653":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12087:9452":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10207:9200":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11217:9278":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"9:586:7759":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:6115:7982":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:8752:6407":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12278:9486":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:21375:7480":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:10575:7570":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:625:6928":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:12748:9659":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6713:8008":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:10863:8684":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:6188:8066":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:8848:6673":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"9:896:7722":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10642:8458":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:21363:7481":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"12:1832:6664":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:9764:9160":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4421:7140":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:12367:1995":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:48254:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6182:11317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:20005:63458":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2253:6708":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:2238:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:6919:7652":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:20842:6783":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4238:10915":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"12:1120:7885":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:8701:8741":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:52141:7310":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:49544:6961":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:11899:7087":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5959:8244":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:7283:8913":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:4536:9917":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6458:11454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:10377:7094":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:6977:7648":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13594:9882":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8210:6727":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"12:1534:7897":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:12355:1985":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:8822:65174":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:13192:9760":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:10321:8484":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:4186:7372":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6437:11442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:2250:7038":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:53929:7315":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:9531:57693":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4552:11022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:20194:7262":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:8799:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:9437:7114":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:4181:7371":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11485:9342":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:12251:9482":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:7965:7678":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:11603:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:46385:196":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:2480:230":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6248:7987":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:2859:8247":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:9303:8360":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:6129:8669":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"1:11878:7080":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:49814:6960":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:80:8840":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:49014:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:8633:7083":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12060:9448":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:54181:10340":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:8666:8740":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:4510:9916":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12756:9660":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:9778:8417":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"14:202:7650":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"0:39:590":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"6:1686:10787":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:6797:6289":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11070:8752":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4420:10976":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:54089:10336":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:39311:6275":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:52735:7311":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:48756:6459":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:51666:10319":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"21:276:2162":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"17:10997:9245":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:1394:6898":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12291:9487":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:7879:6448":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:2547:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:8526:2093":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11841:9399":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:1120:6909":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:8622:7081":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:5739:8053":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:2622:8280":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:8814:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:7907:14327":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:46757:6376":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:9831:8475":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:6382:237":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12485:9505":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:5401:6665":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:2970:6914":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"12:815:6901":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:592:10657":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4662:11074":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13184:9759":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:1541:10689":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:7024:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:6955:218":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:4680:9922":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:46263:7232":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:5223:2203":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8076:6768":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:52925:7287":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:9293:8469":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:564:8521":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:49765:6969":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:4429:7141":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"12:2190:65167":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:10559:7568":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:9897:8683":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:48135:2212":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:12372:2000":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:13340:9816":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12225:9480":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"0:3:1589":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:454:7005":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:5999:7106":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:56948:239":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:571:7026":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:3343:6739":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11973:11587":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:420:7954":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:11046:6394":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9712:8742":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:8951:65172":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:444:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:9250:9152":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:11723:10367":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:6549:7367":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:3254:9899":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:9805:8472":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:50708:7439":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9339:8467":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:6866:11466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:46829:6367":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:53985:10328":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9885:9162":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:47032:6562":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:7168:11490":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:3219:7193":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:47084:6565":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12073:9449":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:1933:7021":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"}},"external_crates":{"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"unicode_bidi","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"22":{"name":"tinyvec","html_root_url":null},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"tinyvec_macros","html_root_url":null}},"format_version":23}