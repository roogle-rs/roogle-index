{"root":"0:0:1668","crate_version":"0.3.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:164:423"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:98:1667":{"id":"0:98:1667","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[574,4],"end":[579,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:6396":{"id":"5:685:6396","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:164:423":{"id":"0:164:423","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102":{"id":"0:102","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[646,0],"end":[699,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9105:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:103:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:15:1803":{"id":"0:15:1803","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[45,0],"end":[47,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:30273":{"id":"2:11928:30273","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:37953":{"id":"2:11996:37953","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11618:6311","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::matches":"2:11993:1921"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43455:6466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12043:11145":{"id":"2:12043:11145","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4537:11145"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43541:6422","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3318:1485":{"id":"2:3318:1485","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:39214:9215","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11927:314":{"id":"2:11927:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11928:30273","`u8`":"1:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2249-0:166:1646":{"id":"b:2:2249-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:27791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12012:37960":{"id":"2:12012:37960","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12036:1819":{"id":"2:12036:1819","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8213:2257-0:157:1645":{"id":"a:2:8213:2257-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3:1643":{"id":"0:3:1643","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[315,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust’s UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:15:1803","0:17:541","0:37:1849","0:39:608"],"is_stripped":false}},"0:110-0:157:1645":{"id":"0:110-0:157:1645","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,23],"end":[42,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Config","name":"Config","id":"0:157:1645","glob":false}},"2:11929:1843":{"id":"2:11929:1843","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41272:179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:7288":{"id":"2:11946:7288","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43487:6461","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:1647":{"id":"0:151:1647","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[433,0],"end":[437,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:79","a:2:2699:228-0:151:1647","a:2:2682:220-0:151:1647","a:2:2739:2223-0:151:1647","a:2:8212:2258-0:151:1647","a:2:8213:2257-0:151:1647","b:2:2246-0:151:1647","b:2:2540-0:151:1647","b:2:2536-0:151:1647","b:2:2551-0:151:1647","b:2:3316-0:151:1647","b:2:2249-0:151:1647","b:2:2546-0:151:1647","0:155"]}},"0:86:1667":{"id":"0:86:1667","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[500,4],"end":[506,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2699:228-0:157:1645":{"id":"a:2:2699:228-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11942:9383":{"id":"2:11942:9383","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11878:419"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43209:6455","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96:1655":{"id":"0:96:1655","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[567,4],"end":[571,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:5642-0:166:1646":{"id":"b:5:5642-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9110:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5640:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5644:1449"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11922:37944":{"id":"2:11922:37944","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11920:37943"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2551-0:151:1647":{"id":"b:2:2551-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2551-0:166:1646":{"id":"b:2:2551-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11925:30194":{"id":"2:11925:30194","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11185:6452"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:1945":{"id":"2:11952:1945","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:37949":{"id":"2:11975:37949","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11618:6311","str::split":"2:11966:1966","prim@char":"1:11878:419","`DoubleEndedIterator`":"2:7203:121","str::rsplit_terminator":"2:11978:37950"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43283:6472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:1968":{"id":"2:12019:1968","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12038:31392":{"id":"2:12038:31392","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:37957":{"id":"2:12007:37957","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:156:60":{"id":"0:156:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:155":{"id":"0:155","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[432,9],"end":[432,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2587:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:156:60"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:93:1660":{"id":"0:93:1660","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[549,4],"end":[552,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91:1659":{"id":"0:91:1659","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[537,4],"end":[540,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:30314":{"id":"2:12022:30314","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12039:31393":{"id":"2:12039:31393","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82:1655":{"id":"0:82:1655","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[478,4],"end":[496,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2251:27791":{"id":"2:2251:27791","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2546-0:166:1646":{"id":"b:2:2546-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2249-0:151:1647":{"id":"b:2:2249-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:27791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5644:1449":{"id":"5:5644:1449","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11916":{"id":"2:11916","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11917:811","2:11918:1950","2:11919:37942","2:11920:37943","2:11922:37944","2:11925:30194","2:11926:37945","2:11927:314","2:11928:30273","2:11929:1843","2:11931:30270","2:11933:30271","2:11935:30272","2:11937:37946","2:11938:37947","2:11939:30296","2:11940:30297","2:11941:1805","2:11942:9383","2:11943:1824","2:11944:35437","2:11945:35436","2:11946:7288","2:11947:37948","2:11948:35494","2:11949:30313","2:11952:1945","2:11955:1946","2:11958:6375","2:11962:1818","2:11966:1966","2:11969:30305","2:11972:30307","2:11975:37949","2:11978:37950","2:11981:30309","2:11984:30311","2:11987:37951","2:11990:37952","2:11993:1921","2:11996:37953","2:11999:37954","2:12002:37955","2:12005:37956","2:12007:37957","2:12009:37958","2:12011:37959","2:12012:37960","2:12013:37961","2:12016:37962","2:12019:1968","2:12022:30314","2:12025:37963","2:12028:37964","2:12031:37965","2:12034:37966","2:12036:1819","2:12037:31390","2:12038:31392","2:12039:31393","2:12040:31394","2:12041:37967","2:12043:11145","2:12044:37968"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2536-0:166:1646":{"id":"b:2:2536-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:1983"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:8213:2257-0:151:1647":{"id":"a:2:8213:2257-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2739:2223-0:166:1646":{"id":"a:2:2739:2223-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11962:1818":{"id":"2:11962:1818","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41272:179","prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8212:2258-0:166:1646":{"id":"a:2:8212:2258-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12016:37962":{"id":"2:12016:37962","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2540-0:157:1645":{"id":"b:2:2540-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:95:1914":{"id":"0:95:1914","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[561,4],"end":[564,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2540-0:151:1647":{"id":"b:2:2540-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2549:128":{"id":"2:2549:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:12011:37959":{"id":"2:12011:37959","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8213:2257-0:166:1646":{"id":"a:2:8213:2257-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8213:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2540-0:166:1646":{"id":"b:2:2540-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11949:30313":{"id":"2:11949:30313","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8212:2258-0:151:1647":{"id":"a:2:8212:2258-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11972:30307":{"id":"2:11972:30307","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11618:6311","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::split":"2:11966:1966"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43251:6467","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:80:939":{"id":"0:80:939","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[440,4],"end":[446,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["config",{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88":{"id":"0:88","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[519,0],"end":[533,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2587:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:89:60"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2608-0:166:1646":{"id":"b:2:2608-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"2:2601:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"2:3365:16594","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:6511"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:113:1653":{"id":"0:113:1653","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[51,0],"end":[53,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2246-0:166:1646":{"id":"b:2:2246-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2114"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:94:1944":{"id":"0:94:1944","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[555,4],"end":[558,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:90":{"id":"0:90","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[535,0],"end":[580,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:91:1659","0:92:1910","0:93:1660","0:94:1944","0:95:1914","0:96:1655","0:98:1667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11938:37947":{"id":"2:11938:37947","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11884:1395","crate::ops::IndexMut":"2:2982:11178","str::slice_unchecked":"2:11937:37946"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5382:38618":{"id":"5:5382:38618","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2229","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:6578","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2229","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:6578","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:2174":{"id":"5:5399:2174","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:112-0:151:1647":{"id":"0:112-0:151:1647","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,39],"end":[42,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Idna","name":"Idna","id":"0:151:1647","glob":false}},"0:81:1973":{"id":"0:81:1973","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[448,4],"end":[474,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:668":{"id":"0:103:668","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[647,4],"end":[698,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2551-0:157:1645":{"id":"b:2:2551-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2554:128","2:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11917:811":{"id":"2:11917:811","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11878:419"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:105:694":{"id":"0:105:694","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[702,4],"end":[708,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["e",{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12005:37956":{"id":"2:12005:37956","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12031:37965":{"id":"2:12031:37965","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5398:38622":{"id":"5:5398:38622","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2229","`String`":"5:7252:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2229","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:6578","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:111-0:166:1646":{"id":"0:111-0:166:1646","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[42,31],"end":[42,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::uts46::Errors","name":"Errors","id":"0:166:1646","glob":false}},"b:2:2546-0:157:1645":{"id":"b:2:2546-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2587:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:180:60"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:687:6398":{"id":"5:687:6398","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11944:35437":{"id":"2:11944:35437","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11945:35436"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43507:6451","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92:1910":{"id":"0:92:1910","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[543,4],"end":[546,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:608":{"id":"0:39:608","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[225,0],"end":[230,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"char"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:17:541":{"id":"0:17:541","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[54,0],"end":[56,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:6693:244","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2699:228-0:166:1646":{"id":"a:2:2699:228-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11926:37945":{"id":"2:11926:37945","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3316-0:157:1645":{"id":"b:2:3316-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2539:1983":{"id":"2:2539:1983","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2513:133"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180:60":{"id":"0:180:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[599,9],"end":[599,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:6375":{"id":"2:11958:6375","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41272:179","prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2248:2114":{"id":"2:2248:2114","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:1966":{"id":"2:11966:1966","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11618:6311","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::split_whitespace":"2:11944:35437","str::rsplit":"2:11972:30307"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43233:6468","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:37951":{"id":"2:11987:37951","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11990:37952":{"id":"2:11990:37952","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12044:37968":{"id":"2:12044:37968","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4534:37968"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43550:6421","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5400:31525":{"id":"5:5400:31525","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12039:31393"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11947:37948":{"id":"2:11947:37948","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43497:6462","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:30270":{"id":"2:11931:30270","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41272:179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:38620":{"id":"5:5389:38620","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2536-0:151:1647":{"id":"b:2:2536-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:1983"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12002:37955":{"id":"2:12002:37955","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11618:6311","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::match_indices":"2:11999:37954"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43401:6464","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11993:1921":{"id":"2:11993:1921","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11618:6311","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::matches":"2:11993:1921"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43437:6465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11937:37946":{"id":"2:11937:37946","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11884:1395","str::slice_mut_unchecked":"2:11938:37947","crate::ops::Index":"2:2978:11177"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12040:31394":{"id":"2:12040:31394","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:1646":{"id":"0:166:1646","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[600,0],"end":[613,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2699:228-0:166:1646","a:2:2682:220-0:166:1646","a:2:2739:2223-0:166:1646","a:2:8212:2258-0:166:1646","a:2:8213:2257-0:166:1646","b:2:2246-0:166:1646","b:2:2540-0:166:1646","b:2:2608-0:166:1646","b:2:2536-0:166:1646","b:2:2551-0:166:1646","b:2:3316-0:166:1646","b:2:2249-0:166:1646","b:2:2546-0:166:1646","b:5:5642-0:166:1646","0:179","0:107","0:104","0:102","0:106"]}},"b:2:2246-0:151:1647":{"id":"b:2:2246-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2114"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11939:30296":{"id":"2:11939:30296","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11940:30297"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11941:1805":{"id":"2:11941:1805","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11878:419"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43203:1841","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:1824":{"id":"2:11943:1824","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43219:6454","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2536-0:157:1645":{"id":"b:2:2536-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2539:1983"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:5:683-0:157:1645":{"id":"b:5:683-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:6396","5:686:6397","5:687:6398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11984:30311":{"id":"2:11984:30311","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11878:419","str::splitn":"2:11981:30309","self::pattern":"2:11618:6311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43355:6469","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1666":{"id":"0:115:1666","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[72,0],"end":[74,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2550:1472":{"id":"2:2550:1472","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1668":{"id":"0:0:1668","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[74,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46’s introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:3:1643","0:110-0:157:1645","0:111-0:166:1646","0:112-0:151:1647","0:113:1653","0:114:1658","0:115:1666"],"is_stripped":false}},"2:11919:37942":{"id":"2:11919:37942","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11999:37954":{"id":"2:11999:37954","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11618:6311","`DoubleEndedIterator`":"2:7203:121","prim@char":"1:11878:419","str::rmatch_indices":"2:12002:37955"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43383:6463","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12028:37964":{"id":"2:12028:37964","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3316-0:151:1647":{"id":"b:2:3316-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:165":{"id":"0:165","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[509,16],"end":[509,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2694:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2546-0:151:1647":{"id":"b:2:2546-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2549:128","2:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:2682:220-0:157:1645":{"id":"a:2:2682:220-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:37:1849":{"id":"0:37:1849","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[216,0],"end":[219,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["input",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1645":{"id":"0:157:1645","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[510,0],"end":[516,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:90","a:2:2699:228-0:157:1645","a:2:2682:220-0:157:1645","a:2:2739:2223-0:157:1645","a:2:8212:2258-0:157:1645","a:2:8213:2257-0:157:1645","b:2:2246-0:157:1645","b:2:2540-0:157:1645","b:2:2536-0:157:1645","b:2:2551-0:157:1645","b:2:3316-0:157:1645","b:2:2249-0:157:1645","b:2:2546-0:157:1645","b:5:683-0:157:1645","0:163","0:88","0:165"]}},"b:2:3316-0:166:1646":{"id":"b:2:3316-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:108:668":{"id":"0:108:668","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[714,4],"end":[716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[711,0],"end":[711,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","type_id","provide","description","cause"],"trait":{"name":"Error","id":"2:2601:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11918:1950":{"id":"2:11918:1950","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8212:2258-0:157:1645":{"id":"a:2:8212:2258-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8212:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:89:60":{"id":"0:89:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[520,4],"end":[532,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2739:2223-0:151:1647":{"id":"a:2:2739:2223-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:11955:1946":{"id":"2:11955:1946","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:1975":{"id":"5:5383:1975","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11920:37943":{"id":"2:11920:37943","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5397:38621":{"id":"5:5397:38621","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12037:31390":{"id":"2:12037:31390","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39428:30221","Self::is_ascii":"2:12036:1819"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39428:30221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:38618","5:5383:1975","5:5386:38619","5:5389:38620","5:5397:38621","5:5398:38622","5:5399:2174","5:5400:31525","5:5401:31526"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[713,0],"end":[717,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9110:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:108:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:686:6397":{"id":"5:686:6397","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2246-0:157:1645":{"id":"b:2:2246-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2248:2114"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:11978:37950":{"id":"2:11978:37950","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11618:6311","str::split":"2:11966:1966","prim@char":"1:11878:419","str::split_terminator":"2:11975:37949"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43301:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12025:37963":{"id":"2:12025:37963","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11638:6443","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2542:694":{"id":"2:2542:694","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:30272":{"id":"2:11935:30272","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[701,0],"end":[709,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:105:694"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11945:35436":{"id":"2:11945:35436","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11944:35437"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43516:6449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12034:37966":{"id":"2:12034:37966","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11579:127","`FromStr`":"2:11578:6459"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11578:6459","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11578:6459","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:220-0:151:1647":{"id":"a:2:2682:220-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2554:128":{"id":"2:2554:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:31912:9823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:12041:37967":{"id":"2:12041:37967","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4536:37967"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43532:6423","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12009:37958":{"id":"2:12009:37958","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12013:37961":{"id":"2:12013:37961","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11643:6441","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2682:220-0:166:1646":{"id":"a:2:2682:220-0:166:1646","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:2249-0:157:1645":{"id":"b:2:2249-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2689:2222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:27791"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:114:1658":{"id":"0:114:1658","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[57,0],"end":[62,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["domain",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"uts46::Errors","id":"0:166:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:30271":{"id":"2:11933:30271","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2610:6511":{"id":"2:2610:6511","crate_id":2,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"2:3377:9153","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:2699:228-0:151:1647":{"id":"a:2:2699:228-0:151:1647","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:2739:2223-0:157:1645":{"id":"a:2:2739:2223-0:157:1645","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2739:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Config","id":"0:157:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[439,0],"end":[507,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Idna","id":"0:151:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:939","0:81:1973","0:82:1655","0:86:1667"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11948:35494":{"id":"2:11948:35494","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43525:6448","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2555:1471":{"id":"2:2555:1471","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11969:30305":{"id":"2:11969:30305","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11441:6450","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:30309":{"id":"2:11981:30309","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11878:419","self::pattern":"2:11618:6311","str::rsplitn":"2:11984:30311"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43337:6470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:30297":{"id":"2:11940:30297","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11939:30296"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:31526":{"id":"5:5401:31526","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12040:31394"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:38619":{"id":"5:5386:38619","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11623:6442","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:10689:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:2115:7106":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12019:7761":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:4759:11293":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1519:9909":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:44149:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:10783:7387":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:39933:6424":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:531:7576":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2793:16776":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:5797:7021":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43437:6465":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"9:445:22474":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:7939:11265":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"21:228:1877":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"1:8803:9521":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43233:6468":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13194:8331":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:6482:9530":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11585:7935":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11339:6959":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3131:28874":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:2744:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:355:9476":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:4653:10214":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:46134:9442":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:2781:11402":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:4435:11306":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12419:8101":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:3225:8573":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:22449:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4307:10061":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:11689:16566":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:8407:9618":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"20:223:7555":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"16:5630:8614":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7697:7063":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:6598:10658":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:11406:9179":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13121:8316":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:73:1491":{"crate_id":2,"path":["core","u32"],"kind":"module"},"6:4821:10281":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:10928:6861":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:45450:9426":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:4398:6772":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12646:8145":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"11:1847:6765":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:7551:6434":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7065:8788":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:10823:9107":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:6724:10703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"7:79:22467":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:46322:9446":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3179:34881":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5385:9519":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4767:10256":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:859:9046":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:10135:11057":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:5022:10380":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"11:2198:9821":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:8651:6921":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12550:8127":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12980:8295":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5816:10469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:10144:6467":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6575:23477":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:8223:9603":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:665:6343":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12194:8051":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10761:23543":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10026:7258":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:10967:7839":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:6552:6850":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:3076:11179":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4416:10134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:4400:8584":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:43832:9392":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:12770:8147":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:47070:9452":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:12372:8094":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:4461:419":{"crate_id":2,"path":["core","char"],"kind":"module"},"2:45019:9410":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:6101:6845":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6662:8729":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:4872:8598":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:1227:9048":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:40223:7333":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:2371:11234":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6854:8761":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10691:23650":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5870:10496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11888:642":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11532:7922":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:41587:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:5616:8610":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:9641:7245":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10989:7610":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:703:7105":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:7498:8880":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10580:7814":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:12331:8089":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:2635:10818":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:8476:7100":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11502:7918":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:2704:6319":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:11240:7417":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:3815:8579":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11163:7857":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:5829:10478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7100:6343":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10283:7790":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"20:231:2169":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"2:21844:9199":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7235:9144":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:42793:7367":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4294:10052":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:3123:7305":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8261:10662":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:4969:8601":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:2243:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:46820:9449":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13461:8400":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"22:386:6722":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"2:39065:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:9973:7745":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:42309:8914":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:42279:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:1611:6743":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:45198:9417":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4898:10316":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:40300:7345":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6668:10682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:9379:7397":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:3183:7307":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13376:8377":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:41185:35515":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:5570:6838":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9478:7715":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:8142:8949":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11903:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:2207:9489":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:10354:7794":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:13101:6973":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13041:8302":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:13689:8477":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13488:8407":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:7497:10793":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:4431:10140":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:491:7574":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:6865:11094":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:1745:10821":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:7252:10778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"14:40:7885":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"20:356:2164":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"17:12563:8128":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:3874:11279":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:8256:8957":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:1924:2151":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12033:8029":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2520:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:6085:6824":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:5034:6778":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11902:1124":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4932:10341":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:39978:6420":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10270:7788":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:6731:16760":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:39049:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:8801:34538":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:41270:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:5926:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:609:7586":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:12448:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:38948:16611":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"21:145:1876":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"17:9108:38836":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11653:7955":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"15:0:2020":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:11090:7847":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"22:636:7210":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"5:4913:6770":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8239:9604":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:43550:6421":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"23:0:2189":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"2:45268:9420":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:123:17177":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:7778:7476":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:5067:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:5974:10554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"10:36:9826":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11785:7986":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:595:9903":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:399:7298":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10705:7823":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40232:7334":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:41627:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:359:6729":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:7165:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4890:10311":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4911:10326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:4732:10240":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4559:10199":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:4008:9155":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:643:11147":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8952:7166":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:3154:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11544:7923":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10516:7804":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8231:7399":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:7192:9139":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13721:8492":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:7656:11150":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11885:1475":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:7613:6483":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:13857:8519":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:2310:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:5179:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:264:6743":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:41244:9165":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:43822:9388":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12607:8135":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:2746:6325":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:7641:11149":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9895:7739":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:7538:10802":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11391:6972":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:4680:11296":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9340:7236":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12282:8082":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:3872:8580":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:3149:7306":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45642:9432":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:20428:7144":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9721:7248":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:2470:8546":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:45898:9438":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:39959:6427":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:3996:9154":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:587:9898":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:5021:9511":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:2507:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:11878:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:494:9843":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11471:7909":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:39898:6431":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:7683:7062":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"9:352:22489":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:41707:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:1785:7393":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:45795:9436":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10440:7269":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8922:28545":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:3134:28884":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:5439:9520":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:46022:9440":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:7767:23483":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:30252:35534":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:6361:8690":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:3300:8574":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:8212:10909":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:6024:10576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:9122:6493":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"14:165:22559":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:9040:9533":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4743:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:4845:8597":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:6016:10573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:12293:8084":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7468:9658":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:2361:11229":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:4538:10190":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12496:8121":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5947:10545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:4407:6328":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:22251:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:3128:33081":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11060:6952":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:42036:6489":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:5032:8603":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:22284:6435":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:30180:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:40275:7124":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:8953:6923":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6061:22588":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:11024:28990":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12461:8109":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:7259:2254":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:43086:7321":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7010:6343":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6201:8672":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:653:17534":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:9080:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12126:8041":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:4111:7116":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8157:7399":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:12407:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:3520:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1783:7392":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:43845:6473":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43980:10907":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:8788:6939":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:4932:8600":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:5710:6765":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"22:752:6716":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"17:9839:7733":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:39858:35500":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13344:8369":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4952:10352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:5950:7337":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:10654:9550":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:41208:9363":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:2468:16624":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13082:8315":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9853:7257":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10589:7815":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:7835:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:6767:8755":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:41507:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:96:7218":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3231:16540":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:20634:11417":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:6296:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4527:10186":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:13053:8307":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:7266:9145":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:9670:7247":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:7587:9540":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:9258:9171":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"0:0:1668":{"crate_id":0,"path":["idna"],"kind":"module"},"16:55:8927":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:9577:7720":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:4261:9157":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:20999:11239":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:9188:38841":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7543:7056":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:44028:9397":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:8217:11304":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6218:8675":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:1212:9050":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:644:7575":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:43401:6464":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:20441:34502":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:6684:7355":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:9534:7240":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:635:9480":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:4459:10152":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:45717:9434":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:2149:589":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10334:6925":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:119:6725":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:47132:9453":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:6848:10771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:8965:9634":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:44167:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3169:9496":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:8144:6468":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:326:6727":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:481:7573":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:6327:7044":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:1196:8789":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:1381:6343":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:624:38845":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:9265:7234":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:8310:23533":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:7015:7414":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:4256:9156":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:5071:8604":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:44953:9407":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:1532:9915":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10416:7267":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:6485:11362":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:42534:7148":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:40314:7346":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:2853:16786":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:6935:8765":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:47391:9466":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:3546:7101":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:1866:7305":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10681:7821":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:4789:8595":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2516:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:6587:10653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:1057:37316":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:361:9477":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"22:948:27414":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"17:13332:8363":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"20:97:1873":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"2:12263:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:2240:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:336:2162":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"1:11901:1547":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:8915:9629":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:3986:11286":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:7335:38833":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:2573:9491":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7449:8868":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7635:8885":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:828:11162":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:1665:1087":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:39945:6425":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:4728:8593":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13469:8402":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:1657:9997":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12634:8138":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11813:7993":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8072:7125":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:2504:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2777:8803":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7317:38831":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:5905:6770":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:4853:11331":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:11721:7957":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11800:7991":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:3207:9497":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:0:2013":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:21224:11412":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:4641:11305":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:11883:1365":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:43685:9385":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:10735:7828":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:4920:10332":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4383:10115":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:8638:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5755:10441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11678:6870":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:43497:6462":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6544:7048":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:3614:11275":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:9372:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:46052:9441":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5862:10491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7042:8786":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:43968:10904":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:3047:22617":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2693:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:6136:10611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:43487:6461":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:9325:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:44997:9409":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:6133:7167":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2840:16783":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:2831:6834":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:9373:7131":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:40153:7120":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:20652:11413":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:1594:9950":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7626:8884":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:10945:6863":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4472:10157":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5015:10377":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:9946:7743":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:521:27391":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:1048:8789":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10923:6956":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:5418:8608":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:22218:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:2862:8562":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:7281:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:1453:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:2262:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2978:11177":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"11:2060:8789":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:40131:7118":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6151:10622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:41547:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:43177:6460":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8773:9626":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:7349:6787":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:21453:11410":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13181:8325":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:2699:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:40584:6808":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:40575:7361":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:21837:10824":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:11185:6452":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:113:7221":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:43639:9376":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:40284:7343":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:585:11144":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:5816:6778":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11069:23547":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:4288:10051":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:21870:11277":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:1978:7255":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:501:6759":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:4678:11294":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:5677:23472":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:43654:9381":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:10206:9519":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:7818:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"22:449:6706":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:3676:9503":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11832:7998":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:44159:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13426:8392":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:6576:6780":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:1709:10029":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:4111:11303":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:20882:11411":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:4667:10215":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:20814:11239":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:4046:7101":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:4365:6770":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:4507:11323":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13499:8408":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:8733:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:2755:11403":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:2760:8802":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:6364:6343":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:9964:7101":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:7743:7064":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8466:7406":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:22929:7142":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:8283:23532":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:6595:6790":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4398:10122":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:2830:8561":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:1609:9962":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"11:638:7100":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:10862:9626":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:47292:9459":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:7690:9549":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3324:7361":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:8548:23540":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:11483:9539":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:3910:11280":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:6009:6841":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:2524:8548":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:10071:7369":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:13433:8393":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:8858:6941":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:9124:6494":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:2933:7264":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8079:7174":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:4335:6772":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:40324:7348":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:9545:7697":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:41102:9162":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:1839:7100":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:6002:10568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13564:8452":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:5367:22587":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:2572:8550":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:39837:9344":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:21451:11239":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:4980:10364":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13292:8353":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:8121:7118":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:45149:9415":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:5571:8565":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:2690:6318":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:21808:35501":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7293:8826":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:2931:22615":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:4:1014":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:39131:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:11881:1049":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:22482:9204":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:43251:6467":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44210:9402":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:4439:10143":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13316:8361":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4990:9511":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13169:8322":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:43964:10903":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:6800:10753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:579:9893":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:45398:9424":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:5000:8602":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:6830:10768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:45574:9429":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13411:8388":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:7256:28182":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:10545:7610":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3687:9127":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:1144:9054":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11520:7919":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"11:1843:6343":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:4638:11332":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:30124:6534":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:1546:9920":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:7795:7172":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:9025:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5967:10553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:9940:7100":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"11:744:7103":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:9070:2153":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:247:7605":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:43337:6470":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7843:9553":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"9:421:22476":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:10459:6483":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"11:1091:9052":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:20876:11409":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11136:7851":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:39034:7316":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:6369:6481":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:11900:789":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:4509:10177":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:348:2163":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:9038:38843":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:44007:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11299:7888":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:39153:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:4624:8591":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12345:8090":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:3063:7617":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:393:7297":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:8806:7126":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:7667:7160":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:12098:8037":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:7558:16764":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:62:17122":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:2814:16780":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:554:9880":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:47254:9456":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:44973:9408":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:30728:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7077:23480":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:9333:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:20696:11419":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:1577:7304":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"13:226:7072":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4124:7405":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:39918:6422":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:926:7105":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11422:7902":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:13612:8453":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1622:9969":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:7277:9146":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:10109:7370":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:10649:10916":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:43972:10905":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:7568:11239":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5708:7015":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"7:32:22460":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:45764:9435":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:31952:7314":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:4255:9508":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:2848:16785":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11258:7884":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:7244:38834":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"11:2219:9138":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:3314:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3160:16613":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:45818:9437":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13066:8312":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:20801:11421":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:1682:10016":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:4377:10113":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:9792:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:9112:6489":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"18:574:7575":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:41338:7101":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:3749:8577":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:40039:11208":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"17:13763:8498":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:10625:9648":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:12224:8070":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4571:10208":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:9000:7177":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:9384:6858":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:11390:9178":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:30158:6535":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:4836:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4546:10195":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:8360:23534":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10721:7825":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:11490:9539":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:9557:6925":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:3266:7266":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:305:7296":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:530:6827":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:21719:9186":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11897:1491":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:7837:8899":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:39926:6423":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9959:7744":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:541:9874":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46212:9443":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:4387:6501":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:6400:8694":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:4757:8594":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4492:10167":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:10626:7819":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:10223:6470":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:4392:10120":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:10182:7371":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:21663:7136":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:879:7100":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:7544:10803":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:2168:37733":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:4206:7100":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13324:8362":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:8109:8945":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:1077:7310":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5594:8567":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:6691:10689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:1403:7102":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"11:60:7292":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:10555:7806":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:2448:8545":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:41414:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:3448:28412":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8979:28620":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40602:7364":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"11:1126:9053":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:12046:8030":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:7859:7173":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:8100:11238":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7757:8887":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"14:7:9033":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:888:7103":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11069:10918":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:638:9482":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"20:249:128":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"0:3:1643":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:554:9479":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:2819:16781":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:1588:9948":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2786:8559":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:1914:9152":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11207:9536":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:10699:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:45596:9430":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:6762:6795":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:3974:6765":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11879:8004":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:6785:10746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"10:44:7074":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:41330:7100":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:3194:16539":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11000:9624":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11884:1395":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5643:8619":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12236:8072":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:11222:9538":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12622:6952":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:6553:10634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:7555:10807":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:39241:9216":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:39109:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"22:534:7209":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"12:0:2018":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:2613:9492":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:9734:7729":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4371:10112":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1525:9912":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:43455:6466":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:7578:10810":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13477:8403":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:21335:34507":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11896:1490":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8163:7401":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:38987:16542":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:676:11148":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:3377:9153":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:5779:7017":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6336:8686":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5051:10399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2960:16541":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6819:8757":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:7230:10777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:6693:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:20456:34502":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:2298:22589":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6243:38832":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4318:10069":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4478:10160":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6307:7040":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:12201:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:8205:9506":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13659:8471":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:21:681":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:39992:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:42559:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:20733:11420":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:47429:9468":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:45666:9433":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:5910:6837":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10527:23649":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:9933:6933":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"11:991:8789":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:22383:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:2694:8555":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:10649:7273":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"15:198:7287":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:47272:9457":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:6431:8696":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:3782:8578":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7803:8895":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"11:2192:9820":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:1524:22554":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:9059:9534":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:7491:10792":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:40072:6802":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11410:7899":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6919:38830":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:2159:16797":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:12592:8131":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4813:10278":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:2742:8557":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10823:7677":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6605:10662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:1908:18524":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:11877:936":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:8072:8940":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12835:8198":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:2345:11224":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:43301:6471":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:9683:7727":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:2406:10815":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13419:8391":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:7175:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:11305:6866":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"22:879:27413":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"1:7662:7161":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6164:8670":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:7851:9554":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13791:8507":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:688:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5900:10519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:11155:16857":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"20:0:1669":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"17:10257:7263":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:1787:7249":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:9617:7244":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:2161:16798":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:7588:8883":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:4629:10212":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"11:757:6765":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:4404:10125":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:4790:10270":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:11369:9504":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:8257:9606":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:46472:9447":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:42550:7151":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"18:652:7575":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:8212:2258":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4719:10236":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4845:10291":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:500:9845":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5779:10457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:2895:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"0:113:1653":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"5:5234:6446":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:9886:7736":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9228:38837":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5346:8607":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12894:8250":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:7859:23484":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:2315:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:1700:10023":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8138:6454":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:291:38892":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"1:7525:6856":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:1576:9940":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4423:10138":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10840:7836":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:11032:7132":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:47353:9464":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4619:10211":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4681:10216":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10452:7270":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:9986:7746":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:43383:6463":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4865:10300":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:9069:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:9826:7256":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6671:8730":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12483:8120":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:4175:9507":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:4073:7402":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6488:8698":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10303:7791":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:5764:6839":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:44240:9405":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:9035:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6460:7046":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:11894:740":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10015:7750":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:30194:35535":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:43121:7383":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11993:8021":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:671:7228":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:562:9885":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:480:6826":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"14:202:16574":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6904:7052":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:11638:6443":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:7532:10801":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2789:16777":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:3899:8581":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8316:2250":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:21610:9185":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:11643:6441":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:259:38893":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"1:11051:9534":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:5563:6837":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1555:9925":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:6245:6765":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:41388:2255":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:506:9848":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:1583:7305":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:42581:7152":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12085:8035":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7572:38829":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11844:7181":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7411:7004":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:632:9124":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:11011:7841":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:11827:9661":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:11623:6442":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:13211:8336":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:1035:9050":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:2205:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:2343:10823":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:10413:9495":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:4698:10224":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:45620:9431":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:9114:6490":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:867:6343":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:45305:9422":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:41321:1842":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:9907:6945":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:6868:7008":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:47327:9462":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"0:15:1803":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"5:6177:6784":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:9218:6925":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:8025:8936":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6110:10596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"9:234:9368":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:901:6765":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11446:7906":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:5549:7122":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"9:481:22473":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11109:7850":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:45498:9427":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10377:7795":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:7055:6343":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:13309:8360":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10142:23624":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10052:7753":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:2642:8553":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:10939:6862":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6022:23475":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3400:9501":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:9979:7394":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"11:1852:6731":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:41119:9164":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:2765:8799":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:8789:7412":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:11328:9503":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:681:7592":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:6132:8667":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:7001:6578":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:44252:9058":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:9653:7724":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:42352:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11849:11151":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:43760:9180":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:507:7575":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:12510:8122":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:39831:6422":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:3139:16787":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8797:6343":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10798:23544":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"18:614:38847":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:962:6743":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:47376:9465":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:9772:7730":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:9117:28999":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:3246:9499":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:9512:7239":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:43668:9384":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2346:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:2836:16782":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:636:7591":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13842:8518":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9322:38835":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:1561:9056":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:43020:7374":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9453:23555":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11600:7941":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"7:0:1537":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:43984:10908":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12388:8096":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:10844:28977":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:1692:10022":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:4449:10149":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4344:10089":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:13879:8525":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:40144:7119":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11844:8000":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:2086:9128":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:4762:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6047:10582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:9118:6492":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:1561:7100":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12576:8129":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:41747:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5843:10489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7519:8881":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"9:388:22475":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:2587:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:11330:9174":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:0:1387":{"crate_id":1,"path":["std"],"kind":"module"},"17:11434:7903":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:2513:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:6578:10652":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"21:276:2211":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"2:43203:1841":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10885:6955":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:40191:7328":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:45228:9418":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"22:728:6706":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:2210:6796":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:1731:16808":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11892:743":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:782:6746":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:32017:6327":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:41079:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:3446:8575":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13135:8319":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:5944:8639":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:1819:9151":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:30358:35536":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:10032:6450":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"21:313:2213":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"2:2919:2224":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:20874:11239":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2359:11228":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:11165:7413":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6351:23476":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:9068:38842":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:20488:34600":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:2720:8556":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:47338:9463":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:7485:10791":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:47008:9451":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:43112:7382":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11193:7861":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:41907:7147":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5058:10402":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:6094:11498":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:3275:6731":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:11891:742":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5798:10459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:8931:6942":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:42774:9372":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:922:7104":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:10428:7801":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:9078:9636":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:42789:10899":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3248:9500":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:46288:9445":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11192:9535":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:5640:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:7025:6765":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:7568:10808":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:93:2173":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"2:44040:16899":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:3059:9493":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:4857:10295":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:7275:10789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:40214:7123":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:13516:8415":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4970:10363":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:47216:9455":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2682:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:2844:16784":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:31948:9209":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"22:0:2188":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"1:11882:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"18:719:7597":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:4596:8590":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:42050:6492":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13356:8370":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:21679:7111":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:7016:7308":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2736:6321":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:12418:6824":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4783:37215":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:1080:9054":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:11632:6444":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:7805:9551":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:21731:35525":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:7526:10800":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:8214:8847":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:7437:8867":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:6332:9528":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"11:2076:9048":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:679:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8727:7410":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4991:10370":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:39846:6429":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5386:6921":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:4166:6770":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12902:8253":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:867:9047":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13367:8374":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"14:160:9033":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:8835:11368":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:2337:6982":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13145:8320":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:10223:28343":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:41221:9506":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:1715:6731":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:6558:8705":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:9368:16629":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9866:7734":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:11088:9533":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:4413:11305":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2404:8543":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13385:8378":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:1540:9055":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:4844:11330":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:3087:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2467:11239":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8384:9368":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:8490:23538":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:5354:9517":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:4323:6800":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6717:8742":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:488:9840":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:39214:9215":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:5190:6743":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:6940:6840":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"11:97:9819":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:6700:10692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:975:7242":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10354:6859":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11319:7898":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5655:8566":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:3774:6743":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:8633:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:2539:6831":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"11:840:9044":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:2771:16775":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:9098:7231":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"0:115:1666":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"5:7252:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:1895:2150":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8909:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:3880:11278":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7488:8879":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:2426:8544":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9469:7713":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:39428:30221":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"0:37:1849":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"17:12449:8107":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:43060:7379":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:35:6739":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:5724:8620":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:816:7303":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:3679:9504":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:4818:8596":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10465:7802":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:1034:7243":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"10:0:2016":{"crate_id":10,"path":["adler"],"kind":"module"},"17:10039:7751":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9917:6946":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:43507:6451":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4590:10209":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:4480:8586":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:10635:6951":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:9822:7732":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:20771:16797":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:936:11162":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12522:8123":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:4184:6499":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:47312:9461":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:5719:7162":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9028:7229":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:9380:23553":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:5693:7012":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:9120:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:755:7603":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:768:6731":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:3938:11283":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"14:215:9038":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:43532:6423":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:6008:10571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:10667:9653":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10857:23545":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:5832:17096":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:4378:6801":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:3932:11282":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:6321:7042":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:911:6731":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:6179:7022":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13777:8500":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:2824:8808":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:9030:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:3640:7621":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7092:6343":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:3932:6770":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"18:590:7579":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:6291:6743":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:39248:6500":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:9312:7235":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"22:470:6710":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"16:5998:23474":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:5693:9526":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4499:10170":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:43099:7381":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13803:8509":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:1844:7395":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:41827:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"22:1034:27415":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"17:8443:23537":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"18:727:6917":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:7124:16766":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:7503:10794":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:43960:10902":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:2357:8541":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10104:6948":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2594:8551":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:8718:6937":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:40363:7353":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:2689:2222":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11899:1489":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:11282:7885":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:3149:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:1421:7303":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:9443:7237":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:4445:8585":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11861:8003":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:5686:9523":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:4641:10213":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:42960:7372":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:7506:6854":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6990:8779":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:7258:10780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:3365:16594":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:2785:11404":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:3972:11284":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:2378:8542":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:2764:8558":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:3291:11262":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:39874:6428":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:25739:7143":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:5491:7329":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:9350:38838":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:4751:10248":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:9588:6814":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:2076:6759":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:5557:7011":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:2905:8564":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2797:16778":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:11441:6450":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11924:8014":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9523:7719":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:7457:7609":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:2549:6814":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:45976:9439":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:3166:16612":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:4827:10282":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12536:8124":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8283:9510":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:2352:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7478:8570":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:198:2214":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"2:43191:6458":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6628:10680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:7934:7171":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:39888:6430":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:4540:8588":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:42269:10891":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13865:8522":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:43988:7132":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"20:315:38854":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:4736:6835":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:31912:9823":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:20486:34598":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"20:369:2165":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:8745:9624":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:3457:11237":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:4682:11297":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:9105:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:3672:7173":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:9110:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"18:564:6913":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7467:8876":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:6373:9529":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:7103:9634":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11893:744":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6293:8685":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"14:221:9040":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:42374:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:562:7609":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:3505:6765":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:1062:9048":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:8389:23535":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:3167:9495":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:547:9877":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12072:8033":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:8667:6922":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"11:0:2017":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:1721:10033":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:959:9047":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:10750:7386":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:20761:11414":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:6548:6349":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:5247:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"22:1122:7547":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"2:20662:16797":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:40102:7321":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:2616:8552":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:857:7101":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:4947:10350":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:242:7604":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:690:7594":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:5886:8633":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13265:8349":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:953:9046":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:22317:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:9148:38839":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:7222:9142":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:7063:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:45428:9425":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:3128:38760":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6376:7045":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:917:7303":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:5502:11349":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:8214:2256":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:40546:7357":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:45043:9411":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:8979:38844":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:11372:6965":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:4327:8583":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:3752:6731":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:21771:35523":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8168:11273":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4941:10347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:515:7572":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:3439:2153":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:279:2229":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:39255:7547":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:43141:7385":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:7554:11165":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13453:8399":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:41165:7146":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:7174:2228":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:8319:6442":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:1628:588":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4784:10267":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:6651:10681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10598:7839":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12923:8261":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:862:6751":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10419:9499":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:4902:2246":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:10712:23651":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9748:6925":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:20469:34597":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:67:1875":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"1:2214:11221":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:41482:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:2879:8563":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:7226:1846":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:6390:8693":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5104:8605":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:7529:7055":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"22:43:27411":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:4575:10675":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:2692:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:7694:9209":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:11390:9505":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4851:10292":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:8823:6940":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:2212:9824":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"9:174:7090":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:45250:9419":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:43516:6449":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:41346:6343":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:6535:6724":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:535:6994":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4960:10357":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:13399:8385":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:257:1874":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"17:11770:7982":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:6409:6849":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"9:325:9827":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:4333:6500":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10936:6958":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:2905:37315":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3354:6770":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:0:2021":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:2802:8804":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10660:6952":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:40082:9350":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:40553:7358":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13812:8513":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:11446:7180":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:8598:23542":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9138:7232":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"14:187:22566":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:7509:8571":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:1564:9931":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:1241:9054":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:1768:610":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:7557:7057":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:660:7223":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:43811:16573":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:1634:6737":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8851:11367":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:4327:9509":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"15:219:7068":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:10092:7262":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:4817:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:4136:6770":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6890:7051":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:0:2022":{"crate_id":17,"path":["object"],"kind":"module"},"16:8170:8950":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:6621:9528":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:49274:11425":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"17:10478:7271":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:11220:7869":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:42029:6490":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:45352:9423":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:20621:11416":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:1412:7103":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:3994:11288":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:1041:7309":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:39089:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:9603:6819":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:3621:6743":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:41465:7101":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"9:0:2015":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10569:7810":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:14:2130":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:29933:11276":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:11459:7908":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:6737:6784":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:20660:34642":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:20471:34595":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12113:8040":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:41397:16851":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:10237:6469":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:6188:6837":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11556:7924":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:9488:7717":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:9989:6468":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:11890:745":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10316:7792":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12959:8290":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5747:10439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:11969:8020":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:5920:6990":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11821:7995":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1650:9993":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11902:8007":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"20:327:7559":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"2:41256:9167":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:3382:9599":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13651:8468":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5988:10565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:9489:6810":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:210:6741":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1565:6343":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43029:7376":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1736:10040":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12799:8167":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:4434:6502":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"21:302:2212":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"16:4904:8599":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:154:6722":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:42334:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:8044:9593":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:5785:10458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:6605:6792":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:7029:8783":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13443:8396":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12318:8087":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:8129:8946":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:3533:7100":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:21557:9184":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:20896:7133":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:44223:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"0:39:608":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"0:17:541":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"2:2929:2227":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:21754:9188":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"11:1873:7306":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:3924:11281":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4521:10183":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:43283:6472":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:1980:7173":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:6696:23478":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2830:8809":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:8753:6938":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12178:8046":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:11159:7168":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:13033:8301":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7711:8886":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9876:7657":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:5484:6780":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:41473:6343":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5963:7276":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"11:1050:22553":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:2911:37314":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6569:10646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:10679:7172":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:44202:9400":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:45287:9421":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:5334:9516":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2809:16779":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:4731:668":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:45544:9428":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:844:7100":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:5796:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3162:38759":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:7161:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6236:7007":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:8424:11344":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"11:675:7104":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:6776:10743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:1071:38825":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:10251:7390":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:7147:9138":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:6236:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12307:8086":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:8180:23485":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:7595:34536":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:1539:9917":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"11:821:9041":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"22:966:6721":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"17:10670:7820":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:20980:11408":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:42589:7153":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:22152:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:10048:9639":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4726:10237":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4331:10079":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:6637:16768":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:1715:10032":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:4602:6416":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:42043:6491":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:9875:9360":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"11:279:7293":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:1572:6731":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:573:9890":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13219:8339":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:40200:7330":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:46930:9450":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:568:9888":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:1544:6770":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:814:6749":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:21792:35491":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:43956:10901":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:47301:9460":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:526:9865":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:3157:7304":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:8909:6454":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:1589:7306":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:6876:7050":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6545:10629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"13:110:38827":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:8482:7409":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13625:8459":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:2750:11401":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:11234:7870":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:22119:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"18:766:27390":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8890:9628":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:3464:11257":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"15:180:7282":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:43355:6469":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:783:6736":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:9178:7233":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:10709:9502":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:41355:2254":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:2188:7109":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:6907:6852":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:11012:9625":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5857:10490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10080:7755":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:7788:9550":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:2510:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6116:10597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7596:23482":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6442:8697":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:8131:7351":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"13:0:2012":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:1821:7394":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:22416:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:7332:6731":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:8256:23519":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10491:7803":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:43976:10906":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2386:2029":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:11889:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:11895:1493":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"18:736:27389":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:1994:9127":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:44265:9406":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:8573:23541":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:1919:23582":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9498:6943":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"14:31:9033":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4553:10197":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:46678:9448":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:43733:9386":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:11578:6459":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10719:28997":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12915:8260":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:3116:7100":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:39952:6426":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:8632:23520":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:13233:8342":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5847:8630":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:43011:7373":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12433:8103":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5032:10385":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"5:7033:6754":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:2868:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:4563:11283":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4999:10372":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:8420:23536":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:5305:8606":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:7041:37727":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:21006:11415":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:5811:8623":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:21008:7133":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11458:10919":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:1728:10036":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:10615:7818":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4466:10155":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9182:7395":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6057:10585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:1635:6531":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"14:0:2019":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:8047:8937":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:40243:7339":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:5809:10467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:41406:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:618:2152":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:40182:7325":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:45097:9413":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:4320:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"9:52:7075":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:10311:7410":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6943:23479":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:39910:6421":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:8521:23539":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4773:10259":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:40009:35524":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:40122:7322":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:7569:9478":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:7016:8780":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:1668:10005":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"11:2087:9050":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:1614:9964":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:10402:7797":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:2808:8560":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:21695:7137":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4803:10275":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:43525:6448":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2742:6323":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:40025:9349":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6728:8743":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11628:7951":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:2546:8549":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:12236:35419":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4688:10217":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:1846:7396":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"18:80:7215":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:0:1670":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"1:9998:7420":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:4095:7403":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:7071:7110":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:2967:22616":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:41867:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:20830:11407":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11876:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12138:8042":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:43131:7384":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:4142:7117":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:8156:7066":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:40560:6481":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12006:8024":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:4043:16538":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:5370:9518":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:5741:23473":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7592:9542":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:43039:7377":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6254:7037":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9628:7723":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:538:6911":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:4004:6743":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:43865:6474":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:47178:9454":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:386:7606":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:42325:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:47468:9469":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:21323:7135":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:6586:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:8334:9615":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:1754:9148":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:43617:16572":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:707:6444":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:652:7101":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13506:8410":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11860:28986":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:13249:8345":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:21746:9187":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:1594:7307":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12358:8091":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8867:11369":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:3781:9505":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"21:266:2199":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"6:6814:10762":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:4609:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:40172:7121":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40594:7362":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:11946:8015":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:8904:7163":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:947:9044":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:10265:7391":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:40162:7323":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5995:10567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6506:7278":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:10644:10914":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"20:8:2168":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"2:30164:6536":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:9116:6491":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5077:10410":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:2739:2223":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:40335:7351":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:11844:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:39234:8847":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:4809:795":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:41457:7100":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:5499:10583":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:2908:11166":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10125:7756":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11615:7947":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10505:7272":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6706:10693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4707:10229":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:420:7607":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"11:2204:38826":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7669:7060":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:8090:8942":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:4020:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:8781:7100":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:1071:9050":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10897:7838":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:30756:7144":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:43797:9387":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:4573:10673":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:8957:7175":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:9571:6813":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:7520:10799":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:7443:10790":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:4568:8589":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:1859:7304":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:2866:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:1350:7100":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1568:6765":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:9095:9637":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:10819:9549":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:43541:6422":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:2982:11178":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:47406:9467":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:4252:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1752:10045":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5880:10503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:12214:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:12259:8081":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:11879:1509":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:10416:9497":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"21:320:7551":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"5:7159:11161":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6821:10765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:2904:6396":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:11367:9177":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:5976:6996":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:5238:6447":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:2694:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:41787:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:2502:8547":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:42297:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:11898:1492":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:12059:8032":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13698:8479":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11891:8006":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:2476:9490":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12403:8100":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:699:6916":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:1431:7104":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13639:8465":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"20:383:2166":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"16:2319:8539":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1365:7101":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:9696:6943":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:7783:7397":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2601:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:47281:9458":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:9566:7234":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:40349:7352":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:43049:7378":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:40252:7340":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:9275:38840":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:13744:8493":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:487:7608":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:5717:10414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"16:3030:8572":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:8195:23521":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:22185:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:7206:35524":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11355:6963":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:40265:7341":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6981:8776":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:482:9837":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4577:10677":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:7509:10795":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11573:7932":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6474:7047":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:2923:2225":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"9:502:9110":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:2668:8554":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13159:8321":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:9409:23554":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:7366:23481":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:9796:7731":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:5402:6922":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:4757:10250":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:7203:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1442:7105":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:8945:9633":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:46258:9444":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:8151:6461":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:4037:8582":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:5935:10540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6520:8704":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:42542:7150":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:4103:7404":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:5065:10405":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:11618:6311":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:3585:8576":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8759:9625":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:45127:9414":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:731:7102":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:3142:7265":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:41667:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5959:10552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:7128:16765":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"8:0:2014":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:2907:10812":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:43952:10900":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13240:8344":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:875:7102":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:39175:11155":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:1514:9907":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:4702:8592":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:11234:7416":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:6685:10687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13015:8296":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:6880:7125":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:2915:37308":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13667:8472":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10743:7275":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:5556:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:41136:11274":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:6755:10729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13678:8476":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:21229:11422":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:42571:9368":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:3209:9498":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11641:7952":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:39207:9214":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7929:9555":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11037:23546":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:10068:7261":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13821:8515":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:4510:8587":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2926:2226":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:7674:11197":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:3982:11285":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:5773:10454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13257:8347":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:11171:9172":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"22:669:6907":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:8822:9627":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4486:10165":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:40569:7359":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:21858:9200":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:3639:6343":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:930:9041":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:119:17176":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:11142:6864":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:8493:9623":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:1009:9048":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6793:8756":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:22350:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:9424:7712":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5071:10407":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:1462:7311":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:6538:11364":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:45167:9416":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:532:9868":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:20975:11239":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:10832:9520":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:1947:7252":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:582:7144":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9596:7721":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10000:7747":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13024:8300":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:599:38848":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"11:1879:7307":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11484:7910":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:39997:9348":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:8088:9502":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:8683:6936":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:6757:11405":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:12288:9182":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:43219:6454":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:6443:6743":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:474:7301":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:9782:11239":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"0:114:1658":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"2:12503:11170":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:45065:9412":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12158:8045":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4875:10306":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:5320:9512":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:8213:2257":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:43209:6455":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:0:2023":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1313:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:4797:10272":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":25}