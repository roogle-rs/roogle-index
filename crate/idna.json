{"root":"0:0:1831","crate_version":"0.5.0","includes_private":false,"index":{"1:12917:31178":{"id":"1:12917:31178","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2771-0:155:1810":{"id":"b:1:2771-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:138","1:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3591-0:161:1808":{"id":"b:1:3591-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12997:36814":{"id":"1:12997:36814","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13027:34969":{"id":"1:13027:34969","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:39200"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:749"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:660":{"id":"0:46:660","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:1808":{"id":"0:114-0:161:1808","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1808","glob":false}}},"0:109:749":{"id":"0:109:749","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12931:7992":{"id":"1:12931:7992","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44379:6648","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2770:1627":{"id":"1:2770:1627","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2978:246-0:161:1808":{"id":"a:1:2978:246-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:155:1810":{"id":"0:155:1810","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:32731:237-0:155:1810","a:1:42366:2447-0:155:1810","a:1:2978:246-0:155:1810","a:1:32788:2427-0:155:1810","a:1:42367:2446-0:155:1810","b:1:2456-0:155:1810","b:1:2760-0:155:1810","b:1:2453-0:155:1810","b:1:3591-0:155:1810","b:1:2766-0:155:1810","b:1:2756-0:155:1810","b:1:2771-0:155:1810","0:159"]}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12951:2141":{"id":"1:12951:2141","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12592:2302","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::split_whitespace":"1:12929:30643","str::rsplit":"1:12957:33803"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44125:6653","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2760-0:155:1810":{"id":"b:1:2760-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1822","0:96:2084","0:97:1823","0:98:2119","0:99:2088","0:100:1818","0:102:1830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:97:1823":{"id":"0:97:1823","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12994:36812":{"id":"1:12994:36812","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12898":{"id":"1:12898","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12899:879","1:12900:2125","1:12901:36798","1:12902:36799","1:12904:36800","1:12907:33156","1:12908:36801","1:12909:333","1:12910:33776","1:12911:2011","1:12913:31176","1:12915:31177","1:12917:31178","1:12919:36802","1:12920:36803","1:12921:33795","1:12922:33796","1:12923:33799","1:12924:33800","1:12926:1974","1:12927:10404","1:12928:1994","1:12929:30643","1:12930:30655","1:12931:7992","1:12932:36804","1:12933:30633","1:12934:31665","1:12937:2120","1:12940:2121","1:12943:6568","1:12947:1987","1:12951:2141","1:12954:30651","1:12957:33803","1:12960:36805","1:12963:36806","1:12966:33805","1:12969:33807","1:12972:33809","1:12975:33810","1:12978:2095","1:12981:36807","1:12984:36808","1:12987:36809","1:12990:36810","1:12992:36811","1:12994:36812","1:12996:36813","1:12997:36814","1:12998:36815","1:13001:36816","1:13004:2143","1:13007:33811","1:13010:36817","1:13013:36818","1:13016:36819","1:13019:36820","1:13021:1989","1:13022:34965","1:13023:33615","1:13024:33612","1:13025:33611","1:13026:34968","1:13027:34969","1:13028:34970","1:13029:36821","1:13031:12300","1:13032:36822"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5589:37517":{"id":"5:5589:37517","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:721:29263":{"id":"5:721:29263","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13013:36818":{"id":"1:13013:36818","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1818":{"id":"0:100:1818","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:719:7696":{"id":"5:719:7696","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13023:33615":{"id":"1:13023:33615","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5585:37516":{"id":"5:5585:37516","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2292","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:286:2292","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1818":{"id":"0:88:1818","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12963:36806":{"id":"1:12963:36806","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12592:2302","str::split":"1:12951:2141","prim@char":"4:12072:453","str::split_terminator":"1:12960:36805"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44193:6652","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2766-0:170:1809":{"id":"b:1:2766-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2769:138","1:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:87:2147":{"id":"0:87:2147","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12975:33810":{"id":"1:12975:33810","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12900:2125":{"id":"1:12900:2125","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:457":{"id":"0:168:457","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12920:36803":{"id":"1:12920:36803","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12078:1545","crate::ops::IndexMut":"1:3253:2289","str::slice_unchecked":"1:12919:36802"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2756-0:155:1810":{"id":"b:1:2756-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:2157"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12923:33799":{"id":"1:12923:33799","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12924:33800"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12947:1987":{"id":"1:12947:1987","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42244:191","prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2760-0:161:1808":{"id":"b:1:2760-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2774:138":{"id":"1:2774:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32661:10641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12998:36815":{"id":"1:12998:36815","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12617:6637","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1045","0:87:2147","0:88:1818","0:91:1830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13029:36821":{"id":"1:13029:36821","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4771:36821"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44424:6607","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42367:2446-0:170:1809":{"id":"a:1:42367:2446-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42367:2446","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2453-0:155:1810":{"id":"b:1:2453-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2455:2192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12987:36809":{"id":"1:12987:36809","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12592:2302","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::match_indices":"1:12984:36808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44293:6660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1830":{"id":"0:102:1830","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2458:29256":{"id":"1:2458:29256","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:33614":{"id":"5:5603:33614","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13024:33612"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:720:29262":{"id":"5:720:29262","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12910:33776":{"id":"1:12910:33776","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1045":{"id":"0:86:1045","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1821":{"id":"0:118:1821","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2084":{"id":"0:96:2084","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32731:237-0:170:1809":{"id":"a:1:32731:237-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3591-0:155:1810":{"id":"b:1:3591-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2771-0:170:1809":{"id":"b:1:2771-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:138","1:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:589":{"id":"0:24:589","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7045:263","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2119":{"id":"0:98:2119","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2088":{"id":"0:99:2088","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32788:2427-0:161:1808":{"id":"a:1:32788:2427-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32788:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2756-0:161:1808":{"id":"b:1:2756-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:2157"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:107:722":{"id":"0:107:722","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12904:36800":{"id":"1:12904:36800","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12902:36799"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2455:2192":{"id":"1:2455:2192","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12978:2095":{"id":"1:12978:2095","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12592:2302","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::rmatches":"1:12981:36807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44329:6657","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:37519":{"id":"5:5600:37519","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:1806":{"id":"0:7:1806","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust‚Äôs UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1972","0:24:589","0:44:2017","0:46:660"],"is_stripped":false}}},"a:1:42366:2447-0:170:1809":{"id":"a:1:42366:2447-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42366:2447","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2760-0:170:1809":{"id":"b:1:2760-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116-0:155:1810":{"id":"0:116-0:155:1810","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1810","glob":false}}},"b:1:2456-0:170:1809":{"id":"b:1:2456-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2458:29256"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12927:10404":{"id":"1:12927:10404","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44101:2376","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12960:36805":{"id":"1:12960:36805","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12592:2302","str::split":"1:12951:2141","prim@char":"4:12072:453","`DoubleEndedIterator`":"1:7973:131","str::rsplit_terminator":"1:12963:36806"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44175:6654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12913:31176":{"id":"1:12913:31176","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12915:31177":{"id":"1:12915:31177","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12937:2120":{"id":"1:12937:2120","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5586:2149":{"id":"5:5586:2149","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1972":{"id":"0:22:1972","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32731:237-0:161:1808":{"id":"a:1:32731:237-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42367:2446-0:161:1808":{"id":"a:1:42367:2446-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42367:2446","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1831":{"id":"0:0:1831","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46‚Äôs introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1806","0:114-0:161:1808","0:115-0:170:1809","0:116-0:155:1810","0:117:1816","0:118:1821","0:119:1829"],"is_stripped":false}}},"1:12911:2011":{"id":"1:12911:2011","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12921:33795":{"id":"1:12921:33795","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:12923:33799","str::split_at_mut":"1:12922:33796"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12929:30643":{"id":"1:12929:30643","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12930:30655"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44399:6649","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13004:2143":{"id":"1:13004:2143","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2766-0:161:1808":{"id":"b:1:2766-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2769:138","1:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:112:722":{"id":"0:112:722","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:1829":{"id":"0:119:1829","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2775:1625":{"id":"1:2775:1625","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12992:36811":{"id":"1:12992:36811","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13007:33811":{"id":"1:13007:33811","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1822":{"id":"0:95:1822","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32788:2427-0:170:1809":{"id":"a:1:32788:2427-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32788:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13031:12300":{"id":"1:13031:12300","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4772:12300"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44433:6606","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12909:333":{"id":"1:12909:333","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12910:33776","`u8`":"4:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2759:2157":{"id":"1:2759:2157","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2733:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42366:2447-0:161:1808":{"id":"a:1:42366:2447-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42366:2447","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:717-0:161:1808":{"id":"b:5:717-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:713:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:719:7696","5:720:29262","5:721:29263"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42367:2446-0:155:1810":{"id":"a:1:42367:2446-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42367:2446","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2756-0:170:1809":{"id":"b:1:2756-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:2157"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2453-0:170:1809":{"id":"b:1:2453-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2455:2192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2453-0:161:1808":{"id":"b:1:2453-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2455:2192"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","description","source","cause"],"trait":{"name":"Error","id":"1:2818:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12928:1994":{"id":"1:12928:1994","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44111:6647","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2456-0:161:1808":{"id":"b:1:2456-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2458:29256"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:91:1830":{"id":"0:91:1830","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12926:1974":{"id":"1:12926:1974","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44095:2010","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32788:2427-0:155:1810":{"id":"a:1:32788:2427-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32788:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32731:237-0:155:1810":{"id":"a:1:32731:237-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2769:138":{"id":"1:2769:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:2766-0:155:1810":{"id":"b:1:2766-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2769:138","1:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:161:1808":{"id":"0:161:1808","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:32731:237-0:161:1808","a:1:42366:2447-0:161:1808","a:1:2978:246-0:161:1808","a:1:32788:2427-0:161:1808","a:1:42367:2446-0:161:1808","b:1:2456-0:161:1808","b:1:2760-0:161:1808","b:1:2453-0:161:1808","b:1:3591-0:161:1808","b:1:2766-0:161:1808","b:1:2756-0:161:1808","b:1:2771-0:161:1808","b:5:717-0:161:1808","0:92","0:167","0:169"]}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5858-0:170:1809":{"id":"b:5:5858-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10031:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5856:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5860:1602"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:2017":{"id":"0:44:2017","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12907:33156":{"id":"1:12907:33156","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12140:6641"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12922:33796":{"id":"1:12922:33796","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12921:33795","str::split_at_mut_checked":"1:12924:33800"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12934:31665":{"id":"1:12934:31665","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12940:2121":{"id":"1:12940:2121","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12943:6568":{"id":"1:12943:6568","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42244:191","prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12957:33803":{"id":"1:12957:33803","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12592:2302","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::split":"1:12951:2141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44143:6651","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13001:36816":{"id":"1:13001:36816","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13016:36819":{"id":"1:13016:36819","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13019:36820":{"id":"1:13019:36820","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12553:137","`FromStr`":"1:12552:2297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12552:2297","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12552:2297","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13025:33611":{"id":"1:13025:33611","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13026:34968":{"id":"1:13026:34968","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:39200"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2973:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12984:36808":{"id":"1:12984:36808","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12592:2302","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::rmatch_indices":"1:12987:36809"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44275:6659","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13032:36822":{"id":"1:13032:36822","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4769:36822"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44442:6605","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42366:2447-0:155:1810":{"id":"a:1:42366:2447-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42366:2447","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5601:37520":{"id":"5:5601:37520","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2292","`String`":"5:7622:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2292","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10026:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5602:2041":{"id":"5:5602:2041","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12899:879":{"id":"1:12899:879","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5592:37518":{"id":"5:5592:37518","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2978:246-0:155:1810":{"id":"a:1:2978:246-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12932:36804":{"id":"1:12932:36804","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44389:6650","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2771-0:161:1808":{"id":"b:1:2771-0:161:1808","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2774:138","1:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12996:36813":{"id":"1:12996:36813","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13021:1989":{"id":"1:13021:1989","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12990:36810":{"id":"1:12990:36810","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:1809":{"id":"0:115-0:170:1809","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1809","glob":false}}},"5:5604:33613":{"id":"5:5604:33613","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13025:33611"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12966:33805":{"id":"1:12966:33805","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302","str::rsplitn":"1:12969:33807"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44229:6656","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13010:36817":{"id":"1:13010:36817","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:1809":{"id":"0:170:1809","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32731:237-0:170:1809","a:1:42366:2447-0:170:1809","a:1:2978:246-0:170:1809","a:1:32788:2427-0:170:1809","a:1:42367:2446-0:170:1809","b:1:2456-0:170:1809","b:1:2760-0:170:1809","b:1:2453-0:170:1809","b:1:3591-0:170:1809","b:1:2766-0:170:1809","b:1:2756-0:170:1809","b:1:2771-0:170:1809","b:5:5858-0:170:1809","0:183","0:108","0:106","0:111","0:110"]}}},"a:1:2978:246-0:170:1809":{"id":"a:1:2978:246-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2456-0:155:1810":{"id":"b:1:2456-0:155:1810","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1810","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2458:29256"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3591-0:170:1809":{"id":"b:1:3591-0:170:1809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32732:2426","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12930:30655":{"id":"1:12930:30655","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12929:30643"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44408:6662","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1816":{"id":"0:117:1816","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12954:30651":{"id":"1:12954:30651","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:2302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12408:6663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12933:30633":{"id":"1:12933:30633","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44417:6661","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2762:749":{"id":"1:2762:749","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13024:33612":{"id":"1:13024:33612","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12969:33807":{"id":"1:12969:33807","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12072:453","str::splitn":"1:12966:33805","self::pattern":"1:12592:2302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44247:6655","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3593:1640":{"id":"1:3593:1640","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40029:10362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13028:34970":{"id":"1:13028:34970","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:39200"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12901:36798":{"id":"1:12901:36798","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5584":{"id":"5:5584","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5585:37516","5:5586:2149","5:5589:37517","5:5592:37518","5:5600:37519","5:5601:37520","5:5602:2041","5:5603:33614","5:5604:33613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12972:33809":{"id":"1:12972:33809","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5860:1602":{"id":"5:5860:1602","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10031:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13022:34965":{"id":"1:13022:34965","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40215:30785","Self::is_ascii":"1:13021:1989"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40215:30785","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12981:36807":{"id":"1:12981:36807","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12592:2302","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::matches":"1:12978:2095"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44347:6658","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:2290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:6638","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12924:33800":{"id":"1:12924:33800","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12923:33799"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12908:36801":{"id":"1:12908:36801","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12919:36802":{"id":"1:12919:36802","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12078:1545","str::slice_mut_unchecked":"1:12920:36803","crate::ops::Index":"1:39861:2288"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12902:36799":{"id":"1:12902:36799","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:4464:10015":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:3237:35522":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:5321:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:16050:8639":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:9467:8027":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"4:5045:17914":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:34360:12268":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:40972:8066":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4992:10985":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:43491:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"4:12082:696":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:48326:10478":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:328:8000":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11605:7540":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:4409:6692":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:22807:10338":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:3473:7963":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6821:11461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"11:687:7698":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:43513:7774":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:22493:17816":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:11367:7528":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:30958:6690":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:5112:11026":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:21399:31473":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:2037:7947":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:6524:11334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:47750:10470":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12516:8562":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:6941:24980":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:12070:403":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:6243:7406":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:39932:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13252:8629":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:8461:17918":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"5:3275:36554":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:42513:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:581:7766":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:2529:9382":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7270:7598":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:11714:6644":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:553:10703":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:40042:8245":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"22:966:7319":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"16:7194:38217":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:12294:6667":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:2982:7396":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:6664:11410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11715:8473":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:588:17750":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:42474:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:6227:7403":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:11160:11707":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"0:7:1806":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"6:5329:11100":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:6729:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"4:5512:10024":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"21:266:2401":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"16:2573:9384":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5266:11074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:15445:9144":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:11385:10039":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:14994:9043":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:2733:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:1490:10726":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:10039:6683":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:1911:12245":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12707:7979":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:4095:7335":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:12592:2302":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:6077:7617":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:7987:7709":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:7984:11650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2995:24114":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:9155:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:14489:8865":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"22:879:29251":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"1:46025:10429":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:15266:9097":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"20:319:17816":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"17:403:8307":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:4312:10013":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:48002:10472":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:48288:10477":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:4518:9421":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:7595:7659":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"22:449:7304":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"22:534:7902":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"17:12792:8382":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"11:1883:7697":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:7353:2324":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:10876:6653":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:6597:11383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:3419:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:7559:9978":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:5083:11024":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:4250:12301":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"20:457:2363":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"1:7480:12334":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:14414:8850":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13844:8747":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:3545:9408":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"20:534:7911":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"17:11128:8404":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:13064:8591":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11405:8450":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11419:7516":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:8265:11667":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:2093:9965":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:2276:17798":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"5:1470:7698":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:16151:9344":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:261:8306":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:6692:9590":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:2399:9376":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"19:0:1139":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:48410:10485":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13999:8771":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:481:8274":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:3814:10010":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:10247:35609":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:9498:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:47330:10466":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5160:11030":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:13594:8693":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:9122:7731":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:43204:11786":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:16212:9358":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5415:11133":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12362:8549":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7376:9713":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10905:7934":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:12354:6666":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:43706:10393":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"21:67:2049":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"17:12557:7528":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"4:4716:11549":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:15596:9202":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:10738:35784":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:7816:17756":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:45055:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:36582:9642":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4932:10958":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:12150:8529":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:42064:7768":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:1925:11715":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:7931:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:5483:11175":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"4:3234:36199":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:7382:2279":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12572:7516":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:5557:11200":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:7485:11579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3024:2283":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:10689:10154":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:5434:17993":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:1723:10862":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:1804:638":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:14912:9031":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:15197:9081":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:836:7697":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:4781:17909":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:2203:7950":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:21744:17816":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:13221:31114":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:5834:10032":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:6068:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:15400:9133":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:7774:7423":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:4784:17882":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:40925:7746":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:7306:11505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:6874:11472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:4550:17882":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:5568:9451":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:41448:8098":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:7470:2329":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:2447:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"16:4572:9423":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:43943:8116":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:2271:7386":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:44143:6651":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13606:8696":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10439:7514":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:3346:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:21430:31481":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"4:12023:10166":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14038:8776":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:6409:11282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:46115:10433":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:22183:17816":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:5588:11209":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:4355:9416":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6698:11424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:1565:10767":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:8377:8029":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:2369:9893":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:10350:7537":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:40953:7749":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:2730:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"18:521:29227":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10284:7535":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11647:8468":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"7:78:23956":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:1087:38208":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:2299:7706":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:32732:2426":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:1510:10734":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13797:8741":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:3315:10003":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11755:8479":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13146:8602":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:2319:9372":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:10018:25024":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:34533:12269":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:40739:6609":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:3600:8323":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7392:7346":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:4911:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:41047:8081":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:5807:7359":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:1820:2326":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:217:7333":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5423:11138":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"18:689:8295":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:42366:2447":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:41066:8083":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:12044:17757":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6900:11487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5630:11234":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6678:11415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:46970:10460":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10218:7533":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:22851:30748":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:5485:7605":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:32715:6693":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:4137:7698":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:42036:12354":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5794:9465":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:10447:10005":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"16:5616:7606":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"14:31:9867":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:3442:8101":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"5:5200:7368":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13187:8611":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:8253:11665":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5502:11181":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:7914:9772":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13568:8688":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6362:7642":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5407:1109":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6422:7322":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"18:531:8277":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:32701:9679":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"16:6062:9504":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:15778:9252":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:7686:7419":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:8907:7714":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:3472:7359":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:42964:6681":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:5652:17936":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:33991:12263":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12342:8544":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13832:8745":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:7587:9981":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"9:446:23963":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12851:7549":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:15273:9098":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:15760:9246":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:7467:11569":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"14:160:9867":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:2689:9389":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:47892:10471":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:44399:6649":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:7366:11538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:5617:11228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14079:8782":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:564:10708":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:33208:9635":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:5630:7609":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:8304:8029":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"20:0:1832":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"4:12084:803":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"11:430:8004":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:2883:24112":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:9160:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:40934:7748":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:11230:10160":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"6:8197:11663":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:44275:6659":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:1707:10857":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:44101:2376":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10954:25055":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:40876:10370":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:2859:6820":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:12612:6638":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:10958:8109":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:34187:12267":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:40912:7745":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"22:1034:29253":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"4:10729:10008":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"11:2304:9622":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"20:511:2367":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"1:44698:12424":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:15769:9250":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:7822:17787":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:12454:8553":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"20:306:2346":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"9:356:23978":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:1607:8015":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11702:8472":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:7749:10044":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:5580:9399":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:4821:7974":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:8300:11675":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12724:25046":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12695:8568":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"5:7442:7708":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:10290:7756":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:21625:17816":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:9196:10137":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:11069:8111":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:4366:7744":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:8369:10106":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:15521:9189":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12433:7546":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12464:25167":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:1628:10814":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:22831:30777":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:42971:6680":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:14723:8888":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7363:12347":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:6615:8080":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:13363:8640":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:22793:30783":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13046:8588":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11138:8130":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7306:9700":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:7364:12348":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:559:10706":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:3264:7962":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:22462:12232":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:710:7701":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:45145:9895":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:14111:8786":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7706:24984":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"11:811:2326":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:5476:10022":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:42441:2329":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:42552:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:22073:31476":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6849:9609":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:713:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:2187:7352":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:15836:9262":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:301:2414":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"17:14051:8778":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:4203:10302":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12584:7932":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"4:4131:17865":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13211:8625":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:918:7702":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:22728:7760":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:42788:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:6478:11312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"20:642:2363":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"5:3639:7697":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:42325:2443":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:41025:8078":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:4614:6694":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:4123:17863":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12543:8564":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:12371:8579":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:3561:6618":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:48501:10490":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:42708:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:8097:9789":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:44433:6606":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:3406:9407":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:42222:10318":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:40753:6611":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:44891:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:14271:8828":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:7599:9983":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:7926:8027":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:5581:10025":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:13899:8756":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:22900:10350":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:597:8310":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:6768:11444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"20:527:7910":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"1:10033:6680":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"2:0:480":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:8310:8031":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:13470:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:44873:7757":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:8306:11676":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:6562:11362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:9178:10038":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"6:5102:11025":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:545:10698":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:1508:7699":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:48463:10488":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11841:7959":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:13415:7403":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"13:226:7667":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11547:8362":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"20:632:2362":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"16:0:2268":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:9076:7719":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:3863:2326":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:1639:10822":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:2104:9966":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"4:8236:10008":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:13959:8765":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:12039:7735":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"14:165:24049":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:491:10663":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4916:10954":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"9:237:10389":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:1602:8014":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:40903:8060":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:13435:10334":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:30905:2320":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:5462:10018":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"5:4456:7359":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8026:2014":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:30943:6723":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6745:7645":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:608:8287":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:45037:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:11399:10040":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:8564:17931":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"14:214:9872":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:16121:9336":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:10827:7697":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:14529:8870":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14402:8848":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11242:7943":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10137:25021":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6646:9588":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:875:9880":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:12140:6641":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:3056:12277":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:42291:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:5209:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:46836:10457":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:12124:10325":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5225:11055":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:40801:30784":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40727:6608":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:2124:9622":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:700:2329":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:860:7341":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:41441:8097":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:43285:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:2983:2319":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:22406:30685":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"4:11661:10043":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"20:520:7908":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"6:6542:11346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:9069:10134":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:7452:24982":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11152:8131":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4997:421":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:4811:10885":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11042:8427":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:6965:10135":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13509:8665":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:536:7588":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:14752:8908":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:12089:8526":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:3061:12278":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"18:754:8304":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"4:2438:17805":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:2749:9392":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11865:7960":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:16235:9363":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"11:0:2264":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:11567:8458":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:10479:7391":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:10647:10149":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:46045:10430":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:2517:11692":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1692:10850":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:722:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:3190:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15822:9259":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6629:11396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:10719:129":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:13473:8660":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:32789:6515":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:8604:8037":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:42669:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:9858:25039":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:10487:7423":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"4:10090:10140":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:14463:8863":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13785:8739":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:15356:9122":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11124:6655":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:5897:24974":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10170:7513":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:5713:7616":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:5002:10992":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:2688:12028":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12949:8311":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:7944:2425":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:31480:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:4674:9425":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:6626:7446":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:2553:9383":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:14246:8825":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:16079:9325":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"9:423:23965":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:40670:6612":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11764:8480":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:41497:8104":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:46377:10444":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:1590:8012":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:4210:8032":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5581:11207":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14325:8835":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5306:11093":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12107:7516":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:12091:1647":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:3856:9413":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:44555:10405":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:15569:9190":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:7070:12000":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:3113:9637":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:12900:7552":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6759:7646":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13855:8748":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"21:312:2415":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:32788:2427":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:44247:6655":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:7176:38216":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6230:9520":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:1098:7940":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:8271:11668":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2419:9377":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"11:1891:2279":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"0:118:1821":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"17:2175:25100":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:1007:9622":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:5959:24084":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14177:8811":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:41034:8079":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:4787:9429":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:6447:11301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:7684:9731":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:22866:30743":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:39972:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:765:29226":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12671:7977":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:41231:8091":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6546:9562":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13015:7546":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:4650:17900":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:1841:1196":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"5:933:7697":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:8004:10058":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6610:9576":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:12300:25166":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:3399:17843":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:507:8276":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14386:8844":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:3221:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:14091:8783":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"20:542:2048":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"6:4876:10931":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:45034:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"4:7616:8310":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:46239:10438":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:726:7508":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:7528:17767":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"14:187:24056":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:4634:6517":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11670:8127":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:5521:9400":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4688:453":{"crate_id":1,"path":["core","char"],"kind":"module"},"6:5352:11103":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:47360:10467":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:8406:11538":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:8526:10389":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:75:1647":{"crate_id":1,"path":["core","u32"],"kind":"module"},"17:13455:8659":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:9070:2445":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:11051:8428":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:14066:8781":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5236:11059":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:40712:6606":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:7348:11529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6435:11297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:7314:11510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:7223:8045":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:9041:10130":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:9460:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"4:10339:8041":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:7546:11622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:5906:7399":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:3214:2424":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5390:11122":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12264:8537":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:9671:25023":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:4426:7361":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13387:8644":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:40720:6607":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"11:2403:7698":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:9830:6701":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:8285:6647":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:41096:8086":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:34050:12265":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:10045:6685":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:44620:10407":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:40644:6613":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:4718:11551":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:41464:8100":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:42377:10321":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:11647:33127":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:22913:10351":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:44647:10329":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5346:9440":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:1535:10748":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"14:40:8626":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:2789:9394":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:11858:7434":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:46646:10451":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:3993:9414":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:4:1122":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"11:102:10637":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"11:2562:10642":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:43243:9746":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:42300:7697":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"18:515:8273":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:44915:10418":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:12478:8555":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:2978:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:43725:8107":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:10230:115":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:7561:11629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:7802:17755":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:928:17768":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:42433:7698":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:7730:17816":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:6426:8076":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"10:0:2263":{"crate_id":10,"path":["adler"],"kind":"module"},"11:1903:8012":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:15701:9230":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:6624:17949":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:40785:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:491:8275":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:42368:6677":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12621:8566":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:42591:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9690:7753":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:5649:11459":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:41489:8102":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:951:9881":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:3177:9371":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:3203:12275":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6689:11418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:32818:6514":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:6462:24977":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:10946:7426":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:96:7916":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:7837:10053":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10769:38222":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:8259:11666":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:10700:7725":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:39914:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5314:11096":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"11:1676:7329":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:33580:12262":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:6738:11434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:12659:8567":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:12353:8548":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:46500:10447":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:3652:7698":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:15222:9086":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:7389:11556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:7754:10046":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:11579:10011":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:46867:10458":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:15281:9099":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:22408:12232":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"17:15582:9196":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:44045:8124":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:8291:6653":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:43214:6690":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:1809:662":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:7948:10055":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:5278:9439":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15383:9129":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:44865:6629":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:698:7507":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:7089:7382":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"20:424:8253":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"5:7622:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:4257:7359":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12969:8581":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:4733:9427":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5290:11087":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:10382:7422":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:1567:8019":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:8012:9782":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2740:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5122:11027":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:5477:11174":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:8363:17881":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:893:2279":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7491:9717":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:1596:8013":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11341:7945":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:8358:11697":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:5260:11071":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15646:9214":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:5056:10308":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:3039:9636":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7366:9404":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:45109:10426":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:7330:11522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:14341:8837":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:816:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:39992:12279":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"20:620:2361":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"16:7429:38212":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4486:10305":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:635:8292":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:9150:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10851:7698":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13877:8755":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:5645:9452":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:12408:6663":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:396:7327":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:15126:9059":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:2769:9393":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:3020:11689":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6882:9613":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:48080:10473":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6669:9589":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2724:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:5713:7407":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:11518:10009":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6471:11310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:9030:7716":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:43925:8113":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:1486:2329":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:5541:9442":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:15720:9235":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:10720:38221":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6773:7647":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:48353:10480":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:40981:8068":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:44845:6633":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:6763:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"4:9213:10138":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:1559:10765":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10828:38226":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:44541:10402":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:7982:7710":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:661:9962":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:4481:10304":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:33394:9632":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:1054:7335":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:7996:10057":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:41455:8099":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:7482:9716":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5382:11117":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"9:329:10645":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:4902:17870":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:7611:7369":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:15608:9205":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6152:7632":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12043:8522":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6408:9537":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:3741:9410":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"20:482:2365":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"1:12823:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"13:0:2260":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:10444:10003":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:44505:12423":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:12530:7973":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:46692:10453":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:39952:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9664:722":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"4:12085:800":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:7152:9659":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3013:6511":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:5400:11128":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:7584:11641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:12108:12388":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:12096:1255":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"18:735:29225":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5320:11097":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:46322:10441":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:44095:2010":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:15058:7567":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:8224:7728":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:10982:25056":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:849:7698":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:48373:10482":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:10441:10001":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:8981:17954":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:7635:2280":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:38513:12271":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:15734:9237":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6737:7602":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11595:7539":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12388:8550":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7537:7657":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:14503:8868":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4800:10877":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:21362:7766":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:3051:12276":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:5643:11240":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4971:10975":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:1826:8023":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:11430:8048":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:8385:10107":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6579:24978":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:1653:10833":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:2818:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:6532:11339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13774:8736":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:44732:6640":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:10710:140":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:7951:9777":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:504:7352":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"14:202:2278":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:2355:9374":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:4996:17908":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:12617:6637":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12597:8565":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:10317:7536":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:11045:7713":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:5527:115":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:11324:8445":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:6636:11397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:44719:10413":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6811:24979":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:643:8276":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2917:24113":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:3626:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:3273:10001":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:43503:10389":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:16093:9329":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"4:4706:17860":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:5919:24975":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:44347:6658":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:30681:12029":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"23:0:2391":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"5:3262:8014":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13399:8647":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:41479:7447":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:1526:8011":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:2588:9998":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:30937:2321":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:5018:32163":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:1536:7701":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:8012:7726":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:4545:9422":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:7452:11565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:44071:2295":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5677:11253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6788:38213":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11269:25074":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:800:2279":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11557:8457":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:3253:2289":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6714:11430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"5:7402:9977":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:4871:9432":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11214:7942":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:9737:25022":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"4:12075:1159":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:6151:7401":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"4:5163:10017":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:33814:2284":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:5496:10023":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:1581:2279":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:8915:7697":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12647:7976":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:9017:10129":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7359:11534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:4017:17855":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11825:8487":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:7667:7417":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:1621:10810":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"15:306:7991":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13272:8639":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:40683:6614":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:290:38293":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"17:16269:8649":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:0:2269":{"crate_id":17,"path":["object"],"kind":"module"},"6:5336:11101":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:43466:7770":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:11112:11706":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:22379:17816":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:11166:8433":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:16249:9364":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:45134:10427":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"11:1923:8015":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6244:24976":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:15206:9082":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9781:25038":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:42866:7769":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:10399:6647":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"22:948:29252":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"4:10952:7427":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:867:7699":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:6621:11395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:46470:10446":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:651:8276":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:670:7926":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:6929:9621":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:44869:6630":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:3570:36519":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13972:8495":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:42827:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"11:2469:2326":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:41013:8072":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:2693:9999":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:16259:8644":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:4702:9426":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:42182:10012":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:5200:11044":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5046:11012":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:10877:7933":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:10041:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:5344:11102":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"11:2548:7996":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5244:11063":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:45118:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15368:9125":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:10676:10054":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12076:8525":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7335:9403":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5283:11085":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11392:7946":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:6167:7359":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:39202:12274":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:6621:10035":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:21755:7758":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:46300:10440":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:470:2364":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"17:13674:8698":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:538:10695":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:2733:10000":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:659:7921":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4952:10967":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"14:220:9874":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:10996:8110":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:44853:6636":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:15092:9056":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5376:11114":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"11:364:7325":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:11497:7954":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6254:9523":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:4477:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:45047:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:9235:33152":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:2516:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:8438:31496":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:22893:11719":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12328:8540":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:4572:17883":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:43974:8119":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5277:11082":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11467:8452":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:6788:11452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:46091:10432":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:2234:7953":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:149:7320":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"20:201:2047":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"17:13412:8649":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:3811:10009":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:12079:1630":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"5:3798:9965":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"11:1107:9886":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:945:9880":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:2665:9388":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:4283:9415":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:42020:10315":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4965:10972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:2450:17811":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:2035:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:5331:7513":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3501:12287":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:22316:17560":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"4:2268:9997":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"5:1145:8017":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13485:8663":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2807:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:3597:7964":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"10:44:7670":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"11:673:7697":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:14868:9001":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:4232:8033":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11354:8448":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:14131:8787":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5489:11177":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:45096:10423":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:7572:30784":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"22:1122:8245":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"4:4109:17861":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:15138:9062":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:2489:9380":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:43934:8114":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12408:7545":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:8996:17956":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:12370:6668":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:6134:7601":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:6811:11458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:12092:1648":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:8278:8091":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"16:5499:9398":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:8631:10126":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:916:7343":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:4560:6693":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:8247:11664":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:1975:709":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"18:563:7504":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:13235:8626":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:2709:9390":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:2363:12232":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:4433:9418":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:7426:2329":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:11290:9945":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:11443:8451":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:16198:9354":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:1517:7700":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:3356:10006":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7324:9708":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5097:860":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:12606:6639":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:8351:10012":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:9964:10380":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:11313:8443":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:6554:2279":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13344:7566":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:11102:8432":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13292:7553":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:41082:8085":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6599:9575":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"0:24:589":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"1:22:736":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:15418:9137":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:42747:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:48344:10479":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11788:8484":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:4720:11553":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:1671:10840":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:15635:9213":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:11031:6651":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:30969:30745":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:15748:9244":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15456:9145":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:8085:7724":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"5:3732:7335":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:43306:6691":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:42242:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:46359:10443":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6030:9501":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:14235:8823":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2859:9397":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8082:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:22782:10337":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5031:11005":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"9:0:2262":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:7370:8016":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6756:11442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"4:12055:33153":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:15376:9128":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:5038:9437":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:774:7699":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:1578:2329":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7653:9727":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:9145:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11115:7938":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"9:52:7671":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:1939:6815":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:22036:17479":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"4:4069:17859":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:14372:8842":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7414:7652":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:13497:8664":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:0:1537":{"crate_id":4,"path":["std"],"kind":"module"},"16:6292:9527":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:46340:10442":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6775:11445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:7971:9778":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13753:8732":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:12929:8579":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:5546:11194":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:6944:2333":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:557:9987":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10068:25027":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:15116:9058":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:47284:10465":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15814:9256":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:6670:11413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:299:7997":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:363:9985":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:21418:31479":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:3424:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:8931:2329":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:1574:7697":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:2558:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10242:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:6010:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:8294:11674":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:13397:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:4605:7439":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:4126:7359":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"5:40:2325":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:11493:8453":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"0:117:1816":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"4:8428:10016":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:1862:8024":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12030:7961":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:8923:8043":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:10672:17816":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7355:9712":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:12087:802":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:21574:17477":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:12088:798":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:8614:7697":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:15616:9208":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"3:0:2259":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:15931:8611":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:47394:10468":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:2509:9381":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:22185:17475":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:8400:12343":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:44111:6647":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6460:11302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:623:38228":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:48478:10489":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:598:38231":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:586:10720":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:10919:6663":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:2266:139":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:46424:10445":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:7516:11605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:4959:10970":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:42356:2444":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:5861:7715":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5174:11031":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:637:9988":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10710:7931":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:14977:9041":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:46522:10448":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:44175:6654":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13553:8682":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:12552:2297":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12201:8535":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:7935:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:9299:8025":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"4:3916:10011":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"20:8:2370":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"6:5515:11182":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:3409:12280":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:5298:24971":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:8288:11673":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:922:9875":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:1054:9882":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:22622:10335":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:259:38294":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"16:7400:7651":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:6706:11427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:6063:18007":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:5827:10029":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:5050:7359":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:44750:2291":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:2439:9378":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:12331:6669":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:44861:6635":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:1686:10849":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:15151:9068":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:7627:10163":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:34706:9641":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:44000:8059":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:7412:36566":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:40790:10367":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:12238:8536":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:22759:7761":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:47048:10461":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:22394:17562":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:1455:7697":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:15039:9052":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:14847:8991":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:6268:7640":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:3172:12284":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:1716:7335":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:6892:17958":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:40943:8061":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:8328:11681":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:2657:7393":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:11058:10127":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:11495:7430":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:11075:7528":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:517:10683":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:473:10655":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:41255:8093":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:3229:7697":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:7645:2281":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:532:10692":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:13723:8723":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:914:7701":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:742:7702":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:15410:9136":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:12485:25168":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:856:9878":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"14:0:2266":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:8090:17846":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:578:10716":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"0:44:2017":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"16:4399:9417":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"15:288:7986":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:2542:10639":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11293:25075":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:640:9990":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:3449:31430":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:42367:2446":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:44389:6650":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7462:2329":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:44379:6648":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:46137:10434":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:6621:11718":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:10666:11702":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"17:11898:8490":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:7294:9699":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"11:844:17768":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5636:11237":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4985:10982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:3709:9409":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:13248:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"11:1910:8013":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:7434:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:6921:2332":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:880:7700":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:4047:17857":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:11077:7757":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"16:3010:8318":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:44857:6634":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13024:25049":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15214:9084":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:7976:129":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:7704:2326":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:10043:6684":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:1699:10853":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:15655:9216":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:2079:7726":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:6677:17951":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:482:7387":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:44193:6652":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:7103:38215":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:10870:33132":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:5445:11154":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:48250:10476":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:271:7335":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:2231:7669":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:8391:2282":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:10156:11958":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:2736:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:12086:801":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:32708:10359":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:8341:11685":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:5389:130":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"9:391:23964":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:6421:17960":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:8966:17955":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:10855:10025":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:42978:6682":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:15:2237":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:15957:9280":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:7339:11528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6376:9531":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6116:9509":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:6378:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:9472:7421":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"11:2151:9884":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:7650:7727":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:15324:9111":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:11335:7428":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:820:7338":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8394:12342":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:16187:9353":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"18:538:7502":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11799:7956":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14545:8872":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:38568:12272":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:40655:30764":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:1496:10729":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:21384:31469":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"7:0:1694":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7869:9768":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2729:9391":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:38623:12273":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12887:7550":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11688:8471":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:15010:9044":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:43268:6690":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10251:7534":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:1558:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:667:2365":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:48425:10486":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:32820:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"20:655:2364":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"1:31507:7766":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:47544:10469":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:3241:36562":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:44035:8123":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:46616:10450":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:6725:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5181:11032":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:8317:11680":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:48448:10487":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12808:8576":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"18:706:6639":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:14587:8879":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"20:449:138":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"17:16032:8629":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"4:8298:6648":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"16:3260:9406":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:1547:10757":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:3236:8013":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:909:8011":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:15301:9106":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:1887:8026":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:15023:9049":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:4550:7438":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6141:38214":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:12083:698":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:32733:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:8012:11653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:1585:2326":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:40022:10361":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:12089:1649":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"16:5316:7512":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12213:7967":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11661:8469":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"21:198:2416":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"1:5997:7750":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:43231:30772":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:10035:6681":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:1503:10732":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:10622:38224":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6609:11388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:48384:10483":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"15:0:2267":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:41057:7752":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:42004:10313":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:7551:7658":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:5699:2332":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"15:327:7663":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:46714:10454":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5039:11010":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:42204:10316":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:40029:10362":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:10915:38220":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:40963:8063":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5536:11188":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:7931:10054":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:6519:11333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:9938:25042":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:5020:11001":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4909:10950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1580:10779":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:4261:8035":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1547:7702":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:7345:9711":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10524:7927":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"20:611:8266":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:44837:6628":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:2353:639":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11256:8437":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"21:0:1833":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"6:4979:10980":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:32731:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"16:5878:7590":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:40883:8059":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6724:9594":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:3017:7696":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:9089:10135":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7118:2443":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:13424:8650":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:3464:12286":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4838:6600":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11621:7525":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:44709:10409":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:621:6817":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:718:8298":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:5006:9436":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5134:11028":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:1040:9622":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:1593:10786":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:8022:24985":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:16176:9352":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:3317:10004":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"22:0:2390":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"17:14575:7546":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11730:8475":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7523:7655":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11634:8467":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13766:8734":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12863:8578":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:276:2413":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"4:3579:17814":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"11:123:7323":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:21401:31478":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:13273:10331":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:15078:9053":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:42385:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:44572:10406":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"9:481:23962":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:4844:9431":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"20:599:38237":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"5:4489:7361":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:589:8280":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:7258:6542":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:46199:10436":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:5696:7611":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:12071:1041":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:8215:7727":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"22:386:7320":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"4:357:9984":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:44684:10408":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:9081:7729":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"11:1566:24043":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:8478:10118":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"16:2459:9379":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:22815:10339":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:32661:10641":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:15944:8625":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:42316:2329":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:13986:8770":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:7537:11619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:46668:10452":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:5436:11148":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"11:1051:9884":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"11:2326:9882":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:13581:8692":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:22508:17555":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:9982:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:43953:8117":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:12095:1704":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:40772:6604":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:14933:9036":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:8937:10027":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10155:7512":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:6954:2334":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:1663:10839":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:9181:2290":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:4821:17871":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:10250:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:2284:24085":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:2687:17816":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14516:8869":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10419:7538":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"15:394:24076":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:45088:10421":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"4:11358:8044":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7619:24983":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:45157:10428":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:15390:9130":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"18:613:38229":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12494:8557":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14189:8813":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5653:11241":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:39892:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:4864:10928":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10887:38223":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:2979:9405":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3029:12067":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:787:7700":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:8894:10127":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:44424:6607":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:4907:9433":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:8864:8041":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"5:1332:9882":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:7960:140":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:7428:8095":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:415:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:10396:7449":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:7565:9718":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:859:2329":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:0:2270":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:44526:10397":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:46221:10437":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10612:7929":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12318:8311":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:903:2326":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:44229:6656":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:40856:10369":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"16:6331:9530":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:12993:25048":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:1582:9889":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:42630:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"8:0:2261":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:13199:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:113:7919":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:32722:8053":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"4:4825:17874":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:22061:7759":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:2496:2198":{"crate_id":4,"path":["std","io"],"kind":"module"},"16:6803:9598":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:40693:6615":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"11:1025:9882":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:15289:9100":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"22:636:7903":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"17:16165:9347":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"11:2569:2293":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:3436:12283":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:2617:9386":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:48204:10475":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11812:8485":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:573:8276":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:1896:2326":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:4968:9435":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:44329:6657":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"22:752:7314":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:4661:6695":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:11635:7734":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:31131:30727":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"20:705:2368":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"5:1301:9622":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10092:25045":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:513:8309":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13325:7559":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:3296:8015":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:8402:10109":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:42148:30742":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:4392:10014":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10759:7516":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"7:31:23949":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:7543:7363":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:46270:10439":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:9035:117":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10285:12382":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:12093:1645":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:8248:17815":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:15624:9209":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:645:17752":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:44841:6631":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:12090:1646":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"6:6505:11332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:39877:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:14212:8822":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:44125:6653":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:2971:6509":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:4824:10895":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:479:10658":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:39817:12285":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:16138:9338":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:6431:7643":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12399:8551":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:23957:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:15434:9140":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:1811:6721":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:46069:10431":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:437:8308":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:1161:38001":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:44055:8125":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6721:11431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:22271:17559":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"4:3017:138":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:15678:9229":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:2365:12233":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:3830:9412":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14788:8939":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6445:9538":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:48364:10481":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:12094:854":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"11:1160:9888":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"22:669:7498":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"16:4761:9428":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:4240:8034":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:3430:12281":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13308:7557":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:5706:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:22542:17554":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:44293:6660":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6215:7637":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5212:11051":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:3354:10005":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:44408:6662":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:3589:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"11:2352:9884":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:7602:11644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:1207:7941":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:10747:35782":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4924:10956":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13922:8761":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11524:7955":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:6042:7368":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5191:11039":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"4:3522:10007":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:44084:6646":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:48142:10474":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:485:10661":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:12076:332":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"6:6915:11498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12683:7978":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"4:7921:8187":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7973:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6650:11408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:14260:8827":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15190:9079":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10818:7932":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12768:25025":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:22031:17816":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"5:1418:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:33932:12264":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:8870:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"21:228:2051":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"4:2422:11717":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:14560:8876":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:22537:17556":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:5528:11183":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11153:7932":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:40215:30785":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:6764:7335":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:5720:10026":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"4:1885:8025":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:40828:12318":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:4649:9424":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4787:10868":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:5883:8067":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:10026:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:10661:7930":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"21:319:8249":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:3698:2279":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:33873:12266":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:5438:17994":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14298:8831":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:15463:9147":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"0:46:660":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"1:4335:7743":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:4813:9430":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:21627:17473":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:12072:453":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:12422:7971":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:22355:17561":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:2973:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:5014:10998":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:2304:24111":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"4:8620:8040":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:13814:8744":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"9:501:9948":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:7575:11638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:7412:11557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:8315:17853":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:14025:8774":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6895:9616":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:4937:9434":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:0:536":{"crate_id":1,"path":["core"],"kind":"module"},"17:14475:8864":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:2641:9387":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:10462:7451":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"11:2443:2279":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:16105:9331":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:5064:11023":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:21572:17816":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:1517:10737":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:46789:10456":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:9685:31493":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:1824:8022":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:11142:7516":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:14876:9002":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:6507:8099":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:12189:7965":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:41982:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:8029:11662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:1066:24042":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:6657:11409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:883:9881":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:6282:9526":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:6682:2329":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:43721:11794":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:4462:9419":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11773:8481":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:4823:17873":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15342:9115":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:10887:7714":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"4:3504:10102":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:44926:12430":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:12251:7969":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:44442:6605":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:48399:10484":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:21646:7758":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5662:24973":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:14012:8773":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"4:11352:7721":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:16223:9360":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:3783:7726":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:7461:11568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13538:8676":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"11:434:8005":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:286:2292":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:3020:6513":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"5:4411:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:4227:7359":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:43474:7772":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15473:9152":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:12597:2290":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2819:9395":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:7517:2293":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11110:6656":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:10037:6682":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:7114:7385":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:3388:2326":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:15102:9057":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:1485:10724":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:5601:24972":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:7467:35624":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"0:0:1831":{"crate_id":0,"path":["idna"],"kind":"module"},"17:11915:25142":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12056:8524":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:4897:10941":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:4248:17880":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:3275:10002":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:8549:10121":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:4986:7975":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:5555:9446":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:43482:7773":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:465:8009":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11227:8436":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:8268:7745":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"6:1585:10781":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:15176:9076":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:15249:9090":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:40633:10363":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12278:7970":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:6201:7635":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:5457:11163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:41470:8101":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6348:7641":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"20:432:2371":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"1:43521:7775":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:4075:17860":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:5238:9438":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:1934:10171":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:80:7913":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7386:7650":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"22:728:7304":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"6:8282:11672":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:8080:10059":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:2197:9967":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:4215:10303":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11743:8476":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6221:7639":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12127:8528":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4891:10938":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:6547:7411":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:3218:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:533:7388":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:14356:8841":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:6600:7335":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11877:7542":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:4297:7697":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:46738:10455":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:2375:9375":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:1917:8014":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"11:832:8011":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:21372:31469":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"20:496:2366":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"1:42308:7698":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:5466:11169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:22448:17563":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:5759:9462":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:7984:9781":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:9503:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"11:2423:2329":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:26357:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:6438:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"21:145:2050":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"6:5361:11107":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:42450:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:10682:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10573:38225":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"22:470:7308":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"1:42425:7697":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:12073:1665":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:44849:6632":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4227:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:9984:25043":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6908:9619":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:6320:9529":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:39781:12288":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:7710:7400":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12225:7968":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:2450:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:40627:6606":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"9:177:7686":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:13526:8673":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:2835:9396":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5146:11029":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12289:8538":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:22743:7738":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:1887:2329":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:41106:8088":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:7894:12345":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11853:8489":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:11424:8047":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:3773:9411":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:11130:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:726:12068":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"5:2279:38039":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:7898:12344":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14284:8830":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:4065:2279":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:10847:10053":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:523:10686":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:939:9878":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:6330:7407":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"4:10935:7425":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:1603:9890":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5472:11172":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:47206:10464":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:2671:7391":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:3832:2329":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:9755:25020":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:15426:9139":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:43259:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:7998:7661":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"20:197:2375":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"5:1317:9884":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:10997:8426":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"20:681:2366":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"1:47124:10463":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:5926:2279":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:2440:17806":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:13375:8643":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:2536:10638":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4837:10905":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:40816:10368":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5598:11214":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12824:25047":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11583:8463":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:2336:7576":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"11:1142:9887":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:40746:6610":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11016:7935":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:6511:10034":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5624:11231":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:10671:38227":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:8881:7713":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"14:7:9867":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:2383:7697":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:42170:10383":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:7609:9719":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"22:43:29249":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"5:2748:11695":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:7938:7725":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:2424:17801":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:5726:9455":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:11413:10042":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:1968:6816":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:6746:11435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:1526:10742":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:680:8293":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:15333:9114":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:12097:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"16:7444:9715":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:43874:8112":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:4491:9420":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"0:119:1829":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"17:13173:8610":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:2121:10174":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"11:2554:38207":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"20:696:2367":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"4:6979:7414":{"crate_id":4,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:4011:17856":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5846:9471":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:22675:10336":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"11:2140:9882":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:2552:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"4:4879:7397":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:6052:7407":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"11:351:8001":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:39865:8054":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5052:11014":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5296:11090":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:42985:6683":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:44026:8122":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:41004:8071":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5250:11065":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:7045:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:5856:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:1063:9884":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:46890:10459":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:9102:33079":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:5370:11113":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:5865:7980":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4885:10936":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:13525:2323":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10185:7532":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:41241:8092":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:7446:11563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:6275:7720":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:5219:11052":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:3024:38009":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:11558:10010":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:14449:8862":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:10088:8052":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:47094:10462":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11063:8430":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:7113:7415":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:7889:9769":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:2469:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:725:17816":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:9048:33130":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:3028:38008":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:2001:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:14311:8832":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:6555:9563":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10044:25044":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13946:8762":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6188:9519":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:1072:9888":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:4119:17862":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:3749:17854":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:11637:8126":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:7429:11558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13116:8598":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:5671:11250":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:2593:9385":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:31026:30741":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:7932:9774":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:15313:9107":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:39861:2288":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:11089:7937":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:46570:10449":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12443:8552":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:11069:35779":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:7362:2329":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:12663:12417":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:4987:17907":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:497:10666":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7225:24981":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:9886:25040":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10534:38219":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:4269:12302":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:5565:11202":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:5712:7359":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:21416:31484":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:10494:7456":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:11654:10043":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:6402:17959":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6394:7982":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:1717:7359":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:11189:8434":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11574:7669":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:837:9875":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:6691:7412":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:22924:12080":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:4061:17858":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:7731:9986":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:9807:25028":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:3240:35532":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:10001:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:2727:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:43963:8118":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11510:8454":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:21633:17476":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13437:8651":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:5825:7584":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12175:8531":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:16069:9324":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:10031:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:14436:8861":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:9983:6618":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:5132:10017":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:44013:8121":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:1346:9888":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"4:12077:1512":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"5:5390:7335":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:11537:8455":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"10:36:10644":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:12078:1545":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:8055:9679":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"13:109:38209":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:15992:9310":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"0:22:1972":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"5:7720:2327":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:2226:7703":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:6099:9506":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6441:11300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:1446:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"12:0:2265":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:256:8305":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4870:10929":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:723:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:8006:11651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:3018:38048":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:6858:9612":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14855:8994":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:1181:8018":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:1680:10846":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11674:8470":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:3270:8012":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:44417:6661":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:38458:12270":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:48540:10491":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:8954:10128":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:14599:8886":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:15168:9073":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:3589:17835":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:13738:8727":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:2521:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:13089:8592":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:9916:25041":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:3015:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"6:6379:11257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11026:25057":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:2032:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3200:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:6417:11284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:46169:10435":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:8351:11687":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6880:11473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:10069:8024":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:14986:9042":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:40846:7440":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:21753:17474":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:570:10711":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:32697:10358":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:14968:9037":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5665:11248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12508:8560":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:11095:10038":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:40995:7751":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:3224:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6491:11321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:15799:9255":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:10671:11704":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:14147:8792":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4942:10964":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:40704:6605":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}