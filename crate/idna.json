{"root":"0:0:2044","crate_version":"0.5.0","includes_private":false,"index":{"1:13298:37420":{"id":"1:13298:37420","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:12442":{"id":"1:13316:12442","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4945:12442"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44184:6830","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32216:237-0:170:2022":{"id":"a:1:32216:237-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:114-0:161:2021":{"id":"0:114-0:161:2021","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:2021","glob":false}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[704,0],"end":[712,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:831"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13208:35141":{"id":"1:13208:35141","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13209:35142"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13217:37406":{"id":"1:13217:37406","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44140:6879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3137:247-0:155:2023":{"id":"a:1:3137:247-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3137:247-0:161:2021":{"id":"a:1:3137:247-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:109:831":{"id":"0:109:831","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[705,4],"end":[711,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13196:2229":{"id":"1:13196:2229","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2924-0:170:2022":{"id":"b:1:2924-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2927:137","1:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13215:31032":{"id":"1:13215:31032","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13214:31036"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44159:6891","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13304:37422":{"id":"1:13304:37422","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12834:136","`FromStr`":"1:12833:2514"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12833:2514","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12833:2514","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:155:2023":{"id":"b:1:2918-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42078:2665-0:170:2022":{"id":"a:1:42078:2665-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42078:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13228:6792":{"id":"1:13228:6792","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41986:191","prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:37419":{"id":"1:13295:37419","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13212:10454":{"id":"1:13212:10454","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12330:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43852:2595","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2966:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2914-0:161:2021":{"id":"b:1:2914-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2917:2375"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13282:37416":{"id":"1:13282:37416","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2235":{"id":"0:44:2235","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[223,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32275:2646-0:155:2023":{"id":"a:1:32275:2646-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32275:2646","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:7:2019":{"id":"0:7:2019","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[328,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust‚Äôs UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2190","0:24:618","0:44:2235","0:46:693"],"is_stripped":false}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[538,0],"end":[583,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:2035","0:96:2302","0:97:2036","0:98:2337","0:99:2306","0:100:2031","0:102:2043"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5862-0:170:2022":{"id":"b:5:5862-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10309:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5860:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5864:1780"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:2034":{"id":"0:118:2034","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13209:35142":{"id":"1:13209:35142","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13208:35141"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13222:2338":{"id":"1:13222:2338","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13277:37413":{"id":"1:13277:37413","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13281:37415":{"id":"1:13281:37415","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13257:35151":{"id":"1:13257:35151","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:2021":{"id":"0:161:2021","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[513,0],"end":[519,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:42079:2664-0:161:2021","a:1:32275:2646-0:161:2021","a:1:42078:2665-0:161:2021","a:1:3172:6735-0:161:2021","a:1:32216:237-0:161:2021","a:1:3137:247-0:161:2021","b:1:3756-0:161:2021","b:1:2929-0:161:2021","b:1:2924-0:161:2021","b:1:2644-0:161:2021","b:1:2641-0:161:2021","b:1:2918-0:161:2021","b:1:2914-0:161:2021","b:5:736-0:161:2021","0:92","0:167","0:169"]}}},"1:13187:37401":{"id":"1:13187:37401","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2914-0:155:2023":{"id":"b:1:2914-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2917:2375"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2933:1805":{"id":"1:2933:1805","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13286:37418":{"id":"1:13286:37418","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2929-0:170:2022":{"id":"b:1:2929-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2932:137","1:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3756-0:155:2023":{"id":"b:1:3756-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2929-0:155:2023":{"id":"b:1:2929-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2932:137","1:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2641-0:155:2023":{"id":"b:1:2641-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2643:2410"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3758:1820":{"id":"1:3758:1820","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39699:10406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13184:996":{"id":"1:13184:996","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12330:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2641-0:161:2021":{"id":"b:1:2641-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2643:2410"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13192:34012":{"id":"1:13192:34012","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12420:6870"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3172:6735-0:161:2021":{"id":"a:1:3172:6735-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3172:6735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13200:32913":{"id":"1:13200:32913","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[522,0],"end":[536,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2966:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:1177","0:87:2365","0:88:2031","0:91:2043"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13185:2343":{"id":"1:13185:2343","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2644-0:161:2021":{"id":"b:1:2644-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2646:29409"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13306:2207":{"id":"1:13306:2207","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:38121":{"id":"5:5628:38121","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5631:33638":{"id":"5:5631:33638","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13309:33641"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2023":{"id":"0:155:2023","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:42079:2664-0:155:2023","a:1:32275:2646-0:155:2023","a:1:42078:2665-0:155:2023","a:1:3172:6735-0:155:2023","a:1:32216:237-0:155:2023","a:1:3137:247-0:155:2023","b:1:3756-0:155:2023","b:1:2929-0:155:2023","b:1:2924-0:155:2023","b:1:2644-0:155:2023","b:1:2641-0:155:2023","b:1:2918-0:155:2023","b:1:2914-0:155:2023","0:159"]}}},"1:2917:2375":{"id":"1:2917:2375","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2891:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13186:37400":{"id":"1:13186:37400","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:475":{"id":"0:168:475","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3756-0:170:2022":{"id":"b:1:3756-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24:618":{"id":"0:24:618","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:7055:264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2031":{"id":"0:88:2031","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:693":{"id":"0:46:693","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[229,0],"end":[237,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:35153":{"id":"1:13292:35153","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:35147":{"id":"1:13251:35147","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519","str::rsplitn":"1:13254:35149"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43980:6885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2929-0:161:2021":{"id":"b:1:2929-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2932:137","1:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2643:2410":{"id":"1:2643:2410","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32275:2646-0:161:2021":{"id":"a:1:32275:2646-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32275:2646","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:740:29415":{"id":"5:740:29415","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13207:35138":{"id":"1:13207:35138","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13206:35137","str::split_at_mut_checked":"1:13209:35142"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13242:35145":{"id":"1:13242:35145","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12873:2519","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12330:471","str::split":"1:13236:2359"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43894:6880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13189:37402":{"id":"1:13189:37402","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13187:37401"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13219:31659":{"id":"1:13219:31659","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:1177":{"id":"0:86:1177","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2022":{"id":"0:170:2022","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[603,0],"end":[616,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42079:2664-0:170:2022","a:1:32275:2646-0:170:2022","a:1:42078:2665-0:170:2022","a:1:3172:6735-0:170:2022","a:1:32216:237-0:170:2022","a:1:3137:247-0:170:2022","b:1:3756-0:170:2022","b:1:2929-0:170:2022","b:1:2924-0:170:2022","b:1:2644-0:170:2022","b:1:2641-0:170:2022","b:1:2918-0:170:2022","b:1:2914-0:170:2022","b:5:5862-0:170:2022","0:111","0:183","0:106","0:110","0:108"]}}},"1:13289:2361":{"id":"1:13289:2361","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13248:37408":{"id":"1:13248:37408","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12873:2519","str::split":"1:13236:2359","prim@char":"4:12330:471","str::split_terminator":"1:13245:37407"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43944:6881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42078:2665-0:155:2023":{"id":"a:1:42078:2665-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42078:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5630:2259":{"id":"5:5630:2259","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13204:37404":{"id":"1:13204:37404","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12336:1720","str::slice_mut_unchecked":"1:13205:37405","crate::ops::Index":"1:39530:2540"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13275:37412":{"id":"1:13275:37412","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2029":{"id":"0:117:2029","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13193:37403":{"id":"1:13193:37403","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13202:32914":{"id":"1:13202:32914","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42079:2664-0:155:2023":{"id":"a:1:42079:2664-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42079:2664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13307:36282":{"id":"1:13307:36282","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39885:6729","Self::is_ascii":"1:13306:2207"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39885:6729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:33641":{"id":"1:13309:33641","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2641-0:170:2022":{"id":"b:1:2641-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2643:2410"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13216:8091":{"id":"1:13216:8091","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44130:6877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42079:2664-0:161:2021":{"id":"a:1:42079:2664-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42079:2664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:739:29414":{"id":"5:739:29414","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32216:237-0:161:2021":{"id":"a:1:32216:237-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13183":{"id":"1:13183","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13184:996","1:13185:2343","1:13186:37400","1:13187:37401","1:13189:37402","1:13192:34012","1:13193:37403","1:13194:336","1:13195:35118","1:13196:2229","1:13198:32912","1:13200:32913","1:13202:32914","1:13204:37404","1:13205:37405","1:13206:35137","1:13207:35138","1:13208:35141","1:13209:35142","1:13211:2192","1:13212:10454","1:13213:2212","1:13214:31036","1:13215:31032","1:13216:8091","1:13217:37406","1:13218:31045","1:13219:31659","1:13222:2338","1:13225:2339","1:13228:6792","1:13232:2205","1:13236:2359","1:13239:31031","1:13242:35145","1:13245:37407","1:13248:37408","1:13251:35147","1:13254:35149","1:13257:35151","1:13260:35152","1:13263:2313","1:13266:37409","1:13269:37410","1:13272:37411","1:13275:37412","1:13277:37413","1:13279:37414","1:13281:37415","1:13282:37416","1:13283:37417","1:13286:37418","1:13289:2361","1:13292:35153","1:13295:37419","1:13298:37420","1:13301:37421","1:13304:37422","1:13306:2207","1:13307:36282","1:13308:33640","1:13309:33641","1:13310:33642","1:13311:36285","1:13312:36286","1:13313:36287","1:13314:37423","1:13316:12442","1:13317:37424"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[602,9],"end":[602,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2966:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13269:37410":{"id":"1:13269:37410","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12873:2519","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12330:471","str::rmatch_indices":"1:13272:37411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44026:6888","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:38120":{"id":"5:5620:38120","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13218:31045":{"id":"1:13218:31045","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44168:6890","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:801":{"id":"0:107:801","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[650,4],"end":[701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42079:2664-0:170:2022":{"id":"a:1:42079:2664-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42079:2664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3172:6735-0:170:2022":{"id":"a:1:3172:6735-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3172:6735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:96:2302":{"id":"0:96:2302","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[546,4],"end":[549,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:2339":{"id":"1:13225:2339","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3756-0:161:2021":{"id":"b:1:3756-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13213:2212":{"id":"1:13213:2212","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43862:6876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13314:37423":{"id":"1:13314:37423","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4944:37423"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44175:6831","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:38119":{"id":"5:5617:38119","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2924-0:155:2023":{"id":"b:1:2924-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2927:137","1:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:91:2043":{"id":"0:91:2043","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2927:137":{"id":"1:2927:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:116-0:155:2023":{"id":"0:116-0:155:2023","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:2023","glob":false}}},"1:13312:36286":{"id":"1:13312:36286","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:41599"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[715,0],"end":[715,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["source","cause","provide","type_id","description"],"trait":{"name":"Error","id":"1:2977:137","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:119:2042":{"id":"0:119:2042","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2914-0:170:2022":{"id":"b:1:2914-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2917:2375"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13254:35149":{"id":"1:13254:35149","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12330:471","str::splitn":"1:13251:35147","self::pattern":"1:12873:2519"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43998:6884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13272:37411":{"id":"1:13272:37411","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12873:2519","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12330:471","str::match_indices":"1:13269:37410"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44044:6889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2365":{"id":"0:87:2365","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13310:33642":{"id":"1:13310:33642","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[523,4],"end":[535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:33639":{"id":"5:5632:33639","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13310:33642"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13239:31031":{"id":"1:13239:31031","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12688:6892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13317:37424":{"id":"1:13317:37424","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4942:37424"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44193:6829","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:38118":{"id":"5:5613:38118","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2509","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2509","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13308:33640":{"id":"1:13308:33640","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2924-0:161:2021":{"id":"b:1:2924-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2927:137","1:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2918-0:161:2021":{"id":"b:1:2918-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13245:37407":{"id":"1:13245:37407","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12873:2519","str::split":"1:13236:2359","prim@char":"4:12330:471","`DoubleEndedIterator`":"1:8256:129","str::rsplit_terminator":"1:13248:37408"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43926:6883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2646:29409":{"id":"1:2646:29409","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3132:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22:2190":{"id":"0:22:2190","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3137:247-0:170:2022":{"id":"a:1:3137:247-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13260:35152":{"id":"1:13260:35152","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:36287":{"id":"1:13313:36287","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:41599"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[649,0],"end":[702,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10304:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2920:831":{"id":"1:2920:831","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:801":{"id":"0:112:801","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[718,4],"end":[720,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:170:2022":{"id":"b:1:2918-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5612":{"id":"5:5612","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5613:38118","5:5614:2367","5:5617:38119","5:5620:38120","5:5628:38121","5:5629:38122","5:5630:2259","5:5631:33638","5:5632:33639"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:2337":{"id":"0:98:2337","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[558,4],"end":[561,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13214:31036":{"id":"1:13214:31036","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13215:31032"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44150:6878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2932:137":{"id":"1:2932:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32140:10762","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13279:37414":{"id":"1:13279:37414","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32275:2646-0:170:2022":{"id":"a:1:32275:2646-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32275:2646","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5614:2367":{"id":"5:5614:2367","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2644-0:170:2022":{"id":"b:1:2644-0:170:2022","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2646:29409"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13211:2192":{"id":"1:13211:2192","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12330:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43846:2228","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13232:2205":{"id":"1:13232:2205","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41986:191","prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:738:7648":{"id":"5:738:7648","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13311:36285":{"id":"1:13311:36285","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:41599"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:2306":{"id":"0:99:2306","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[564,4],"end":[567,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13236:2359":{"id":"1:13236:2359","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12873:2519","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12330:471","str::split_whitespace":"1:13214:31036","str::rsplit":"1:13242:35145"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43876:6882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13198:32912":{"id":"1:13198:32912","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2044":{"id":"0:0:2044","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46‚Äôs introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:2019","0:114-0:161:2021","0:115-0:170:2022","0:116-0:155:2023","0:117:2029","0:118:2034","0:119:2042"],"is_stripped":false}}},"1:13206:35137":{"id":"1:13206:35137","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13208:35141","str::split_at_mut":"1:13207:35138"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13194:336":{"id":"1:13194:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13195:35118","`u8`":"4:12349:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5864:1780":{"id":"5:5864:1780","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:170:2022":{"id":"0:115-0:170:2022","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:2022","glob":false}}},"a:1:3172:6735-0:155:2023":{"id":"a:1:3172:6735-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3172:6735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2644-0:155:2023":{"id":"b:1:2644-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2646:29409"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13195:35118":{"id":"1:13195:35118","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12349:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2031":{"id":"0:100:2031","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[570,4],"end":[574,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13266:37409":{"id":"1:13266:37409","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12873:2519","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12330:471","str::matches":"1:13263:2313"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44098:6887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13283:37417":{"id":"1:13283:37417","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12899:6865","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5629:38122":{"id":"5:5629:38122","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2509","`String`":"5:7641:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2509","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:2036":{"id":"0:97:2036","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[552,4],"end":[555,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32216:237-0:155:2023":{"id":"a:1:32216:237-0:155:2023","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:2023","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2928:1807":{"id":"1:2928:1807","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:161:2021":{"id":"b:5:736-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:7648","5:739:29414","5:740:29415"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[717,0],"end":[721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10309:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:2043":{"id":"0:102:2043","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[577,4],"end":[582,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42078:2665-0:161:2021":{"id":"a:1:42078:2665-0:161:2021","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42078:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:2021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13205:37405":{"id":"1:13205:37405","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12336:1720","crate::ops::IndexMut":"1:3415:2541","str::slice_unchecked":"1:13204:37404"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2035":{"id":"0:95:2035","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[540,4],"end":[543,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:37421":{"id":"1:13301:37421","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12330:471","self::pattern":"1:12873:2519"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:6866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13263:2313":{"id":"1:13263:2313","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12873:2519","`DoubleEndedIterator`":"1:8256:129","prim@char":"4:12330:471","str::rmatches":"1:13266:37409"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44080:6886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:2508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"18:563:7451":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:9282:10279":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:40625:8176":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:710:7655":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:7580:9837":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:40723:8185":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:12420:6870":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4837:11026":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15383:9249":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:22136:7728":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12225:8067":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:6077:8184":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:6698:11546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:11026:25210":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11898:8609":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:2374:9495":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:2303:24237":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"20:696:2586":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"1:22811:7729":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:11312:6880":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:373:10116":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:14025:8894":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4811:11006":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:46667:10553":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:43783:8242":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"14:7:9991":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:10715:10141":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"11:1566:24195":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"15:327:7611":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11214:8041":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:30620:6920":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:42991:31936":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:3612:31420":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:8342:18000":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:4762:18055":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:1207:8040":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:872:8425":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:40409:6831":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:43793:8243":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:44606:6864":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:5347:9560":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:113:8018":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"20:632:2581":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"17:13509:8785":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"18:613:38608":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:30599:2538":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:6788:18097":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:3332:10138":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:7429:11680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:1680:10967":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:40393:6829":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:39562:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:11893:7703":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:44800:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:8271:11790":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:1496:10850":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:10953:17969":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:21838:7727":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:7359:11656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:8288:11795":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"20:8:2589":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"4:12342:753":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"5:2112:10094":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:47019:10593":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:938:8116":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:2206:17886":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:8259:11788":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:12352:1844":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"11:687:7650":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:10985:33850":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:11643:10188":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:40359:6836":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:4511:37109":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:8618:8145":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:44294:10452":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:22269:17623":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:1535:10869":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:40504:6828":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:43711:8237":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:4873:18059":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"9:357:24130":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:8253:11787":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11799:8055":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:6498:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:4811:11675":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:15456:9265":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:15646:9334":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:4529:7713":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:4986:8074":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:13859:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"9:238:10439":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:1619:8117":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11063:8549":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:3998:10147":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6442:9643":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13089:8712":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:4377:10327":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:16198:9474":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:34375:9764":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:542:7536":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:23164:10396":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"16:6872:9712":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6300:9627":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:13766:8854":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:12356:1418":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:8599:11819":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:9386:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:2070:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12353:8668":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:42946:6920":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:9111:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:42157:7649":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:4876:11052":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:1891:8140":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:8256:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:7716:36445":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:835:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:15720:9355":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:13802:10364":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:8209:139":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"18:689:8414":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:3627:12429":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13674:8818":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:1923:8120":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9737:25175":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:3861:2500":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:32218:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:7389:11678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11537:8574":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14298:8951":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6412:25128":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:14968:9157":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:46961:10591":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:3287:34497":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6665:25130":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10155:7459":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:2004:784":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"18:515:8392":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11524:8054":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:41746:10337":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:3426:10141":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12433:7493":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:10313:6911":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:12349:1850":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:11503:34294":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"14:202:2499":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:41912:10433":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:5279:10156":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:46217:10519":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:15039:9172":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:947:7656":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:2308:10130":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:951:9999":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:11307:11827":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"20:642:2582":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"0:118:2034":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"4:617:17901":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:47235:10607":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:2728:9511":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12724:25199":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:14147:8912":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:12888:6867":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:7330:11644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:11753:8169":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10185:7479":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:42479:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:12650:6897":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:46422:10544":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:8364:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:44893:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2888:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:3172:6735":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:5039:11132":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:46266:10522":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"22:636:7996":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"11:1582:10013":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:6172:11821":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13844:8867":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:12347:902":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:2537:12374":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"4:1101:10012":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:39530:2540":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:21571:7735":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:21718:17624":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12043:8642":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:22267:17969":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:4344:8151":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:12345:890":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:7857:9851":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:10955:10293":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"11:811:2545":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"21:312:2634":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"17:13538:8796":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:521:29380":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5329:11222":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:44679:12577":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"20:449:137":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"1:6889:8197":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"9:53:7623":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:47087:10597":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12189:8064":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:150:7442":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:15333:9234":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13986:8890":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:8541:6877":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"5:2298:36989":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:2478:17959":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:13252:8749":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:11036:7675":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13959:8885":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:5181:11154":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5031:11127":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:41964:10342":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:2854:9517":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:30631:31133":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"11:1142:10011":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:1559:10886":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:12334:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"6:6768:11566":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:2066:12387":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"11:2304:9745":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:14260:8947":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7397:38592":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:12355:1911":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:10568:7724":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:8223:127":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:46932:10590":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:8175:8143":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:5102:18058":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:12422:8070":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:22467:17969":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:10743:32813":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:3380:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"5:1073:37093":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:1164:8123":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:16032:8749":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:2788:9514":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12318:8430":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:6763:11565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:2542:10760":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:23028:17969":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:12707:8078":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:11102:8550":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:2882:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"9:424:24117":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:856:10002":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:12116:34303":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"9:447:24115":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11467:8571":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:22361:17707":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:32140:10762":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:11661:8588":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15249:9210":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12863:8698":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14111:8906":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1723:10983":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:457:2582":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfo"],"kind":"struct"},"18:80:8012":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:10346:10294":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"4:10908:11822":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:3254:8118":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:46053:10503":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"22:1034:29406":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"16:6231:9622":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:4862:471":{"crate_id":1,"path":["core","char"],"kind":"module"},"6:5225:11177":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:2773:10135":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:43029:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:12348:883":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:15748:9364":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:46688:10554":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5457:11285":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:12030:8060":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:9276:115":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"22:879:29404":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"1:44150:6878":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:666:10120":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:46185:10517":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4720:11841":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7910:25137":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:46593:10551":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"17:11743:8595":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:9391:10176":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:5209:33079":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11256:8556":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:12879:2508":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6597:11505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:9222:18101":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:1489:7650":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:860:9489":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:39547:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:3132:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"16:5367:25123":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:2898:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:10486:113":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:5290:11209":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12107:7463":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11788:8603":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:4864:11049":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:5981:7676":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:46990:10592":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13814:8864":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2612:9506":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:1707:10978":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4979:11101":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:5863:25125":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:42936:11911":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:14463:8983":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:16069:9444":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:11610:7690":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:8624:10256":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12300:25319":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:22842:7730":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7497:9822":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12464:25320":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:8669:10152":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:750:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:5361:11229":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:3406:2545":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"14:160:9991":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:7578:10107":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:5073:11821":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:3614:9529":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:4205:18017":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:8790:10270":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:40799:7720":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:673:7649":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8309:2232":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:4248:11821":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:11557:8576":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:896:7652":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:10963:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"14:31:9991":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:9310:10283":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"14:40:8746":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:15931:8731":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:43835:6875":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:11108:7649":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:2355:7523":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13497:8784":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:8197:10204":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"5:7547:17918":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:7630:10113":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:7516:11727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:14847:9111":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5296:11212":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"22:470:7989":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"5:4477:11821":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:40297:6830":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5472:11294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:14372:8962":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:10996:10202":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"4:3600:10143":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:39712:8364":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11764:8599":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:9886:25193":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2572:9504":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:2438:9498":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:8227:2644":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10137:25174":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:4293:8148":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1336:10008":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9755:25173":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:40755:8189":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:15434:9260":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:481:8393":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:40:2544":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:8553:8147":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:1914:8141":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"11:2443:2500":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:3801:7695":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"11:2124:9745":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:497:10787":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:3218:12421":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:12873:2519":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:8005:10195":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"11:430:8108":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10997:8545":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:40560:6876":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:6721:11553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:22534:17711":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:10877:8032":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:8592:10148":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:40685:8178":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:1536:7654":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:2469:2545":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"4:9207:18102":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5075:9557":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11042:8546":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7888:9855":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:4477:10150":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:44932:10478":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:865:7649":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:8174:12487":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"22:752:7997":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"5:3038:11811":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:3925:9534":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6505:11454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:11671:10191":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:14599:9006":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14246:8945":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:33711:12407":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"21:0:2046":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"6:7452:11687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:12346:896":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:7982:10118":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:2684:9509":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:39885:6729":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"18:754:8423":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:13649:10359":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:9454:2508":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"4:3293:33520":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:47274:10608":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"20:667:2584":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"1:4647:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:14271:8948":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13024:25202":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:11657:10189":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13146:8722":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:8351:11809":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13877:8875":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:1886:11821":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:11567:8577":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:6900:11609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:11004:10164":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:22:816":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"16:2748:9512":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:5370:11235":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13473:8780":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:16121:9456":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"4:2306:138":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:42003:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"1:22934:31128":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"11:832:8116":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:532:10813":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:40645:8177":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5200:11166":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"4:8547:8145":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:4129:18011":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:15206:9202":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:13109:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:5756:9567":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5306:11215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:4797:18014":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:10218:7480":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:7473:7546":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5283:11207":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:1628:10935":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:2628:10131":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12289:8658":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:2462:17954":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:42165:7650":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"11:1603:10014":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:41724:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:7314:11632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6441:11422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6543:9653":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:4641:9544":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:7467:11691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:1083:10006":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:573:8395":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11392:8045":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:32193:10403":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:7366:11660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:14066:8901":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:44472:10463":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:46024:10501":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:15426:9259":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13568:8808":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:2225:128":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:14051:8898":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:47061:10595":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:16235:9483":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"11:1007:9745":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:21608:29464":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:10317:6913":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:7590:7598":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:9403:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:9164:8159":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3188:12404":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6788:11574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:867:8424":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:14855:9114":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:46202:10518":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:304:2509":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:3473:8062":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:2151:10008":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:39486:12428":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"4:8463:7696":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:33443:2504":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:43876:6882":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:1603:7649":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"9:330:10766":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:14449:8982":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:42440:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:2098:7695":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:6385:9640":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:16151:9464":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:44373:10457":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:42710:6912":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:9271:7679":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:7561:11751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:3329:9527":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:3644:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:6771:37093":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:2231:7621":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:4942:11085":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:40570:12461":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6491:11443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:974:10004":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13999:8891":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6417:11406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:3899:9533":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13272:8759":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"4:6856:10183":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"4:4201:18016":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:22405:17708":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"5:3288:8117":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:15092:9176":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:15655:9336":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6948:7593":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:44437:10458":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:42117:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:8247:11786":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:2216:10096":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"20:511:2586":{"crate_id":20,"path":["unicode_bidi","utf16","Paragraph"],"kind":"struct"},"1:32275:2646":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:12887:7497":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6456:25129":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13363:8760":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4718:9545":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:10412:12088":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:5046:11134":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:42703:6910":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1639:10943":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:43980:6885":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:45911:10494":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"10:36:10765":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:42100:6907":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:3259:37082":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:3046:37052":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6802:9698":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:2311:10288":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:40496:6835":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"11:1903:8117":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:44614:6863":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:2175:25253":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10018:25177":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:15624:9329":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11510:8573":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:7461:7669":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:3022:10136":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:12574:6896":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5260:11193":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:44140:6879":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:3290:33530":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:16050:8759":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:3519:8218":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:5927:9576":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:9736:127":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:6433:7587":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:3549:11821":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:32747:9758":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:8136:9898":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6976:7595":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:219:10087":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13723:8843":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:1092:10008":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:41762:10339":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:45858:10487":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:47107:10599":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:888:2548":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7549:9835":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:844:17919":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12993:25201":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:8188:9905":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:6079:7538":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13455:8779":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7428:25134":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:46164:10516":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:8534:6882":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"16:2323:24263":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:43803:8244":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:40789:8198":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11341:8044":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:932:2545":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:10419:7485":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:43846:2228":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:22983:10382":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:8332:10208":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11865:8059":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"4:11599:33786":{"crate_id":4,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"4:6667:8216":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:41190:8215":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:494:34301":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:22949:31135":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6562:11484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:1505:2548":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:46333:10525":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12264:8657":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:14475:8984":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:1891:2500":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11595:7486":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:10325:8140":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:5742:9563":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:8528:6876":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:1692:10971":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:3587:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:14341:8957":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:10304:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:13344:7513":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:5802:25124":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:32217:2645":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:2638:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:22548:12373":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"11:1910:8118":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:21639:29468":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:14560:8996":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:1686:10970":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12454:8673":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:16138:9458":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:3247:7649":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:44883:10476":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"18:726:7455":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:4143:18012":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:6188:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:1625:8118":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:5325:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:46460:10546":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:13797:8861":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6342:38596":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:14868:9121":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:22114:17627":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"20:482:2584":{"crate_id":20,"path":["unicode_bidi","utf16","BidiInfo"],"kind":"struct"},"17:11016:8034":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:1577:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:8805:18080":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:6398:7583":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:15342:9235":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:47212:10606":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:6278:7565":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:30978:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7656:25135":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11730:8594":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:16223:9480":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13211:8745":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12597:8685":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:46082:10512":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:3670:7650":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:943:7655":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:669:10122":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:22865:10368":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:5765:11581":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:15126:9179":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:7618:7600":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"20:534:8010":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIter"],"kind":"struct"},"16:6466:9646":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5174:11153":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13594:8813":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:46135:10515":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:3428:10142":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:11354:8567":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"4:6561:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:4:1255":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:10284:7482":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:9964:7721":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:3810:9531":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:15445:9264":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:15814:9376":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14189:8933":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"21:67:2267":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"4:11216:33845":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:10710:8030":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:21627:29470":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:43004:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:437:8427":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:7868:8429":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:4730:6923":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"5:1566:7656":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:9122:7674":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7769:9842":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:7379:38593":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:2488:17964":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:41806:7865":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:608:8406":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:1069:9745":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7559:9836":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11132:7650":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:36251:9765":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13832:8865":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:11616:8160":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12485:25321":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:44872:31569":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:44462:10459":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:40522:10411":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:13914:2542":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:43761:8240":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:14311:8952":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12621:8686":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"17:14235:8943":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:11413:10070":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:2508:9501":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:7485:11701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1547:10878":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5415:11255":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:7986:7678":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2064:12386":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6629:11518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:12251:8068":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:9772:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12929:8699":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:4498:7712":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5769:9572":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:4784:6924":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:7591:12475":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"20:620:2580":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"17:13015:7493":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4885:11057":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:3648:33607":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:7103:37126":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:44818:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6714:11552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:5320:11219":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:11099:34291":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:1437:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"14:214:9996":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"21:301:2633":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"6:5671:11372":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:40533:12475":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:3842:9532":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10612:8028":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:367:10114":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:32305:6738":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:1098:8039":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:4940:9553":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5781:9520":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4959:11091":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:44622:6858":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13325:7506":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:14489:8985":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:5037:9556":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:45875:10488":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6813:9699":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13399:8767":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:11493:8572":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:46638:10552":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"11:2536:10759":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:2691:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:2936:24265":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:7445:2548":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:6562:2500":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:6409:11404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:9408:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:9916:25194":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:14212:8942":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14575:7493":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14912:9151":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5134:11150":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:11951:8246":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"11:875:10004":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:8170:8306":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:9258:10278":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:76:1838":{"crate_id":1,"path":["core","u32"],"kind":"module"},"5:1351:10006":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:4531:9540":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:4323:8150":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10251:7481":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:30605:6952":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:43465:11920":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:14933:9156":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:42717:6913":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10399:6876":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10769:38600":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:8155:9901":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"13:0:2480":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5400:7460":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"11:2569:2510":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:40401:6830":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:6927:9717":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:424:8372":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:39534:8174":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:23076:10388":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:40714:8183":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5014:11119":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:7128:37112":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:2234:8052":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11605:7487":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:5020:11122":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5400:11250":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"9:482:24114":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5502:11303":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"4:4551:10151":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:15569:9310":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"18:735:29378":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:14079:8902":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:43050:6921":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:4971:11096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:3778:9530":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:7823:25136":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:553:10824":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:5415:9561":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:8226:25138":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:11192:7674":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:0:2490":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11877:7489":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:3363:12418":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"4:8719:10267":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:9959:32190":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:6900:11842":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"4:11277:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:11918:8245":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:22593:17703":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:11367:7475":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:2274:10325":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10818:8031":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:14284:8950":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:42182:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:5677:11375":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:8051:17906":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"19:0:1290":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:10104:6931":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:6435:11419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:42109:10345":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:7638:6844":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:23131:10393":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:7602:11766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:7878:10314":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14325:8955":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:38182:12413":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:40344:31129":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:43862:6876":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"0:24:618":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"4:8472:7697":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:31005:7735":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12150:8649":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:12894:6866":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12695:8688":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:44788:11921":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"20:496:2585":{"crate_id":20,"path":["unicode_bidi","utf16","ParagraphBidiInfo"],"kind":"struct"},"22:386:7442":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"1:10321:6914":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:6015:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:9322:7698":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15799:9375":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:4431:12444":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:23153:10395":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:3754:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:8086:10202":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:586:10119":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:12297:7704":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13308:7504":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:752:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11419:7463":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:4830:9549":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:9444:10187":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:42696:6911":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:4113:37093":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11405:6884":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:8521:8208":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:11837:10147":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:23120:10392":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"4:6707:7685":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:8643:10258":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:45957:10497":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11647:8587":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:8676:6843":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6066:8079":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:14587:8999":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:12333:1313":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:44451:12567":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9984:25196":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:5477:11296":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5588:11331":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:10319:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:2712:32808":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:15023:9169":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:5158:18063":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:12336:1720":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:42598:7866":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:10520:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"9:0:2482":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6620:9660":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13046:8708":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:7937:34297":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9938:25195":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:44909:10477":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6811:11580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15102:9177":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"7:32:24101":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11227:8554":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12399:8671":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:11115:8037":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8170:12488":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10524:8026":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:43622:8231":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"11:2562:10763":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:15400:9253":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:38127:12412":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13606:8816":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:5088:18057":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"4:11019:33781":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:38292:12415":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1593:10907":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:32182:10402":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:46120:10514":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5423:11260":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:12329:1173":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:5505:128":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:10218:10430":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:1565:10888":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11166:8551":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:8845:8153":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:4913:18025":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:3383:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:659:8020":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4897:11062":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:44851:10471":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:40746:8188":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6504:9650":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:2087:10322":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:43218:7869":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:40808:8200":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:15190:9199":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5107:9558":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:33644:12405":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:13922:8881":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:3055:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:40824:8202":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"3:0:2479":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:4771:9547":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:44796:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"14:220:9998":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:2067:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:13597:33160":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:8558:18007":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:47118:10600":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:15778:9372":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"20:611:8385":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"17:12201:8655":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"22:728:38686":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"6:8294:11796":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:7453:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:538:10816":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:3994:2548":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:42078:2665":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:12330:471":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:44184:6830":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"0:46:693":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"16:2338:9493":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:680:10088":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15010:9164":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:9544:8141":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:3386:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5191:11161":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15608:9325":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:2528:9502":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5617:11350":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:6930:2551":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:6068:18155":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5314:11218":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:7446:11685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2458:9499":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:8180:10203":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"11:1107:10010":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:5592:10161":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:22621:17704":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:11239:8228":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:32200:6923":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"16:2878:9518":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:586:10841":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7727:7603":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:7918:34309":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:22976:11844":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:5653:11363":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"18:581:7735":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:44810:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:4917:18028":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:5483:11297":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:7537:11741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:15313:9227":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10528:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:6542:11468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7321:2661":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:8767:10439":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:43774:8241":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2635:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:5015:6824":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:9418:10186":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:23065:10387":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13424:8770":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12572:7463":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:7686:9840":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6427:7585":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:10317:7483":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:44594:6859":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"11:1896:2545":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"15:0:2487":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:44920:10019":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:44400:10353":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:8216:9906":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12851:7496":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4932:11079":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:46103:10513":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:3035:7648":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:7664:2502":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"10:44:7622":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:40776:8196":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:6706:11549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:11075:7475":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:5079:18056":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:7641:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:42020:7650":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:4743:9546":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12175:8651":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:12350:1832":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"5:5860:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:21581:29474":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:11825:8606":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4891:11059":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:43210:7867":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5250:11187":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:40997:8210":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:9343:2663":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"0:0:2044":{"crate_id":0,"path":["idna"],"kind":"module"},"1:43691:8235":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13581:8812":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:5382:11239":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:9195:10277":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:491:10784":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:41984:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:8242:10206":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10350:7484":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:40973:8208":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:10503:34094":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"9:178:7638":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:8175:9902":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:10967:10144":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"4:4331:18035":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:8872:10275":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"22:966:8001":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"1:47197:10605":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:46765:10587":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:11577:10310":{"crate_id":4,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"4:9719:34093":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:3816:10094":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:0:1001":{"crate_id":6,"path":["libc"],"kind":"module"},"11:2140:10006":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:14516:8989":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:5904:11821":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11443:8570":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:42362:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:1517:10858":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6991:38586":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5307:9559":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:4213:18019":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11324:8564":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"0:7:2019":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"16:6782:25131":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:39699:10406":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:44175:6831":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:33171:12403":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:10948:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:3036:37172":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11313:8562":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:3750:37093":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:23175:10397":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:15151:9188":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:7139:18105":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12127:8648":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:2636:9507":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:9330:10284":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:40838:8203":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7755:7606":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11812:8604":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"21:228:2269":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"4:8604:18036":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:2891:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:3475:9528":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6335:7549":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2153:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:3881:2545":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:11912:10192":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:44644:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:1200:8124":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:47133:10601":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"22:43:29402":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"1:3198:9759":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:10760:32808":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:4802:9548":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4870:11050":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:12683:8077":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"4:3896:10146":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:40848:8205":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:559:10827":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11674:8589":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:1180:37088":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:16187:9473":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"4:3057:137":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"16:8118:9896":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14529:8990":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:42037:2661":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:9178:10167":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:578:10837":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5515:11304":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:403:8426":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10915:38604":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:11682:8163":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6560:7589":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:7412:11679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:12354:965":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:10709:10137":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"4:8187:7694":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:14977:9161":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:23638:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:485:10782":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:46842:10588":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"9:502:10073":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:5462:18140":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:9858:25192":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:4985:11103":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:21657:17969":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:14131:8907":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13187:8731":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:15376:9248":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12647:8075":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:11905:33873":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:7348:11651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:698:7454":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7633:38587":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:8258:7695":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:980:10005":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"4:2460:11840":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:22495:12373":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:42975:9870":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:837:9999":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5722:9521":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:5376:11236":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:5840:10166":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:15473:9272":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:1962:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:5247:10332":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:5146:11151":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:643:8395":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12824:25200":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:40517:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:11081:34292":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:21836:17622":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15214:9204":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:9148:7675":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:3385:10140":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:6700:8193":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:3509:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:10938:7694":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:680:8412":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:10323:6915":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:2478:9500":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:12331:1872":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:12508:8680":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:39584:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:11277:8229":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:11350:8230":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:1610:2500":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:6915:11620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:1503:10853":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:15734:9357":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:10828:38597":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3572:12423":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:8300:11797":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:44325:10456":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:4809:11673":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"5:289:37093":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7703:8212":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:4191:18015":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"18:531:8396":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12278:8069":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:6842:7686":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"18:623:38610":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5636:11359":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:45890:10489":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5352:11225":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:2660:9508":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:43894:6880":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:45943:10496":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:23186:10398":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:3327:12427":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:3264:8061":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:4389:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:4099:18009":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11189:8552":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:44044:6889":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:765:29379":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:12341:737":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"6:1485:10845":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:15266:9217":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:22890:10369":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:41197:8216":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"13:110:38581":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:43012:6920":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:32959:9755":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:10311:6910":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:1671:10961":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:538:7449":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5390:11244":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14723:9008":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13899:8876":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:32186:9802":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"17:13785:8859":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6532:9652":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:1916:8142":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"4:4994:18024":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:15222:9206":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"11:351:8101":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"4:6271:34287":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:16212:9478":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"21:259:38673":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"20:527:8009":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16CharIndexIter"],"kind":"struct"},"1:41212:8218":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:32207:8173":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:1490:10847":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:479:10779":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:15957:9400":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"4:9317:7682":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:40676:7717":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:46393:10543":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:513:8428":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:6657:11531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:4821:8073":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:13822:10365":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"4:1631:8119":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:42028:2548":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:42206:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:7355:9782":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:12947:12560":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:44026:6888":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:935:17921":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:0:1712":{"crate_id":4,"path":["std"],"kind":"module"},"4:3476:17995":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:10278:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:7754:12478":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:5725:2551":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3593:12424":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:44193:6829":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:290:38674":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"4:9707:138":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:6849:9711":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:8682:12486":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:5817:7554":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:1585:10902":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:1555:7655":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7306:38594":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:40548:10412":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:742:7656":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:1365:10012":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:5528:11305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:2977:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:1762:12328":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:1663:10960":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:40382:6839":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3374:2643":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6524:11456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:23142:10394":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:15678:9349":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:1636:8120":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:1853:8138":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:8647:11660":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:952:7649":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:6410:18106":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:14386:8964":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:40416:6832":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:44308:10455":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:7606:10110":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:11093:34306":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:491:8394":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:38237:12414":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:10260:6842":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:12340:734":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"16:7509:9823":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:12357:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:1607:2548":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:5697:10164":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:2534:2416":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:3179:6737":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:15:2457":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:32307:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:4656:10329":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:7168:10284":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11051:8547":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:706:6867":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6895:11843":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:4835:6925":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2708:9510":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:46534:10548":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12557:7475":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:4992:11106":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:3639:6842":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:10638:34299":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:15168:9193":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:11293:25228":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"11:328:8099":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:8012:11775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:5236:11181":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:957:17919":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:14788:9059":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:21593:29474":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:7061:9735":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:32276:6739":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:9399:11821":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:44168:6890":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:7324:34304":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:46249:10521":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:6606:8081":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:43257:7871":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:774:7652":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13946:8882":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:45978:10498":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5546:11316":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"11:1051:10008":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:7926:7696":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:40372:6838":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11242:8042":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:12404:10349":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:15356:9242":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:41946:10340":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:13292:7500":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:4432:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:42012:7649":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:4651:10328":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10573:38602":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12949:8430":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"4:12328:417":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:10712:10139":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:6480:7588":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:839:10089":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3358:12417":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:1526:10863":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:7984:11772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:9105:8157":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:2696:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:21625:29472":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:43926:6883":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"8:0:2481":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:11259:11826":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:12388:12528":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10905:8033":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:5226:7667":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12808:8696":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:1586:8126":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:22148:29461":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:23087:10389":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:5557:11322":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11841:8058":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:10677:12543":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:16249:9484":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:21730:7727":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5624:11353":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:11915:25295":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:15078:9173":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:40588:10413":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:11688:8164":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:4315:8149":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6460:11424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:598:38611":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6746:11557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"16:7085:9736":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:4662:18037":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12792:8500":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"20:432:2590":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"17:16176:9472":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:10439:7461":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:7981:17969":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14876:9122":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5665:11370":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:15769:9370":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12543:8684":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"22:0:2609":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"21:319:8368":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"4:7472:8161":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11702:8591":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:364:8104":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12076:8645":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:6494:9649":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:1621:10931":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:8023:8613":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:30567:2537":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:4278:11821":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:11089:8036":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4952:11088":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:15301:9226":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:14503:8988":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13412:8769":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:41231:8221":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:7306:11627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:3599:12426":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6532:11461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12342:8664":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11128:8523":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2862:12169":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:15116:9178":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:14994:9163":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:12659:8687":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:3014:24266":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12328:8660":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:44485:6868":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:4151:18013":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10534:38598":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:11992:6873":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:3330:10137":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:7421:10106":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:39642:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5536:11310":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10982:25209":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:46443:10545":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"21:266:2620":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"1:45796:10479":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6636:11519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:2245:7658":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:39622:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:44668:10468":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:2902:24264":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:5914:7564":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:34202:12411":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:732:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:39450:12431":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:4614:9543":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13526:8793":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:44590:6856":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"21:145:2268":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:46572:10550":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:7546:11744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:40654:7714":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:44610:6862":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:7539:9524":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:47144:10602":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11391:6885":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:3669:8442":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5445:11276":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:465:8113":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:6447:11423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:42173:2548":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:1735:37093":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"22:449:38686":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:44258:12566":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5212:11173":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10092:25198":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:22109:17969":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:23109:10391":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:15822:9379":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12371:8699":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:42068:2662":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:14402:8968":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:43748:8176":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3183:2503":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:9714:8143":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:39662:12422":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:15463:9267":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5436:11270":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:2808:9515":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:4587:9542":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12478:8675":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:47098:10598":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:41221:8220":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:9671:25176":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:968:10002":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:10755:8613":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:11621:7472":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10954:25208":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:6098:25126":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:6347:10364":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:9462:10286":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12408:7492":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:8229:7671":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"4:5768:18085":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:521:17886":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:7144:25133":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:8207:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:883:10005":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:0:2488":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:6895:9713":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3345:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:4424:9537":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:10595:8157":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:16105:9451":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:3582:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:46348:10526":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:8006:11773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"22:948:29405":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"16:2418:9497":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12494:8677":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:1968:7044":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:4775:12452":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:6621:11517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:22705:10366":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5897:7559":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:507:8395":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:13173:8730":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:2037:8046":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7098:9739":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:12516:8682":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"4:5248:10156":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7132:9744":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:44279:10447":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"11:2326:10006":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:5947:10169":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2885:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:10259:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"5:741:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:8301:9913":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:3293:37084":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7014:25132":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:922:2500":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13972:8615":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:473:10776":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:2734:10132":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:44859:10473":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:6650:11530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:9807:25181":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:4396:10149":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:3029:8437":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6880:11595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6160:24236":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:40333:6837":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:10344:8168":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:3137:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:13387:8764":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:22579:17969":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:5686:7553":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:33510:12408":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:13624:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:9289:33626":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:6574:7590":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:21610:29478":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12443:8672":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:12313:33773":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7052:9732":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:22626:17702":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:3196:9492":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:4965:11093":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:3893:10145":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:44503:6869":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12238:8656":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:21710:17969":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"20:599:38628":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"17:16165:9467":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:47159:10603":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:12281:10317":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:40705:8180":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:33856:12409":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:1614:2545":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:7528:9832":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6588:9654":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:7575:11760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"20:470:2583":{"crate_id":20,"path":["unicode_bidi","utf16","InitialInfoExt"],"kind":"struct"},"4:10918:10203":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:2838:9516":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9781:25191":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:43998:6884":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:6395:7683":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:5006:9555":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:22996:10383":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:8265:11789":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:6738:11556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:5344:11224":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:47040:10594":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:1653:10954":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3042:37053":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:46555:10549":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"14:0:2486":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2592:9505":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:13774:8856":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6689:11540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:15410:9256":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:4934:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:2535:12373":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:22493:31945":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:46010:10500":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13116:8718":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:12634:6895":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4800:10998":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"0:44:2235":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"4:3582:10251":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:8855:7649":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"20:306:2565":{"crate_id":20,"path":["unicode_bidi","TextSource"],"kind":"trait"},"4:3667:17988":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:11205:10276":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:8197:11785":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:7481:2548":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7411:8122":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:4352:9536":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4787:10989":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:14436:8981":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:4288:11821":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:43235:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:1160:10012":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12362:8669":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:4971:10155":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:6478:11434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:747:12209":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:597:8429":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:3210:12419":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:5002:11113":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6729:11554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"4:11776:10145":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:8073:9892":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:1997:7045":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:8250:10207":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:10889:10303":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"4:2315:17951":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:14177:8931":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:43265:7872":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:5954:10173":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:11351:10309":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"4:5437:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:2894:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:5489:11299":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"15:394:24228":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:261:8425":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:7389:8121":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:2548:9503":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5277:11204":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:11145":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:8259:9802":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:674:17903":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:15760:9366":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"12:0:2485":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"11:800:2500":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12768:25178":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"11:1025:10006":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:8029:11784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7381:2548":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"9:392:24116":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5083:11146":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6609:11510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7111:9742":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1999:1357":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:40983:8209":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:5385:7459":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:22443:17709":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:44602:6860":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:570:10832":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:15058:7514":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6471:11432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:22898:10370":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:1839:2545":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:4684:18038":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:39602:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:96:8015":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"22:1122:8364":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:22481:17710":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:9172:2548":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:10775:32142":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:5831:7557":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:7055:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:5466:18141":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13064:8711":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:41890:31125":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11583:8582":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:2123:10095":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:7813:9843":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:12833:2514":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:40737:7719":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6120:25127":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:6911:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:44618:6857":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:12302:17908":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:2768:9513":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:564:10829":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:14038:8896":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5160:11152":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:426:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:2998:9526":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:5833:10165":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:38871:12416":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:545:10819":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:8337:7693":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:4856:9550":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:256:8424":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11688:8590":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:5598:11336":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:10309:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:15521:9309":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:43469:8226":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:6026:7677":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:15138:9182":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:30350:12170":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:10170:7460":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:14986:9162":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5643:11362":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5122:11149":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11634:8586":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7570:9525":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11405:8569":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:9363:7700":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7604:7599":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"22:534:7995":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"1:44793:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:12671:8076":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:44130:6877":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"16:6634:7591":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:22876:31142":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:11157:6882":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:8282:11794":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:15992:9430":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:5960:9583":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:2733:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6353:7580":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"13:229:7615":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:11816:10146":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:15836:9382":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:4083:2500":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:6785:10180":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:4882:9551":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:7648:9839":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:4318:7649":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:43722:8238":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:1545:8116":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:43247:10439":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:2203:8049":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:6689:2548":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:1474:7649":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:4560:9541":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10622:38599":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:5930:2500":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:15324:9231":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:299:8096":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:9938:801":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:47078:10596":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:43682:8233":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"14:165:24201":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:5052:11136":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:40303:10407":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:8202:7609":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:3314:8120":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:45826:10483":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:13553:8802":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:2476:17958":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"11:1883:7649":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:4062:9535":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:7401:2500":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"5:6429:18107":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:3280:8119":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13235:8746":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:13495:10354":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:11419:8249":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:46316:10524":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:7739:2546":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:26038:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:6608:37093":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:5289:976":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:670:8025":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3018:7049":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:4804:6741":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:9413:10185":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"11:1087:38579":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:8702:18067":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6648:9661":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:41924:10148":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:4468:9538":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:14012:8893":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:46505:10547":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15616:9328":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:44626:7726":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:12611:6898":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:4577:6922":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"11:1066:24194":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:9135:10276":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12056:8644":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:14414:8970":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:13512:10357":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:6191:7718":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:517:10804":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:10976:33847":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"0:119:2042":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"7:0:1901":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:12688:6892":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:15418:9257":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:5336:11223":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:6047:7667":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:11224:7726":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:8328:11803":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"14:187:24208":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:2383:7649":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:5466:11291":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:15273:9218":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:46234:10520":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:42323:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:9426:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:7741:7605":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12900:7499":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:523:10807":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:6317:9630":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:10563:12522":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:3218:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"20:542:2266":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"1:8720:32189":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:2521:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5630:11356":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6678:11537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:8481:10144":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:42559:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:3130:6733":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:6962:7594":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:4093:18010":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4924:11077":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"20:201:2265":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"17:11497:8053":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:3142:2536":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13738:8847":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5581:11329":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:123:7616":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:46887:10589":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:15944:8745":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:40695:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:7489:2548":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:3213:12420":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"11:2548:8095":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11773:8600":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:46295:10523":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:12337:1810":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:1838:695":{"crate_id":4,"path":["std","env"],"kind":"module"},"6:7339:11650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13437:8771":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:8071:17940":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"11:1676:38576":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:7723:2545":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:635:8411":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:14752:9028":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:9156:7649":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:4915:18027":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:42520:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:0:2484":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:1320:9745":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:2861:17969":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5219:11174":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8218:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:4365:10326":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11142:7463":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:16259:8764":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:10044:25197":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:43701:8236":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:6964:2553":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:43822:2512":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:8341:11807":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6379:11379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:39692:10405":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:6450:10165":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:2078:11838":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12584:8031":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:14091:8903":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:3831:18008":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:12343:732":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"17:15281:9219":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:7353:12140":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:6000:11821":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:8306:11798":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:6758:9686":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:42284:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:5995:9586":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"11:2369:10017":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"4:7396:34028":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"15:288:8085":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:4976:9554":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11153:8031":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"11:2554:38578":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:45811:10482":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:8093:9893":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11755:8598":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"11:1917:8119":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:1527:7652":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:1475:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:5846:9573":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:22758:10367":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5565:11324":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:16269:8769":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"0:117:2029":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"4:12353:1826":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:8861:8156":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"11:2423:2548":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:41239:8223":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:562:17891":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:13535:7719":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:44080:6886":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2966:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:7639:6845":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"23:0:2610":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"6:1580:10900":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10315:6912":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11547:8481":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:8317:11802":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:9343:33601":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:43450:10443":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"15:306:8090":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:32216:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"11:2403:7650":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:6821:11583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:15701:9350":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:40767:8195":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10671:38601":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:12335:1686":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:40455:6833":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13485:8783":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:7461:11690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:23098:10390":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:6749:9685":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:15390:9250":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"11:1887:2548":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"20:681:2585":{"crate_id":20,"path":["unicode_bidi","ParagraphBidiInfo"],"kind":"struct"},"18:589:8399":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5244:11185":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:2535:11814":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:6954:2552":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:4158:7650":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:45995:10499":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:6519:11455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:23007:12222":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:5628:10163":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2657:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:2727:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:4447:37109":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:3597:8063":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13753:8852":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:102:10758":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:34029:12410":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:6664:11532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:33577:12406":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:8673:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:12213:8066":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4412:12443":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7562:7665":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4824:11016":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:10720:38605":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:22826:7707":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:5266:11196":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:2318:7661":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:14356:8961":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:43673:8232":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:7431:37014":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:9237:18103":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:13779:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:41206:8217":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:5700:9519":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:45843:10486":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:651:8395":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:15582:9316":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:650:7046":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12969:8701":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"11:787:7654":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:7654:2501":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:6756:11564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:16093:9449":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:14545:8992":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11574:7621":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:15289:9220":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7695:9841":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:2766:11817":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:11920:10192":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:5612:10162":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"20:655:2583":{"crate_id":20,"path":["unicode_bidi","InitialInfoExt"],"kind":"struct"},"6:5407:1242":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:909:7654":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:42401:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"20:0:2045":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"16:6026:7532":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:6775:11567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"21:198:2635":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"1:42245:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:4807:11671":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"22:669:7444":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"4:4157:18014":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5102:11147":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:45928:10495":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:5643:113":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"5:5418:37093":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6047:9592":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"20:705:2587":{"crate_id":20,"path":["unicode_bidi","Utf8IndexLenIter"],"kind":"struct"},"16:2394:9496":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:7533:6766":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:6670:11535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:396:8106":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6940:7550":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"20:520:8007":{"crate_id":20,"path":["unicode_bidi","utf16","Utf16IndexLenIter"],"kind":"struct"},"17:0:2489":{"crate_id":17,"path":["object"],"kind":"module"},"1:42079:2664":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:5188:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:10887:38603":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:6363:34311":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"11:2352:10008":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:40618:10420":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:12089:8646":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:44159:6891":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:43226:7870":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:3415:2541":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:3657:7649":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:5578:10157":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:8000:10193":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:12530:8072":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:8610:10255":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:40489:6834":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"16:4502:9539":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:878:7650":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:21826:17969":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:8234:7670":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:40598:10419":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:21712:17621":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1699:10974":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:11853:8608":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4909:11071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:12344:908":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:6671:10179":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:43852:2595":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11433:8250":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12388:8670":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:879:17920":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:15176:9196":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:8511:7714":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"20:197:2594":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"5:7536:2510":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5112:11148":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"10:0:2483":{"crate_id":10,"path":["adler"],"kind":"module"},"1:43944:6881":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:13855:8868":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7799:7607":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:12899:6865":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11715:8592":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"21:276:2632":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"1:21659:17625":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:40667:7715":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:7618:10112":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10661:8029":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:10929:10287":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:44598:6861":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:12351:1838":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:4913:9552":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:44098:6887":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:47182:10604":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:15596:9322":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:13375:8763":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:3383:10139":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:15197:9201":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:3268:9760":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:41778:12495":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:1969:6950":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:22914:31136":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:15368:9245":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:8065:17907":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:10913:11824":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:15635:9333":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:9777:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:42963:11919":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:1855:8139":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"0:22:2190":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"17:10068:25180":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:7584:11763":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3664:12430":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"7:79:24108":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:11242:10187":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:6874:11594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"20:319:17969":{"crate_id":20,"path":["unicode_bidi","private","Sealed"],"kind":"trait"},"4:6172:10165":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:8491:17968":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:41183:8214":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:46039:10502":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"18:718:8417":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:6263:9625":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11269:25227":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:16079:9445":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:4916:11075":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:11200:6892":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"11:700:2548":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7006:9721":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10759:7463":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1510:10855":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:5826:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:2698:10133":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:3657:17967":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"5:7372:2543":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:4876:18037":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:434:8109":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}