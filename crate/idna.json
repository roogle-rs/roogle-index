{"root":"0:0:1698","crate_version":"0.4.0","includes_private":false,"index":{"1:12165:30921":{"id":"1:12165:30921","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12172:9660":{"id":"1:12172:9660","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11991:420"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43604:6479","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:27919":{"id":"5:683:27919","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12177:35079":{"id":"1:12177:35079","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43892:6482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2557:128":{"id":"1:2557:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32169:9896","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:700"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24:542":{"id":"0:24:542","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6888:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1689":{"id":"0:95:1689","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2252-0:161:1675":{"id":"b:1:2252-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2254:27749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:161:1675":{"id":"0:161:1675","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:2683:220-0:161:1675","a:1:2700:228-0:161:1675","a:1:2740:2265-0:161:1675","a:1:8381:2290-0:161:1675","a:1:8382:2289-0:161:1675","b:1:2252-0:161:1675","b:1:2554-0:161:1675","b:1:3319-0:161:1675","b:1:2549-0:161:1675","b:1:2539-0:161:1675","b:1:2249-0:161:1675","b:1:2543-0:161:1675","b:5:680-0:161:1675","0:169","0:167","0:92"]}}},"1:12220:35083":{"id":"1:12220:35083","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12239:35089":{"id":"1:12239:35089","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2549-0:170:1676":{"id":"b:1:2549-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:128","1:2553:1499"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2740:2265-0:161:1675":{"id":"a:1:2740:2265-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2740:2265-0:170:1676":{"id":"a:1:2740:2265-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8381:2290-0:170:1676":{"id":"a:1:8381:2290-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8381:2290","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12149:35073":{"id":"1:12149:35073","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2554-0:155:1677":{"id":"b:1:2554-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2557:128","1:2558:1498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12173:1860":{"id":"1:12173:1860","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43614:6478","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12235:35087":{"id":"1:12235:35087","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2590:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2558:1498":{"id":"1:2558:1498","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1690":{"id":"0:97:1690","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12274:35099":{"id":"1:12274:35099","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4536:35099"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43945:6438","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2549-0:155:1677":{"id":"b:1:2549-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:128","1:2553:1499"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1689","0:96:1944","0:97:1690","0:98:1979","0:99:1948","0:100:1685","0:102:1697"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:161:1675":{"id":"b:1:3319-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1512"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:1697":{"id":"0:102:1697","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12226:35084":{"id":"1:12226:35084","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11848:2159","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11991:420","str::matches":"1:12223:1955"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43850:6490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1688":{"id":"0:118:1688","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12264:35097":{"id":"1:12264:35097","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11809:127","`FromStr`":"1:11808:2155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11808:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11808:2155","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12178:29772":{"id":"1:12178:29772","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43920:6493","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:33264":{"id":"5:5531:33264","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12270:31956"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:424":{"id":"0:168:424","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2543-0:155:1677":{"id":"b:1:2543-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2545:700"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:7:1673":{"id":"0:7:1673","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust‚Äôs UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1839","0:24:542","0:44:1885","0:46:611"],"is_stripped":false}}},"0:112:674":{"id":"0:112:674","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9250:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9239:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12159:1879":{"id":"1:12159:1879","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41669:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1944":{"id":"0:96:1944","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12211:32070":{"id":"1:12211:32070","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159","str::rsplitn":"1:12214:32072"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43732:6488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2554-0:170:1676":{"id":"b:1:2554-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2557:128","1:2558:1498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:1979":{"id":"0:98:1979","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12237:35088":{"id":"1:12237:35088","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12258:35095":{"id":"1:12258:35095","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2543-0:170:1676":{"id":"b:1:2543-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2545:700"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12271:35098":{"id":"1:12271:35098","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4538:35098"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43927:6440","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:1839":{"id":"0:22:1839","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516:35756":{"id":"5:5516:35756","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2008":{"id":"0:87:2008","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:1677":{"id":"0:155:1677","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:2683:220-0:155:1677","a:1:2700:228-0:155:1677","a:1:2740:2265-0:155:1677","a:1:8381:2290-0:155:1677","a:1:8382:2289-0:155:1677","b:1:2252-0:155:1677","b:1:2554-0:155:1677","b:1:3319-0:155:1677","b:1:2549-0:155:1677","b:1:2539-0:155:1677","b:1:2249-0:155:1677","b:1:2543-0:155:1677","0:159"]}}},"0:99:1948":{"id":"0:99:1948","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2590:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:107:674":{"id":"0:107:674","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9250:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9239:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:949","0:87:2008","0:88:1685","0:91:1697"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:114-0:161:1675":{"id":"0:114-0:161:1675","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1675","glob":false}}},"1:12161:30919":{"id":"1:12161:30919","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41669:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2740:2265-0:155:1677":{"id":"a:1:2740:2265-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:2265","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2543-0:161:1675":{"id":"b:1:2543-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2545:700"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:700":{"id":"0:109:700","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12152:35075":{"id":"1:12152:35075","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12150:35074"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12163:30920":{"id":"1:12163:30920","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12205:35080":{"id":"1:12205:35080","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11848:2159","str::split":"1:12196:2001","prim@char":"4:11991:420","`DoubleEndedIterator`":"1:7306:121","str::rsplit_terminator":"1:12208:35081"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43678:6486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12266:1855":{"id":"1:12266:1855","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8382:2289-0:161:1675":{"id":"a:1:8382:2289-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8382:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8382:2289-0:170:1676":{"id":"a:1:8382:2289-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8382:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12269:31955":{"id":"1:12269:31955","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:35755","5:5513:2010","5:5516:35756","5:5519:35757","5:5527:35758","5:5528:35759","5:5529:2216","5:5530:33263","5:5531:33264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12255:35094":{"id":"1:12255:35094","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12241:35090":{"id":"1:12241:35090","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12270:31956":{"id":"1:12270:31956","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1698":{"id":"0:0:1698","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46‚Äôs introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1673","0:114-0:161:1675","0:115-0:170:1676","0:116-0:155:1677","0:117:1683","0:118:1688","0:119:1696"],"is_stripped":false}}},"1:12171:1841":{"id":"1:12171:1841","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11991:420"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43598:1877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:1685":{"id":"0:88:1685","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3321:1512":{"id":"1:3321:1512","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39490:9492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12150:35074":{"id":"1:12150:35074","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2539-0:170:1676":{"id":"b:1:2539-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:2018"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12252:32074":{"id":"1:12252:32074","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12229:35085":{"id":"1:12229:35085","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11848:2159","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11991:420","str::rmatch_indices":"1:12232:35086"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43778:6491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12268:31954":{"id":"1:12268:31954","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:33263":{"id":"5:5530:33263","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12269:31955"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2254:27749":{"id":"1:2254:27749","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2542:2018":{"id":"1:2542:2018","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2516:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:424"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:115-0:170:1676":{"id":"0:115-0:170:1676","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1676","glob":false}}},"1:12199:29764":{"id":"1:12199:29764","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11664:6495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:170:1676":{"id":"b:1:3319-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1512"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12147:821":{"id":"1:12147:821","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11991:420"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1697":{"id":"0:91:1697","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12232:35086":{"id":"1:12232:35086","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11848:2159","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11991:420","str::match_indices":"1:12229:35085"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43796:6492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12185:1981":{"id":"1:12185:1981","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2590:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2545:700":{"id":"1:2545:700","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8382:2289-0:155:1677":{"id":"a:1:8382:2289-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8382:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12157:315":{"id":"1:12157:315","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12158:314","`u8`":"4:12008:1521"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:170:1676":{"id":"a:1:2700:228-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12146":{"id":"1:12146","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12147:821","1:12148:1985","1:12149:35073","1:12150:35074","1:12152:35075","1:12155:32020","1:12156:35076","1:12157:315","1:12158:314","1:12159:1879","1:12161:30919","1:12163:30920","1:12165:30921","1:12167:35077","1:12168:35078","1:12169:32058","1:12170:32059","1:12171:1841","1:12172:9660","1:12173:1860","1:12174:29767","1:12175:29771","1:12176:7363","1:12177:35079","1:12178:29772","1:12179:30807","1:12182:1980","1:12185:1981","1:12188:6401","1:12192:1854","1:12196:2001","1:12199:29764","1:12202:32068","1:12205:35080","1:12208:35081","1:12211:32070","1:12214:32072","1:12217:35082","1:12220:35083","1:12223:1955","1:12226:35084","1:12229:35085","1:12232:35086","1:12235:35087","1:12237:35088","1:12239:35089","1:12241:35090","1:12242:35091","1:12243:35092","1:12246:35093","1:12249:2003","1:12252:32074","1:12255:35094","1:12258:35095","1:12261:35096","1:12264:35097","1:12266:1855","1:12267:31952","1:12268:31954","1:12269:31955","1:12270:31956","1:12271:35098","1:12273:11415","1:12274:35099"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2249-0:155:1677":{"id":"b:1:2249-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:2053"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12217:35082":{"id":"1:12217:35082","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1685":{"id":"0:100:1685","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:949":{"id":"0:86:949","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1683":{"id":"0:117:1683","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5775:1476":{"id":"5:5775:1476","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12192:1854":{"id":"1:12192:1854","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41669:179","prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12273:11415":{"id":"1:12273:11415","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4539:11415"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43936:6439","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:161:1675":{"id":"b:5:680-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:7167","5:683:27919","5:684:27920"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116-0:155:1677":{"id":"0:116-0:155:1677","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1677","glob":false}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","description","cause","source","provide"],"trait":{"name":"Error","id":"1:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12243:35092":{"id":"1:12243:35092","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11873:6470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2249-0:161:1675":{"id":"b:1:2249-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:2053"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:684:27920":{"id":"5:684:27920","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2252-0:170:1676":{"id":"b:1:2252-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2254:27749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12208:35081":{"id":"1:12208:35081","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11848:2159","str::split":"1:12196:2001","prim@char":"4:11991:420","str::split_terminator":"1:12205:35080"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43696:6484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2249-0:170:1676":{"id":"b:1:2249-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:2053"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:46:611":{"id":"0:46:611","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2549-0:161:1675":{"id":"b:1:2549-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:128","1:2553:1499"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12249:2003":{"id":"1:12249:2003","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12214:32072":{"id":"1:12214:32072","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11991:420","str::splitn":"1:12211:32070","self::pattern":"1:11848:2159"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43750:6487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12156:35076":{"id":"1:12156:35076","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:1676":{"id":"0:170:1676","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2683:220-0:170:1676","a:1:2700:228-0:170:1676","a:1:2740:2265-0:170:1676","a:1:8381:2290-0:170:1676","a:1:8382:2289-0:170:1676","b:1:2609-0:170:1676","b:1:2252-0:170:1676","b:1:2554-0:170:1676","b:1:3319-0:170:1676","b:1:2549-0:170:1676","b:1:2539-0:170:1676","b:1:2249-0:170:1676","b:1:2543-0:170:1676","b:5:5773-0:170:1676","0:106","0:111","0:110","0:183","0:108"]}}},"0:119:1696":{"id":"0:119:1696","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2611:11137":{"id":"1:2611:11137","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["demand",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Demand","id":"1:3385:9440","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12170:32059":{"id":"1:12170:32059","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12169:32058"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12261:35096":{"id":"1:12261:35096","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:2216":{"id":"5:5529:2216","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12242:35091":{"id":"1:12242:35091","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8381:2290-0:155:1677":{"id":"a:1:8381:2290-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8381:2290","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12246:35093":{"id":"1:12246:35093","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12202:32068":{"id":"1:12202:32068","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11848:2159","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11991:420","str::split":"1:12196:2001"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43646:6483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:6471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9275:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:674"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12223:1955":{"id":"1:12223:1955","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11848:2159","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11991:420","str::rmatches":"1:12226:35084"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43832:6489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12158:314":{"id":"1:12158:314","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12008:1521"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2252-0:155:1677":{"id":"b:1:2252-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2254:27749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12148:1985":{"id":"1:12148:1985","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12167:35077":{"id":"1:12167:35077","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11997:1418","str::slice_mut_unchecked":"1:12168:35078","crate::ops::Index":"1:2980:2145"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12155:32020":{"id":"1:12155:32020","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11408:6474"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12168:35078":{"id":"1:12168:35078","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11997:1418","crate::ops::IndexMut":"1:2984:2146","str::slice_unchecked":"1:12167:35077"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12188:6401":{"id":"1:12188:6401","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41669:179","prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:35757":{"id":"5:5519:35757","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:7167":{"id":"5:682:7167","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:5:5773-0:170:1676":{"id":"b:5:5773-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9280:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5771:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5775:1476"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2609-0:170:1676":{"id":"b:1:2609-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2602:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3373:11368","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2611:11137"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"E"}}}},"b:1:2554-0:161:1675":{"id":"b:1:2554-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2557:128","1:2558:1498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:1885":{"id":"0:44:1885","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2683:220-0:155:1677":{"id":"a:1:2683:220-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12174:29767":{"id":"1:12174:29767","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12175:29771"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43902:6481","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5512:35755":{"id":"5:5512:35755","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2150","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2150","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5513:2010":{"id":"5:5513:2010","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2552:128":{"id":"1:2552:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:1:3319-0:155:1677":{"id":"b:1:3319-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:2264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1512"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2553:1499":{"id":"1:2553:1499","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2683:220-0:161:1675":{"id":"a:1:2683:220-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2700:228-0:161:1675":{"id":"a:1:2700:228-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12169:32058":{"id":"1:12169:32058","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12170:32059"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12179:30807":{"id":"1:12179:30807","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12196:2001":{"id":"1:12196:2001","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11848:2159","`DoubleEndedIterator`":"1:7306:121","prim@char":"4:11991:420","str::split_whitespace":"1:12174:29767","str::rsplit":"1:12202:32068"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43628:6485","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:35758":{"id":"5:5527:35758","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:155:1677":{"id":"a:1:2700:228-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9280:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:674"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12182:1980":{"id":"1:12182:1980","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11991:420","self::pattern":"1:11848:2159"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:2148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12175:29771":{"id":"1:12175:29771","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12174:29767"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43911:6494","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12267:31952":{"id":"1:12267:31952","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39698:28131","Self::is_ascii":"1:12266:1855"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39698:28131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2251:2053":{"id":"1:2251:2053","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8381:2290-0:161:1675":{"id":"a:1:8381:2290-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8381:2290","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2539-0:161:1675":{"id":"b:1:2539-0:161:1675","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:2018"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2683:220-0:170:1676":{"id":"a:1:2683:220-0:170:1676","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2539-0:155:1677":{"id":"b:1:2539-0:155:1677","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:2018"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12176:7363":{"id":"1:12176:7363","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43882:6480","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:35759":{"id":"5:5528:35759","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2150","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2150","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:2182","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:6789:8852":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13435:8354":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:7599:10884":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4872:10377":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:11990:946":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:2850:11384":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:13732:8428":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12526:8122":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1520:9990":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13905:8471":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4186:6520":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:22142:10917":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11924:7038":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:8210:8942":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:41618:9273":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"11:798:9138":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:44597:9677":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:2921:2266":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:7754:9315":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5807:8720":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:7351:16887":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:6639:6813":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:4736:16989":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:2223:36502":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:10974:11361":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:2510:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:5882:8730":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:5916:7056":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:7073:23531":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"15:306:7362":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:4738:16990":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:4469:16998":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:7505:10863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:7525:7122":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4420:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:8801:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:9926:7805":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11642:7951":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:12493:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"9:507:9208":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:587:9971":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:20923:29865":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:11888:7029":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:4753:8691":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10931:7897":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:2691:6347":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:5829:10539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:12005:750":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"5:7184:2182":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7515:8976":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:2152:591":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:10515:9266":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:43178:10992":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:6790:2191":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:6140:6878":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:40180:6438":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:43604:6479":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:43902:6481":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5882:10563":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:44605:9679":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:40470:7437":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:4987:6837":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:906:7380":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:6171:10694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4678:10287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"20:348:2205":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"6:6688:10754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:4992:10443":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"11:630:7168":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12618:8136":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:2752:2140":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4328:10151":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4395:10194":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:9025:7198":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4335:6521":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:11144:7918":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:5940:8736":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:8168:16935":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"18:699:6981":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:7546:10872":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:4365:6839":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:44618:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:9491:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"0:46:611":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"16:7553:7124":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:9866:7799":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7240:36576":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:5977:17122":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:5130:6845":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:2208:6859":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:9093:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11241:23716":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:7540:10871":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:4909:17024":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:6540:7115":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:6651:6375":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:42698:9009":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"4:4619:16976":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:42948:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:20722:28241":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:2049:9145":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6044:10648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:21280:16596":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11084:7906":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:4815:16986":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11098:7910":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12905:8195":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:21968:7230":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:8219:6480":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:477:6860":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:7025:8879":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10799:7888":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:3732:9270":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:22113:28305":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"11:1517:9152":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:42970:7246":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"14:187:22609":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:2398:6540":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:11408:6474":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:44660:9683":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:43945:6438":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:12001:646":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:11957:7204":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:42177:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:8382:2289":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:5741:9290":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:5383:6837":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:2471:11176":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:40372:7428":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10444:7837":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:7201:7385":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:9887:7803":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"4:4231:9274":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13591:8404":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:3647:2187":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:10280:7332":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:8924:23592":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:4042:16979":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"15:288:7357":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"11:2201:2151":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"4:5774:7184":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:2838:11381":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"11:836:9143":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:4491:16999":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11852:7999":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:1746:10914":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"11:723:7170":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:1975:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12552:7861":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:5471:6837":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:12011:1520":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:9518:7307":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:6028:10643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10654:7856":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:7731:7180":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:35:2183":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"0:7:1673":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"17:9734:7311":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:22589:6452":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10161:7815":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:6931:8861":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13566:8402":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:45863:9694":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13673:8416":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:782:6816":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:7359:1882":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:9284:6511":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:6357:8786":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:1566:7381":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:5836:10541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:47673:9728":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:8145:7197":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:1757:613":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:10302:9286":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:9539:7225":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:3257:9265":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:198:2256":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"1:2743:6351":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:22076:28296":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10957:7901":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:0:498":{"crate_id":1,"path":["core"],"kind":"module"},"4:5981:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:12377:8101":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:4341:10161":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:10148:7323":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:14054:8512":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:10555:6897":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"15:327:7135":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:22024:9468":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:3339:16959":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:1595:10037":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:10072:7393":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:46239:9706":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:45662:9686":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:14044:8507":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6607:10725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10110:7813":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7665:7127":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:40203:6441":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:474:7378":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:760:2184":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:13957:8488":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:1492:7172":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:40493:7440":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:40309:11430":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"22:43:27569":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"4:6973:11161":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:0:444":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"5:878:6821":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:46923:9721":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:10401:7498":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:8105:9040":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6775:10801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:9528:36580":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:40352:9627":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"9:330:9900":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:7038:8882":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:6889:6888":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:4854:10366":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:568:9961":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5979:10624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:1557:2136":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"9:486:22516":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13830:8450":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:4436:10214":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4374:10185":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:46563:9715":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:43355:7480":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:7523:10866":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"4:6243:6872":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:44128:9663":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6386:8789":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10123:7009":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:11210:7921":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:9942:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6197:8769":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5051:10473":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:41476:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:41904:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"22:534:7284":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"0:44:1885":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"9:450:22517":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:856:2187":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6317:7109":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:7552:10873":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:4166:6837":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:2567:8647":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:10373:6488":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:5612:8707":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12840:8187":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:639:16873":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:5122:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:2164:7330":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:10139:6485":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:12686:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"11:667:7172":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13749:8433":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:554:9953":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:2551:6866":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:43696:6484":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4664:10286":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4704:10300":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4824:10353":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12186:8056":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:21196:7227":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5301:8703":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13604:8409":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:10090:7168":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:1075:7317":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:4754:10321":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:4441:8682":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12792:8182":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:6705:10759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:42021:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:4311:9275":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:47992:9739":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:877:7171":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:11590:6501":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:2878:6869":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:2243:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4446:10220":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:4489:10238":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11862:6472":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11329:23595":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:4814:8693":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:261:7685":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:8325:9373":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"0:22:1839":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"17:10351:7011":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:44206:11546":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:9318:6988":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11074:7690":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:32296:6354":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4811:803":{"crate_id":1,"path":["core","iter"],"kind":"module"},"11:644:7169":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13882:8466":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:5625:6873":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:521:27549":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13513:8396":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10883:7894":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:40484:7220":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:1820:2180":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:44063:9661":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4254:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:1037:8885":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10303:7738":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:1672:6813":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:10927:9205":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:11056:23714":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4380:10187":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"14:165:22602":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:3519:7341":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:6850:10840":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:22721:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2779:8899":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:8252:9052":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:11943:8000":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"7:79:22510":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:40973:6920":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:2962:11392":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2910:11386":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:5015:10451":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:276:2253":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"4:3966:16973":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:7223:6824":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:7899:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:39490:9492":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:45832:9693":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"10:36:9899":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:43572:2153":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:1852:7383":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:634:9248":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"16:6438:8793":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6850:8857":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10339:7829":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:2587:9257":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:2212:16918":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:3196:11394":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6484:8794":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:46460:9713":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:644:7655":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"4:11411:6904":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:2131:6830":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:2928:2268":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:3583:7168":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:5819:6874":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:44080:9662":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:12008:1521":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:12009:1518":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:3168:11391":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:3936:16971":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:6531:6800":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:9188:7006":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:43750:6487":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:7227:11466":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:2773:11373":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5025:10456":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:4032:8679":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:43182:7475":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:44260:2149":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11753:7970":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:22655:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6239:36578":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:12649:6878":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:2497:8644":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4748:10319":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:3183:36468":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:531:7656":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:44402:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:11991:420":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:10377:6999":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:822:6819":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:7278:10852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10520:7846":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"11:2033:8885":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:403:7373":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4794:10343":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:9296:7008":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:1523:7388":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"18:671:7303":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:21:687":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:2318:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:9716:36583":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9850:23606":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"9:393:22518":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:43796:6492":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"22:669:6972":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:41752:2286":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"19:0:1041":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:12089:8025":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"10:0:2121":{"crate_id":10,"path":["adler"],"kind":"module"},"17:10330:7826":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:551:9245":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"7:0:1565":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:11155:9300":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:2980:2145":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:7882:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:2383:16931":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:11664:6495":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:6834:11456":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:12303:8083":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:47595:9727":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11726:7962":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:6771:2190":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:7714:2139":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"22:752:6792":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:43516:7491":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:5589:7219":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"11:285:7368":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:11272:7350":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:40188:6439":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6671:10753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:3930:16972":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:2035:7195":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:9821:7798":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13167:8239":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:2762:8898":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:10923:9315":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"11:1068:9149":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:256:7684":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4543:10266":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:207:6811":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:12982:8208":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:41803:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:41727:7168":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"11:968:8885":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11967:8004":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:7758:31563":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:1826:2136":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:22036:28289":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:12457:8115":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:1527:9993":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10249:7818":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:40594:7455":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:12466:29828":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:10387:6487":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:1557:10013":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:2783:2141":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11109:7914":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4587:10280":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:7721:11464":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:488:9913":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:11020:7903":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:3156:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:8794:23588":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:30451:28302":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:7517:10865":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5877:10562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:6589:10718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12133:8042":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:8827:9393":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:1513:9988":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:3179:34245":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:22059:9470":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2804:8900":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:3837:9272":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7568:36573":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12815:8183":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:7339:2151":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:10141:9407":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4895:10387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:40144:6445":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:9068:7200":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:8086:9037":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:9485:36582":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"21:67:1909":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:12007:747":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"6:1590:10035":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7463:8971":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:1663:10089":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:45970:9699":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:3025:8669":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:7123:7414":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:1603:10042":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:582:16871":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5967:10617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14350:8610":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"23:0:2231":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"6:4917:10403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:1920:659":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:2897:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:4151:7402":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:8841:23589":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6886:7118":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:5076:9278":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:12003:752":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:22000:7231":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:7869:9318":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:40414:7215":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6796:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5818:10531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:7842:7556":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"6:6008:10637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:5409:9284":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:46877:9720":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13683:8417":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:44227:9669":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:14026:8504":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:4476:8683":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:41982:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:2832:8905":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:11434:9270":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11498:7939":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:12074:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:2925:2267":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:9020:7188":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12479:8116":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:1543:6837":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:9344:36585":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7622:8979":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:10319:33883":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:9294:6515":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:9977:7309":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3151:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"14:7:9130":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:21176:16597":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12502:8121":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:13492:8391":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:3178:7382":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:3980:16974":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:3867:8677":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12592:8133":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:43646:6483":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:21011:16609":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"4:8206:6478":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"6:6565:10701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:3373:11368":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"6:1495:9980":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:40342:6914":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:3395:7340":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:21058:11347":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:21915:9467":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:11346:7417":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:582:7238":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:7753:8982":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:43406:7481":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"11:2194:9897":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:3998:9441":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:21633:27965":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:41879:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:10795:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:2519:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"5:2461:10891":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:4963:10429":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"14:160:9130":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:119:17202":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:32169:9896":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:11623:7948":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:11265:7190":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:48003:9740":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11045:7904":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:5799:10529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:11378:11509":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:0:2127":{"crate_id":17,"path":["object"],"kind":"module"},"11:311:7371":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:46429:9712":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:44034:9653":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:13697:8418":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:9561:7308":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:900:2184":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"4:7677:6897":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:7833:8994":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"8:0:2119":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:7233:36473":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:5767:10511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:9250:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7584:8978":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:6036:10645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14197:8568":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:41718:1878":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:30615:28288":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6516:8800":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:21621:7229":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:8544:7168":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"5:1257:8885":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:43507:7490":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:80:7290":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:47485:9726":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4315:10141":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4938:10418":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11454:7022":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:20692:27962":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:40432:7430":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9966:6990":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:10499:7842":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:631:9246":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:1060:9147":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:8189:7214":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:8958:9396":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:5389:9283":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5920:10591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:2874:8660":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:13862:8459":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12994:8210":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:259:36613":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"4:8919:17070":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:2787:11377":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:1500:9982":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:9721:6925":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:2913:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"17:14150:8550":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10581:7853":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7012:8876":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:890:2136":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4258:9443":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"18:755:7683":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:2443:8642":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4695:10295":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"10:44:7141":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:7656:9308":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:43586:6477":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"21:313:2255":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"4:11973:33879":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:39451:11387":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12017:8011":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:7993:9322":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:22622:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"20:356:2206":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"11:793:7380":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:3504:33854":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:123:17203":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6726:10765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:1631:10066":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4616:10282":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:1572:7382":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:12605:8134":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4469:10228":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:8383:2288":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:7586:10880":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:20967:16608":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:6175:7089":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"20:0:1699":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"11:332:6803":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:11962:16878":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:43415:7482":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:6214:8772":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4770:10330":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"4:3255:9264":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:3382:7469":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:6598:10724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:2931:2269":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5737:10486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7531:2184":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:44240:6473":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:6711:10761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:20679:7238":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:7367:34454":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:942:9143":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:39341:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:8534:7406":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:4325:6912":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:47797:9730":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:2246:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"22:0:2230":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"18:491:7654":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12579:8131":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13083:8228":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10114:7169":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13332:8268":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:5793:7088":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:8972:7185":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:12015:1141":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:10994:7902":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4650:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10417:7835":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6692:23529":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:4038:16978":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:3737:9225":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:8795:7410":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:14:2096":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:9083:7003":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"13:0:2118":{"crate_id":13,"path":["std_detect"],"kind":"module"},"22:1122:7627":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"1:43481:7428":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:46687:9717":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5100:8702":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:4323:8680":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:7651:9306":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:9913:7314":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:7292:2187":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:11992:8009":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:44379:6463":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:20737:28237":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:8351:9277":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:46209:9705":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:46987:9723":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:1638:10070":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:9280:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:14403:8619":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:42741:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:13778:8441":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:2803:8657":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:7247:2187":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:1442:2187":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:0:826":{"crate_id":6,"path":["libc"],"kind":"module"},"5:1503:7173":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:40942:7465":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:12053:8020":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:10775:7194":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:4620:8688":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:10091:7421":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:7717:11463":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:8659:23584":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:9571:36581":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:1411:7168":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:11600:23598":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:2816:11379":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:925:16888":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"22:1034:27573":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"17:12035:8019":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7255:2286":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:7763:23534":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"20:315:36599":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:46063:9701":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"20:249:128":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"16:5626:8711":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:43628:6485":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:2900:8661":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:21275:16936":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:7384:9236":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:6015:10639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"20:223:7635":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"4:11248:6902":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:2627:9258":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:2693:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:8857:7412":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:41653:9454":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:22556:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:11388:23596":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:10509:9262":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11007:7346":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"13:226:7139":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:2465:8643":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:0:2128":{"crate_id":18,"path":["memchr"],"kind":"module"},"9:237:9645":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:45814:9692":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:14015:8500":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:2855:11385":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9655:7309":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:9274:6478":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:9240:6451":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:8299:7398":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:3671:6813":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1776:2184":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:7720:16877":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:4004:2136":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12891:8192":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:2519:8645":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8971:31529":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13964:8489":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11189:7018":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13456:8362":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13043:8223":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"18:660:7298":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11428:7938":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11371:7936":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:1611:6807":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:6022:10640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5531:7436":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:6589:17067":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:8329:10734":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:43911:6494":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:2959:7167":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:8740:23586":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:41735:7169":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:10175:6990":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:833:7168":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:2857:8659":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"0:117:1683":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"17:11467:7024":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:352:9242":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:4631:10747":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:573:9963":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:9952:7778":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2516:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"11:1048:36568":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:10721:9416":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"18:652:7655":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:46307:9709":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:6820:10825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:4395:6837":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:3520:16954":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:45730:9689":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:5557:17052":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:22523:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:9282:6510":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:720:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:11994:1059":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:42439:6513":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11199:7920":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:9048:7002":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:7277:2270":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10403:7834":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:481:7653":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:8212:6485":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"11:1121:9151":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:9286:6512":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:5045:9278":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12077:8024":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:10512:9264":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:5080:10482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:538:6976":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:39224:11396":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2162:11347":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:11127:7939":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"7:32:22503":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:14259:8589":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12365:8099":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:2170:7174":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:8176:23536":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:7518:7689":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13719:8422":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:11496:9272":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:20911:16603":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"16:2637:8650":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:8225:7398":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:43732:6488":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14329:8604":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:5440:9286":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:3162:11389":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:40535:7448":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:2825:8658":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:7313:36577":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4810:10349":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12691:8146":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10863:6990":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:39310:7423":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:9932:16936":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:2105:23647":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:9033:9402":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:2690:10894":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:2663:8651":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:10199:7816":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:8849:7168":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:11340:7416":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:42723:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"18:614:36590":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:629:9222":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:2265:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"16:2421:8641":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9399:7304":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:4984:10441":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:6868:10843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"21:266:2241":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"1:30190:11177":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"14:221:9137":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:2695:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"5:3722:7195":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:6460:6885":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:40502:7441":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4518:10254":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6396:8790":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12757:8171":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:5651:8663":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13787:8442":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"9:0:2120":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:1138:7387":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:8771:23587":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:6571:23528":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:41582:28284":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4483:10236":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:3894:8678":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5987:10625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:8231:7400":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:9013:9401":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:5748:9293":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:14341:8606":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9665:36587":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7505:8668":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:5614:2190":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:6533:9296":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:14037:8505":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13109:8230":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:4841:8694":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:11996:1388":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:9472:7396":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:39504:8942":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:9534:11503":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:8138:9044":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:9288:6513":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"4:4633:10749":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:10294:6483":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:8236:16969":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:400:7686":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:45952:9698":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:39385:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:20720:28239":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:7427:9241":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:39407:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:8108:9360":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:13707:8419":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6067:10654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:3456:9268":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11629:6500":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:12118:8036":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:10293:7820":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11164:7017":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:14102:8549":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4568:10279":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6573:10706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"3:0:2117":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"22:449:6782":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"16:5673:23523":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:32209:7422":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:47946:9735":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"11:1103:9150":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:8152:7133":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6128:8764":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:21114:16936":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:9290:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1464:7170":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:12010:1519":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:1833:7394":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:12864:8190":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:40554:7450":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10266:7819":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:47957:9736":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11290:23594":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:30437:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:45792:9691":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:7631:8980":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:5375:9279":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:40991:7472":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:44635:9682":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:0:1410":{"crate_id":4,"path":["std"],"kind":"module"},"16:6864:7074":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:5554:10655":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"5:3330:2184":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:5618:6872":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10933:7495":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:2602:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:1917:9439":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:10407:7410":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:45618:9684":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:2513:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"16:149:6798":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:1774:7392":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"15:0:2125":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10555:7333":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:7799:8990":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12878:8191":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10671:23689":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:4563:17016":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:11552:7203":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:7693:7130":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:8136:7196":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"17:11669:7952":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12065:8023":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:7433:8962":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:609:7666":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:47735:9729":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:527:6861":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"16:5959:7351":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12412:8105":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:2915:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:4694:17025":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2781:8656":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:45638:9685":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:11136:7226":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:23234:7236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:6188:7189":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7484:8974":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13125:8232":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:8043:9032":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:22163:9482":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12431:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:42714:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:1835:7395":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:4389:10192":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:11940:9431":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:1069:9151":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:1422:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"11:97:9892":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:42931:7244":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:4638:10284":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"11:749:2136":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11220:23715":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:8285:16997":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13155:7018":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:4010:9442":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11250:7925":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:2203:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"0:0:1698":{"crate_id":0,"path":["idna"],"kind":"module"},"4:5611:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:9195:10901":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:7289:8922":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:3596:7169":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"4:864:7170":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:4949:10423":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:12936:8201":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6986:8875":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:44647:9155":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"16:3580:8673":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:47977:9738":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:8003:16962":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:1536:9998":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:3106:9259":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"4:11992:1537":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"11:986:9145":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:40452:7432":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"11:1822:2187":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:7558:10874":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:1973:7324":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:10221:7477":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:44544:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:10805:9269":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:46331:9710":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:41943:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9475:7306":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:844:9144":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:44371:6468":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:13303:8248":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:5775:7083":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11264:7928":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"4:9465:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:13029:8222":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:113:7296":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:1273:9147":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:7362:23532":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:21745:16598":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4556:10270":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:5994:23525":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:2737:6349":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:20707:27962":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:7193:2187":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:4900:17023":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:30421:6609":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2748:6353":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:39263:11393":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:4928:8697":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:7494:8975":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5994:10626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11155:7919":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13448:8361":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"20:8:2210":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"17:12727:8152":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:41562:7240":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:506:9921":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:48041:9742":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:42939:7245":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:4389:6522":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:42060:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:11873:6470":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:1636:6607":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"16:4785:8692":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11872:7025":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10013:7807":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:7272:10850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"22:636:7285":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"4:410:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:6136:10669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1673:10095":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:11475:9271":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:12014:1575":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:12394:8104":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:14007:8499":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:40522:7447":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"11:817:9141":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9118:7004":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:482:9910":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:3217:9263":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:43494:7489":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:44012:11545":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:119:6801":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13854:8458":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:45933:9697":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:766:27548":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:44217:9665":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10633:7014":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11767:7971":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4800:10346":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:43778:6491":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:8199:7458":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:9777:23604":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11613:6498":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:10568:7851":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:10745:10907":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:2355:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:500:9918":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:2737:8654":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10544:7850":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10511:7845":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:30381:2177":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:9185:34113":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:7398:28297":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6763:8851":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:20925:11347":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"5:4428:6839":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:4180:7404":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:10948:33874":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:11128:34712":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:6648:10752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:1011:6813":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:41794:6507":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:8125:9041":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:4605:6433":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6427:8792":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6456:7113":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:8291:9370":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:7705:16876":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:9108:9299":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"5:7476:2138":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:2757:11209":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"11:0:2122":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:14163:8556":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7739:7131":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:8021:9031":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:4167:16996":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:21743:16936":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:40964:7469":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:44355:6466":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:40442:7218":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:4996:8699":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:44192:9664":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:261:6813":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4818:10352":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:11394:9458":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"14:31:9130":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1717:10113":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4848:10363":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10609:7855":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:2846:11383":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"9:357:22532":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:14359:8612":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:547:9950":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:8307:9371":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:6347:23527":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:579:9966":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:7284:2187":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1733:10118":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:2821:11380":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11118:7915":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:5843:8727":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5567:8662":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:43832:6489":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:6351:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:434:7687":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:5890:10568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:8890:9395":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:41785:2287":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:96:7293":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:1649:10078":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:43927:6440":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:9103:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1709:10109":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:624:36593":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:3212:7381":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:1102:7386":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:21862:9466":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:43936:6439":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:40724:7458":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"20:257:1908":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"11:1012:9147":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4740:10315":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"11:399:7372":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9032:6987":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"0:119:1696":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"4:3296:9267":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:8903:17071":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"14:0:2124":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:40738:7459":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13847:8457":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:41862:7169":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:9939:7315":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4785:28275":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:7679:7129":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13096:8229":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:12012:1517":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:6372:7112":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:919:9138":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:2970:36051":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:40267:9625":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:3744:8674":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:12741:2181":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:530:7060":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"4:7726:7181":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:44351:6464":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:9753:6930":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:2049:9225":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:11979:8007":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:6957:6858":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8950:674":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:10529:7847":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6625:10734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:564:6978":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:11919:11539":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:11578:9305":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:2799:11376":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:7264:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:695:7173":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:21306:16605":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:40295:9626":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12435:8108":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:45684:9687":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4955:10424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:1550:7168":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:8935:17072":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:4159:7403":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:541:9947":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:5425:9285":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:1184:7318":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:42923:7242":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:4463:420":{"crate_id":1,"path":["core","char"],"kind":"module"},"16:3635:7701":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:846:7169":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11955:8003":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:10814:34708":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"0:118:1688":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:3495:6451":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:4729:10311":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14216:8573":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6554:8801":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13659:8413":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:7213:2136":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5704:7081":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4842:10362":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:8452:9645":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:6834:10834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:40513:7446":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12148:8048":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13639:7039":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:4862:10371":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:2715:8653":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:7758:9316":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"17:10038:7319":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:9016:6986":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:39429:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:43526:7492":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:12004:749":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"5:5320:6813":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:3182:34242":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:41870:2187":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:41516:9451":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:42296:7241":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13179:8246":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4716:10307":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:47919:9733":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13937:8482":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:10900:7494":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:8808:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:4592:8687":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"14:40:7986":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2826:8904":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10253:7331":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13757:8436":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:4196:6837":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4:1024":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:2507:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:12851:8188":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4887:10382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:44435:11552":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:574:7655":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11034:7347":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:45893:9695":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:5044:10470":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"4:911:7172":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"4:6156:6881":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:1561:2184":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"6:4764:10327":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:43424:7484":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:49939:16612":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:44155:9462":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6018:23526":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:9409:36589":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4291:10124":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4413:10206":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:3513:2136":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"6:1575:10023":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10097:7322":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:10231:11122":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:3176:31889":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:40423:7217":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"20:231:2211":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"1:2791:11375":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:2962:22665":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:3058:7697":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:1913:6647":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:22688:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:9127:9300":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:3513:16934":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:2565:6864":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10845:7892":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:39518:6521":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:47343:9725":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4723:10308":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:21130:16595":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4506:10248":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:46017:9700":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:2523:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:2133:7327":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"11:1818:7168":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:3441:8672":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:26044:7237":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:12004:8010":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:30415:2178":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:5720:8717":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:1858:7384":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"18:690:7674":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:8871:9288":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:45762:9690":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:636:7671":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:8977:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:43850:6490":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"20:97:1907":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"17:10051:7809":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5805:10530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:7263:7179":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4368:10184":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13999:8497":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12671:8143":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:42763:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:62:17148":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:8976:7222":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:2399:8640":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:3217:36471":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:43920:6493":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13620:8412":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10906:7895":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:2705:2176":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:1911:18551":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:6308:17075":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:4868:8695":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:4792:6870":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:4965:8698":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11848:2159":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:14301:8595":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:9614:36588":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"9:426:22519":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:4698:8689":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:47843:9731":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:14282:8590":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:43444:7486":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2590:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"20:336:2204":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"16:2689:8652":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4022:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:12002:648":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:13368:8299":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13923:8475":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:6804:17074":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:1845:7382":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4787:10341":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:46717:9718":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:595:9976":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:5553:7077":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:8949:23593":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:6536:17065":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:43614:6478":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5955:10612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:5382:6986":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"15:394:22629":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:6932:6855":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:302:2254":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"4:7859:7194":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:2164:11348":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:14227:8574":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:6064:6876":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:41605:9640":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:12016:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:43892:6482":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:4697:16998":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:42978:7247":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"11:2174:9894":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:39325:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:40196:6440":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:43882:6480":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:42099:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:8273:9273":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6303:7107":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13981:8493":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:11989:373":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:11032:6899":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12711:8147":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:1884:6646":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"6:4463:10226":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:6156:10683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:5737:23524":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:5302:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:2205:9255":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:40958:7467":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:46483:9714":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13949:8485":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12646:8141":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11832:7989":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:4564:8686":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:4380:6913":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:6841:10837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:11173:10909":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:10832:7891":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:276:2150":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"11:1027:22596":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:40215:6442":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:7463:10862":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:7043:6875":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:5363:23522":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:5689:7078":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:3438:9366":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:7015:6889":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:47966:9737":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13055:8224":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7592:23533":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13991:8496":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:2349:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:5414:8705":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:1501:22597":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:936:9141":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:41641:9452":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:4383:9276":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:44347:6461":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:4781:10338":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:7474:8667":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2690:2264":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:6560:2187":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5639:8716":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"11:2060:9147":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:3233:11395":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:73:1519":{"crate_id":1,"path":["core","u32"],"kind":"module"},"1:3078:2147":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:20739:28242":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:48133:9746":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:9292:6514":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:39365:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:4436:6523":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:358:9243":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"4:8280:10896":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:9706:7310":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"22:966:6797":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"16:6502:7353":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:4764:390":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"16:6915:36574":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11905:7031":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:0:2126":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7306:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9840:7312":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:47881:9732":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:7529:10867":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:1972:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"14:202:2135":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:7631:16936":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6160:8767":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:8803:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:562:9958":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:653:17560":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11568:23597":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:9098:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:10785:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:4724:8690":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:2795:11374":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5793:10526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:7855:23535":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12106:8033":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5849:10550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:8997:23571":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:21097:16600":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"21:291:36614":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"1:44554:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"11:657:2187":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:47937:9734":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:48071:9744":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:11868:6471":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:504:7688":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"20:93:2215":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"17:12921:8197":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"4:2371:16925":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:10450:6896":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:21299:16936":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6805:10818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:42218:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4401:10197":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:11564:34731":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:494:9916":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:14189:8565":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:526:9938":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:21174:16936":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:6487:6813":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:9275:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:7907:9320":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"22:948:27572":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"4:915:7173":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:22149:9481":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:1629:590":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:13557:8401":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13914:8474":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"4:11298:9301":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9153:7005":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"20:383:2208":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"16:8166:9045":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4606:10281":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:3215:9262":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:40101:6439":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:7564:10875":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:8475:9385":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:22490:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:4685:10288":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5008:10448":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12318:8087":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10361:7012":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:42658:10984":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:4113:7212":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1426:7169":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:7231:11465":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11808:2155":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:3220:8670":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:4129:7401":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5074:10479":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:1666:1097":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"17:11178:7348":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:4879:1011":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:43455:7487":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:6983:7196":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:12952:8202":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:12638:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:22051:9469":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"11:2180:7367":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:3735:9271":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:11234:7923":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:22175:11210":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:21529:16610":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:10812:7890":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"20:369:2207":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"16:5342:8704":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:6130:10668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6744:10775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:6800:2192":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:2293:22638":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4304:10133":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11815:7986":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:46641:9716":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:46115:9703":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5863:10561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:0:1700":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"17:14205:8569":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:2357:16921":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:13803:8446":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:4076:7169":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:10823:34715":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:2966:36049":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:44363:6469":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:7998:7193":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:40949:7466":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:22787:9486":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:6441:2136":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:532:9941":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:11271:7413":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:12566:8130":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:10259:7478":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:46163:9704":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:1538:9153":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:719:7677":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:40262:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:45708:9688":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:3802:2184":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:7575:10879":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:48056:9743":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:40752:7460":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:1696:10105":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:1772:7391":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"16:2926:22664":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:2355:10916":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:10740:10905":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:5028:8700":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:43598:1877":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"4:11997:1418":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:6740:11469":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:40392:7429":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:42257:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:9163:9405":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:12966:8204":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:7915:9321":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3171:7168":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5775:10513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10945:7342":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"0:24:542":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"1:42138:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:681:7672":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:2541:8646":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"4:9047:31949":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:42432:6512":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:40116:6446":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7407:7070":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:12518:9464":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7414:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:41811:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:7250:10849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"5:895:7168":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:22457:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:2141:9226":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:11774:6908":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:42418:6511":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:10981:7345":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:3777:8675":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13140:8236":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:46093:9702":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11416:7021":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:22424:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:9275:7394":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:12769:8173":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:1755:9436":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:40168:6448":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:3186:7339":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10415:7499":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6900:7119":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:41667:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:48018:9741":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:14177:8562":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6939:23530":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:11192:9299":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:4536:8685":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:30985:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7707:8981":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:30509:28293":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"11:1831:2184":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"22:386:6798":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:21524:16602":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:582:7689":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:9655:6922":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13016:8221":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5900:10575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"4:5234:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:10969:7344":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"12:0:2123":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2373:8639":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5590:8664":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7099:9402":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:5067:8701":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13548:8397":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:7569:6891":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6289:8782":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:8865:2187":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6250:7104":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:8156:9269":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:40570:7452":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12254:8058":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:948:9144":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:44367:6467":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12354:8096":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:3810:8676":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10486:7841":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:12346:8094":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"21:145:1910":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"4:11049:6901":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12659:8142":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14380:8615":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:2313:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:8402:9382":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:40222:6443":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:39483:9491":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"9:52:7142":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11520:7690":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:40279:28297":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"22:879:27571":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"4:1578:7383":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"4:1051:9145":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12333:8092":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:42425:6510":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7445:8963":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:7852:9317":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:21984:7207":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:8983:9397":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:5990:7444":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:11116:9393":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:7632:9244":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:320:7631":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:20875:16601":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:2611:8649":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11791:7985":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:41533:11475":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:11328:9304":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:7414:9239":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:590:7659":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"22:470:6786":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"16:6713:8838":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:1690:10102":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:42686:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:2243:7177":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:9738:6864":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:4034:6813":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:43163:9649":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:6872:7117":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:6603:6886":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:46799:9719":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:8841:9394":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:3994:16976":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7465:2137":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:5956:6845":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:8872:23590":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10471:7839":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:13894:8467":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6470:7114":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5058:10476":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:9499:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:39511:9493":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1545:10004":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:4944:10421":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:8561:9391":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:2186:36569":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:6081:6837":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:22754:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"4:8813:9392":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:11571:9305":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13771:8439":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:44049:9658":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:11104:9392":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:8492:17047":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:10066:7320":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4973:10435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:8542:23572":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:40545:7221":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:4236:7168":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:46953:9722":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:7061:8884":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:39525:7627":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:507:7655":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:2984:2146":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:2740:2265":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:7440:6846":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:7295:10861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14315:8597":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5068:10477":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4833:10356":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3141:11388":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10621:7337":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"9:177:7157":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:31013:7238":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:12006:751":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:14417:8622":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:4045:11416":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:14236:8576":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:805:16888":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:2314:8636":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:9477:6895":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13870:8460":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:3670:16970":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:4629:10745":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:2811:11378":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6667:8826":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:7331:36579":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:1302:9151":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12424:8107":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4475:10231":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:11043:6900":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:12444:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:3410:6837":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:44375:6462":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:40461:7435":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:47137:9724":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:1506:9985":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:10966:9394":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:2694:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:41743:2187":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:9223:7007":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4550:10268":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:11313:9302":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:44562:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11591:7018":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4626:10283":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:1681:10096":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:3294:9266":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12174:8053":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"22:728:6782":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"1:21308:7227":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:7511:10864":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:44383:7226":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:1702:10106":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:3238:7384":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10390:7833":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4428:10212":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:13574:8403":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:43434:7485":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:515:7652":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:1838:7381":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:2745:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:2962:10888":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13069:8225":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:8605:23570":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:2759:8655":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:9968:9637":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:40983:7470":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:5972:7062":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12631:8138":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:3042:22666":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:20873:16936":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:6658:8825":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:40935:7464":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:4506:8684":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:5398:6987":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:11995:312":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"16:4396:8681":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:6618:10730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:5965:6872":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:11354:7758":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:21182:16599":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:44359:6465":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4535:10261":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:10430:7836":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:9442:36586":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"13:110:36570":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:6787:7462":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:42668:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"5:2960:36050":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:5364:17108":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"21:228:1911":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"1:43678:6486":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:3204:7383":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13971:8490":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:21044:16604":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:45915:9696":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9806:23605":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:2470:16936":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:7847:7396":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:32205:9316":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:6720:10764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:6057:22637":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:1569:10021":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:2332:7048":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:40229:6444":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:41499:9449":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:736:27547":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:7529:9428":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:46261:9707":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:736:7171":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:46382:9711":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:4263:9444":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:8068:9035":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:1810:7393":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"4:2373:16926":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:10080:7810":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:1482:7380":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:3295:8671":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"4:7923:7195":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:6815:8853":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:7547:2185":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:1473:7171":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:7738:16907":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:9744:36584":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:14395:8616":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:42960:9645":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:41854:7168":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:10332:7479":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:8899:23591":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:6332:8783":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:4144:7213":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:5494:9287":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:8550:7409":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"5:1288:9145":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:10763:9421":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:43536:7493":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:3181:30107":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2767:8895":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:2352:8638":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:498:6830":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:599:36592":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4524:10257":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:4734:16987":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4496:10241":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:10936:9287":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"4:6291:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:5841:2136":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4908:10397":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:10182:6495":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:6077:10657":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13427:8351":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:6977:8872":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7539:7123":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:2683:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:40107:9621":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:4028:16977":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:10223:7817":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:48094:9745":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:8381:2290":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:10597:7336":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:9899:7009":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:2842:11382":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:40401:7214":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6232:7073":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"20:327:7639":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"4:4958:17030":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"5:5368:17109":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"4:11998:1502":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:12161:8052":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:1732:11363":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:10458:7838":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:707:6472":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:4050:16981":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10323:7823":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:2589:8648":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:1118:36043":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:6424:9295":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:615:6648":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:6724:8839":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4456:10223":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:9990:7806":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:55:9022":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"4:9146:9404":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:3988:16975":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:8990:31688":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:6420:7466":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:40248:6437":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:40158:6447":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:2700:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:10750:9317":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:11553:6499":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12539:8125":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:39698:28131":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:22097:28301":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:2488:9256":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11696:7958":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12826:8185":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7268:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:4900:8696":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:8711:23585":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11542:7941":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:9239:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"11:2168:9893":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:365:6805":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4929:10412":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:10313:7822":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:1554:2187":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:727:6982":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:8632:23583":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:8384:17034":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:40584:7453":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:40128:28304":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:12013:797":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:8488:2148":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:6323:7111":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:3385:9440":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"17:10786:7338":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"14:215:9135":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:9875:7801":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:11853:2148":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:1583:7384":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:7609:10886":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:4409:6355":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13795:8444":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:6637:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:3934:6837":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:7588:6893":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:44423:9674":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:46285:9708":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:9604:6990":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}