{"root":"0:0:1733","crate_version":"0.4.0","includes_private":false,"index":{"0:22:1878":{"id":"0:22:1878","crate_id":0,"name":"decode_to_string","span":{"filename":"src/punycode.rs","begin":[46,0],"end":[48,1]},"visibility":"public","docs":"Convert Punycode to an Unicode `String`.\n\nThis is a convenience wrapper around `decode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12386:2018":{"id":"1:12386:2018","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2257-0:170:1711":{"id":"b:1:2257-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2251:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2259:2091"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:715":{"id":"0:109:715","crate_id":0,"name":"from","span":{"filename":"src/uts46.rs","begin":[704,4],"end":[710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["e",{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12350":{"id":"1:12350","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12351:836","1:12352:2023","1:12353:35140","1:12354:35141","1:12356:35142","1:12359:31879","1:12360:35143","1:12361:320","1:12362:319","1:12363:1917","1:12365:28636","1:12367:28637","1:12369:28638","1:12371:35144","1:12372:35145","1:12373:31917","1:12374:31918","1:12375:1880","1:12376:9707","1:12377:1899","1:12378:28513","1:12379:28503","1:12380:7411","1:12381:35146","1:12382:28507","1:12383:28740","1:12386:2018","1:12389:2019","1:12392:6445","1:12396:1893","1:12400:2039","1:12403:28484","1:12406:31927","1:12409:35147","1:12412:35148","1:12415:31929","1:12418:31931","1:12421:35149","1:12424:35150","1:12427:1993","1:12430:35151","1:12433:35152","1:12436:35153","1:12439:35154","1:12441:35155","1:12443:35156","1:12445:35157","1:12446:35158","1:12447:35159","1:12450:35160","1:12453:2041","1:12456:31933","1:12459:35161","1:12462:35162","1:12465:35163","1:12468:35164","1:12470:1894","1:12471:31813","1:12472:31815","1:12473:31816","1:12474:31817","1:12475:35165","1:12477:11468","1:12478:35166"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108":{"id":"0:108","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[703,0],"end":[711,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2540:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:109:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12354:35141":{"id":"1:12354:35141","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:35822":{"id":"5:5517:35822","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2188","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1724":{"id":"0:95:1724","crate_id":0,"name":"use_std3_ascii_rules","span":{"filename":"src/uts46.rs","begin":[539,4],"end":[542,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2581:128":{"id":"1:2581:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31941:9943","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12359:31879":{"id":"1:12359:31879","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11612:6517"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:2328-0:161:1710":{"id":"a:1:8557:2328-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8557:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2573-0:161:1710":{"id":"b:1:2573-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2543:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2576:128","1:2577:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12400:2039":{"id":"1:12400:2039","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12052:2197","`DoubleEndedIterator`":"1:7473:121","prim@char":"4:12049:428","str::split_whitespace":"1:12378:28513","str::rsplit":"1:12406:31927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43398:6528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12441:35155":{"id":"1:12441:35155","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12382:28507":{"id":"1:12382:28507","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43690:6536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2563-0:161:1710":{"id":"b:1:2563-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2566:2056"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:60":{"id":"0:184:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1725":{"id":"0:97:1725","crate_id":0,"name":"verify_dns_length","span":{"filename":"src/uts46.rs","begin":[551,4],"end":[554,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2582:1528":{"id":"1:2582:1528","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[537,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:1724","0:96:1982","0:97:1725","0:98:2017","0:99:1986","0:100:1720","0:102:1732"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8558:2327-0:161:1710":{"id":"a:1:8558:2327-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8558:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12365:28636":{"id":"1:12365:28636","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41438:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2257-0:155:1712":{"id":"b:1:2257-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2251:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2259:2091"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:1723":{"id":"0:118:1723","crate_id":0,"name":"domain_to_ascii_strict","span":{"filename":"src/lib.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\nwith the `beStrict` flag set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12356:35142":{"id":"1:12356:35142","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12354:35141"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2829:2303-0:161:1710":{"id":"a:1:2829:2303-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2829:2303","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:87:2046":{"id":"0:87:2046","crate_id":0,"name":"to_ascii_inner","span":{"filename":"src/uts46.rs","begin":[450,4],"end":[476,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12406:31927":{"id":"1:12406:31927","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12052:2197","`DoubleEndedIterator`":"1:7473:121","prim@char":"4:12049:428","str::split":"1:12400:2039"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43416:6526","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:161:1710":{"id":"0:114-0:161:1710","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Config","name":"Config","id":"0:161:1710","glob":false}}},"b:1:3408-0:170:1711":{"id":"b:1:3408-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3406:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3410:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2573-0:170:1711":{"id":"b:1:2573-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2543:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2576:128","1:2577:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:35822","5:5518:2048","5:5521:35823","5:5524:35824","5:5532:35825","5:5533:35826","5:5534:2254","5:5535:33019","5:5536:33020"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2262:27823":{"id":"1:2262:27823","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12374:31918":{"id":"1:12374:31918","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12373:31917"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2563-0:155:1712":{"id":"b:1:2563-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2566:2056"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2772:223-0:170:1711":{"id":"a:1:2772:223-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12380:7411":{"id":"1:12380:7411","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43652:6523","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12470:1894":{"id":"1:12470:1894","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8557:2328-0:170:1711":{"id":"a:1:8557:2328-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8557:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2259:2091":{"id":"1:2259:2091","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:626":{"id":"0:46:626","crate_id":0,"name":"encode","span":{"filename":"src/punycode.rs","begin":[226,0],"end":[231,1]},"visibility":"public","docs":"Convert Unicode to Punycode.\n\nReturn None on overflow, which can only happen on inputs that would take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"char"}}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:155:1712":{"id":"0:116-0:155:1712","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,39],"end":[54,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Idna","name":"Idna","id":"0:155:1712","glob":false}}},"1:12430:35151":{"id":"1:12430:35151","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12052:2197","`DoubleEndedIterator`":"1:7473:121","prim@char":"4:12049:428","str::matches":"1:12427:1993"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43620:6533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1732":{"id":"0:91:1732","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[502,4],"end":[508,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[521,0],"end":[535,1]},"visibility":"default","docs":"The defaults are that of https://url.spec.whatwg.org/#idna","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:93:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[441,0],"end":[509,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:964","0:87:2046","0:88:1720","0:91:1732"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2569:715":{"id":"1:2569:715","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2578-0:155:1712":{"id":"b:1:2578-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2581:128","1:2582:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:170:1711":{"id":"0:170:1711","crate_id":0,"name":"Errors","span":{"filename":"src/uts46.rs","begin":[602,0],"end":[615,1]},"visibility":"public","docs":"Errors recorded during UTS #46 processing.\n\nThis is opaque for now, indicating what types of errors have been encountered at least once.\nMore details may be exposed in the future.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8557:2328-0:170:1711","a:1:8558:2327-0:170:1711","a:1:2789:231-0:170:1711","a:1:2772:223-0:170:1711","a:1:2829:2303-0:170:1711","b:1:2257-0:170:1711","b:1:2260-0:170:1711","b:1:2563-0:170:1711","b:1:3408-0:170:1711","b:1:2573-0:170:1711","b:1:2567-0:170:1711","b:1:2578-0:170:1711","b:5:5778-0:170:1711","0:110","0:106","0:183","0:108","0:111"]}}},"0:115-0:170:1711":{"id":"0:115-0:170:1711","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,31],"end":[54,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::uts46::Errors","name":"Errors","id":"0:170:1711","glob":false}}},"5:5535:33019":{"id":"5:5535:33019","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12473:31816"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1720":{"id":"0:100:1720","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[569,4],"end":[573,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2829:2303-0:170:1711":{"id":"a:1:2829:2303-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2829:2303","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12443:35156":{"id":"1:12443:35156","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12459:35161":{"id":"1:12459:35161","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12462:35162":{"id":"1:12462:35162","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12361:320":{"id":"1:12361:320","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12362:319","`u8`":"4:12066:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:35824":{"id":"5:5524:35824","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:2254":{"id":"5:5534:2254","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:27994":{"id":"5:684:27994","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12376:9707":{"id":"1:12376:9707","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12049:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43374:6522","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3408-0:161:1710":{"id":"b:1:3408-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3406:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3410:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12362:319":{"id":"1:12362:319","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12066:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1732":{"id":"0:102:1732","crate_id":0,"name":"to_unicode","span":{"filename":"src/uts46.rs","begin":[576,4],"end":[581,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToUnicode","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2567-0:170:1711":{"id":"b:1:2567-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12424:35150":{"id":"1:12424:35150","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12447:35159":{"id":"1:12447:35159","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12077:6513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12468:35164":{"id":"1:12468:35164","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12013:127","`FromStr`":"1:12012:2193"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12012:2193","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12012:2193","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12381:35146":{"id":"1:12381:35146","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43662:6525","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:35823":{"id":"5:5521:35823","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3408-0:155:1712":{"id":"b:1:3408-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3406:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3410:1542"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:155:1712":{"id":"0:155:1712","crate_id":0,"name":"Idna","span":{"filename":"src/uts46.rs","begin":[435,0],"end":[439,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:85","a:1:8557:2328-0:155:1712","a:1:8558:2327-0:155:1712","a:1:2789:231-0:155:1712","a:1:2772:223-0:155:1712","a:1:2829:2303-0:155:1712","b:1:2257-0:155:1712","b:1:2260-0:155:1712","b:1:2563-0:155:1712","b:1:3408-0:155:1712","b:1:2573-0:155:1712","b:1:2567-0:155:1712","b:1:2578-0:155:1712","0:159"]}}},"1:12433:35152":{"id":"1:12433:35152","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12052:2197","`DoubleEndedIterator`":"1:7473:121","prim@char":"4:12049:428","str::rmatch_indices":"1:12436:35153"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43548:6534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12456:31933":{"id":"1:12456:31933","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12383:28740":{"id":"1:12383:28740","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12453:2041":{"id":"1:12453:2041","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:689":{"id":"0:107:689","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[649,4],"end":[700,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9456:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9437:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12369:28638":{"id":"1:12369:28638","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12389:2019":{"id":"1:12389:2019","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2789:231-0:170:1711":{"id":"a:1:2789:231-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12446:35158":{"id":"1:12446:35158","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12471:31813":{"id":"1:12471:31813","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39470:28228","Self::is_ascii":"1:12470:1894"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39470:28228","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2257-0:161:1710":{"id":"b:1:2257-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2251:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2259:2091"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2260-0:155:1712":{"id":"b:1:2260-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2254:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:27823"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2273:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:168:432"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12415:31929":{"id":"1:12415:31929","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197","str::rsplitn":"1:12418:31931"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43502:6531","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12375:1880":{"id":"1:12375:1880","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12049:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43368:1915","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2567-0:155:1712":{"id":"b:1:2567-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:1923":{"id":"0:44:1923","crate_id":0,"name":"encode_str","span":{"filename":"src/punycode.rs","begin":[217,0],"end":[220,1]},"visibility":"public","docs":"Convert an Unicode `str` to Punycode.\n\nThis is a convenience wrapper around `encode`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:1982":{"id":"0:96:1982","crate_id":0,"name":"transitional_processing","span":{"filename":"src/uts46.rs","begin":[545,4],"end":[548,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2772:223-0:161:1710":{"id":"a:1:2772:223-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[601,9],"end":[601,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2614:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:184:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2789:231-0:161:1710":{"id":"a:1:2789:231-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12409:35147":{"id":"1:12409:35147","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12052:2197","str::split":"1:12400:2039","prim@char":"4:12049:428","`DoubleEndedIterator`":"1:7473:121","str::rsplit_terminator":"1:12412:35148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43448:6529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12396:1893":{"id":"1:12396:1893","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41438:181","prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12421:35149":{"id":"1:12421:35149","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12367:28637":{"id":"1:12367:28637","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12436:35153":{"id":"1:12436:35153","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12052:2197","`DoubleEndedIterator`":"1:7473:121","prim@char":"4:12049:428","str::match_indices":"1:12433:35152"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43566:6535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:2048":{"id":"5:5518:2048","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12351:836":{"id":"1:12351:836","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12049:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12363:1917":{"id":"1:12363:1917","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41438:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5778-0:170:1711":{"id":"b:5:5778-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5776:235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5780:1506"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2578-0:161:1710":{"id":"b:1:2578-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2581:128","1:2582:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2789:231-0:155:1712":{"id":"a:1:2789:231-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2789:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8557:2328-0:155:1712":{"id":"a:1:8557:2328-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8557:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[714,0],"end":[714,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["provide","source","description","type_id","cause"],"trait":{"name":"Error","id":"1:2625:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:119:1731":{"id":"0:119:1731","crate_id":0,"name":"domain_to_unicode","span":{"filename":"src/lib.rs","begin":[84,0],"end":[86,1]},"visibility":"public","docs":"The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.\n\nReturn the Unicode representation of a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand decoding Punycode as necessary.\n\nThis may indicate [syntax violations](https://url.spec.whatwg.org/#syntax-violation)\nbut always returns a string for the mapped domain.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"tuple":[{"resolved_path":{"name":"alloc::string::String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12412:35148":{"id":"1:12412:35148","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12052:2197","str::split":"1:12400:2039","prim@char":"4:12049:428","str::split_terminator":"1:12409:35147"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43466:6527","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12472:31815":{"id":"1:12472:31815","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12473:31816":{"id":"1:12473:31816","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:60":{"id":"0:93:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[522,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:556":{"id":"0:24:556","crate_id":0,"name":"decode","span":{"filename":"src/punycode.rs","begin":[55,0],"end":[57,1]},"visibility":"public","docs":"Convert Punycode to Unicode.\n\nReturn None on malformed input or overflow.\nOverflow can only happen on inputs that take more than\n63 encoded bytes, the DNS limit on domain name labels.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["input",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::vec::Vec","id":"5:6900:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"char"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12418:31931":{"id":"1:12418:31931","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12049:428","str::splitn":"1:12415:31929","self::pattern":"1:12052:2197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43520:6530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:964":{"id":"0:86:964","crate_id":0,"name":"new","span":{"filename":"src/uts46.rs","begin":[442,4],"end":[448,5]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["config",{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:60":{"id":"0:160:60","crate_id":0,"name":"default","span":{"filename":"src/uts46.rs","begin":[434,9],"end":[434,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:161:1710":{"id":"0:161:1710","crate_id":0,"name":"Config","span":{"filename":"src/uts46.rs","begin":[512,0],"end":[518,1]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:94","a:1:8557:2328-0:161:1710","a:1:8558:2327-0:161:1710","a:1:2789:231-0:161:1710","a:1:2772:223-0:161:1710","a:1:2829:2303-0:161:1710","b:1:2257-0:161:1710","b:1:2260-0:161:1710","b:1:2563-0:161:1710","b:1:3408-0:161:1710","b:1:2573-0:161:1710","b:1:2567-0:161:1710","b:1:2578-0:161:1710","b:5:680-0:161:1710","0:92","0:167","0:169"]}}},"b:1:2573-0:155:1712":{"id":"b:1:2573-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2543:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2576:128","1:2577:1529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:682:7216":{"id":"5:682:7216","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:112:689":{"id":"0:112:689","crate_id":0,"name":"fmt","span":{"filename":"src/uts46.rs","begin":[717,4],"end":[719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9456:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9437:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12352:2023":{"id":"1:12352:2023","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12360:35143":{"id":"1:12360:35143","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:35826":{"id":"5:5533:35826","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2188","`String`":"5:7475:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169":{"id":"0:169","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[511,16],"end":[511,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2784:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12373:31917":{"id":"1:12373:31917","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12374:31918"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2829:2303-0:155:1712":{"id":"a:1:2829:2303-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2829:2303","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12392:6445":{"id":"1:12392:6445","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41438:181","prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41436:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12353:35140":{"id":"1:12353:35140","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106":{"id":"0:106","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[648,0],"end":[701,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9481:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:107:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2772:223-0:155:1712":{"id":"a:1:2772:223-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2772:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2260-0:161:1710":{"id":"b:1:2260-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2254:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:27823"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12475:35165":{"id":"1:12475:35165","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4556:35165"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43697:6484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:35825":{"id":"5:5532:35825","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12372:35145":{"id":"1:12372:35145","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12055:1448","crate::ops::IndexMut":"1:3073:2184","str::slice_unchecked":"1:12371:35144"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12445:35157":{"id":"1:12445:35157","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2577:1529":{"id":"1:2577:1529","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:27993":{"id":"5:683:27993","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12465:35163":{"id":"1:12465:35163","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12072:6514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12379:28503":{"id":"1:12379:28503","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12378:28513"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43681:6537","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:1708":{"id":"0:7:1708","crate_id":0,"name":"punycode","span":{"filename":"src/punycode.rs","begin":[9,0],"end":[316,1]},"visibility":"public","docs":"Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.\n\nSince Punycode fundamentally works on unicode code points,\n`encode` and `decode` take and return slices and vectors of `char`.\n`encode_str` and `decode_to_string` provide convenience wrappers\nthat convert from and to Rust‚Äôs UTF-8 based `str` and `String` types.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:1878","0:24:556","0:44:1923","0:46:626"],"is_stripped":false}}},"5:5780:1506":{"id":"5:5780:1506","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12478:35166":{"id":"1:12478:35166","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4554:35166"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43715:6482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12377:1899":{"id":"1:12377:1899","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43384:6521","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12474:31817":{"id":"1:12474:31817","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12403:28484":{"id":"1:12403:28484","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11868:6538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2566:2056":{"id":"1:2566:2056","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2540:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12378:28513":{"id":"1:12378:28513","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12379:28503"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43672:6524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2567-0:161:1710":{"id":"b:1:2567-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:715"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:161:1710":{"id":"b:5:680-0:161:1710","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2273:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:7216","5:683:27993","5:684:27994"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168:432":{"id":"0:168:432","crate_id":0,"name":"clone","span":{"filename":"src/uts46.rs","begin":[511,9],"end":[511,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Config","id":"0:161:1710","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2578-0:170:1711":{"id":"b:1:2578-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2581:128","1:2582:1528"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:99:1986":{"id":"0:99:1986","crate_id":0,"name":"use_idna_2008_rules","span":{"filename":"src/uts46.rs","begin":[563,4],"end":[566,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1718":{"id":"0:117:1718","crate_id":0,"name":"domain_to_ascii","span":{"filename":"src/lib.rs","begin":[63,0],"end":[65,1]},"visibility":"public","docs":"The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.\n\nReturn the ASCII representation a domain name,\nnormalizing characters (upper-case to lower-case and other kinds of equivalence)\nand using Punycode as necessary.\n\nThis process may fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"alloc::string::String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"uts46::Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12427:1993":{"id":"1:12427:1993","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12052:2197","`DoubleEndedIterator`":"1:7473:121","prim@char":"4:12049:428","str::rmatches":"1:12430:35151"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43602:6532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12439:35154":{"id":"1:12439:35154","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12477:11468":{"id":"1:12477:11468","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4557:11468"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43706:6483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12371:35144":{"id":"1:12371:35144","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12055:1448","str::slice_mut_unchecked":"1:12372:35145","crate::ops::Index":"1:3069:2183"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:3410:1542":{"id":"1:3410:1542","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39283:9666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8558:2327-0:155:1712":{"id":"a:1:8558:2327-0:155:1712","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8558:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Idna","id":"0:155:1712","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8558:2327-0:170:1711":{"id":"a:1:8558:2327-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8558:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:111":{"id":"0:111","crate_id":0,"name":null,"span":{"filename":"src/uts46.rs","begin":[716,0],"end":[720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9486:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:112:689"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1733":{"id":"0:0:1733","crate_id":0,"name":"idna","span":{"filename":"src/lib.rs","begin":[9,0],"end":[86,1]},"visibility":"public","docs":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).\n\nIt also exposes the underlying algorithms from [*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)\nand [Punycode (RFC 3492)](https://tools.ietf.org/html/rfc3492).\n\nQuoting from [UTS #46‚Äôs introduction](http://www.unicode.org/reports/tr46/#Introduction):\n\n> Initially, domain names were restricted to ASCII characters.\n> A system was introduced in 2003 for internationalized domain names (IDN).\n> This system is called Internationalizing Domain Names for Applications,\n> or IDNA2003 for short.\n> This mechanism supports IDNs by means of a client software transformation\n> into a format known as Punycode.\n> A revision of IDNA was approved in 2010 (IDNA2008).\n> This revision has a number of incompatibilities with IDNA2003.\n>\n> The incompatibilities force implementers of client software,\n> such as browsers and emailers,\n> to face difficult choices during the transition period\n> as registries shift from IDNA2003 to IDNA2008.\n> This document specifies a mechanism\n> that minimizes the impact of this transition for client software,\n> allowing client software to access domains that are valid under either system.","links":{},"attrs":["#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:1708","0:114-0:161:1710","0:115-0:170:1711","0:116-0:155:1712","0:117:1718","0:118:1723","0:119:1731"],"is_stripped":false}}},"0:88:1720":{"id":"0:88:1720","crate_id":0,"name":"to_ascii","span":{"filename":"src/uts46.rs","begin":[480,4],"end":[498,5]},"visibility":"public","docs":"http://www.unicode.org/reports/tr46/#ToASCII","links":{},"attrs":["#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["domain",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41581:212","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2576:128":{"id":"1:2576:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2547:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:98:2017":{"id":"0:98:2017","crate_id":0,"name":"check_hyphens","span":{"filename":"src/uts46.rs","begin":[557,4],"end":[560,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"primitive":"bool"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12450:35160":{"id":"1:12450:35160","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12049:428","self::pattern":"1:12052:2197"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12057:2186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2563-0:170:1711":{"id":"b:1:2563-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2540:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2537:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2566:2056"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5536:33020":{"id":"5:5536:33020","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12474:31817"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:170:1711":{"id":"b:1:2260-0:170:1711","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2779:2302","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2254:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Errors","id":"0:170:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:27823"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"1:9500:6559":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"4:8948:17128":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6352:7160":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:1067:9193":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:5404:6886":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:6598:10764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4343:10208":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:43374:6522":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1503:7222":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:9762:36750":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:21782:7279":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"11:1012:9193":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4697:10342":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:4731:10358":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:44332:197":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:943:9187":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12790:8187":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:44149:6506":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:2461:10937":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10440:7868":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13802:8461":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:6574:10747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11582:11564":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3330:2222":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"4:1590:7432":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4608:10328":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:13966:8501":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5816:7137":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:14478:8656":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"22:1034:27647":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecIterator"],"kind":"enum"},"1:39966:6484":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:22783:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:4772:10377":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:7582:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:44117:6504":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:3167:2185":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:12060:663":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"2:234:212":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:7549:10917":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:1495:10027":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:4189:7452":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6968:23597":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:681:7708":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11910:8029":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:2625:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:7571:2223":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12437:8131":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6944:36739":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:40112:6962":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:10294:7217":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:1138:7435":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6877:10889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:43264:7538":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:11104:7543":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:8169:9315":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"16:6687:8871":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"11:844:9190":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:3846:9318":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:11710:7067":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:2363:191":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:8219:6521":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:4500:17055":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6844:8899":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:21357:7277":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:6499:7163":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4465:10273":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:7928:9368":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:1663:10136":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:8181:7182":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:4641:8732":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:7015:8921":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:8205:23603":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:2696:8697":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:2598:9303":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:14355:8620":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11687:23664":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:9531:36748":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:6546:9343":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"20:369:2245":{"crate_id":20,"path":["unicode_bidi","BidiInfo"],"kind":"struct"},"4:2384:16982":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:1671:1116":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"11:403:7421":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:4032:6862":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:3257:11450":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:3975:17029":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:1058:9191":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:6011:7492":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:5017:8743":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:8848:23655":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"0:24:556":{"crate_id":0,"path":["idna","punycode","decode"],"kind":"function"},"5:2959:7216":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7128:9448":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:538:7025":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4348:6565":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:7792:23601":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:45532:9737":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:43342:2191":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:8557:2328":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"4:9493:6943":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"21:228:1949":{"crate_id":21,"path":["unicode_normalization","UnicodeNormalization"],"kind":"trait"},"16:7554:7171":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:12053:317":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:11358:23784":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:5578:17108":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"16:4806:8736":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:42066:7289":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:8239:8988":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:9912:7836":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:1764:628":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:41640:2225":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:10507:7878":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5814:10577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:5646:9334":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:1825:2218":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:12069:1550":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:39938:6492":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:41521:2324":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:40272:7489":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:895:7217":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:2666:6694":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:3989:17030":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11389:7398":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:12645:8166":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:5632:208":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:7006:8918":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11817:6541":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:8547:7454":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:20900:30262":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7102:23598":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:3655:7738":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13010:8236":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:11493:9316":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"12:0:2161":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"21:313:2293":{"crate_id":21,"path":["unicode_normalization","replace","Replacements"],"kind":"struct"},"1:3285:11453":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:5976:10664":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7318:8968":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14001:8510":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:8563:7457":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:45388:9731":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:8320:9418":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:43466:6527":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:10316:7861":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:9038:7248":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:7931:28393":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:11637:9352":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:4240:9320":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"0:118:1723":{"crate_id":0,"path":["idna","domain_to_ascii_strict"],"kind":"function"},"11:2033:8931":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9445:7352":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:14163:8551":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:11405:7465":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:8903:9441":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4589:10327":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12997:8235":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:11175:9439":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:2131:6879":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:7514:10909":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:10109:9453":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"4:871:7219":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:10167:9454":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:2359:8683":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:22220:9644":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13554:8398":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:4807:6919":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:4774:8735":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:7436:7119":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"11:1027:22661":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"9:0:2158":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:3115:9305":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:2543:241":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"20:257:1946":{"crate_id":20,"path":["unicode_bidi","char_data","tables","BidiClass"],"kind":"enum"},"4:922:7222":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4393:6961":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:8011:7243":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:10265:7371":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:11330:7461":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9701:7357":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:276:2188":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:11661:7985":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:32089:6392":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:41908:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12983:8234":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:12697:194":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:0:2165":{"crate_id":17,"path":["object"],"kind":"module"},"5:822:6868":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:14126:8543":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:3997:17031":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12136:8055":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:43225:7536":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:2905:11438":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:5760:9340":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:2537:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:4037:17033":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:6499:6862":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:7435:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:21084:29735":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:42438:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:40202:7478":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"9:393:22583":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4520:10301":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:22237:28421":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:5053:10520":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:8006:9369":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:21036:16656":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:1924:6690":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:10758:9463":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:2618:8694":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:2921:8951":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12959:8231":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:690:7710":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:47762:9786":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:1527:10040":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:8862:7217":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"9:237:9692":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:11833:6956":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:9861:6971":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:22310:9655":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:9486:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:4382:10234":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:5995:7111":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:4751:17045":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:4402:6566":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:2841:2178":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:11214:9347":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:96:7341":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"4:3305:9313":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:6485:7162":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:44405:9729":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:7555:10918":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7475:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6915:7167":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2780:6385":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:582:7725":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:562:10005":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:5419:7036":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:8293:10942":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:12070:1547":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"5:207:6860":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"22:728:6831":{"crate_id":22,"path":["tinyvec","slicevec","retain","JoinOnDrop"],"kind":"struct"},"6:6680:10799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:727:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:3322:11454":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6156:8810":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:6376:23594":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:2921:212":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:3251:11448":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:3232:8680":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:41752:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14134:8544":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:3764:8718":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:11000:7939":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:11815:8002":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:2326:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:10447:7871":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"11:793:7428":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:41422:9628":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:1044:8931":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:657:2225":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:40283:7494":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6415:8835":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:2060:9193":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:11195:7276":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"22:636:7333":{"crate_id":22,"path":["tinyvec","arrayvec_drain","ArrayVecDrain"],"kind":"struct"},"6:6697:10800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6031:10686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:590:7695":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:6401:7161":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:2547:240":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10420:7775":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:7664:9353":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:1545:10051":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:46077:9756":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6204:7138":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:0:1735":{"crate_id":21,"path":["unicode_normalization"],"kind":"module"},"1:40704:7513":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:21205:16659":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:1760:9484":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:9705:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:40742:6969":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8986:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10214:7370":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5982:7399":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13922:8490":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:39283:9666":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:2339:7097":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:4709:17081":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:46569:9766":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:11053:6947":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:7530:7725":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:39973:6485":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:2526:8690":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13055:8245":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4476:428":{"crate_id":1,"path":["core","char"],"kind":"module"},"6:1595:10084":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13685:8446":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14434:8641":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:416:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:41331:7288":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:5846:2174":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6456:8838":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:782:6865":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"4:12031:33607":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:1076:9197":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10561:7882":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:14499:8659":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9242:7055":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:45787:9747":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:5455:9332":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:10534:7880":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:13174:8268":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:40079:11485":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:9026:9447":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12876:8215":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9660:36752":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:5390:9325":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:10575:7883":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13274:7067":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:1845:7430":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:3212:7429":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:14024:8515":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:20868:30022":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:13422:8292":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:41947:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:10551:9312":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:6361:8829":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:12056:1532":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:4124:7262":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12123:8054":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:836:9189":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"4:2366:10962":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:9740:11558":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:44375:9726":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:12047:379":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:41581:212":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"16:5363:8748":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:9697:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:47505:9776":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10949:7936":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:5712:7127":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:40752:7519":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:10425:7526":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:1590:10082":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9168:28357":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:30193:6652":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:9173:7272":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:5137:193":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:42748:7295":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"4:853:7218":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:2562:6915":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:10860:33628":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:10351:34644":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:2966:36657":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"0:0:1733":{"crate_id":0,"path":["idna"],"kind":"module"},"11:986:9191":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"11:332:6852":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:6616:6934":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:9176:9451":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"4:638:9292":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:1702:10153":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:9945:7058":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:40727:7516":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:766:27622":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11407:23661":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:41573:195":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:1895:6689":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:10800:9468":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"14:40:8030":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:5373:17165":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"4:4478:17054":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11295:7396":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:8557:7217":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"16:2766:8700":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:4889:8739":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:47443:9775":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4498:10288":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"21:198:2294":{"crate_id":21,"path":["unicode_normalization","stream_safe","StreamSafe"],"kind":"struct"},"4:5575:10701":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:8158:7247":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:14324:8613":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:45740:9746":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:9051:23638":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:4826:10400":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:358:9288":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:41869:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:11281:7066":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:10851:33618":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:2406:8685":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4812:10396":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:1464:7219":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:7884:23602":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"11:2186:36734":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:4363:6888":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11934:8030":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:22651:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:4074:7218":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"14:0:2162":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:47716:9782":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6818:8898":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13040:8241":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:7451:9287":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6607:10770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13259:8280":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7269:36743":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6893:7123":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13868:8477":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14118:8541":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:1103:9196":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:22303:10964":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:7398:11520":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:4051:17035":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"15:306:7410":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11235:7960":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:364:9289":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:41302:11530":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:2428:8686":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:4138:7449":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14448:8648":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:46693:9768":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:43804:9700":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"15:288:7405":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13085:8248":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:40733:7518":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"14:160:9176":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:6792:6418":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:41830:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13071:8246":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:21436:16992":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12225:8077":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:5696:23590":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:1776:2222":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:7722:7179":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:12057:2186":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:6742:8884":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:8713:23651":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:42195:6554":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:3741:9316":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6616:10771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13567:8405":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:2944:11444":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:43997:9716":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:40018:6481":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:13710:8448":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:11307:6950":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:10812:7244":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:7287:10898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:8826:7233":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:44121:6507":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:43520:6530":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:8808:7458":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:21337:16652":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12154:8063":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:805:16944":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4558:10317":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"13:226:7188":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"10:44:7190":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:9437:212":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:45408:9732":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:11534:9317":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:2888:11435":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:6651:6862":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:7287:7228":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:3649:2225":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:8072:9078":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:14173:8556":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:7584:10925":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:10603:7886":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:44172:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"13:110:36735":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:327:7675":{"crate_id":20,"path":["unicode_bidi","prepare","IsolatingRunSequence"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:10468:7060":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:12945:8229":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:9086:7036":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:49709:16667":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:6714:10805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:568:10008":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:2962:10934":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:8304:9417":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:7669:9355":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:11833:6543":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:8985:7235":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:1442:2225":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:43185:7531":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4652:10332":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:3264:9310":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"0:117:1718":{"crate_id":0,"path":["idna","domain_to_ascii"],"kind":"function"},"4:558:9291":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:4830:17042":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:47826:9790":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"20:383:2246":{"crate_id":20,"path":["unicode_bidi","Paragraph"],"kind":"struct"},"4:840:7217":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7828:9036":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:30153:2215":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"22:966:6846":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecSplice"],"kind":"struct"},"17:13451:8312":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:10929:7935":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:10383:7864":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:574:7691":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:7718:16932":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:2999:11445":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:707:6515":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:2499:9302":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:21335:16992":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:7690:6945":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:43681:6537":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10240:7058":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:7257:36183":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:719:7713":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"10:0:2159":{"crate_id":10,"path":["adler"],"kind":"module"},"1:41410:9626":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:21219:11400":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:39877:9667":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:15:2134":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:2782:229":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:7532:10912":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6226:8815":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:1102:7434":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:10787:9364":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:1585:7431":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:4053:8723":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:1302:9197":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:5743:8761":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"11:1818:7217":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:20840:7286":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:39950:6482":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:4274:9618":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:7503:8712":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:8559:2326":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:8244:7448":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:491:7690":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13135:8265":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10520:7879":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:7474:9009":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:7660:9026":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7736:9027":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:3188:34970":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:42933:9696":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:5091:9324":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:573:10010":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"21:259:36797":{"crate_id":21,"path":["unicode_normalization","decompose","DecompositionType"],"kind":"enum"},"6:4718:10354":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:31981:8988":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"11:1501:22662":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:10498:6526":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:4344:8724":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:40760:7521":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10410:7865":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12621:8165":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4910:10444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:9498:6558":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:6268:36741":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:45863:9749":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:2251:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"17:14346:8618":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4835:10403":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:44153:7276":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:9137:7052":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:4526:10304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:9147:689":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"4:6433:7515":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:14460:8650":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:11070:6949":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"11:760:2222":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"13:0:2156":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5435:8749":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:6881:11524":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:6602:17123":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:3020:2307":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:41632:7218":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"15:0:2163":{"crate_id":15,"path":["addr2line"],"kind":"module"},"9:177:7206":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:1520:10037":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:8884:9335":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"14:187:22674":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:1631:10113":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:47788:9788":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:7217:2225":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11272:7962":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:2216:9301":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:12737:8180":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:622:6691":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:41245:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6017:23592":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7768:7180":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:7271:2225":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:4924:17080":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:1822:2225":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"4:4634:17032":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:5673:8708":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:40711:7514":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:44367:9724":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:3069:2183":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:10980:7039":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13575:8406":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:5784:10560":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:10777:10951":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"8:0:2157":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:39244:11446":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6901:7166":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:1911:18607":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:4269:9617":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13792:8460":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13816:8462":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:9488:7444":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:43620:6533":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:2834:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:21258:16655":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:4915:17079":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:46055:9755":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6513:8840":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:4306:10180":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"4:10973:9333":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:3594:7218":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:749:2174":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:21469:7277":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:2540:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"18:609:7702":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"11:667:7221":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"23:0:2269":{"crate_id":23,"path":["tinyvec_macros"],"kind":"module"},"6:500:9965":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:40340:7501":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:2035:7245":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:12015:7254":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:3217:36690":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7555:2222":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"11:723:7219":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"20:223:7671":{"crate_id":20,"path":["unicode_bidi","data_source","BidiMatchedOpeningBracket"],"kind":"struct"},"1:40324:7499":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:42709:7293":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:149:6847":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:5492:6886":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"4:4578:17072":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10318:7218":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"22:752:6841":{"crate_id":22,"path":["tinyvec","slicevec","SliceVecDrain"],"kind":"struct"},"1:12842:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:9921:7838":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13113:8254":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:2382:16981":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:3270:28355":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:2368:16977":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:22274:28414":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"20:348:2243":{"crate_id":20,"path":["unicode_bidi","ParagraphInfo"],"kind":"struct"},"4:11623:34723":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:45703:9744":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:7865:9364":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:8978:23659":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:12061:767":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:44314:207":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"22:1122:7663":{"crate_id":22,"path":["tinyvec","arrayvec","TryFromSliceError"],"kind":"struct"},"5:3800:2222":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:11761:7995":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:2933:22730":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:39898:28402":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:39914:6489":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:39992:6487":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:7150:7246":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11062:7390":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:1573:7429":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:47736:9784":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:10591:6945":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:40305:7497":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11162:7949":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:3936:6886":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:4835:8737":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:12711:8177":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:45454:9734":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5808:10576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:434:7723":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:534:6910":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:7733:16933":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:12890:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:43662:6525":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:1569:10068":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:9046:9448":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:2357:184":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:4391:10239":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:10430:7867":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"11:968:8931":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:119:17258":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:7500:2176":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:494:9963":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:526:9985":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"7:32:22568":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:918:7221":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13228:8274":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4008:9615":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:31977:9363":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:12911:8226":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13973:8502":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:43251:7476":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:43194:7533":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1513:10035":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:8971:9442":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:4055:11469":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:4160:7450":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:12054:1418":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"5:2970:36658":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:7304:10907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:4462:8726":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:39297:7663":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:1426:7218":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:46647:9767":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:4985:6886":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:10782:10953":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:12048:961":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"5:878:6870":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:9288:7442":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6145:10715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:4623:6477":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:7520:10910":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:46009:9753":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:21690:16665":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:13851:8472":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:6783:2228":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:1733:10165":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:7561:10919":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:8167:9090":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:6900:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"20:315:36763":{"crate_id":20,"path":["unicode_bidi","explicit","OverrideStatus"],"kind":"enum"},"1:5610:7269":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"0:7:1708":{"crate_id":0,"path":["idna","punycode"],"kind":"module"},"1:2900:11437":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2832:6389":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:7538:10913":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12237:8080":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:14145:8548":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10292:7039":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:907:2222":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:43277:7539":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:4831:818":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:39017:11455":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12750:8182":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:3391:7518":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"11:1048:36733":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:42188:6555":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:21172:16664":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:6944:6904":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:9494:6557":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6634:10780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:10146:225":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:6320:17131":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12554:8152":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10672:7381":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:43782:11600":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7473:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"20:249:128":{"crate_id":20,"path":["unicode_bidi","level","Error"],"kind":"enum"},"1:42484:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"9:486:22581":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:8794:23653":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:11226:7959":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:43448:6529":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:4176:17052":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:44129:6508":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7067:8928":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:7872:7244":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11490:7980":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:10685:7896":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:7208:2220":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:504:7724":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:2284:22703":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"9:507:9254":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6086:10703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:8996:9443":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"4:11324:7240":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7534:8713":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4570:10326":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10197:7855":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11327:7964":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:10165:23691":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:12123:11594":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:9617:36753":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10616:7887":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:7422:28400":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9438:6495":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:2638:9304":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:21291:16650":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:5027:10503":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:660:7346":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12934:8227":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:46031:9754":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:22324:9656":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:47689:9780":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:7581:6939":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:40193:7267":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:14378:8633":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13838:8466":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:3315:8715":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:62:17204":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"11:1611:6856":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:4265:209":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:1288:9191":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:13188:8269":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12685:8174":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:3232:7387":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:624:36757":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:14083:8533":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"22:43:27643":{"crate_id":22,"path":["tinyvec","array","Array"],"kind":"trait"},"17:10139:23690":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:12172:8064":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:44137:6510":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10605:7547":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"7:79:22575":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"22:449:6831":{"crate_id":22,"path":["tinyvec","arrayvec","retain","JoinOnDrop"],"kind":"struct"},"1:45885:9750":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:7644:16992":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:22816:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:12722:9638":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:10962:7937":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:44193:9721":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:5588:8707":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"22:0:2268":{"crate_id":22,"path":["tinyvec"],"kind":"module"},"17:11074:7946":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:44145:6505":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:6201:7239":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:8115:9083":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"14:7:9176":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:1831:2222":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:9574:36751":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:6077:6923":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:8895:23656":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12778:8186":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14056:8526":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:22684:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:10548:9310":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"4:8854:9440":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:4155:7263":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:2939:11443":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:7408:9282":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:8342:10780":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:20898:30259":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"21:291:36796":{"crate_id":21,"path":["unicode_normalization","recompose","RecompositionState"],"kind":"enum"},"1:7890:11518":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:2851:8944":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:14090:8534":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:3513:33594":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4438:10261":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:43976:11601":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:1690:10149":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:39134:200":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"4:10988:33620":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:7029:6937":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:7651:9025":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:43398:6528":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:7782:9028":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12513:8148":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:11351:7966":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:1781:7440":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:8953:23658":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6735:10811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13487:8343":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:12071:812":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"0:22:1878":{"crate_id":0,"path":["idna","punycode","decode_to_string"],"kind":"function"},"6:5858:10597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:1523:7436":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5909:10622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:644:7218":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3230:11447":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:12945:2219":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:4403:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:7595:10926":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"11:695:7222":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11023:7940":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4725:10355":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:1557:10060":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:4820:10399":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"11:1538:9199":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12062:8044":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:7600:6941":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:30223:28416":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:13024:8239":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:6364:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:6086:6886":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:22145:7257":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:1838:7429":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:11611:7253":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"11:2049:9191":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"15:327:7184":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:8415:9429":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:13148:8266":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:11507:23663":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:8298:17053":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:5317:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:2923:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"11:1852:7431":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12846:8196":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:582:7286":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"10:36:9946":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:6139:10714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:9328:6521":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5010:10495":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10788:23758":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:6902:6936":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"4:7645:9290":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:5552:7484":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:8870:7460":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:25797:250":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:12670:30486":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6243:8818":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:41624:7217":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:47707:9781":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:46253:9761":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"4:955:9190":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:22161:7281":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:7472:10908":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10386:6538":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:5648:8755":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:43176:7530":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:41554:2325":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:5440:9331":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12576:8159":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:1579:7430":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:4168:7451":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11573:7071":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6041:23593":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:22129:7280":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:7394:11521":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:5070:10524":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"4:932:16944":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:10591:6530":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:3266:9311":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:5619:2228":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:32002:7470":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:40037:9671":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:4047:17034":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"9:52:7191":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12267:8092":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:3461:8716":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:3185:34448":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6425:8836":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10738:7385":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:2862:11432":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2534:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:6189:7496":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:7284:2324":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:4497:8727":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:8225:6528":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:8149:7246":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:41564:6551":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:8134:9086":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:7767:9362":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:4032:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:13906:8486":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"20:336:2242":{"crate_id":20,"path":["unicode_bidi","Direction"],"kind":"enum"},"3:0:2155":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:1429:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:10107:7469":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"22:669:7021":{"crate_id":22,"path":["tinyvec","slicevec","SliceVec"],"kind":"struct"},"1:74:1549":{"crate_id":1,"path":["core","u32"],"kind":"module"},"6:5776:10558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10628:7890":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"20:97:1945":{"crate_id":20,"path":["unicode_bidi","char_data","bidi_class"],"kind":"function"},"1:41285:9625":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10903:7386":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:43652:6523":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5746:10533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5046:10517":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1118:36656":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:2321:8681":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:1842:7443":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:3051:11451":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"4:12052:1078":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:40231:7483":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:12648:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:646:16929":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:31941:9943":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:41512:2225":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:12252:8086":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12012:2193":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4994:10490":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6346:7158":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:2881:8705":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12305:8100":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4376:10232":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11151:7395":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4666:10333":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:43204:7534":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:8097:9081":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14100:8537":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:285:7416":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:10278:7860":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:1751:10960":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:9852:23672":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"14:215:9181":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:2915:8950":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:2170:7223":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:9492:6556":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:5369:17164":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:2254:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4370:10231":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:11617:7983":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13826:8463":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:40263:7488":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:3171:7217":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:6549:17121":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:481:7689":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:8594:23639":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:2864:8704":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:2772:223":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:21343:16654":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:40184:7265":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:1931:674":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"16:4949:8741":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:41674:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:1482:7428":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:1673:10142":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:2888:6918":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11137:7544":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:6083:22702":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:46757:9770":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:1561:2225":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:2931:11441":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6850:10883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:5322:8747":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:261:7721":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5866:8771":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:6437:9342":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4485:10283":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:40212:7268":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:1068:9195":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:636:7707":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13897:8485":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:913:7428":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:9081:7250":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:7381:34510":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:10771:7901":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10397:7380":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11598:9632":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5830:8764":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"4:7912:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:3669:6862":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12293:8097":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:798:9184":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:736:27621":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:12765:8185":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:6195:10963":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"4:5753:9337":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:2219:6908":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:6279:7153":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9003:23660":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4317:10188":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:7541:9476":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4862:8738":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6929:7168":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"4:11187:33616":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:21128:16663":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:2876:11436":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:43925:9636":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:13611:8435":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:14282:8600":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:7137:7462":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:39276:9665":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9752:7358":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:12278:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:8666:2186":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"11:1517:9198":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:897:2174":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:11612:6517":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"5:1473:7220":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:5135:6894":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:1709:10156":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:2779:2302":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:43690:6536":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:9521:7354":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:3348:17015":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:1634:604":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:12055:1448":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:10661:7895":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10084:7367":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:9198:33796":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"9:330:9947":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:8016:17018":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:12020:16934":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10547:7881":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:39871:6483":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2794:2214":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:1568:2222":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13162:8267":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:3406:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:2960:36660":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:2472:8688":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:10646:7892":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11991:7074":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14335:8617":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:6256:6929":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:9745:7275":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:8249:17025":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:12072:6514":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:1500:10029":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:40518:7509":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:5509:9333":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:14110:8540":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14514:8660":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:1649:10125":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:3529:17010":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:8212:7507":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"6:5899:10615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:589:16927":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1575:10070":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:43833:9708":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:40292:7495":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:6003:10673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:30785:7286":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:6814:10864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9927:6974":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:12853:6925":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:43356:6520":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:5325:6862":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:7464:6895":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:45933:9751":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:12050:1567":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:5088:8745":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:9277:7056":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:30757:185":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:3049:22732":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13215:8273":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:2273:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5060:10523":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:41374:9686":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:12280:8096":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:727:7031":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:2168:9940":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:4422:6393":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:47613:9778":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:2170:11400":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:7523:9021":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:3224:9308":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:39103:7471":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:22618:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11845:8006":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:2243:7226":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13949:8494":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:22197:28424":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:43602:6532":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:4897:10434":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4330:10198":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6843:10880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:400:7722":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:43502:6531":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:3915:8722":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12098:8051":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:21904:16992":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:595:10023":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"22:470:6835":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecSplice"],"kind":"struct"},"4:5832:6921":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:2409:6584":{"crate_id":4,"path":["std","io"],"kind":"module"},"16:6386:8832":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:3073:2184":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:1696:10152":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9780:7359":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:4921:8740":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:2576:6913":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10637:7891":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:4745:8734":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:7573:10921":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10698:7898":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:9172:7053":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:4164:6886":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:21072:16658":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:47113:9772":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14308:8609":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:863:2225":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:43898:9710":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:7860:7444":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9488:36747":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:22915:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4618:10329":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:39158:201":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:2214:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:9207:7054":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:3888:8721":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:3939:17028":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:9998:7815":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:12077:6513":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:9106:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:44133:6512":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:554:10000":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12671:7906":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:1641:6650":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7054:8925":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:4338:6960":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:5403:7035":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:12073:1163":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:4805:30401":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4458:10270":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:641:9294":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"22:948:27646":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVecDrain"],"kind":"enum"},"1:46230:9760":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:9867:7835":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:6859:10886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:40315:7271":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:6332:7156":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:8281:9098":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4844:10409":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:8286:9319":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:399:7420":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10478:7061":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:7279:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:12066:6515":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:42952:7524":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:3303:9312":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:8195:9091":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:5384:23589":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:12184:8067":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:1986:186":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:2788:8701":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:10916:7933":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:6200:6968":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:2670:8696":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:42428:11031":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:474:7426":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:21794:30020":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:3830:8720":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:41487:1916":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:4003:17032":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:22717:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12658:8169":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:7247:6873":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:2305:22729":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:7041:8922":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:7618:10932":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10097:7846":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13876:8480":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:6582:10752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:8:2248":{"crate_id":20,"path":["unicode_bidi","data_source","BidiDataSource"],"kind":"trait"},"4:7739:7230":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:41496:7217":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:8825:23654":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:629:9268":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:39999:6488":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:2880:11434":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11201:7951":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:521:27623":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:1922:9487":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13758:7088":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12698:8175":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:2856:8941":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:536:7109":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:41436:183":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:13632:8440":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:4644:10791":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5963:8780":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13890:8483":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:482:9957":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:22:702":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:11372:9349":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:4712:17054":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:1983:187":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:44030:2187":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11191:7726":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"11:365:6854":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:3447:9413":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"5:7225:7433":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2935:11442":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:42511:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:3679:17026":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:30209:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:7694:7176":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:5827:10578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4750:10366":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:4749:17043":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9070:7035":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:10059:7844":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:11161:7233":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:7391:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:2209:7378":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:44430:9730":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:43987:9712":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"4:11387:9351":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9896:23673":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:0:2166":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:9111:220":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:45478:9735":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3245:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:9959:6979":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:5049:8744":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:4552:10315":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:5424:9330":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4640:10331":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:10443:7458":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:7237:2174":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"20:93:2253":{"crate_id":20,"path":["unicode_bidi","char_data","HardcodedBidiData"],"kind":"struct"},"6:5845:10588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:4002:2174":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:5404:9329":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:45722:9745":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:42027:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:11006:9440":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:11757:6542":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"4:1779:7439":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:7936:7245":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:42718:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:2174:9941":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:266:2279":{"crate_id":21,"path":["unicode_normalization","decompose","Decompositions"],"kind":"struct"},"4:11064:6948":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:12043:7087":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:8990:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:39886:6490":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:9208:10947":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:652:7691":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:22336:11262":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6531:7401":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:1603:10089":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12724:8178":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:43962:9711":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:2810:8702":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:11357:9348":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4680:10334":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11306:7067":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5886:10609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14013:8511":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6753:8885":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:6165:10729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5076:10526":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:8364:9323":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:10726:7900":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:12063:765":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:20853:30022":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:7882:9365":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:10227:7858":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11337:23783":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:1817:7441":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:9490:6555":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:2450:8687":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:43819:9705":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:7526:10911":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1638:10117":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:599:36754":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:7281:10896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10588:7884":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10012:7039":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6627:10776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:8488:9432":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:9481:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"11:736:7220":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:8916:17127":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1411:7217":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:40364:7504":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:39200:203":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:14042:8519":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4491:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12111:8053":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:43125:7529":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:261:6862":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4687:10335":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10456:7874":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10036:7843":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4951:10470":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:0:2160":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:2893:8946":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"4:10822:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12196:8068":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:14401:8634":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13693:8447":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:4940:10465":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:40494:7507":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:14522:8663":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:9372:7037":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11951:8033":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:3010:2304":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:6657:10798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:2012:7372":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4706:10347":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:2868:8945":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:10964:9251":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:22076:9641":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:12052:2197":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:6784:10847":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:12062:764":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:10494:7048":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"4:1557:7217":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5612:8709":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:9823:23671":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7342:36742":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:22585:179":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:12465:8138":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5727:7130":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:41504:7218":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:40222:7480":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4477:10278":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4397:10241":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4986:10488":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:1273:9193":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12208:8069":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:4874:10424":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:44141:6511":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:2504:8689":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:44125:6509":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9650:7039":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4422:10257":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2846:11261":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:4585:8730":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8981:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"22:386:6847":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVec"],"kind":"struct"},"16:6189:8813":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11086:7392":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:926:9184":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:45432:9733":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:4784:397":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"11:2194:9944":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:6980:11511":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:5639:6929":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:3441:7388":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12888:8217":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:5929:10638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"0:46:626":{"crate_id":0,"path":["idna","punycode","encode"],"kind":"function"},"1:9488:6554":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"22:534:7332":{"crate_id":22,"path":["tinyvec","arrayvec","ArrayVecIterator"],"kind":"struct"},"6:5996:10672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:547:9997":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:3191:34969":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:6169:6928":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:671:7351":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:123:17259":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9350:7057":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11719:23665":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:2789:231":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:43850:9709":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:43672:6524":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6545:8846":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:41387:9319":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:541:9994":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7492:9017":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13914:8488":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:9959:7362":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:113:7344":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:13667:8441":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:6572:2225":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"21:320:7667":{"crate_id":21,"path":["unicode_normalization","stream_safe","Decomposition"],"kind":"struct"},"1:42533:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6045:10691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7526:1920":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:1737:11416":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:2832:8703":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:43548:6534":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:5798:7132":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:4426:6888":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:532:9988":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:21441:16651":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"11:119:6850":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:2784:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:45562:9738":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:21086:11400":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11173:23782":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:4802:10393":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:31988:9663":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:9886:7360":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"4:10832:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:515:7688":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10126:7847":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:39958:6483":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12496:8145":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:5060:9324":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:12049:428":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:46101:9757":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:40504:7508":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:13546:8395":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:4508:10295":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:21906:16653":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11971:8043":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:21467:16660":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:1672:6862":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:12074:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:23395:222":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4975:10482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:9607:7356":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:3581:7217":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2927:11440":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9102:7051":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3017:2306":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:47773:9787":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:30387:28427":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:8558:2327":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:9121:9346":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:42456:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:3240:237":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:2150:23716":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:6473:6933":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11872:8014":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11098:7393":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13723:8453":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:46487:9765":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"21:67:1947":{"crate_id":21,"path":["unicode_normalization","lookups","is_combining_mark"],"kind":"function"},"1:46907:9771":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2494:16992":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7308:2225":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2172:11401":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"20:356:2244":{"crate_id":20,"path":["unicode_bidi","InitialInfo"],"kind":"struct"},"1:45663:9742":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:3522:16990":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"6:4471:10275":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5964:10659":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13244:8276":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:10088:7441":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:11381:7971":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:2201:2189":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5121:8746":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11473:7795":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10023:7357":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:6987:11208":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:6304:208":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:43286:7540":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:43214:7535":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:8312:7446":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:42948:11039":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:45584:9739":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:9003:33625":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:43416:6526":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:45500:9736":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:9985:7363":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"20:0:1734":{"crate_id":20,"path":["unicode_bidi"],"kind":"module"},"17:11788:7996":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:4194:6886":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:6583:8847":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12598:8160":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:42209:6557":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12531:8149":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13778:8457":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6829:10871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:5661:8760":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:6560:6849":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:2872:2179":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:276:2291":{"crate_id":21,"path":["unicode_normalization","quick_check","IsNormalized"],"kind":"enum"},"4:9060:33621":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:4648:10795":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"4:11998:9479":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:40032:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:302:2292":{"crate_id":21,"path":["unicode_normalization","recompose","Recompositions"],"kind":"struct"},"4:8338:9420":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:2394:16987":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:4973:17086":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"16:4613:8731":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4864:10418":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4919:10450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"14:31:9176":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3065:7733":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:8686:23650":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:41351:28431":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:10619:7548":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:2690:10940":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6879:8903":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:12065:762":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"5:1492:7221":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:9711:36745":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:45633:9741":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:644:7691":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:6812:2230":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:41649:185":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12024:7080":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2380:8684":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:2178:7375":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:1075:7365":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:10714:7384":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:11547:7982":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:46333:9762":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4856:10413":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:8154:9087":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:949:9189":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:14033:8518":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:2644:8695":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:7613:9024":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:5905:8774":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:14269:8594":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:44388:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10366:7863":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:8926:23657":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:39178:204":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2884:11433":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9790:36746":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:9972:7842":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6802:2229":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:8397:17090":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:43368:1915":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:40718:7515":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4448:10267":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:3600:8717":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:579:10013":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4783:10385":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:7259:10895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:9481:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"9:426:22584":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:8814:188":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:43306:7542":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13202:8272":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:9033:7238":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:8238:7446":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:12059:661":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:6817:17130":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13298:8290":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:531:7692":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6805:10861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:4320:9321":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:22185:9642":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:6024:10685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10370:7379":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:6929:7511":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:5838:10586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:10259:11169":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:39928:6491":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:2986:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6180:10740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:97:9939":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:20883:30261":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:41713:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:506:9968":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:5634:8751":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:2049:9271":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:3465:9314":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:47903:9793":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:42468:9055":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10340:7862":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:2969:22731":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:3735:9271":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:40240:7485":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:29961:11224":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:47864:9792":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:44205:11607":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:3744:9317":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:6720:10807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:1717:10160":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:11399:7464":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:35:2221":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:12068:1549":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"11:1826:2174":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:7862:9040":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:7210:6922":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10186:7853":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:5961:6894":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:40354:7502":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:1121:9197":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:0:508":{"crate_id":1,"path":["core"],"kind":"module"},"14:165:22667":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7568:7172":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:817:9187":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13286:8283":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:653:17616":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:3419:6886":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:12484:8143":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:7363:2189":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:47365:9774":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:2160:605":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6261:7122":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:42701:7292":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:39222:205":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7513:9020":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4293:10171":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:22948:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:40122:9673":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:4415:10253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4796:10390":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:5249:192":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:2531:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:488:9960":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:42730:9692":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:8574:9438":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:5978:6929":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:7621:23600":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:21275:16992":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"9:357:22597":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:2495:11223":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:5930:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:11251:9346":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:40162:7477":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:3014:2305":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4766:10374":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"22:879:27645":{"crate_id":22,"path":["tinyvec","tinyvec","TinyVec"],"kind":"enum"},"1:22882:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:5776:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:3238:7432":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:9140:9347":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"20:231:2249":{"crate_id":20,"path":["unicode_bidi","level","Level"],"kind":"struct"},"1:43566:6535":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:564:7027":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6053:10694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:3178:7430":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:42202:6556":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:47255:9773":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:4527:8728":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:46723:9769":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:8765:23652":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:10136:16992":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:7920:9367":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11868:6538":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"15:394:22694":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:43697:6484":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:1548:6886":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12452:8136":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:5982:17178":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:22023:9640":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4931:10459":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:9159:9450":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:47841:9791":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:11232:10955":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:0:1440":{"crate_id":4,"path":["std"],"kind":"module"},"1:42740:7294":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:8050:9077":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:39470:28228":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"0:119:1731":{"crate_id":0,"path":["idna","domain_to_unicode"],"kind":"function"},"1:47651:9779":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:755:7719":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6696:8872":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11244:7983":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:13739:8456":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:5787:7234":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:5994:208":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:505:6879":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:3032:8714":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:10577:6531":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5017:10498":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5872:10608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1681:10143":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:9456:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:46411:9763":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:11630:9352":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:47747:9785":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:4234:7217":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:5988:10671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:40254:7270":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:3945:17027":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:12066:1551":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:7887:2177":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:614:36755":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1506:10032":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:3226:9309":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:10842:9315":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"11:311:7419":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11261:7961":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"14:202:2173":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:21460:16992":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:9496:196":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"16:6569:7164":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:1536:10045":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11048:7942":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"4:9984:9683":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:5760:23591":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12543:8151":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:41268:9623":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12810:8190":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:14156:8549":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:30281:28432":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9564:7355":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:7544:9022":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:40049:28400":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:10334:9332":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:7597:36738":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:4850:10410":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:7316:2225":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:7751:16963":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:11124:7394":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:40171:7264":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4965:10476":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:10545:9308":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13101:8252":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12373:8102":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"9:450:22582":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:43296:7541":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:8465:9692":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"2:0:453":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:11639:7726":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:43384:6521":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:2548:8691":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:47727:9783":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:7771:9363":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6318:8828":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10343:6528":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:39985:6486":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11111:7947":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:3183:36689":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"4:7895:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:4646:10793":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:4753:17046":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7391:23599":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:44417:9201":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"16:2574:8692":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:39056:11452":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:2826:6387":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:4889:10429":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:8659:23637":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:20881:30257":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5802:10573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:14296:8606":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:3204:7431":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:43706:6483":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4756:10368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:2910:11439":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:12422:8127":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:22849:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:10750:7063":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:6600:23595":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:7489:2175":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4537:10308":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:8932:17126":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:2596:8693":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2744:8699":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6076:10700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"14:221:9183":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:4020:9616":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:4417:8725":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"0:44:1923":{"crate_id":0,"path":["idna","punycode","encode_str"],"kind":"function"},"1:2829:2303":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:43715:6482":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12007:7078":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:1840:7442":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:7744:7229":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:10536:7528":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:6729:10810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:7462:9008":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:3720:7245":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9933:7840":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:44324:213":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11367:7968":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:9455:36749":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:2180:7415":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:2907:8706":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14469:8654":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:14068:8529":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4545:10313":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13676:8445":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:6753:10821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4628:10330":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:45979:9752":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:3504:6495":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:11742:7992":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6792:8897":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7090:8930":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:10463:7527":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12970:8232":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:7438:9285":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14536:8666":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:11178:11414":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:14420:8639":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:4393:6886":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:8202:7264":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"16:7708:7178":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:41988:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11886:8015":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:7582:7173":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:11555:9318":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:9944:6913":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2837:6391":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:5574:7126":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11794:6544":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:21034:16992":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:8121:9407":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"4:9116:221":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:4392:9322":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:11586:7073":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:46199:9759":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2783:228":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:31995:6565":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"4:6153:6925":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:6969:6907":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:12635:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:4986:8742":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:1184:7366":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12473:8140":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:45685:9743":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4789:10388":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:10960:9362":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"4:8840:9439":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:3565:7389":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:4957:10471":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4:1040":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:8878:2225":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:8181:16991":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6960:8907":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:8232:6523":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"6:5082:10529":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:11470:6952":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:30187:2216":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:7855:7605":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:3515:2174":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:4719:8733":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14221:8593":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:41791:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:630:7217":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:7431:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:4449:6567":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:46457:9764":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:8505:17103":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:12086:8048":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:14076:8532":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:4197:6564":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:2223:16974":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"5:1257:8931":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:22212:9643":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:7360:36744":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:10486:6944":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:42493:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:6721:23596":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:6017:10684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"21:145:1948":{"crate_id":21,"path":["unicode_normalization","quick_check","is_nfc"],"kind":"function"},"4:4059:17037":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:6467:8839":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:7567:10920":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"4:12067:1548":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:40065:9672":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13989:8504":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:40142:7476":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:42693:7290":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:7444:2308":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:12064:766":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:10112:7368":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:2223:36185":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4430:10259":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12830:8191":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:46152:9758":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:47811:9789":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"11:1858:7432":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"18:80:7338":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:1011:6862":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11215:7955":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:587:10018":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:6453:2174":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:22258:28410":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11316:7963":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:45833:9748":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7894:11519":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:44010:6516":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:2722:8698":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"18:507:7691":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:45602:9740":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4557:8729":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:5939:7105":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5891:10610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:47567:9777":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4946:10468":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:13981:8503":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11535:7070":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:2321:190":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:3797:8719":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7375:16943":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:2614:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"5:2141:9272":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:11137:7948":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:256:7720":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:7608:10930":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:12072:1607":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:0:2164":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:14316:8612":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:6650:219":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:483:6909":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:4742:10362":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:6037:10689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:39118:202":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11448:23662":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:1564:2174":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:699:7030":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:22750:180":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:21685:16657":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:12074:8047":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:884:7220":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"}},"external_crates":{"23":{"name":"tinyvec_macros","html_root_url":null},"20":{"name":"unicode_bidi","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"tinyvec","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"unicode_normalization","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}