{"root":"0:0:1697","crate_version":"1.4.0","includes_private":false,"index":{"1:12450:25463":{"id":"1:12450:25463","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12334:28581":{"id":"1:12334:28581","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12386:25666":{"id":"1:12386:25666","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12032:3270","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::split":"1:12380:25663"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43378:3229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12330":{"id":"1:12330","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12331:836","1:12332:2177","1:12333:28580","1:12334:28581","1:12336:28582","1:12339:25214","1:12340:28583","1:12341:320","1:12342:319","1:12343:1702","1:12345:23552","1:12347:23553","1:12349:23554","1:12351:28584","1:12352:28585","1:12353:25655","1:12354:25656","1:12355:21834","1:12356:20946","1:12357:24666","1:12358:21769","1:12359:21823","1:12360:28199","1:12361:28586","1:12362:21836","1:12363:23719","1:12366:25672","1:12369:25673","1:12372:2219","1:12376:2176","1:12380:25663","1:12383:21803","1:12386:25666","1:12389:28587","1:12392:28588","1:12395:25668","1:12398:25670","1:12401:28589","1:12404:28590","1:12407:1902","1:12410:28591","1:12413:28592","1:12416:28593","1:12419:28594","1:12421:28595","1:12423:28596","1:12425:28597","1:12426:28598","1:12427:28599","1:12430:28600","1:12433:24888","1:12436:25674","1:12439:28601","1:12442:28602","1:12445:28603","1:12448:28604","1:12450:25463","1:12451:26766","1:12452:25464","1:12453:25460","1:12454:25459","1:12455:28605","1:12457:3030","1:12458:28606"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:28:1697":{"id":"0:28:1697","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"5:5511:2955":{"id":"5:5511:2955","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12353:25655":{"id":"1:12353:25655","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12354:25656"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12380:25663":{"id":"1:12380:25663","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12032:3270","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::split_whitespace":"1:12358:21769","str::rsplit":"1:12386:25666"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43360:3225","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12395:25668":{"id":"1:12395:25668","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270","str::rsplitn":"1:12398:25670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43464:3227","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12452:25464":{"id":"1:12452:25464","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12359:21823":{"id":"1:12359:21823","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12358:21769"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43643:3309","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12341:320":{"id":"1:12341:320","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12342:319","`u8`":"4:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12439:28601":{"id":"1:12439:28601","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1703":{"id":"0:29:1703","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12340:28583":{"id":"1:12340:28583","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12355:21834":{"id":"1:12355:21834","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43330:3298","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12345:23552":{"id":"1:12345:23552","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12453:25460":{"id":"1:12453:25460","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12343:1702":{"id":"1:12343:1702","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41400:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12356:20946":{"id":"1:12356:20946","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12038:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43336:3297","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12361:28586":{"id":"1:12361:28586","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43624:3301","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:3108":{"id":"5:5527:3108","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12455:28605":{"id":"1:12455:28605","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4555:28605"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43659:3052","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12360:28199":{"id":"1:12360:28199","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43614:3299","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12349:23554":{"id":"1:12349:23554","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29265":{"id":"5:5517:29265","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12423:28596":{"id":"1:12423:28596","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12401:28589":{"id":"1:12401:28589","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12352:28585":{"id":"1:12352:28585","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12044:1448","crate::ops::IndexMut":"1:3072:2090","str::slice_unchecked":"1:12351:28584"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12445:28603":{"id":"1:12445:28603","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12457:3030":{"id":"1:12457:3030","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4556:3030"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43668:3031","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12430:28600":{"id":"1:12430:28600","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12362:21836":{"id":"1:12362:21836","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43652:3308","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12383:21803":{"id":"1:12383:21803","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11848:3238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29263","5:5511:2955","5:5514:29264","5:5517:29265","5:5525:29266","5:5526:29267","5:5527:3108","5:5528:25462","5:5529:25461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12347:23553":{"id":"1:12347:23553","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10126:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12354:25656":{"id":"1:12354:25656","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12353:25655"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12404:28590":{"id":"1:12404:28590","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12369:25673":{"id":"1:12369:25673","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12363:23719":{"id":"1:12363:23719","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12376:2176":{"id":"1:12376:2176","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41400:181","prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5510:29263":{"id":"5:5510:29263","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2003","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:8778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2003","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:8778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12448:28604":{"id":"1:12448:28604","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11993:127","`FromStr`":"1:11992:2808"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41543:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11992:2808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11992:2808","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12357:24666":{"id":"1:12357:24666","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43346:3296","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12419:28594":{"id":"1:12419:28594","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1704":{"id":"0:31:1704","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12366:25672":{"id":"1:12366:25672","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12398:25670":{"id":"1:12398:25670","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12038:428","str::splitn":"1:12395:25668","self::pattern":"1:12032:3270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43482:3223","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12433:24888":{"id":"1:12433:24888","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12342:319":{"id":"1:12342:319","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12055:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12427:28599":{"id":"1:12427:28599","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12057:3285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12436:25674":{"id":"1:12436:25674","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12442:28602":{"id":"1:12442:28602","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12451:26766":{"id":"1:12451:26766","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39432:20675","Self::is_ascii":"1:12450:25463"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39432:20675","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5514:29264":{"id":"5:5514:29264","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12336:28582":{"id":"1:12336:28582","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12334:28581"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29267":{"id":"5:5526:29267","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2003","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2003","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:8778","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12421:28595":{"id":"1:12421:28595","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12358:21769":{"id":"1:12358:21769","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12359:21823"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43634:3300","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12333:28580":{"id":"1:12333:28580","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12351:28584":{"id":"1:12351:28584","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12044:1448","str::slice_mut_unchecked":"1:12352:28585","crate::ops::Index":"1:3068:2089"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12458:28606":{"id":"1:12458:28606","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4553:28606"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43677:3051","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12332:2177":{"id":"1:12332:2177","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12410:28591":{"id":"1:12410:28591","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12032:3270","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::matches":"1:12407:1902"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43582:3305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12407:1902":{"id":"1:12407:1902","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12032:3270","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::rmatches":"1:12410:28591"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43564:3304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12331:836":{"id":"1:12331:836","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12038:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:25462":{"id":"5:5528:25462","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12453:25460"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1697":{"id":"0:0:1697","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1703","0:31:1704","0:28:1697"],"is_stripped":false}}},"1:12372:2219":{"id":"1:12372:2219","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41400:181","prim@char":"4:12038:428","self::pattern":"1:12032:3270"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41398:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12392:28588":{"id":"1:12392:28588","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12032:3270","str::split":"1:12380:25663","prim@char":"4:12038:428","str::split_terminator":"1:12389:28587"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43428:3302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12426:28598":{"id":"1:12426:28598","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12416:28593":{"id":"1:12416:28593","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12032:3270","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::match_indices":"1:12413:28592"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43528:3307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12052:3286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29266":{"id":"5:5525:29266","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12413:28592":{"id":"1:12413:28592","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12032:3270","`DoubleEndedIterator`":"1:7472:121","prim@char":"4:12038:428","str::rmatch_indices":"1:12416:28593"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43510:3306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12389:28587":{"id":"1:12389:28587","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12032:3270","str::split":"1:12380:25663","prim@char":"4:12038:428","`DoubleEndedIterator`":"1:7472:121","str::rsplit_terminator":"1:12392:28588"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43410:3303","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12037:3284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12339:25214":{"id":"1:12339:25214","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11592:3290"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12425:28597":{"id":"1:12425:28597","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12454:25459":{"id":"1:12454:25459","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:25461":{"id":"5:5529:25461","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12454:25459"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:4176:8942":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12765:19466":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:9470:3189":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:5886:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:7888:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:41247:3155":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:4965:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:80:20291":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:3250:2096":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:14420:20269":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:1702:8935":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:9474:3191":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4485:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:5816:30924":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:1672:2469":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:6456:15904":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12997:19480":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4415:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6165:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:20880:21254":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:40245:3138":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:3032:14968":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10788:16245":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:7524:16032":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:6189:30995":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11201:16254":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:45993:8448":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:6346:15896":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:40480:3146":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11162:16253":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:568:9523":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:8142:3104":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:41543:212":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"2:234:212":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6467:15905":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:3461:14973":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:44103:3282":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11062:16285":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:10771:25022":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10197:16146":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:7683:2560":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"6:1733:10431":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:10100:2734":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:45647:8441":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:2576:2533":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:913:8761":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:12052:3286":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"14:0:1930":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13890:20228":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"14:31:14865":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:7694:15948":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:11592:3290":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:4628:8914":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:44276:207":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:4234:2719":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:9133:8855":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:12051:764":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"5:2970:29930":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5784:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:8556:9007":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:10661:16240":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:13451:20206":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:46531:8431":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11687:16069":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:12041:1078":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"17:8848:16038":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10265:16130":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:14042:20242":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11295:16293":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:1103:14857":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:4240:8944":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6352:15897":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:6798:2522":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:10102:27470":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"16:7736:15951":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:12650:21593":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:749:2491":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:4949:15616":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:45440:8428":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7430:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12465:16248":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:2810:14961":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:10585:3228":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:538:20319":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:22192:21744":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4986:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:5648:15870":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:9790:31973":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:10250:9026":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:40456:3144":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:7221:2481":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:1831:2510":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:2855:2068":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:11737:3313":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:6742:14883":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:1590:8776":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:12086:18948":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"4:10953:24986":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10139:16119":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14478:20274":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:9026:24938":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14024:20240":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:8550:2719":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:13816:20222":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4666:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14378:20267":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:8279:3158":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"14:165:14866":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:14269:20258":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6968:15925":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:1764:628":{"crate_id":4,"path":["std","env"],"kind":"module"},"18:531:20318":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:6788:2520":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:22200:21231":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:43677:3051":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:43336:3297":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:41714:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:4774:15585":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:11822:2571":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:39140:204":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6156:15888":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:12062:18946":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:11459:2567":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:1568:2510":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:43138:3222":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:7209:2010":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:43624:3301":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:22895:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:3915:15038":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:7360:31284":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:8877:9033":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:7472:14663":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:10340:2735":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:42418:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"18:590:21790":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:5017:15636":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:3050:2099":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:8154:15963":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"7:32:14708":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:9481:8845":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:14282:20259":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:40254:3124":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:3441:16208":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:21447:8418":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:1842:2729":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:40124:3121":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6041:15887":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4750:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:6811:9039":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"8:0:1925":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:6003:13705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:3212:8773":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10980:16053":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:21416:8851":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:5574:15866":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:2596:14952":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:8926:16040":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:4824:8924":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:1824:2032":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2926:2084":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:47529:8499":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:9977:21165":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:12677:194":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:8964:2051":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:12054:762":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:2638:8881":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:12554:19453":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:43992:3289":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:43652:3308":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:41336:3157":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:11203:8855":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:10747:8978":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:5760:15877":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13101:19487":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:564:20320":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12043:18945":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:44155:3340":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5858:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:6531:15909":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:5010:13037":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:8390:8988":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:8540:9006":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"0:0:1697":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"5:2170:28417":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:46192:21459":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:8115:15961":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5976:13702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:41384:3160":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"11:657:2182":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12225:18958":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:7792:15954":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:5743:15876":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7015:15927":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:43528:3307":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:3232:16203":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:22631:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:1011:2469":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:907:2510":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"11:644:2720":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12750:19465":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:14221:20257":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:1527:10412":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:3391:3109":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:14316:20262":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:7575:2554":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5027:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:8567:9008":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7462:15933":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:10995:9024":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4957:13032":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:43812:3327":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:5845:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:8941:9035":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:45684:8496":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:836:8766":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:2409:1938":{"crate_id":4,"path":["std","io"],"kind":"module"},"5:6637:2469":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:47613:8484":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:10023:16054":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:1557:10415":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13792:20220":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9921:16109":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:43668:3031":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12576:19454":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13949:20233":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:798:8764":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:12020:24799":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12959:19477":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9070:15864":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:2899:2078":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:41458:2719":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"16:5121:15668":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:8989:8722":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12196:18956":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:14448:20271":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:14:1903":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:12658:19458":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:1495:10407":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4802:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:46161:21460":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:4037:8915":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:22862:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:5954:2046":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:8855:2719":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:2366:2963":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:5418:9015":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:40234:3147":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4652:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6204:15889":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:40722:3114":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:2272:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:43510:3306":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:400:16030":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:4047:8916":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:1076:8770":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4471:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:5661:15871":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:12036:379":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:42710:20782":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:6843:14130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"4:727:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:2049:2724":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:6024:13707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:7463:9083":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:817:2703":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2186:30786":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:1911:10594":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:22125:21816":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:2209:16153":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:2201:8757":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:9521:16050":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:9003:16043":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10059:16095":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:2921:212":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:13868:20226":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:14110:20249":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:4376:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:599:32006":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:11815:16304":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:10316:16135":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11535:16063":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8558:2160":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:21774:20812":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5802:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:7090:31231":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:7875:8843":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"5:4074:2720":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:3669:2469":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:2871:2073":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:5673:15872":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:5491:2497":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:41870:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:5609:3123":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:5503:9018":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:9924:2533":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2828:1997":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:45416:8468":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:6467:2058":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7621:15945":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10278:16129":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10420:16182":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:2644:14954":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:2825:3013":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:42692:9003":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:4719:15578":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:3238:8776":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"11:0:1928":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:5891:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5060:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:1523:8780":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:1670:1116":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:47651:8505":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:43614:3299":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:43268:2751":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:44095:3283":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:5128:2046":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:10516:3230":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2831:2918":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:10227:16131":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:12698:19461":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:12056:1548":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:45895:8430":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:2131:2488":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:41398:183":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:416:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:13826:20223":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1506:10409":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:7545:2514":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13055:19484":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"12:0:1929":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:43428:3302":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:4268:2011":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:4618:12995":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:4363:2500":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13546:20208":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:7865:8846":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:8925:9032":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:8009:8882":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:922:8763":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:21421:8408":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:7245:2182":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:1492:8762":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"4:7657:8726":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:43226:3234":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:22763:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:31950:23511":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:6558:2182":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:43938:3331":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"9:450:14737":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:10580:2560":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:9720:3205":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:43887:3329":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:96:20292":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:6079:2497":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:30719:185":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11117:3237":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:21440:8851":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:2618:14953":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:113:20293":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:41372:3159":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:897:2491":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:7284:2158":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:41293:21857":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:671:20308":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13215:19495":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:3115:8894":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:2782:228":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:4638:25010":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:40104:3120":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:10603:16190":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"11:365:2461":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:8237:8902":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1822:2182":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:39876:3057":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:8162:2731":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:11523:8904":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2380:14943":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:40714:3112":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:3447:8848":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"11:968:8768":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:6358:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:1044:8768":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4545:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11327:16294":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12154:18953":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:47803:8402":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:2250:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:7905:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7768:15952":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:3226:8889":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:558:2728":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:12042:317":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"17:9350:16015":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:3171:2719":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9086:15865":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:7999:27467":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10672:16241":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:8195:15966":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:12057:1549":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"17:14324:20263":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:6880:3129":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:7391:15931":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:507:31987":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:43659:3052":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:6879:15920":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:6784:14126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11086:16287":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:1012:8769":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:9478:3192":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11351:16296":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10468:16185":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:9933:16103":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:2536:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:2665:3006":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:10821:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:2998:2030":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13259:19498":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:8212:3296":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:42028:2047":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:3185:27273":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:44379:3370":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:2533:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:5899:13698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:45370:8427":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:9972:16093":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6485:2469":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:43860:3328":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:12830:19470":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10084:16090":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:6045:13710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:4462:15489":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:5435:30879":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:1536:10413":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:21884:8851":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12280:18962":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"9:507:14740":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7722:15950":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:44134:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:8665:3284":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7534:15939":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:9677:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:14514:20276":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:6560:2456":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"4:10766:25038":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:4557:15512":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:6195:24931":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:3800:2510":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:1826:2491":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:500:9515":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:42171:3191":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:42910:20955":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:22829:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:12061:1607":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"16:3232:14971":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:9191:25043":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:7532:13206":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:6199:2581":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:4293:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:14434:20270":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4874:13023":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:149:2453":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:4585:15516":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5872:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5076:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"11:844:8767":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4680:8908":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4570:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:3935:2497":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:7760:8809":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:5905:15881":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:4967:8984":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:4826:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:20820:2996":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4552:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:7396:21217":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9051:16014":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11971:18941":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:43346:3296":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:2867:2070":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:6439:2491":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:6268:31276":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10240:16099":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:2472:14947":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:29923:2770":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:3600:14974":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:1058:2707":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:12055:1551":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:918:8762":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:14033:20241":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:8281:15969":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13973:20235":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:7318:15930":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:41753:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:44286:213":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:871:8759":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:39920:3031":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6582:10367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:1895:8819":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:2943:2088":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:1696:10428":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9998:16091":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:9445:16049":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:690:20310":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12473:16246":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:506:9516":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:11482:8905":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:4154:2034":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"14:187:14873":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"9:237:9003":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1603:10420":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:41989:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:2461:2714":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:9531:31962":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:7149:3104":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:119:2457":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:3797:14992":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:6928:21866":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:624:32001":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:45625:8435":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"11:736:8760":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:22283:21840":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:21670:8423":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:11358:16297":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:2959:2245":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"4:11053:2563":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:12009:8748":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9137:16019":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:12053:766":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"11:805:8765":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11617:16067":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:39080:202":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:8983:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9480:3193":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1545:10414":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:9461:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:5384:15863":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:39961:3056":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:7581:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:31943:15968":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:6829:14129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:47405:8444":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:8825:16037":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:1513:10410":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:10571:3223":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:3830:15001":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:1585:8775":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11389:16057":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:5318:2469":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:6607:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:7211:2491":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:41483:2158":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:1184:16104":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:14001:20238":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:46215:21461":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2613:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:4622:3044":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:7708:15949":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:23375:222":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10916:16204":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:8807:188":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:10112:16117":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:39980:3050":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:43795:3326":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4940:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"14:160:14865":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"9:486:14736":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:44099:3281":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:10557:3227":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"4:1924:8820":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:622:8739":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:878:2477":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5988:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:614:31983":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:40680:1844":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:1482:8761":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11661:16017":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"18:636:32003":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5964:13701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10726:16243":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5082:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6361:15898":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12778:19467":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:4985:2497":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:13611:20212":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"14:221:14875":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13739:20219":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:7662:8728":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:3529:8870":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:10507:16156":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"13:0:1924":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:43213:3120":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:434:14914":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:7608:14691":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:4641:15524":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:782:2472":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:2934:2086":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12513:19450":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:4393:2497":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:4500:8950":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:1779:8790":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:8871:2182":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:20878:21259":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:12111:18950":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:13723:20218":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:4337:2019":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:488:9513":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:2539:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:10432:9021":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:1838:8773":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:10405:3226":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:9486:2558":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:8765:16035":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:4164:2497":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:39238:2095":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:4835:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:5572:9020":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"4:12049:663":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"16:2722:14957":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:13632:20213":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:12048:661":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:4421:2023":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:10977:24865":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:11872:16306":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:12062:1163":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:2171:2973":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:8239:15968":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13567:20210":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"7:79:14715":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:44294:197":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:21016:8414":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:4508:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:2526:14949":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:7503:15936":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:21108:8421":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:45350:8462":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"18:582:2996":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13286:19499":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:5972:2547":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:4168:8941":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:609:31992":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4804:21716":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:9436:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:4448:2024":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10599:3224":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6226:15890":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:755:20313":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:7921:8880":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:7474:9084":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6657:10552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4370:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:1121:8770":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:1921:2744":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:4032:2469":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:1631:10421":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11111:16259":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:12059:1547":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:2223:8826":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:4909:8974":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:7782:15953":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"4:5569:9019":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:39096:200":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:43744:3323":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3405:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:8205:3144":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:9985:16092":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7492:15935":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:3735:2724":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:41831:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:47689:8394":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"11:2060:8769":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12876:19472":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9277:16047":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12724:19463":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:6188:3125":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"4:358:8735":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:8978:16042":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:8458:9003":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:2670:14955":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:6086:13712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:21064:21672":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"5:3217:29608":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:41675:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:41792:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:3975:8911":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:474:9511":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:2832:14962":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6318:15894":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:42702:20783":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:22056:21278":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:7443:2002":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:13897:20229":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:7526:13205":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:8863:9036":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11886:18937":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12172:18954":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10366:16140":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6720:14122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:22141:21187":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:46295:8465":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10440:16184":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13085:19486":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:7342:31270":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:9152:9038":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6859:14132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3016:2000":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:4527:15506":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:8167:15964":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4812:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12373:19445":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:47750:8399":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6332:15895":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:7259:9472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10628:16192":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:10410:16147":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:1068:2709":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:6877:14133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:2875:2077":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11742:16072":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"11:793:8761":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12810:19469":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:3049:14969":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:5362:9076":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:8286:8946":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:7538:13207":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:45825:8476":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:42895:3267":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:14090:20247":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:40466:3145":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:332:2459":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:43166:3231":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:3321:2031":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:22109:21182":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11547:16064":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:10366:3238":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:41516:2159":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:12037:961":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:11215:16256":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13906:20230":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:10478:3229":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5827:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"0:31:1704":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"16:5088:15659":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:2320:190":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:7584:13213":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4706:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:12615:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:0:1933":{"crate_id":17,"path":["object"],"kind":"module"},"9:330:14793":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:5781:2050":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"11:1048:30793":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:42390:21828":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:43972:3288":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:4438:12976":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2864:14963":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10637:16193":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:8985:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:43248:2750":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:21315:8851":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2833:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"4:11987:24805":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:822:2475":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:1503:8763":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:10949:8809":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:4347:2020":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:9660:31967":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:7520:13204":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11244:16067":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:39184:205":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:47669:8392":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11191:16068":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4306:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2850:2069":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:40155:3122":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:541:9519":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:45564:8481":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:3166:2093":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:534:2530":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:11261:16282":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:9466:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"14:215:14874":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:40704:2582":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:4986:15629":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:3939:8910":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"14:40:18939":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11306:16070":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:5398:9014":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:3945:8909":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:5826:2057":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:42400:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:43147:3221":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4889:13024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:21886:8410":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:2494:2769":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:8305:8903":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:39162:203":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:7618:14692":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:39994:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:8335:8979":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"4:5085:27476":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2909:2080":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:1595:10419":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:9841:2584":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:7660:15947":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12496:19449":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:589:8738":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:30149:2960":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:1016:1843":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:8498:9005":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:943:2703":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4725:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4458:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:1781:8791":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:9104:220":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:11388:24750":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:1473:8760":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:43378:3229":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:47467:8478":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4537:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:2325:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:9912:16084":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2339:14941":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:43482:3223":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:1845:8774":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11124:16258":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:2150:16169":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"4:6644:219":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14469:20273":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:2406:14944":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11573:16065":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10949:16201":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"3:0:1923":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:2879:2075":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13685:20216":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:2368:8829":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7544:15940":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:10397:16181":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:1288:2707":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:5551:3135":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:1759:2741":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:4862:15601":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12737:19464":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:505:2488":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6627:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:45595:8429":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6814:14128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10298:2720":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:1817:8801":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3229:2094":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:7474:15934":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:4448:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:7711:8746":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:10840:27269":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6180:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:14522:20277":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:5626:208":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11173:16289":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:10340:16133":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:10081:8801":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:840:2719":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:6697:10535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:3594:2720":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:1538:14859":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13135:19489":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10750:16200":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:6298:208":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:4806:15593":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:41594:2720":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:11407:16058":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:6714:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:926:8764":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:9725:3206":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11074:16286":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:6053:30323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4397:12814":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:4196:1841":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"18:521:20314":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6037:13709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1673:10425":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:14308:20261":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:47678:8393":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:41526:2253":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:4801:2539":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13802:20221":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:6596:2059":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:10698:16221":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:46419:8477":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1118:2713":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12237:18959":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:4921:15612":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:1138:28343":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6753:14125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:40689:3107":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13422:20205":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:41535:195":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:11151:16288":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13981:20236":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:22165:2809":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:2923:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"17:12645:19457":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:9476:196":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"9:52:14756":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:21449:8412":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:2690:28438":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:5747:2048":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:1840:2324":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:12945:19476":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10292:16053":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:39432:20675":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:5403:2497":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:11626:14898":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:43924:3330":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:6031:13708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:6929:15923":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4783:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13966:20234":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:7613:15944":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:3764:14983":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13040:19483":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:579:9525":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:641:8742":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:10456:16154":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"4:7848:8844":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:10126:225":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:2969:14967":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:7054:31069":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:41466:2720":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:863:2182":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:6680:10537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:2930:2085":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:48:1608":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:7858:8842":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:6010:3148":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:10323:9017":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:21052:8416":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:6145:12880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10646:16239":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:1429:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:8114:8847":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:10186:16121":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:45546:8475":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:6306:9040":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:21665:8415":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:30185:21199":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:7304:14504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:43766:3324":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:39947:3054":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:7535:24988":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:4264:209":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:39065:2091":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12123:18951":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:12305:18964":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4422:12974":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:39999:3098":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:11281:16283":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:6440:1845":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:43156:2747":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:11221:24801":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"4:853:2720":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:43187:3235":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12598:19455":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:1611:2463":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:42446:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:12004:24955":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:7726:8747":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:3009:1998":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:8174:8850":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"16:5798:15878":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:7434:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4330:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:21238:8413":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:11719:16071":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:8195:3130":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:21199:2972":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:6279:15893":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:7637:8851":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14068:20244":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:46655:8443":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:1931:674":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:30155:2961":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2778:1996":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:10789:24871":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:4742:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:554:9521":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6017:15886":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12983:19479":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:40267:3139":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"10:36:30783":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"15:306:14890":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:12258:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"4:7764:21317":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"1:22304:2810":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:7913:27500":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:7651:15946":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:7382:8824":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:4194:2497":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:10165:16120":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11098:16260":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13778:16098":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9896:16083":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:7191:2182":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:2744:14958":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:3239:237":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:1517:2712":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:4059:8919":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:2883:2074":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"4:8291:8947":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13071:19485":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13710:20217":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:646:8743":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:44337:3367":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:2548:14950":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11774:3315":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:7393:3119":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:5403:15864":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:9053:24860":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:7425:8823":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12970:19478":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:5070:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:2836:2986":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:3068:2089":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:44392:21827":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:11813:3314":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:12046:3287":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:364:8736":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:1075:16096":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9574:31956":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:2781:229":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:11158:2987":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:9762:31966":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:42150:3189":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:62:9140":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"11:2033:8768":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:1858:8776":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:12050:767":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"6:7561:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:6415:15902":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"9:426:14739":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:7597:30976":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:43330:3298":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"11:2194:30790":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12184:18955":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:515:20317":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13838:20224":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:38979:2101":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:9109:221":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:22697:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:7573:13212":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:8225:3299":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"4:7375:24936":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:12043:1418":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:11296:2565":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:10561:16152":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"9:177:14842":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:7397:3118":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:5243:192":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"16:6499:15907":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:2696:14956":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4830:818":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:1690:10427":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:4889:15604":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:12037:3284":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:9907:2587":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:4160:8940":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:4918:8975":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:5975:2725":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:2243:28421":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4498:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"10:0:1927":{"crate_id":10,"path":["adler"],"kind":"module"},"1:7893:3117":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:47327:8472":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:42164:3190":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:3565:16226":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:256:31974":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:4706:8949":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:2168:30792":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:7290:2182":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:1547:2497":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:4613:15520":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:660:20307":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:4031:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:9114:8734":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:3504:3063":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:6598:9396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:2562:2535":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:43634:3300":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:30171:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:45462:8434":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:7349:8758":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:47698:8395":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10274:2719":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:22316:2812":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:4051:8917":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:43258:3233":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:4391:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9752:16055":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:6818:15918":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:43781:3325":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"4:6147:2543":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:3183:29615":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:12702:3364":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11934:18939":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:40074:2575":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:2985:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:9418:3063":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:1557:2719":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"14:7:14865":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4465:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:6792:15917":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4608:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9945:16099":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4931:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:14156:20254":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12531:19451":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:6250:2547":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:39245:3011":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:4477:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:40164:3131":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"11:1501:14858":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"15:0:1931":{"crate_id":15,"path":["addr2line"],"kind":"module"},"4:2214:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:12925:3369":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"17:9564:16051":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:5311:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:21066:2972":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11473:16060":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10929:16205":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6376:15899":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:30747:2996":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:41586:2719":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:12103:3317":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:1750:21773":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:6243:15891":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14499:20275":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:8231:8903":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4273:2012":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:47735:8398":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:5612:2508":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:42473:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"16:7884:15957":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:44091:3279":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:2253:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:9169:27468":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:40027:3097":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:1426:2720":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:1986:186":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:21255:8851":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"11:403:30794":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:4344:15419":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:2598:8872":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:1569:10416":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:4820:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:5384:9013":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:1709:10429":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12437:19447":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:2546:240":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2493:8851":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:644:31987":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2881:14964":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:10738:16244":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:2861:2071":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:4642:25014":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:47075:8466":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4697:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:526:9517":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6574:9562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:42671:3207":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:4850:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:9148:23480":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:2845:2072":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:2788:231":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:6600:15913":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:2920:2083":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:2394:8839":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:11272:16292":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:0:1934":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:3744:8904":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:22796:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:2359:14942":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:5366:9077":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13024:19482":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:5839:2491":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:22238:21204":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:22177:21206":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5814:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:2530:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:10494:16158":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"4:1983:187":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:22598:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:3513:27915":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:7337:8757":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:22217:21239":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2624:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:8072:15959":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:8801:9021":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11490:16061":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:22565:179":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:8556:2162":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:41636:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4403:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:40673:21789":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4946:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:2904:2079":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"0:29:1703":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:10616:16191":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:12098:18949":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:32051:3016":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:21014:8851":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:5419:15865":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:6981:24985":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11845:16305":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:5808:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:7514:13203":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:4572:8967":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:39206:2092":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:4743:8925":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4772:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:44079:3275":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:11316:16284":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:11164:9023":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:2888:2538":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:7182:8778":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:3266:8891":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:2362:191":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:2783:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:10534:16157":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:14346:20265":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:9959:16094":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5588:15867":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:8242:8900":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:43582:3305":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:40216:3136":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:3581:2719":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:12052:765":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:8978:24932":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:9780:16056":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:11346:24852":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:5612:15868":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:1579:8774":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:6431:2052":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"16:0:1932":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13148:19490":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5712:15874":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:1564:2491":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10126:16118":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:46609:8437":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:3284:2029":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:638:8741":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:46869:8432":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:40277:3140":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12846:19471":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10430:16183":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"4:11176:27264":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:40302:3142":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7523:15938":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:1411:2719":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:40316:3143":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5838:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:9207:16045":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:562:9522":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:7732:8771":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:9939:2592":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:8713:16034":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:8659:16013":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:399:30799":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:8909:9034":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"11:1818:2719":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:10534:8888":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:39912:3051":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:43176:2749":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4919:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:39833:3031":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6583:15912":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:1736:2989":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:4558:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:14134:20252":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:6769:2508":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:766:20306":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:4007:23235":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:3419:2497":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:41602:2182":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:44115:3339":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:7886:3032":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:11150:9022":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:40084:3096":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:45665:8447":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:4189:8943":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:41611:185":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:595:9527":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"11:986:2707":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:5046:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6729:14123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:261:31975":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:10685:16199":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6401:15901":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:21323:8411":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:20863:21258":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13202:19494":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:45795:8470":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:12833:2543":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10520:16186":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:6901:15921":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:547:9520":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:2771:223":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:3522:8849":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:8297:8938":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14013:20239":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:1640:2937":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3269:23521":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:35:2465":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:2542:241":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:2840:2067":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"18:736:20305":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:4123:2033":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:8833:9023":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:44111:3277":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:2779:2028":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:39839:3035":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6485:15906":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:39928:3052":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"4:4747:8929":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"15:288:14889":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11448:16059":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:2428:14945":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10447:16155":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13851:20225":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3514:2491":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:11319:9027":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:41264:3156":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:6194:21762":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:40326:3127":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:46039:8503":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:43564:3304":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:43410:3303":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:4745:8928":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:11240:8734":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:6721:15915":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13174:19492":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"11:695:8763":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:5866:15880":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:39860:21242":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:7067:31008":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:1852:8775":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:45394:8463":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:2321:14940":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7006:15926":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:45971:8442":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:10962:9018":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"4:4003:8914":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:2012:16134":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:2499:8879":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:21271:8407":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:39018:2100":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"4:12045:1532":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:483:2529":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:10801:8846":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:9102:16018":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"13:110:30847":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:44367:3372":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:49671:8425":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:7282:2182":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:723:8759":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4687:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"4:8819:9022":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6386:15900":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:11337:16295":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:8686:16033":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:43318:3294":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:719:20304":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"4:6610:2060":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:44087:3280":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:5995:15885":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12671:19459":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:5988:208":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:949:8766":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:47826:8403":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:1102:28336":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:9099:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"4:4320:8945":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6513:15908":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6545:15910":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:42430:21760":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"4:12039:1567":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"6:4856:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:8408:9002":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:6616:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"11:2180:30784":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:6540:2054":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:12063:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"10:44:14847":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:4640:25012":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:13693:20204":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6944:31081":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5017:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:2159:605":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:8357:8927":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11788:16303":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12074:18947":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:20848:20808":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"14:202:9082":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:9474:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:11619:14898":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:9039:15929":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:12934:19475":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:895:2719":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:12685:19460":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:6791:2190":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:40666:3105":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:7281:14502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:47217:8438":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:13113:19488":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"11:630:2719":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:41950:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:4138:24760":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4497:15500":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:681:20309":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:46017:8497":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4430:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:9242:16046":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:2384:8834":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"0:28:1697":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:8980:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:12024:18944":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9711:31955":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11910:18938":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:7744:8808":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:9019:27475":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:13244:19497":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:6896:2551":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13758:20203":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:41313:21168":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:9281:2324":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:12032:3270":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:7737:8772":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"4:3191:28177":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:14335:20264":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:11235:16291":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:10540:8886":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:45941:8436":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:2938:2087":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1500:10408":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11507:16062":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10097:16089":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:30243:21225":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:12543:19452":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:10811:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4789:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11639:16068":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:21317:8409":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:31957:2020":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"16:6893:31017":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:119:9194":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:11048:16273":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13914:20231":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:43360:3225":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:261:2469":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:39259:3026":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:3655:14975":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:41449:2181":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"17:10771:16220":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:8481:9004":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:1638:10422":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:3888:15035":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13989:20237":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:2892:2081":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:9617:31965":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:11000:16209":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:10160:24984":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:5049:15644":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"13:226:30800":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:3997:8913":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7582:15943":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:955:8767":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5939:15882":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:31939:21317":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"11:2174:23549":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:97:30789":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:8594:16016":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:1717:10430":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:40202:21811":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:1633:604":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:39954:3055":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:6071:2541":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:13922:20232":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:8313:8948":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:14460:20272":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5053:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:13274:16070":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:9472:3190":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:14163:20255":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:7594:2556":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:7472:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12790:19468":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:5996:13704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:43304:3295":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:20861:21256":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14296:20260":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10588:16189":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"16:3315:14972":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:12628:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"4:3188:28169":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:42914:3243":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:14100:20248":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14056:20243":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:3256:2098":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:3465:2730":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:21185:8417":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:14536:20278":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:1681:10426":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:5727:15875":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:11361:24854":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:41230:3154":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:4019:21636":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:3348:8876":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:6083:14911":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:4392:8939":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5963:15883":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:14145:20253":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12293:18963":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:2933:14966":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4994:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:8218:3225":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"1:8557:2161":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:6930:2523":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:40011:21217":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12711:19462":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9852:16080":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12252:18960":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7930:23481":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:6979:3101":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:2962:28439":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:44167:3341":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:9455:31964":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:45847:8482":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:40146:2737":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:40184:3133":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:45524:8469":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11991:18942":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:21152:8422":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:45702:8502":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:5754:2049":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10478:16180":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:21337:8412":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:0:508":{"crate_id":1,"path":["core"],"kind":"module"},"16:7513:15937":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:22664:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43087:23225":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10962:16202":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:45749:8406":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:6569:15911":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12621:19456":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:39935:3053":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:13010:19481":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:11313:24951":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"4:11600:9053":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:3224:8888":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:3303:8886":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:7929:2721":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:7549:13208":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"9:357:14753":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:9685:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:2219:2528":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"1:22254:21224":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11562:3216":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:2966:29931":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:7131:24784":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:20833:20808":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:43959:3333":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11381:16298":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:2914:2082":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:10831:2731":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"18:707:3287":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6139:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:10475:2559":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:7231:28436":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:574:31987":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:884:8760":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:21:702":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"6:653:9574":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:5131:193":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:8996:24795":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13162:19491":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6687:15914":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:12060:812":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:9488:31963":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:12822:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:4783:397":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:4426:2500":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:3019:1849":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:9153:24440":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4343:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:7199:8777":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:536:31227":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:44329:3366":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:8134:15962":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:46063:8504":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13676:20215":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10383:16126":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:11059:2564":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:10537:8890":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:8181:15965":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2887:2076":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10012:16053":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:0:1440":{"crate_id":4,"path":["std"],"kind":"module"},"5:3204:8775":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:3305:8887":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:1067:8769":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:7287:14503":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:2216:8825":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:11544:8906":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12452:19448":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:42495:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:44350:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:6634:8979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:40695:3109":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:6960:15924":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:2035:2721":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:22003:21270":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:4317:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:8097:15960":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:11184:3339":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"5:1257:8768":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5634:15869":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10575:16188":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"5:7261:28353":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4766:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9328:3296":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:1027:14856":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"9:0:1926":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:8004:24935":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:12422:19446":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:3741:8905":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:491:32010":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:2169:2972":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:13298:19500":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14126:20251":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11797:3312":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:7102:15928":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13188:19493":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:47709:8396":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:25777:250":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2907:14965":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:1442:2182":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:5449:9017":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"16:7041:31019":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:4478:8949":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7554:15941":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:11578:3218":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5776:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12888:19473":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:47773:8400":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:4703:8976":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:10323:3225":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:47865:8404":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"4:8331:8977":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:40174:3132":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:2574:14951":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:8050:15958":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4756:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14173:20256":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4975:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:5830:15879":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10443:3239":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:40225:3137":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14076:20245":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:0:453":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:8953:16041":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:7525:2001":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11137:16257":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5322:15845":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:2788:14960":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:123:9195":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:39890:3059":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:6844:15919":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:6163:2546":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"15:327:14894":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:41207:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:2305:14939":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:43464:3227":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:7595:13214":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:9650:16053":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13876:20227":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:3330:2510":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:40286:3141":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6425:15903":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:9867:16081":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:39848:3058":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:587:9526":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:2223:28469":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7128:15929":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:46449:8483":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:42157:3188":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:14083:20246":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13575:20211":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:8205:15967":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:31903:3001":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:7555:13209":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"11:667:8762":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4520:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:3648:2182":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:10036:16097":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4491:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:4589:12993":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:6427:1844":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:2766:14959":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:760:2510":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4910:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:46114:21456":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10547:16187":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:46719:8498":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:7853:8845":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3244:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:12267:18961":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:504:16031":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11951:18940":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4628:12996":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:3989:8912":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:7023:2552":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12484:16247":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:8847:9024":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:8896:9031":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4417:15468":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4382:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:12870:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:44107:3276":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4392:2021":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:207:2467":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:46373:8471":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:1302:8770":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:40193:3134":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:10116:8851":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4718:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:40133:3130":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:30115:2959":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:11084:3236":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:12044:1448":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:3065:14970":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:481:20315":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:6753:15916":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:1649:10423":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:2356:184":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:6076:13711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:41474:2182":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:4835:15598":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:5633:2547":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"4:2382:8833":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:12058:1550":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:12057:3285":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6735:14124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11761:16073":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:6915:15922":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:6955:2527":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:2141:28440":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:14401:20268":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:3679:8901":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:482:9512":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4951:13031":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:652:31987":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:41909:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:45494:8464":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:5434:9016":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"5:4002:2491":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:4053:15152":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:7412:8822":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:7638:8737":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4731:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:276:2003":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6696:14884":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"11:2049:2707":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1590:10418":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:10214:16132":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"11:285:2700":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:4745:15580":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:44083:3278":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:7889:3116":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:5640:9028":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:7436:15932":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"15:394:14901":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:30349:21150":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:22928:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:5909:13699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1575:10417":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:14118:20250":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:7828:15955":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:43643:3309":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:7568:15942":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:629:28431":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:6543:2055":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6850:14131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:4:1040":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:11226:16290":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4796:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:31964:3010":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:7567:13211":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:21762:3219":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:22730:180":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:6017:13706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:8794:16036":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:6805:14127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:9201:25033":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:9074:24879":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:3013:1999":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:3264:8890":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13487:20207":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:7269:31252":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:1776:2510":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:11848:3238":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5982:15884":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:582:16032":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:5054:27476":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4844:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:3720:2721":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:14355:20266":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:22290:2811":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:40041:3072":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:9823:16079":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:43239:3232":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:47724:8397":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4897:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:932:8765":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:46685:8449":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:42680:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:2504:14948":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13554:20209":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:47788:8401":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12911:19474":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:5363:15862":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12007:18943":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:5929:13700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5696:15873":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:699:20311":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:42455:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:43949:3332":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:9607:16052":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:573:9524":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:12136:18952":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:4054:3034":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:8151:8893":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:9701:16054":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:39120:201":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:2178:16128":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:12038:428":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:41349:3158":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:47575:8450":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7862:15956":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:10849:27267":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:2450:14946":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10370:16127":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:42663:21858":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:3072:2090":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:1561:2182":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:6261:15892":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5746:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:8895:16039":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:532:9518":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10903:16206":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:4401:2022":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:10776:8842":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:1520:10411":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2793:2027":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:9372:16048":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11586:16066":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:494:9514":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:1273:8769":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13667:20214":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:9031:24927":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:1464:8759":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11710:16070":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:1663:10424":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:2960:29929":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4640:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:2284:14912":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10714:16242":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:11042:2562":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:42655:3208":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:11394:24758":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"9:393:14738":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:7438:2506":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:3846:8906":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:3178:8774":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11367:16261":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:9172:16044":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:9886:16082":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4864:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:9468:3188":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:13228:19496":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4526:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12208:18957":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:11612:27473":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:7529:2510":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:11023:16207":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"11:311:30787":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:727:20312":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:11376:24792":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:1573:8773":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11992:2808":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:39900:3060":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}