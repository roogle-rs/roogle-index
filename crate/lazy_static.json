{"root":"0:0:2359","crate_version":"1.5.0","includes_private":false,"index":{"1:13632:30144":{"id":"1:13632:30144","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12458:1754","str::slice_mut_unchecked":"1:13633:30145","crate::ops::Index":"1:40057:2778"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13647:23066":{"id":"1:13647:23066","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13682:27031":{"id":"1:13682:27031","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12452:482","str::splitn":"1:13679:27029","self::pattern":"1:13301:3762"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44503:3718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13688:27034":{"id":"1:13688:27034","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13611":{"id":"1:13611","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13612:1016","1:13613:2802","1:13614:30140","1:13615:30141","1:13617:30142","1:13620:28177","1:13621:30143","1:13622:342","1:13623:26999","1:13624:2364","1:13626:26031","1:13628:26032","1:13630:26033","1:13632:30144","1:13633:30145","1:13634:27018","1:13635:27019","1:13636:27022","1:13637:27023","1:13639:22666","1:13640:22895","1:13641:22765","1:13642:22632","1:13643:22672","1:13644:29648","1:13645:30146","1:13646:22668","1:13647:23066","1:13650:26651","1:13653:26653","1:13656:2842","1:13660:2801","1:13664:27024","1:13667:22641","1:13670:27027","1:13673:30147","1:13676:30148","1:13679:27029","1:13682:27031","1:13685:27033","1:13688:27034","1:13691:2571","1:13694:30149","1:13697:30150","1:13700:30151","1:13703:30152","1:13705:30153","1:13707:30154","1:13709:30155","1:13710:30156","1:13711:30157","1:13714:30158","1:13717:26295","1:13720:27035","1:13723:30159","1:13726:30160","1:13729:30161","1:13732:30162","1:13734:26468","1:13735:28214","1:13736:26469","1:13737:26465","1:13738:26464","1:13739:28217","1:13740:28218","1:13741:28219","1:13742:30163","1:13744:3513","1:13745:30164"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13670:27027":{"id":"1:13670:27027","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13301:3762","`DoubleEndedIterator`":"1:8451:133","prim@char":"4:12452:482","str::split":"1:13664:27024"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44399:3724","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13703:30152":{"id":"1:13703:30152","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:3500":{"id":"5:5739:3500","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2365":{"id":"0:29:2365","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[179,0],"end":[182,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:13732:30162":{"id":"1:13732:30162","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13262:140","`FromStr`":"1:13261:3268"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42643:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13261:3268","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13261:3268","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13621:30143":{"id":"1:13621:30143","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13612:1016":{"id":"1:13612:1016","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12452:482"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13623:26999":{"id":"1:13623:26999","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5738:30863":{"id":"5:5738:30863","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2711","`String`":"5:7801:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2711","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:30860":{"id":"5:5726:30860","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2359":{"id":"0:0:2359","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[208,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\nuse lazy_static::lazy_static;\n\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\nuse lazy_static::lazy_static;\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.5.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:2365","0:31:2366","0:28:2359"],"is_stripped":false}}},"1:13667:22641":{"id":"1:13667:22641","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13116:3733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:2359":{"id":"0:28:2359","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[161,0],"end":[173,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:13650:26651":{"id":"1:13650:26651","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13615:30141":{"id":"1:13615:30141","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13645:30146":{"id":"1:13645:30146","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44645:3792","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13676:30148":{"id":"1:13676:30148","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13301:3762","str::split":"1:13664:27024","prim@char":"4:12452:482","str::split_terminator":"1:13673:30147"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44449:3793","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13624:2364":{"id":"1:13624:2364","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13737:26465":{"id":"1:13737:26465","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13626:26031":{"id":"1:13626:26031","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42513:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13630:26033":{"id":"1:13630:26033","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13720:27035":{"id":"1:13720:27035","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13637:27023":{"id":"1:13637:27023","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13636:27022"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5723:2698":{"id":"5:5723:2698","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13620:28177":{"id":"1:13620:28177","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12848:3782"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13710:30156":{"id":"1:13710:30156","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13644:29648":{"id":"1:13644:29648","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44635:3790","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13653:26653":{"id":"1:13653:26653","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5722:30859":{"id":"5:5722:30859","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2711","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2711","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5737:30862":{"id":"5:5737:30862","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13685:27033":{"id":"1:13685:27033","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13664:27024":{"id":"1:13664:27024","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13301:3762","`DoubleEndedIterator`":"1:8451:133","prim@char":"4:12452:482","str::split_whitespace":"1:13642:22632","str::rsplit":"1:13670:27027"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44381:3720","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13735:28214":{"id":"1:13735:28214","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40412:3480","Self::is_ascii":"1:13734:26468"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40412:3480","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13679:27029":{"id":"1:13679:27029","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762","str::rsplitn":"1:13682:27031"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44485:3722","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5729:30861":{"id":"5:5729:30861","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7801:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13634:27018":{"id":"1:13634:27018","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13636:27022","str::split_at_mut":"1:13635:27019"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13705:30153":{"id":"1:13705:30153","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5741:26466":{"id":"5:5741:26466","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13738:26464"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13700:30151":{"id":"1:13700:30151","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13301:3762","`DoubleEndedIterator`":"1:8451:133","prim@char":"4:12452:482","str::match_indices":"1:13697:30150"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44549:3798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13622:342":{"id":"1:13622:342","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13623:26999","`u8`":"4:12471:1884"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13636:27022":{"id":"1:13636:27022","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13637:27023"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13646:22668":{"id":"1:13646:22668","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44673:3799","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13709:30155":{"id":"1:13709:30155","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13714:30158":{"id":"1:13714:30158","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13739:28217":{"id":"1:13739:28217","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:36929"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13742:30163":{"id":"1:13742:30163","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5124:30163"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44680:3535","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13633:30145":{"id":"1:13633:30145","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12458:1754","crate::ops::IndexMut":"1:3583:2779","str::slice_unchecked":"1:13632:30144"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13734:26468":{"id":"1:13734:26468","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721":{"id":"5:5721","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5722:30859","5:5723:2698","5:5726:30860","5:5729:30861","5:5737:30862","5:5738:30863","5:5739:3500","5:5740:26467","5:5741:26466"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13736:26469":{"id":"1:13736:26469","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:2366":{"id":"0:31:2366","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[206,0],"end":[208,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\nuse lazy_static::lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5740:26467":{"id":"5:5740:26467","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13737:26465"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7801:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13729:30161":{"id":"1:13729:30161","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13628:26032":{"id":"1:13628:26032","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11434:243","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13639:22666":{"id":"1:13639:22666","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44351:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13717:26295":{"id":"1:13717:26295","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13617:30142":{"id":"1:13617:30142","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13615:30141"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13707:30154":{"id":"1:13707:30154","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13643:22672":{"id":"1:13643:22672","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13642:22632"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44664:3800","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13723:30159":{"id":"1:13723:30159","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13741:28219":{"id":"1:13741:28219","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:36929"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13691:2571":{"id":"1:13691:2571","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13301:3762","`DoubleEndedIterator`":"1:8451:133","prim@char":"4:12452:482","str::rmatches":"1:13694:30149"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44585:3795","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13656:2842":{"id":"1:13656:2842","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42513:194","prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13635:27019":{"id":"1:13635:27019","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13634:27018","str::split_at_mut_checked":"1:13637:27023"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13660:2801":{"id":"1:13660:2801","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42513:194","prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42511:197","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13740:28218":{"id":"1:13740:28218","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1126:36929"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13614:30140":{"id":"1:13614:30140","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13613:2802":{"id":"1:13613:2802","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13640:22895":{"id":"1:13640:22895","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12452:482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44357:3788","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13738:26464":{"id":"1:13738:26464","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13642:22632":{"id":"1:13642:22632","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13643:22672"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44655:3791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13694:30149":{"id":"1:13694:30149","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13301:3762","`DoubleEndedIterator`":"1:8451:133","prim@char":"4:12452:482","str::matches":"1:13691:2571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44603:3796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13322:3778","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13726:30160":{"id":"1:13726:30160","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13744:3513":{"id":"1:13744:3513","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5125:3513"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44689:3514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13673:30147":{"id":"1:13673:30147","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13301:3762","str::split":"1:13664:27024","prim@char":"4:12452:482","`DoubleEndedIterator`":"1:8451:133","str::rsplit_terminator":"1:13676:30148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44431:3794","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13711:30157":{"id":"1:13711:30157","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12452:482","self::pattern":"1:13301:3762"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13327:3777","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13641:22765":{"id":"1:13641:22765","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44367:3577","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13697:30150":{"id":"1:13697:30150","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13301:3762","`DoubleEndedIterator`":"1:8451:133","prim@char":"4:12452:482","str::rmatch_indices":"1:13700:30151"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44531:3797","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13307:3776","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13745:30164":{"id":"1:13745:30164","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5122:30164"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44698:3534","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:14460:20671":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15777:21448":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:9356:28670":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:5475:206":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:40871:21992":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:8199:15758":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:12403:26275":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:96:21678":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:296:2711":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6526:14782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:2724:16059":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6337:16989":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:43725:23037":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:5230:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:4899:9491":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12749:17392":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:2227:17265":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:6749:17004":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:3602:9360":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:7080:22969":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:2820:3468":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:42643:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"18:613:33962":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:7586:15225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:26472:273":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6723:14800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:5482:14074":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:36778:2769":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:10280:23020":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:532:10045":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11971:17257":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:32667:3479":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:7919:17047":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:15077:20711":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:8636:17080":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"4:4680:9469":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:5007:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:41250:21811":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:8565:17075":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12176:17319":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:7518:15220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:14405:20668":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:44357:3788":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:1597:10951":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:15701:21441":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:2406:17259":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:6631:14789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13157:17435":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:10823:17167":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:8179:17064":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:40909:3543":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:564:10050":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6984:17020":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11080:23261":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"5:4561:3505":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"16:7416:17037":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:2806:3467":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"4:1984:9329":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:5879:9543":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"4:12027:9569":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:10115:17145":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:43481:22338":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:3513:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:2265:31172":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:2400:3139":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"18:548:156":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:16668:21655":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:12931:17192":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:5835:9621":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:3378:2775":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:41326:3618":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3583:2779":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:44531:3797":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:30862:3252":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:8014:15596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:8358:28647":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11421:17207":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:46669:8924":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:12605:17173":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:44942:3821":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:33698:2757":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:43209:3684":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:3052:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:16377:21493":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:6262:3613":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5060:16686":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:4608:3517":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:31530:3474":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"11:835:9269":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13757:20151":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:8028:17056":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:9581:3162":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"4:8255:9262":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:1049:9274":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5301:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:581:3474":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13070:17173":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:15024:20707":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:41172:3602":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:43557:3195":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:15655:21437":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:16761:21662":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"4:954:9266":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:23462:9363":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:14393:20667":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6876:17013":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"15:306:15995":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:8206:9355":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5019:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:15973:21466":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:7969:17051":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:1249:31186":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"11:854:3114":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"4:663:9239":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:23383:22061":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11823:3725":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:7495:28688":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:9292:2733":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10296:17151":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:15496:21430":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:8077:9245":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:42439:3635":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"4:6065:2742":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:16297:21487":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:9425:2734":{"crate_id":4,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:6696:17001":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:5375:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:42595:3647":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:12476:985":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"6:5186:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:608:33988":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:46722:8985":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:5666:9533":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:33274:2755":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6269:16987":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11678:17221":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:11971:9423":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:34171:2760":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:1385:9274":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:4589:3516":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13041:17437":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"5:7612:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:1594:9266":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:5015:2681":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"15:0:2602":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:6411:14773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:6386:3203":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10394:17154":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:938:3144":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:33486:2754":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:41194:3185":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:43754:9520":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:2900:16067":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:963:9268":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:22798:9037":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14886:20698":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:3455:9265":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:14127:20175":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:7305:17032":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:6790:31843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6748:14803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"5:6712:3144":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:3436:2767":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"12:0:2600":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:5088:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:23059:9032":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"4:6600:189":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:7986:9997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:44178:3717":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:8233:17067":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"11:2301:9273":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"11:2545:32700":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:11434:243":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:12459:1844":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:8196:9357":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"17:14220:20660":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:507:33957":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:8137:17061":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:40943:3536":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15602:21436":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:8572:9420":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:7580:9289":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:14375:20666":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:1099:3120":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:23417:3284":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:515:21702":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:3350:9406":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:8875:3598":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12191:17320":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:3668:29208":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:1108:9274":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"4:11012:3166":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:8223:17066":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:2506:16049":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:3865:3143":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8451:133":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:8008:15595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"15:327:15999":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:23532:22023":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:15136:17192":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:12906:17417":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:3077:141":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"5:4498:31218":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:8546:3622":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"11:1023:3120":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:3313:28962":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:13909:20159":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:11087:23289":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:47524:8938":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10938:33938":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:42917:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"4:7813:28387":{"crate_id":4,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:10516:17158":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:9198:9551":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:13116:3733":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6731:14801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"4:12453:1906":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:45437:22953":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:16786:21664":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:16728:21659":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:10974:26268":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:9661:3776":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:15665:21438":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:7807:33181":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"0:29:2365":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:10696:17163":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:15997:21469":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4753:2507":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:1696:9454":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:14031:20168":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11579:17223":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:23245:22287":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:6126:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:45107:3771":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:45305:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:8308:14262":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:42530:176":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"5:1784:31222":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:6740:14802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"14:40:20152":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:15919:21460":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:6691:14796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:46690:8930":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:2840:16064":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10663:17162":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:9206:2806":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12840:17390":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:8629:9468":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:8249:130":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:46965:8919":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:5541:14080":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"4:12457:1720":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:2858:204":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:46948:8971":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:1920:9279":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:479:10039":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:13921:20160":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:14284:20662":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:5241:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:8273:14257":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:7721:9230":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:9478:9366":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:14507:20673":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:842:9270":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:45398:183":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:44367:3577":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:7287:31192":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:8483:17071":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5551:14081":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:16595:20153":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:1514:10942":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:9229:9546":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:3329:9278":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:12462:3458":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:8649:9460":{"crate_id":4,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"4:2521:9354":{"crate_id":4,"path":["std","fs","exists"],"kind":"function"},"4:6402:28756":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:8260:9261":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:23192:22957":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:40061:2780":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:16701:21657":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"4:9433:3505":{"crate_id":4,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:12335:17376":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:16520:21650":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:3029:3214":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:47039:8931":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:41212:3610":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:22585:23044":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3346:3456":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"5:7750:3576":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:3310:28965":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:40936:3535":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:7695:9259":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6256:32969":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:15431:21427":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:7604:15226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:5195:3527":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:6952:236":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:973:9270":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:44799:3816":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:23299:3269":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"11:1888:3144":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6781:17005":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:32834:117":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:13570:17194":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:44655:3791":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:1884:2806":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4816:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"13:110:32725":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"11:2121:9273":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:4929:16624":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:16341:21491":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:996:9272":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5282:16724":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:12798:17423":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:42333:22330":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:948:9265":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:8014:17055":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:42539:3138":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:46348:8956":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5387:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:4329:3505":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:6625:33136":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:1690:10959":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:2670:3442":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"4:4997:9447":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13205:17177":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:4362:9464":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"4:11315:26205":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:5622:14087":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:10173:23202":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:32745:249":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"15:288:15994":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:1641:9277":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"19:0:1315":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:47495:8987":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5349:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:14349:3868":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:10700:28757":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:11878:3718":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:31156:22285":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:46707:8936":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:15418:21426":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:9212:9548":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:3303:9277":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:11045:9319":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:41316:3617":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:881:3271":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:8866:153":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:5085:16688":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:46462:8917":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:1213:31190":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:13933:20161":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11926:17264":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2403:3193":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:47437:8932":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:41049:3573":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:4483:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:47172:22329":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:9987:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:46587:8958":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:1880:3138":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:7830:3549":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11475:17212":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"17:12992:17395":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:46515:8935":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:11717:9520":{"crate_id":4,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:23430:3270":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12524:17338":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7282:17031":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:41748:3591":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:2105:685":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:1635:9276":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:46363:8916":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:635:33970":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:41044:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:46608:8964":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:40226:3491":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:11424:9363":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:41023:3539":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:12122:17287":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:9437:237":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11457:17210":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:22880:9039":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:46301:8950":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:10993:143":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:14312:20664":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"6:8249:14253":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13290:17180":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:14031:25700":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:7469:15218":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:599:3161":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:13316:3779":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:8507:3166":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:22:834":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:12478:1447":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:3792:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:42604:3651":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13222:17178":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:7540:2806":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:11000:28616":{"crate_id":4,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"7:0:1936":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:4939:9442":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:2486:16048":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:12470:903":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:9156:9493":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:44977:3824":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:8672:9496":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:5172:16706":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:34104:2761":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:7262:31236":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13349:17183":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:7825:28384":{"crate_id":4,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:5426:3579":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:10843:17168":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:6480:14780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5357:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:12409:17379":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10218:17148":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:10168:22898":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:11053:9534":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:13306:17181":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5586:14084":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:7906:28382":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:1523:3138":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:3141:16076":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:1589:10950":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13719:17479":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"14:202:9599":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:11037:9492":{"crate_id":4,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"18:689:21695":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:44187:3716":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:22918:9040":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:9751:3175":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:10928:17169":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:8727:9505":{"crate_id":4,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:41766:3595":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:7424:17038":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12776:17422":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:3296:3138":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:8043:32802":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:9241:9549":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:2793:9399":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5139:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:4674:2686":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13662:17477":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:6731:17003":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"4:11794:26218":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"11:1674:32714":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:6534:14783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6419:14774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:3687:9383":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:47010:8925":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:44830:3818":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:8895:9524":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:12570:17333":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:22147:9363":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:754:21698":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6205:16985":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:45377:25168":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:14560:20677":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:32709:25166":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:8151:17062":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:685:3139":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:14963:20703":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:11563:28769":{"crate_id":4,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:15731:21443":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10487:17157":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"6:6507:14740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:881:3138":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:5301:2728":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11998:17278":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6672:14794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:14346:17381":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:7604:2806":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:8112:9319":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13385:17185":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:45173:3835":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:22932:3442":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"16:3834:16081":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13635:17476":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:4569:9458":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:1085:9273":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:538:10046":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:13537:122":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:113:21679":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:23026:9033":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:12039:28674":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:7462:17039":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:44298:3728":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:4956:16628":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:643:33957":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:2228:15955":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:41075:3574":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5179:9453":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:1584:10949":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:3889:16082":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:959:9267":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:586:10053":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11902:17266":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8178:2667":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:12070:28763":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:4873:16614":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:15679:21439":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:22275:8906":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:682:9242":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"11:2349:9274":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:3110:16074":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:15785:21449":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12225:17323":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:7113:9622":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:2656:686":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12983:17431":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:2496:9346":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:8546:17074":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:34556:2765":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:8066:17058":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14043:20169":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6843:17010":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:14019:20167":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:42289:3633":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:3055:166":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:45008:3781":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:40982:3537":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13733:20150":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11777:17252":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14547:20676":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:1647:9278":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:1580:3126":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:6123:16980":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10097:17144":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:4844:16608":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3185:3485":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:9768:130":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:13181:17440":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:47664:8897":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:8330:14264":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:8031:15597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:798:3144":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:768:157":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:12419:29486":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:4702:9470":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:390:15840":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:42491:3638":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:4815:9431":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2950:16069":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:521:21699":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6758:14804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:6998:17021":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:41335:3619":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:3987:16083":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"16:6084:16977":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:11892:3723":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:44585:3795":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:9460:165":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:506:16018":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:14114:20174":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:6434:28617":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:6042:3144":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:9548:3649":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:2554:2530":{"crate_id":4,"path":["std","io"],"kind":"module"},"13:229:32726":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:1491:159":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:22551:8912":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"5:3337:9276":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:2770:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:44673:3799":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:43772:22968":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2029:3505":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:10803:3577":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:34729:2766":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2773:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:8235:143":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"5:7706:9260":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15586:21435":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:4341:9462":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:47193:8920":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:6188:16984":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:5036:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:1619:3138":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5520:14078":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"4:12458:1754":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:40149:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:5571:9593":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"4:8668:9492":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:14845:20695":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:15557:21421":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:12473:1872":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:47740:8901":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:8049:3178":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:5742:16973":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:3706:3138":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7337:17033":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:4943:9446":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:22062:23054":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:22704:9363":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:46416:8957":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:7454:15216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:38709:2771":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:3542:2708":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2415:16016":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:10564:17159":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12736:17393":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:2533:32699":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:2570:16052":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:42251:173":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:2480:3431":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"16:2450:16046":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:43469:22028":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:1615:9268":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:14692:20686":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12816:17189":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:4528:3505":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14997:20705":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:4827:29244":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:10274:17150":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:7350:33082":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:15531:21431":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:1667:10956":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:44279:3727":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:14483:20672":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6808:17007":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13451:17188":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:13322:3778":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:12468:916":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"6:7391:11083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:4941:9445":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:4902:9469":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:11298:9366":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:14269:20661":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:6746:2743":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:7401:32899":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:6381:14711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:12204:17321":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:40169:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5151:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:13537:17192":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:0:2599":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"11:2137:3120":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:14859:20696":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7212:15988":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:2482:9342":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12648:17339":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:380:9235":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:11606:17173":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:8669:17081":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:11906:3719":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:12474:1878":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"16:3308:16077":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:1626:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:1907:9277":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11553:17225":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:3405:9409":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"10:44:15949":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:14640:20683":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11016:17170":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:7801:28391":{"crate_id":4,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"16:5144:16701":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:14902:20699":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:8296:14260":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:3366:2756":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12216:17322":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:2161:3143":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:46558:8904":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:1623:2806":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:12280:17374":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11114:17172":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5265:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:3930:9265":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"4:10958:29210":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:22573:3714":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:45388:3863":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:44664:3800":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:553:10048":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:7368:9496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:1727:10962":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11358:17204":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:46529:8984":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:13943:3861":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:6173:16983":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:4171:9430":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:12450:426":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:42806:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:7548:9283":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:8528:17073":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:8363:28634":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:5020:9441":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:4404:16260":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"11:2566:9259":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:3719:3139":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7044:17024":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:6376:3604":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11851:17261":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:16739:21660":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:12108:17316":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:491:33984":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:1563:10947":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:13327:3777":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:4766:16576":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13361:17184":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:12816:3711":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:16613:20154":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:43497:22029":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:7577:15224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:41710:23030":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"4:912:9263":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:598:33967":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:46625:8970":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:42683:3138":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:23310:22967":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:43202:3685":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:41097:3558":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:5195:9500":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"16:6302:16988":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:2255:9217":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:11473:9335":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"4:6227:223":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:888:9280":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12319:17353":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:12056:17315":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:7448:15215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:42732:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:15931:21461":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:1914:9278":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:16494:20150":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:4495:9466":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:47717:8900":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:4207:3139":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13871:20157":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:2206:3460":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:322:33162":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:5425:9590":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:41264:3614":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:4983:16632":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:34902:2768":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5420:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:2378:17299":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:14533:20675":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:42691:3139":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:46500:8929":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:3048:16073":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:3095:31616":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6098:16978":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:9351:28650":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:11272:26298":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:102:32713":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4964:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"15:394:16006":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:1684:10958":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:15064:20710":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:546:33102":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:351:32703":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:7801:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:3386:2777":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:23368:22216":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5057:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:10861:142":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6042:16975":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:7386:17036":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:2466:9265":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:3764:2786":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:0:315":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:8353:15795":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:43030:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:44340:3786":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:47779:8902":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:8261:14255":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12082:17288":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:8723:141":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12044:17285":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5165:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:4225:9434":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:5727:16972":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:46483:8923":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:5993:2731":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12976:17430":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:42626:3659":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:44485:3722":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6680:17000":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"16:4184:16109":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:0:2604":{"crate_id":17,"path":["object"],"kind":"module"},"0:0:2359":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"4:6706:2511":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:6708:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:5142:3505":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10630:17161":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:8559:3720":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"5:1369:9273":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:46380:8922":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:6827:2738":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:5417:16767":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:15852:21454":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:32727:2677":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:6599:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:12456:341":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"16:8209:17065":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:41717:3587":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4984:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:2640:16055":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:8343:15794":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12306:17375":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"4:6211:3167":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:15963:21465":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:2718:9397":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:6440:16994":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:40928:3514":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:44253:3601":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:3309:2683":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:46448:8969":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"14:187:15978":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:44127:24726":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:13966:3614":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"10:0:2598":{"crate_id":10,"path":["adler"],"kind":"module"},"1:22008:3474":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:44381:3720":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:43104:2729":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:14807:20692":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:38764:2772":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4890:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:623:33956":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:16026:21472":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:45111:3775":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:10537:3684":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:14933:20701":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3339:3493":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:3854:17358":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:1632:10953":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:2796:16062":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:45425:3869":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:44813:3817":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:14294:155":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11788:17277":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:5630:9531":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:41115:3571":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:4953:2678":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:14055:20170":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"4:4829:29246":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"6:5533:14079":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6623:14788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:22064:23038":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"10:36:32694":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:45298:154":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:45123:3768":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:23139:22972":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5113:16693":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:6158:2728":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:5649:16953":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13119:17441":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:45184:3836":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:6917:14838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:2620:16054":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:41241:3612":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:10817:3178":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:3674:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:16084:21474":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11222:17174":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:3659:3546":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"6:6437:14775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13515:17191":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:155:16021":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"5:1538:3139":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:46853:8953":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:44351:3789":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:41365:3621":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5205:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5325:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:16198:21481":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:16209:21482":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7192:17028":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:1400:3120":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"4:7951:28753":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"4:6895:2745":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:7521:32946":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:6700:14797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:6904:17015":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:12465:750":{"crate_id":4,"path":["std","f128"],"kind":"primitive"},"17:13945:20162":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:46640:8918":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:6028:16974":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:16132:21475":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:7531:9285":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:12475:1860":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"5:4998:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"4:12469:922":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:11068:26185":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:679:9241":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:7089:9621":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:10791:3701":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:1635:9287":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:5295:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:16750:21661":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:6794:17006":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:10246:17149":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:873:9271":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:10530:122":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:15689:21440":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:12451:1196":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"16:7838:17044":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:11515:17240":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15760:21446":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:13039:3806":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:13547:17193":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:0:574":{"crate_id":1,"path":["core"],"kind":"module"},"16:2467:16047":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6421:16993":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:12471:1884":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"17:14520:20674":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6666:14793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:10549:16973":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:4349:9463":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:8165:17063":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:8097:9318":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:7397:28759":{"crate_id":4,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:7724:2814":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:6526:9643":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"18:765:21691":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11653:17226":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:15439:21428":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"9:0:2597":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:39977:2789":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4842:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15769:21447":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:990:9271":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:40860:3541":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:6765:14805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:2966:16070":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:2796:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"14:7:15970":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:8201:9358":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"18:573:33957":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:24072:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:708:9267":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10031:17143":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:7350:15213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7259:17030":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:44288:3201":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:531:21703":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:809:9265":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:7743:29498":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"6:465:10037":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:559:10049":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:6020:2732":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5366:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:8091:9246":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:3133:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:11630:17228":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:14001:20166":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11750:3734":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11805:17263":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:41758:3593":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:5249:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5282:14050":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:15953:21464":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:47638:8895":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:4149:9428":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:2328:9338":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4962:2679":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"16:2748:16060":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:10494:147":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:3441:16078":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:2437:17284":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:3850:3140":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:0:2605":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:40057:2778":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:928:9281":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:718:21689":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:5224:16712":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"9:176:15944":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:10934:9494":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:3049:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:14152:20177":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:1576:9263":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"5:2815:30083":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:38819:2773":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:15050:20709":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:43519:3457":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"4:2020:802":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"4:4333:9461":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:3913:9422":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:45323:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6064:16976":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:12583:17334":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:534:9217":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:11224:23290":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:11785:3724":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:15812:21450":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:14573:20678":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:1085:32695":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:4827:2668":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:41125:3572":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:5682:116":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:11818:17262":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:4881:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"4:967:9269":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15939:21462":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"9:328:15895":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:8284:14258":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:3058:148":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:13375:3808":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:22094:9363":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:7542:33135":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5757:33086":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:7074:3606":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:32713:17081":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:5367:444":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:11141:28772":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:12848:3782":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:5131:17442":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"4:11333:165":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:44399:3724":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:3267:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:578:10052":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:44327:3787":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5462:14071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:14773:20690":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:1888:9265":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:12479:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"11:328:32711":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7016:17022":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"4:12435:26202":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:14832:20694":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:40830:3518":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:6493:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4829:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"18:80:21677":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:1626:3144":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:0:1746":{"crate_id":4,"path":["std"],"kind":"module"},"1:884:193":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"5:984:9282":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10141:17146":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11864:17260":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12625:17341":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:3403:9408":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:22155:8909":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:8753:9519":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"11:364:3110":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:2684:16057":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:9420:190":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:47612:8893":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:6930:31222":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:507:28761":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11065:17171":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:8626:17079":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:3299:120":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:10406:3176":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:23332:21952":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:4566:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:11075:33952":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:2367:31578":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:14821:20693":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:9182:9539":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"5:3308:31182":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6942:17017":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10549:3689":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8402:149":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7959:17050":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"18:706:3779":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:3304:252":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:133:2510":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:34383:2764":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:6502:16015":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:46800:21986":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:5388:24793":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:7590:31163":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:3075:229":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"6:473:10038":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:14627:20682":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:44698:3534":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:41733:3589":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:5105:9488":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:570:10051":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5379:16752":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:0:2603":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:3551:145":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:45315:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:6890:17014":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:0:1021":{"crate_id":6,"path":["libc"],"kind":"module"},"4:8694:9444":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:7765:17043":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:5865:223":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:6882:13917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11503:17213":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"4:12466:928":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:12467:910":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"16:7358:17034":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:7824:9601":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:40920:3534":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:1711:10961":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12163:17318":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:6573:16996":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:5285:28641":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:41203:3603":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:42564:3646":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"14:0:2601":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:6159:16982":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:11950:9421":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12371:17332":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:6611:14787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11617:17174":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"9:500:15842":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5117:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:42305:3634":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:2508:9352":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:13301:3762":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:2435:16045":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12762:17391":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5217:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:8267:17068":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:12392:17352":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:32743:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:15549:21433":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:6813:14808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:5477:14073":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:12249:17372":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:3539:3590":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:14947:20702":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:39398:2774":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:44784:3815":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:34238:2762":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7949:17049":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:44956:3822":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:12066:17310":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:14917:20700":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:6710:2735":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:5127:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11386:17205":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14738:20688":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:8624:9467":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:12347:17377":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"4:2331:3448":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"6:6462:14778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2894:198":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:47270:8954":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:7361:15214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:22706:8908":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:44216:3200":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:44449:3793":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4929:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:9169:9538":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:15753:21445":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:4896:2676":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:45293:22326":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:13838:20155":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13818:20154":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"14:220:15980":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"11:830:9266":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:12869:17188":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:14599:20680":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7777:9334":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:22045:23043":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:1604:9267":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:22904:9363":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:4705:2687":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:2013:9330":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:3446:9404":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:9397:26220":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:1521:10943":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:5658:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"16:7554:17041":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:1907:9311":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15160:20716":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:8213:9359":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12234:17371":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:5255:16720":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6462:16995":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:1871:9301":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:46316:8915":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:13145:17436":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:5682:14095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:1500:10940":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:6473:14779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:1539:10945":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:22842:9038":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:12018:17313":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:3548:144":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11291:33944":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:1932:3163":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5051:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2550:16051":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:16218:21483":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11232:17212":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:3752:150":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:40013:2788":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:5449:16776":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12673:17407":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:41303:3605":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:23499:22286":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:3028:9363":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:40899:3542":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:23276:22074":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:47702:8899":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:42708:199":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3144:141":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:908:33162":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"11:2420:2806":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"4:4177:9431":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:46898:8959":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:40074:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:15739:21444":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:4694:16527":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:538:21704":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5318:16737":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:42473:3637":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:3620:3165":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:22273:8907":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:2732:3752":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:8298:17069":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:7620:30113":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:3084:2866":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:4823:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:11163:17173":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:7648:2806":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6111:16979":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:5468:996":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:7946:3583":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:2147:3140":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:3587:16079":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:6185:3505":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:7214:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:4163:9429":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:47603:8892":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:6368:16990":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:3381:2776":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"4:7839:28385":{"crate_id":4,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"11:1601:15962":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:11129:28765":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:6640:16998":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"6:5428:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"11:2323:3120":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"4:9496:9553":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:8284:3140":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:14214:118":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:42635:3642":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:2208:3461":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:40886:3540":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:0:516":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"5:6839:2806":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:41273:3615":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:8302:14261":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:1122:31222":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2209:3431":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"4:4211:9432":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:8268:28681":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:2704:16058":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10534:16972":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:8267:14256":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:44763:3814":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:13055:17230":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"4:8516:9362":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13266:17179":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7495:33118":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:45364:3865":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:3919:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:43970:21839":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:7539:15221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7980:17052":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:22969:9041":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:5362:207":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:12952:17428":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:3091:31617":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:22167:8906":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:3677:9361":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:2086:200":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:32734:3490":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:15887:21457":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:10535:132":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:45301:167":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:15010:20706":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:491:10041":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:44196:3198":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:12477:1946":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:2863:138":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:38654:2770":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7471:17040":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:32832:3392":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"11:671:3138":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8869:3547":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:281:31222":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:45119:3774":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:3448:9405":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"4:8578:9419":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:10756:160":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:3352:9407":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:13169:17471":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"4:8643:9420":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"13:0:2595":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:10774:9408":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"16:2860:16065":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:9377:26284":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4792:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10950:23292":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"4:11822:26287":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6680:14795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:14072:20171":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:31092:2704":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:41031:3533":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11527:17234":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:16812:21666":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:12095:17286":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:1725:159":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3554:146":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"11:698:2806":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12962:17429":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"11:434:32707":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:472:17140":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:11085:9539":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:41524:3624":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:46771:22321":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:8096:17059":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:44431:3794":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:8839:9522":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"11:881:9272":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:47347:8926":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"14:31:15970":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13890:20158":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:1854:711":{"crate_id":4,"path":["std","env"],"kind":"module"},"6:5405:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"14:214:15979":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:31145:3457":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:4119:9426":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:22930:24806":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:485:10040":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:15351:21424":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:12463:755":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"16:8121:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:2920:16068":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:6716:14799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"4:8489:3586":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:8612:17078":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:45099:3770":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:46433:8963":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:3126:16075":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:34037:2763":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:13062:3803":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:43742:160":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"9:355:15855":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:583:17141":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:5593:14085":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:894:3139":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:386:9236":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:4990:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:8290:14259":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:10565:3177":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:6658:16999":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13014:17447":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:16775:21663":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"11:299:3106":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:430:32712":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:8566:3790":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:46821:22073":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:46838:22032":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"8:0:2596":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:4221:9433":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11401:17206":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"11:488:157":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:5709:16971":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:23587:22056":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:7789:9591":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"4:6310:28774":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:1339:17235":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11630:3720":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:1675:10957":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:7938:17048":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:11465:17211":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"6:5670:14093":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:47649:8896":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:10408:28652":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:2880:16066":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:8276:9398":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:13854:20156":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:45115:3773":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:14299:20663":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"16:2772:16061":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:14672:20685":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13610:17196":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11319:33939":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:4018:9423":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:3061:263":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:43216:3686":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:5114:9489":{"crate_id":4,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"9:480:15838":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:8319:14263":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:11029:26223":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12897:17426":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:3363:9279":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11733:17250":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"4:9271:9550":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15714:21442":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:47392:8960":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:45127:3769":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:43442:22025":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:11539:17230":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:5271:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13491:17190":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:5650:9532":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"16:4152:16100":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"4:3496:9391":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:23012:9363":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:6914:17016":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:11363:29221":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:1414:9275":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12537:17336":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:1585:9264":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:4464:3505":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:13554:17200":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:40219:2783":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5635:14089":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"4:11839:28684":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:6579:9556":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:5494:14076":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:16642:21653":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12826:17388":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14084:20172":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:5575:9594":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:8585:17076":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:4267:16146":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:45095:3767":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:14237:3203":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:4554:24902":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6866:17012":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:1652:9279":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5288:14051":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:984:3114":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1507:10941":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:5107:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10977:33953":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"4:12472:1866":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"1:10313:3699":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:7431:11066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5044:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:7316:10894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:16171:21478":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:6758:31222":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:15106:20713":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:45414:3871":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:4997:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:8553:3577":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:32744:242":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:23543:22081":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"11:1158:9275":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:3042:3164":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:22096:8910":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:1569:10948":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:44680:3535":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:40412:3480":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:7883:17045":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"4:5316:28641":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:13002:3804":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:7883:9265":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:3695:16080":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6738:33166":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:1220:17227":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:23598:21983":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"6:5570:14083":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4805:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:8105:17060":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:3503:17335":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2990:16071":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5334:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"5:1486:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:14612:20681":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:31124:2509":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:12424:3732":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:7372:17035":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:40239:3508":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:3087:31548":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12687:17419":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:11910:9422":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:3829:131":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:44878:3819":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:2900:205":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10748:156":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:4132:3144":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4970:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:15829:21451":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:22030:23047":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"4:575:3158":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:5986:2730":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12008:17312":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:10778:17165":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:42769:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:3693:185":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:7414:11068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:16311:21488":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8559:181":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:15946:21463":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12787:17387":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11720:17249":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:8058:17057":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3526:2684":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:16362:21492":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:47623:8894":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:12711:17421":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:6876:14836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:16399:21495":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:3297:268":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:15036:20708":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:659:21692":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6638:14790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:7487:15219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:41232:3611":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2112:2700":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:40111:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:47687:8898":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:4780:9487":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:1900:9276":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:40824:3514":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"4:9316:9222":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:15641:17229":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:8422:2710":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"11:1105:3122":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:211:3128":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:3916:9421":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:497:10042":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12035:15955":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:46544:8990":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11309:17176":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:15:2572":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:15621:21420":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:10777:9404":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:667:17142":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:630:9238":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:779:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:14438:20670":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:42880:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:8889:3138":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:8498:9411":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"1:44503:3718":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:10387:9311":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"4:5543:132":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:5804:9535":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"16:5689:16970":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:7058:17025":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12028:17314":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:8824:9521":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:15286:21422":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:9344:28615":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:41724:2511":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:517:10043":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11173:33950":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:10541:3686":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:41087:3577":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"4:5736:9534":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:14335:17380":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:317:33163":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8369:3599":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:7896:17142":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:16714:21658":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:43764:22962":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:2820:16063":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:44689:3514":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:40129:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:3851:9418":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:4028:3144":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"6:5311:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:6521:14781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:7765:9333":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:481:21700":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:5676:14094":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:10963:9355":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"4:3307:29996":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:10796:3702":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:10539:3685":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:13471:17189":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:4369:3138":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:41351:3620":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:23348:21950":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:43067:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"4:7335:28381":{"crate_id":4,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6144:16981":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:4914:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:8000:17054":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11958:17258":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11757:17251":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:23324:22019":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:23260:22973":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:8011:9237":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:13692:17478":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12886:17416":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:9305:28642":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:7223:17029":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15896:21458":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6389:16991":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:23441:3285":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:896:33167":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"6:6902:14837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:8536:3609":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:13006:17432":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"11:2539:25892":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:7814:9600":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:3014:16072":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:7463:15217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:42954:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:8026:9226":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:2245:132":{"crate_id":4,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:3351:2753":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"5:2584:3131":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5255:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"11:1064:15959":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:8118:3586":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:46331:8951":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:14058:208":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3777:22678":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:16187:21480":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:5807:9536":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:13095:17443":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:7168:15989":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:44308:3202":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:5198:16709":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:687:9243":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:14416:20669":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"9:445:15839":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:9364:17042":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:3085:31620":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:3569:3505":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"6:6777:14807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:4906:2677":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:16798:21665":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:3737:2782":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:3720:17340":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:16241:21484":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:5872:3167":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:4241:16143":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:16019:21471":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:1005:9273":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10545:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:523:10044":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:5641:14090":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:46754:8992":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:7075:17026":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:32803:3495":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11673:3733":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:2335:9339":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"17:16179:21479":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4957:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:5616:9530":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:16632:21652":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:14083:3859":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7829:3548":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"0:28:2359":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:11706:17248":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11026:33946":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13322:17182":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:12464:771":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:7341:15212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:6885:3626":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:7563:15223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"9:53:15858":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:9310:118":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:2083:201":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12941:17418":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:16159:21477":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:6823:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:16332:21490":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:545:10047":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:45149:134":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:5450:14070":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:10793:17166":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"17:10332:17152":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:2660:16056":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:1494:10939":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:11281:17175":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"4:10953:26357":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"4:12462:752":{"crate_id":4,"path":["std","f16"],"kind":"primitive"},"1:23576:22288":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:6544:14784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:785:9264":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"4:11788:9542":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7789:33157":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7716:33146":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12723:17394":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:12238:28372":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:42991:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:4810:16597":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:8320:17070":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:23620:22328":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:13983:20165":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15090:20712":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:42555:2806":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:14327:17382":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:41145:3580":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:41294:3616":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:4162:31222":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:2498:9347":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"11:772:9263":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6837:17009":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:9447:2740":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:2672:3443":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:15573:21434":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10442:17156":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:670:21693":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3747:259":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:2142:1385":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:22149:8905":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:13307:3776":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:2754:9388":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:903:33163":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"4:1630:9265":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:23609:22331":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:7570:9284":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:9256:9547":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:16283:21486":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:7180:9554":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4902:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:7737:9332":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:15864:21455":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:4297:3505":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:11407:9336":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:10167:17147":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6564:14785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:5629:14088":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:2294:31561":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:43957:22018":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1:46927:8965":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:4120:16091":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:15540:21432":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:41222:137":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6443:14776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13970:20164":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:6560:9555":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:15981:21467":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4896:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:6852:17011":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"11:2440:3144":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:12832:3713":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:13261:3268":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:42547:3139":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"16:7508:33120":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:5972:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:4542:24997":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:41060:3576":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:43452:3457":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:22546:9363":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:41282:3625":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:5128:9490":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:41375:3608":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:8598:17077":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:15315:21423":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:2590:16053":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"3:0:2594":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:43536:141":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"16:4902:16620":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:6588:16997":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"4:11280:3834":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:41181:3609":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13398:17186":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:5395:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:11605:3139":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:15121:20714":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15410:21425":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"14:160:15970":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:42699:2806":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:33970:2759":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:15905:21459":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:8801:9520":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:44206:3726":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:4:1280":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:7428:26637":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:43974:3738":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:4113:9427":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:14872:20697":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10368:17153":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13028:17438":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"18:563:21705":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:23054:9034":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:2282:192":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:11261:9538":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:9139:9537":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:10547:3688":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:47466:8966":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:1551:10946":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:5305:17448":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:11124:33942":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12260:17373":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"4:8031:9228":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:22983:3442":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"11:2380:3138":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:651:33957":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:4832:2669":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1554:2806":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:47143:22033":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"4:10657:9537":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12860:17425":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:15475:21429":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:5507:14077":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:42605:3650":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:40089:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:15989:21468":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:23521:22325":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"4:12424:9247":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"0:31:2366":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"17:16145:21476":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:14975:20704":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:41152:3601":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:10474:9541":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"4:6537:223":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:14586:20679":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:7895:23106":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:14796:20691":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:680:21694":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5069:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11831:17230":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4947:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:12046:16003":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:8368:9400":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:32802:2707":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:16008:21470":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:4414:9465":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:32:15811":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:46739:8991":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:39:9296":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6713:17002":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:2530:16050":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:5471:14072":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6970:17019":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:4311:28686":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:44635:3790":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:3799:31222":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:47077:8986":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5381:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:12452:482":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:13209:141":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:44227:3730":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:7308:10090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:23410:22960":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11592:17222":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12920:17427":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:14708:20687":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:8583:9417":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:43717:3704":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:13958:20163":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:8879:9523":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:4233:9436":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:2559:32701":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:44967:3823":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6408:16992":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:15148:20715":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:31130:2705":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5025:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:44549:3798":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:41016:3538":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:11808:26293":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:726:21697":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:2551:32697":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6239:16986":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:3356:2758":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"9:422:15841":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:1229:3130":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:4984:2680":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"11:123:3103":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4161:2806":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:12699:17420":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:47098:22024":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"4:8736:9504":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3531:2685":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"11:396:3112":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"4:11021:26285":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:8617:3636":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:2326:142":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"1:10543:3687":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:8503:17072":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:16323:21489":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11985:17311":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11581:3138":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:589:23004":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:45356:3864":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:44645:3792":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5648:14091":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7731:3646":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:6489:3167":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"18:735:21690":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:16507:20151":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:31503:199":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:5319:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:15876:21456":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:45103:3772":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11691:17220":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13427:17187":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"16:5348:16744":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:14652:20684":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:9746:9358":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"11:2366:15963":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:15844:21453":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:12149:17283":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:16264:21485":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12359:17378":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:41510:3623":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:1001:3138":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:4825:29242":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:45131:3834":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:44990:3780":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:6770:14806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:1657:10955":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:6824:2737":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:3342:31171":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:725:30130":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:9511:3648":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:10476:3546":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:9452:2741":{"crate_id":4,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:16385:21494":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:41500:3622":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4875:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3065:262":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:22047:23041":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:44266:3729":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6608:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:22076:23051":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:7578:17042":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:10548:116":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"4:9190:3138":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:12455:1340":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:42843:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:698:21696":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:47583:8890":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:1489:10938":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:7899:9618":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:13193:17439":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:1898:3391":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"11:2148:9274":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9982:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8913:22897":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:43733:3703":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:5488:14075":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:8711:17082":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:15836:21452":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:8255:14254":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:8223:9356":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:7085:23036":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:22263:9363":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:22018:23047":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"16:7030:17023":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:14140:20176":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:4937:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:11248:9493":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:2172:9288":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:40189:2781":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:41739:3590":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:16036:21473":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"11:740:9268":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:1893:9265":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:47545:8972":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6449:14777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:2347:31549":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1643:10954":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:11712:3721":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:788:121":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5341:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"7:79:15818":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:16832:20163":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:7560:3144":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:3758:2784":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:11864:3722":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:5526:31222":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:10475:229":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"11:1564:15961":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:5441:14069":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:14358:20665":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:42273:3632":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:925:9264":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:42511:197":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:4921:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13781:20152":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:11887:3180":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:16822:20161":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:47060:8937":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11566:17224":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:1117:9275":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:6652:14791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:9323:26272":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:6881:2744":{"crate_id":4,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:4976:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:14257:3205":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:43223:3687":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:11952:17271":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10597:17160":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:10983:9359":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:10729:17164":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:12053:16003":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:10784:33943":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"4:1930:3162":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:47592:8891":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:7548:15222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12851:17424":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:11833:28687":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:11147:28773":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:23554:22058":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:42451:3636":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:44905:3820":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:1530:10944":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:7640:2806":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1625:10952":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:12293:17331":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:7990:17053":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14750:20689":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:6719:2512":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:47566:8993":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:7332:9919":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:32720:23092":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:42417:23023":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:16656:21654":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:23510:22059":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:43511:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:2215:3189":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:10771:9406":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"5:7123:9623":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"4:904:2806":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:13078:3805":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:5196:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"11:1140:15960":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5224:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6953:17018":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:9739:142":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"4:1869:9300":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:13798:20153":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:6284:3505":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:9442:238":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"14:165:15971":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:6659:14792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10418:17155":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:13926:25155":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:23565:22057":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:44603:3796":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:7907:17046":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:8906:9525":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:5603:14086":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:8635:9457":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13082:17174":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:12135:17317":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11432:17208":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:12391:3731":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:4574:31218":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:6822:17008":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"4:439:188":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5562:14082":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11878:17173":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7159:17027":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:1703:10960":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:14099:20173":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13592:17195":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:11782:28635":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12550:17337":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:8010:9363":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:46395:8952":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:6179:3151":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:16555:21651":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"4:2648:9396":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:3495:2787":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"9:236:9520":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"4:9145:202":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:8413:168":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:16684:21656":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:11448:17209":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:5412:1267":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:8365:3600":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:8504:2709":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}