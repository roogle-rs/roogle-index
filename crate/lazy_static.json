{"root":"0:0:1760","crate_version":"1.4.0","includes_private":false,"index":{"1:12472:24961":{"id":"1:12472:24961","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12067:450","str::splitn":"1:12469:24959","self::pattern":"1:12106:3456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43648:3409","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12427:24946":{"id":"1:12427:24946","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12428:24947"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12436:22549":{"id":"1:12436:22549","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43818:3494","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12524:24858":{"id":"1:12524:24858","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:26097":{"id":"5:5537:26097","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12527:24862"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12405:872":{"id":"1:12405:872","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12067:450"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12501:28426":{"id":"1:12501:28426","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12131:3471","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12497:28423":{"id":"1:12497:28423","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12493:28421":{"id":"1:12493:28421","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12435:28415":{"id":"1:12435:28415","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43790:3487","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12495:28422":{"id":"1:12495:28422","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12504:28427":{"id":"1:12504:28427","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12406:2239":{"id":"1:12406:2239","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12432:22524":{"id":"1:12432:22524","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12433:22539"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43800:3486","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12416:341":{"id":"1:12416:341","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12463:28416":{"id":"1:12463:28416","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12106:3456","str::split":"1:12454:24954","prim@char":"4:12067:450","`DoubleEndedIterator`":"1:7518:126","str::rsplit_terminator":"1:12466:28417"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43576:3489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1760":{"id":"0:0:1760","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1766","0:31:1767","0:28:1760"],"is_stripped":false}}},"1:12510:24968":{"id":"1:12510:24968","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12446:2280":{"id":"1:12446:2280","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12529:28432":{"id":"1:12529:28432","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4573:28432"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43825:3239","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:3144":{"id":"5:5520:3144","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12513:28428":{"id":"1:12513:28428","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12423:23080":{"id":"1:12423:23080","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12407:28409":{"id":"1:12407:28409","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12434:27716":{"id":"1:12434:27716","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43780:3485","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:29092":{"id":"5:5519:29092","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2067","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2067","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5523:29093":{"id":"5:5523:29093","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29094":{"id":"5:5526:29094","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:29095":{"id":"5:5534:29095","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12429:22547":{"id":"1:12429:22547","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43496:3484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12408:28410":{"id":"1:12408:28410","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12443:24966":{"id":"1:12443:24966","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12527:24862":{"id":"1:12527:24862","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12519:28430":{"id":"1:12519:28430","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12460:24957":{"id":"1:12460:24957","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12106:3456","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::split":"1:12454:24954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43544:3415","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12431:24390":{"id":"1:12431:24390","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43512:3482","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12417:1765":{"id":"1:12417:1765","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12425:28413":{"id":"1:12425:28413","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12073:1506","str::slice_mut_unchecked":"1:12426:28414","crate::ops::Index":"1:3073:2151"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1766":{"id":"0:29:1766","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:31:1767":{"id":"0:31:1767","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12490:28420":{"id":"1:12490:28420","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12106:3456","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::match_indices":"1:12487:28419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43694:3493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12525:24859":{"id":"1:12525:24859","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39520:20820","Self::is_ascii":"1:12524:24858"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39520:20820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12478:24964":{"id":"1:12478:24964","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12426:28414":{"id":"1:12426:28414","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12073:1506","crate::ops::IndexMut":"1:3077:2152","str::slice_unchecked":"1:12425:28413"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12433:22539":{"id":"1:12433:22539","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12432:22524"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43809:3495","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12528:24863":{"id":"1:12528:24863","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12466:28417":{"id":"1:12466:28417","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12106:3456","str::split":"1:12454:24954","prim@char":"4:12067:450","str::split_terminator":"1:12463:28416"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43594:3488","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12526:24861":{"id":"1:12526:24861","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:3295":{"id":"5:5536:3295","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7489:248"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:26098":{"id":"5:5538:26098","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12528:24863"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12410:28411":{"id":"1:12410:28411","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12408:28410"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12428:24947":{"id":"1:12428:24947","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12427:24946"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12499:28424":{"id":"1:12499:28424","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12531:3217":{"id":"1:12531:3217","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4574:3217"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43834:3218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12469:24959":{"id":"1:12469:24959","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456","str::rsplitn":"1:12472:24961"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43630:3413","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12414:28412":{"id":"1:12414:28412","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12430:22709":{"id":"1:12430:22709","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12067:450"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43502:3483","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12454:24954":{"id":"1:12454:24954","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12106:3456","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::split_whitespace":"1:12432:22524","str::rsplit":"1:12460:24957"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43526:3411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12481:1965":{"id":"1:12481:1965","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12106:3456","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::rmatches":"1:12484:28418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43730:3490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:29096":{"id":"5:5535:29096","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2067","`String`":"5:7489:248"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2067","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7489:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1760":{"id":"0:28:1760","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12404":{"id":"1:12404","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12405:872","1:12406:2239","1:12407:28409","1:12408:28410","1:12410:28411","1:12413:26091","1:12414:28412","1:12415:342","1:12416:341","1:12417:1765","1:12419:23078","1:12421:23079","1:12423:23080","1:12425:28413","1:12426:28414","1:12427:24946","1:12428:24947","1:12429:22547","1:12430:22709","1:12431:24390","1:12432:22524","1:12433:22539","1:12434:27716","1:12435:28415","1:12436:22549","1:12437:23498","1:12440:24965","1:12443:24966","1:12446:2280","1:12450:2238","1:12454:24954","1:12457:22533","1:12460:24957","1:12463:28416","1:12466:28417","1:12469:24959","1:12472:24961","1:12475:24963","1:12478:24964","1:12481:1965","1:12484:28418","1:12487:28419","1:12490:28420","1:12493:28421","1:12495:28422","1:12497:28423","1:12499:28424","1:12500:28425","1:12501:28426","1:12504:28427","1:12507:24967","1:12510:24968","1:12513:28428","1:12516:28429","1:12519:28430","1:12522:28431","1:12524:24858","1:12525:24859","1:12526:24861","1:12527:24862","1:12528:24863","1:12529:28432","1:12531:3217","1:12532:28433"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5518":{"id":"5:5518","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5519:29092","5:5520:3144","5:5523:29093","5:5526:29094","5:5534:29095","5:5535:29096","5:5536:3295","5:5537:26097","5:5538:26098"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12457:22533":{"id":"1:12457:22533","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11922:3424","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12440:24965":{"id":"1:12440:24965","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12450:2238":{"id":"1:12450:2238","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41566:196","prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12475:24963":{"id":"1:12475:24963","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12507:24967":{"id":"1:12507:24967","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12500:28425":{"id":"1:12500:28425","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12437:23498":{"id":"1:12437:23498","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12484:28418":{"id":"1:12484:28418","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12106:3456","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::matches":"1:12481:1965"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43748:3491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12126:3472","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12522:28431":{"id":"1:12522:28431","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12067:132","`FromStr`":"1:12066:2997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41709:231","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12066:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12066:2997","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12516:28429":{"id":"1:12516:28429","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12067:450","self::pattern":"1:12106:3456"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12421:23079":{"id":"1:12421:23079","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12419:23078":{"id":"1:12419:23078","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41566:196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41564:198","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10196:244","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12532:28433":{"id":"1:12532:28433","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4571:28433"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43843:3238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12415:342":{"id":"1:12415:342","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12416:341","`u8`":"4:12084:1612"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12413:26091":{"id":"1:12413:26091","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11666:3476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12487:28419":{"id":"1:12487:28419","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12106:3456","`DoubleEndedIterator`":"1:7518:126","prim@char":"4:12067:450","str::rmatch_indices":"1:12490:28420"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43676:3492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12111:3470","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"16:7318:16125":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:1604:10608":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:4428:2702":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:12087:1611":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:9933:16298":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:2051:2913":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:43818:3494":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:42829:22922":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:629:29416":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:2604:9060":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4913:13216":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:6811:14320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:4208:9131":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:22870:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2833:2061":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:12172:19148":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:7514:9271":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6835:14322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4441:13166":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2428:15140":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:45564:8649":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12531:19645":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"4:4597:9155":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13611:20406":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:21816:23300":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:41501:3345":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:3236:9077":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"10:0:1991":{"crate_id":10,"path":["adler"],"kind":"module"},"6:7538:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:822:8949":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:46065:8616":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:563:9710":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7492:16130":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:8244:3482":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"16:5798:16073":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"13:0:1988":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:7769:8957":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:2961:2306":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:11358:16491":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:7597:31215":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:3358:9064":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7568:16137":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:39228:220":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:47879:8582":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:4734:13195":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4690:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4288:2075":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:40768:1907":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:569:9711":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:8239:16163":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:531:20512":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5790:13882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:44281:3525":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:7601:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:12576:19648":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:7102:16123":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:6171:211":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:6622:14312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"9:486:14929":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13739:20413":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:12280:19156":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11687:16264":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13981:20430":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:582:3184":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:7776:8993":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"6:6790:14319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:7758:8932":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11154:3422":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:4806:15788":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:4529:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:21359:8595":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:2783:2060":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:44245:3461":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:43342:2938":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:6467:1908":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"6:4892:13214":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"4:5336:125":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"10:44:15040":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:9548:3379":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:8329:9126":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:7582:16138":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:6720:14314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:0:1997":{"crate_id":17,"path":["object"],"kind":"module"},"4:5423:9202":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12267:19155":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:1516:215":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:4195:9130":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6499:16102":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6043:13902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:46163:8634":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10641:3409":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7523:16133":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:10410:16342":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14110:20443":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:119:9381":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:14401:20462":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:43322:2936":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:7465:9008":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11226:16484":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:3180:8959":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:3865:9094":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:42330:3377":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:504:16226":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:7310:14697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"11:1010:2895":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:6513:2671":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:14221:20451":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5063:13232":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4418:13163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:40761:3292":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:44549:3556":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12658:19652":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:4166:2699":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:45694:8655":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:7261:2683":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:9242:16241":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:47575:8630":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:32027:22586":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:39333:3199":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:5667:9215":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"4:1429:151":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10139:16314":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"4:11654:15093":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:2368:2693":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"4:840:2908":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:2766:15154":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:42323:3375":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:1986:201":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:7708:16144":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:3698:9089":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:955:8952":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:3274:23272":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:12070:1116":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"18:614:32072":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:1846:2243":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2535:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"18:80:20485":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9172:16239":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:10135:28231":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:9886:16277":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:46385:22770":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13897:20423":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13851:20419":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:3737:2913":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:8389:9115":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13546:20402":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:12072:1474":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:7937:124":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:1562:15053":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:6151:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:39347:3213":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:1642:3126":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:12751:209":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:9617:32043":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:7939:3304":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:2325:205":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"14:160:15060":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:22705:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11316:16478":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:7614:14884":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6901:16116":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3240:8961":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:2409:2002":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:44125:3519":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"11:427:30870":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:11719:16266":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:6960:16119":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:1501:10596":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12074:19141":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:2670:15150":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:7054:31304":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13667:20408":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:9031:82":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:41880:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6145:13932":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:12065:401":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"5:4034:2671":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:2744:15153":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:47821:8691":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:12126:3472":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:2479:30860":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:3655:15170":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:10009:21080":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:40035:3241":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:20862:3184":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:9607:16247":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7828:16150":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:2305:15134":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12111:19144":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:358:8920":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:6826:2724":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:9233:28247":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:21458:9036":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:45835:8633":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:12071:339":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:638:8926":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:863:2243":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:9506:137":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:2888:2136":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:11228:3175":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:7231:2243":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:943:2891":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:10340:16328":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:4016:9101":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:8345:9136":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:9574:32053":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:4884:1065":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:3206:8960":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:10196:244":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:10193:27076":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:884:8945":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:12043:19139":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:4826:2741":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"4:1931:703":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:42566:69":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:11666:3476":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"15:306:15085":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:8716:3470":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:9660:32033":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"4:8833:9208":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"4:3523:27907":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"4:11572:9094":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12945:19670":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:1521:10599":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:44269:3468":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:35:2667":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:8206:9035":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:9036:89":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13228:19690":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6849:14323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13676:20409":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:2568:2737":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"9:450:14930":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:46017:8668":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:707:3473":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:4799:13203":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:2722:15152":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:10114:8986":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:3315:9075":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:10637:16387":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:3915:15233":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:32038:23034":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"17:14324:20457":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:7945:27559":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:41752:2908":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:12066:2997":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:40262:3319":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:6454:1907":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"4:8879:9211":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"5:3722:2910":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:1632:10609":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2948:2150":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2696:15151":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10548:3415":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:7792:8994":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:1912:10782":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10468:16379":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11573:16260":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:21489:8604":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"13:226:30923":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:4847:13209":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:7920:135":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:2935:2147":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:1145:8955":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"11:0:1992":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:41760:2909":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:1591:10606":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:22044:21099":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:23416:241":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:491:32077":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:12120:3473":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:5409:9201":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"0:31:1767":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"4:12086:1610":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"11:1541:2900":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:671:20502":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12765:19660":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:10292:16248":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3044:1912":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:7976:22956":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:40792:2784":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12007:19137":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:7285:2243":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5982:13895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:43332:3417":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7513:16132":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:8115:16156":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"4:4187:9129":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:11788:16497":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5982:16079":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"4:9505:134":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:12332:116":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"15:327:15089":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:11205:27188":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6243:16086":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4877:13213":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:1570:10604":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:13792:20414":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6386:16095":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:39927:3222":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"11:2085:8954":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:4021:23015":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:1850:2693":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:3326:2094":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11389:16252":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:47839:8578":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:21482:9036":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:2787:249":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:9755:152":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:4436:2086":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:5994:13896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:14173:20450":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:1672:1155":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:22279:20960":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:3065:15165":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4561:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5970:13894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:8588:9195":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"18:609:32089":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:2551:262":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:9051:16209":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:14346:20459":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:40783:3296":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:8274:9088":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:40313:3324":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:4943:9163":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7792:16149":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4867:13212":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:40281:3321":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:4613:15715":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:14033:20435":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:6816:2722":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:6958:2725":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:2894:2740":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:22345:2999":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:5121:15863":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:40129:3259":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:12089:847":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"5:3802:2712":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12208:19151":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:4350:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:1127:15051":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6485:16101":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5782:13881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:9106:26191":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"14:31:15060":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:45817:8627":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:40016:3239":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:4655:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4968:13223":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6083:15106":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14118:20444":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:10576:9074":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:5727:16070":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:5975:2108":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:3441:16402":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:9998:16286":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:30273:21085":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12465:16442":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:8318:9134":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:42846:152":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:6914:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:5712:16069":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"4:6277:2749":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:41709:231":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:4056:9103":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:11628:9240":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:11617:16262":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:10468:9208":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:644:32058":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2881:15159":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:47920:8585":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:45586:8654":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11742:16267":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:12724:23204":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7768:16147":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11815:16498":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:22324:22911":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:8895:9223":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:256:32044":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:3255:2157":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13802:20415":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:12068:1628":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"16:4889:15799":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:12078:692":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:10771:16414":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:2209:16348":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"4:11024:9211":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:40099:21050":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10366:16335":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:12702:159":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:6206:3312":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"4:8257:3485":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"16:6569:16106":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:43932:3510":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:11551:9092":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:39326:2156":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:149:2655":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"11:2487:30862":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12997:19674":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10903:16400":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:3596:2909":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"14:165:15061":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:2897:2143":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2618:15148":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4709:13192":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13024:19676":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:9146:156":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:11586:16261":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:8031:28196":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:1882:8961":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:3125:9082":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10440:16378":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:10383:16321":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:2644:15149":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:47039:8618":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:6686:10725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:4653:9102":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6082:13904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12911:19668":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6041:16082":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:11193:9210":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:11232:9040":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:22258:21031":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:8996:2113":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:10795:27040":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:4296:13153":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:7796:22586":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:4772:9117":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:2361:199":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:9445:16244":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:1639:10610":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:11342:27857":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:1290:2895":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:44520:175":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:3764:15178":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4775:13200":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:11811:3499":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"11:772:8945":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10165:16315":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:3023:2093":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"0:29:1766":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"4:10860:2920":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:6098:2743":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:2472:15142":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4822:24627":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:7239:8962":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4592:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4540:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:4585:15711":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:21056:9036":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:21297:9036":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"4:1924:9005":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"16:6879:16115":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11661:16212":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:1697:10616":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:41615:168":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:897:2693":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11351:16490":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:2538:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"16:8134:16157":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:6171:13933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:8281:16164":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4728:13194":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:527:9705":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:0:877":{"crate_id":6,"path":["libc"],"kind":"module"},"4:8599:9196":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:6217:2783":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:868:8952":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:3457:9033":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:1738:3177":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:44261:3469":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:43730:3490":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"16:4774:15780":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:7293:14696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:4640:3231":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:8582:2908":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:9795:3392":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"9:52:14949":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:11647:15093":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:43694:3493":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:5820:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:4259:9132":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:12049:27193":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:4078:9107":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:2788:113":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:2629:133":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:21241:3161":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"4:6494:2120":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:12373:19639":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2904:2140":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:1590:8961":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:22150:20961":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:14282:20453":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:43961:3512":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4555:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:817:8946":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:7271:29923":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:2933:15161":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:43594:3488":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6759:14318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:14378:20461":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:2172:29612":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12830:19664":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9972:16288":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:42876:22930":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"0:28:1760":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"11:483:149":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:9867:16276":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:40365:3327":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:6186:13934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:8146:9032":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:4400:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:21313:8593":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"11:1635:2665":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:31991:3189":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:8926:16235":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:1764:657":{"crate_id":4,"path":["std","env"],"kind":"module"},"14:215:15069":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:4801:419":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:30807:200":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5866:16075":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:2216:9010":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11761:16268":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:14090:20441":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:1674:10613":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:1507:10597":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:1496:10595":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11086:16481":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:8686:16228":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12598:19649":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"9:237:9191":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:43379:3307":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:7621:16140":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:7222:8963":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:860:8951":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:5085:13235":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:654:9762":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12237:19153":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13085:19680":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7330:2243":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:4663:27053":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:7011:27280":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"11:1072:30876":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:5905:16076":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:3958:9098":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4805:13204":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5079:13234":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:44456:232":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:2925:2145":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"9:357:14946":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12024:19138":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:1140:29929":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:7567:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5056:13231":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:3198:27558":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:434:15109":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:4076:2909":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:40802:3299":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13113:19682":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:4463:2087":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2171:3161":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"4:1895:9004":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:41802:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13162:19685":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:5509:2699":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:11048:16467":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13174:19686":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:42661:75":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:44090:3516":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:14269:20452":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:7961:2910":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11507:16257":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"4:853:2909":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:46465:8651":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:9790:3391":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:4137:2095":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:7627:173":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"9:177:15035":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:5017:15831":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4922:13217":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4700:13191":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:12983:19673":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:2798:2090":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:3475:2919":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:4070:9105":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9762:32032":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:5569:3322":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5574:16061":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:21227:8603":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:4921:15807":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:364:8921":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:11991:19136":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4373:13158":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:2012:16329":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:40234:2926":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:47745:8636":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:47387:8624":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:22097:21096":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:11405:24830":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:40342:3311":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:44562:22894":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:7067:31014":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:14126:20445":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:4557:15707":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:43080:3429":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:3565:16420":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:47699:8685":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:43825:3239":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12098:19143":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"4:6385:180":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:1494:8947":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:7443:3305":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"8:0:1989":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"11:841:2891":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:829:8950":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:14156:20448":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:7624:14885":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:7884:16152":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:14076:20439":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:2504:15143":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4643:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6753:16111":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:40192:3307":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:1475:8945":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:20890:23302":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12154:19147":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:7526:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:2872:2132":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11173:16483":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:7590:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:39520:20820":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:40810:3301":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"9:393:14931":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:10456:16349":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9650:16248":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:11006:27209":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:8311:3345":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:45664:8650":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5808:13883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1691:10615":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12086:19142":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:8825:16232":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:5327:2671":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:43313:3407":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4745:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:4745:15775":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:9564:16246":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:2317:2908":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:5844:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5897:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:542:9707":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5878:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4320:13155":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:538:20513":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:44138:3474":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:9184:9225":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:918:8947":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13816:20416":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:6346:16091":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:9945:16294":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:5474:109":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:40252:3318":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11886:19131":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:7405:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:6665:2671":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13989:20431":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13055:19678":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12790:19662":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:30243:3150":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:7025:3288":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:4786:13201":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:41841:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:12123:19145":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:8794:16231":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4346:13157":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4815:13205":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:46111:8622":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:4488:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:3010:122":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6002:13897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7474:16129":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:922:8948":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:7518:126":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6009:13898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:3073:2151":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:6839:9226":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:4641:15719":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:9137:16214":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:46619:8669":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:1710:10617":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13575:20405":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10513:3425":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:12131:3471":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2173:3162":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:501:9703":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:9536:125":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:8195:16161":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:2962:29625":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3041:2064":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:7573:2712":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:7462:16128":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:40115:3284":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:2927:231":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"17:11191:16263":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:43470:3481":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:14448:20465":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:2501:9067":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:7566:27285":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:1505:8948":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:22331:3000":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:6334:9227":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6818:16113":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:8765:16230":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5673:16067":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:10227:16326":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:40777:3294":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:10420:16376":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12062:19140":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:39250:219":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:14163:20449":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:1546:10602":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7589:2716":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7342:31358":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3410:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:49859:8611":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:42556:22947":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:3232:16397":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:12177:3503":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"15:288:15084":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:7360:31349":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"9:426:14932":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"4:622:8924":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:44249:3464":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:5944:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:7885:9030":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:2793:252":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:4669:13189":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"4:12016:27170":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11547:16259":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"11:1092:2897":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:7503:9270":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2618:121":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:588:9714":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13922:20426":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9277:16242":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:2547:263":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"16:5830:16074":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13148:19684":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"11:2473:30861":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:555:9709":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:483:2731":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:4279:226":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:5760:16072":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4721:13193":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:5995:16080":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4683:9096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:9131:181":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7613:16139":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:7476:139":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:7907:9028":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:5088:15854":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13567:20404":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:6174:2745":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:9977:2789":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:43910:3509":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:6974:22552":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:8973:9222":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:7439:3306":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:9488:3250":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"5:7389:8943":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:3429:2699":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:10265:16325":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:2037:2910":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:45610:8614":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:9015:111":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"13:110:30922":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:46543:8657":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:4022:9102":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:6458:2114":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"11:2286:8954":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"0:0:1760":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"11:666:2908":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:2463:2903":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:10588:16383":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:44464:212":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:40568:3333":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:3195:26939":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:7669:9036":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"5:1259:8953":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:11151:16482":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"14:202:9269":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:39208:217":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:40087:3285":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2884:2137":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13188:19687":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:10359:109":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:10776:9166":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:14296:20454":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:10586:3416":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:7736:16146":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:10570:9076":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:6456:16099":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:12080:795":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:5459:9204":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:21463:8594":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:4523:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:11640:28238":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:1664:10612":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:12092:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:932:8950":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:2380:15138":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:10982:26991":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:39964:3244":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:2178:16323":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:8097:16155":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:3539:9055":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:12067:450":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:1840:2386":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"4:9085:27200":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:2907:15160":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:10368:2909":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:43434:2940":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:42837:3393":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:7015:16122":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"11:2467:20877":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:46825:8629":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4406:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:9517:2760":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13973:20429":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:5648:16065":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10278:16324":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:5774:2110":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:2238:8953":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:10628:16386":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:32139:3204":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:2864:15158":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4379:13159":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:2830:3201":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:41768:2243":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"16:7090:31254":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11111:16453":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4631:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"19:0:1096":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:4943:13219":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:5660:2749":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7269:31357":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10685:16393":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:9711:32049":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:5528:9205":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:14134:20446":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:62:9327":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:11250:26740":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:10097:16284":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:39153:2153":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:22357:3001":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10916:16398":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:2788:15155":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:20905:23528":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:344:30867":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"4:8572:9194":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:2810:15156":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:12685:19654":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6376:16094":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:42821:3394":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"14:187:15068":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:8050:16153":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"11:2334:2909":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"4:10616:2762":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:1018:1906":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:8865:9210":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:5013:13227":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:6856:14324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:14013:20433":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:261:2671":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4474:13170":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4900:13215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:42116:88":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"11:357:2661":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4573:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"9:330:14986":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13244:19691":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:12554:19647":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11639:16263":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:4004:2693":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14478:20468":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:7571:2065":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8606:2223":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4468:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:1466:8944":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:1842:2918":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:9780:16251":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10750:16394":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:40355:3326":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10023:16249":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:6030:13900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:7544:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:22969:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:41624:2908":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:43061:3453":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6092:13905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:4848:853":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:40023:3240":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:43800:3486":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7293:215":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:42337:3378":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:4433:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:6325:225":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11137:16451":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5816:31216":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:4283:2074":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:12944:147":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:45540:8613":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6703:10723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:897:2908":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:12776:3550":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:39168:218":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2943:2149":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:1120:2902":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:8957:9219":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4394:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:3671:2671":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:44300:127":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:5633:2710":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:1752:22909":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:5156:208":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:40390:3329":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:46889:8684":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:44053:3515":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:8530:9193":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:12079:798":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"16:5384:16058":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:6015:225":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:9165:9040":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:10672:16435":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"12:0:1993":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:14434:20464":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5743:16071":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:7694:16143":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:660:20501":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6640:9167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:5049:15839":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"9:0:1990":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:8263:9091":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12888:19667":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:9912:16279":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:678:255":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:32052:3198":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:43790:3487":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:48035:8590":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:43843:3238":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:7480:160":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:30437:21026":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"11:389:2663":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:43496:3484":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:43424:3419":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1734:10619":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:7377:8942":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:9701:16249":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"7:0:1658":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:3049:15164":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:2366:3152":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"5:824:2677":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:6568:2116":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12896:111":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"11:992:8953":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:2786:250":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4548:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:9028:26983":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:11088:2766":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:40243:3309":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:4770:9116":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:9328:3482":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:20875:23302":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:261:32041":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4853:13210":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:6037:13901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:2406:15139":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:14499:20469":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"11:423:30874":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:2133:2690":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:22771:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:3583:2908":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:11872:16500":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:9350:16210":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:41632:2909":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:12934:19669":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:8941:9221":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:5661:16066":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:7287:14695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11187:3423":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4769:13199":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"3:0:1987":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:5110:28197":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10714:16436":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:12077:690":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:6983:2729":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2919:2144":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10012:16248":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12293:19157":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:9141:240":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:8978:16237":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"18:481:20509":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4621:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6741:14317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2330:130":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"18:564:20514":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:9063:27880":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:43676:3492":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:2450:15141":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:1444:2243":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:20920:23531":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6352:16092":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:7561:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:21058:8600":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"18:624:32064":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:7489:248":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:14460:20466":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:46209:8689":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13215:19689":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:40042:3242":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13778:16293":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:11306:16265":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:12073:1506":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:14083:20440":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:4425:13164":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:12082:797":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"11:680:2909":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:3461:15168":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:21150:8607":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:3949:2699":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:21357:9036":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12437:19641":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7579:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:12959:19671":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"4:1568:2712":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:5363:16057":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:1718:10618":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1703:9123":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:12085:1609":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"11:324:30864":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:2382:9018":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"6:123:9382":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:12106:3456":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:5596:9206":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:10738:16438":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:40290:22528":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:4333:13156":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:2969:15162":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:2841:3174":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:39936:3245":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4611:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10507:16350":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5814:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:2245:29621":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:3315:15167":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:22:731":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:13723:20412":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2855:2131":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:22903:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:1817:8986":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"5:2968:29420":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4462:15684":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:7573:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4309:13154":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7284:2219":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:21094:8602":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:4352:2082":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:7689:8912":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"5:3332:2712":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:4395:2699":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2939:2148":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:9896:16278":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:7715:2762":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:2258:101":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:43834:3218":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13101:19681":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:596:9715":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2670:3194":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"4:12091:1215":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:11023:16401":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6318:16089":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:21108:3161":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:9521:16245":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5915:13892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:6467:2693":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:22837:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4501:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10788:16439":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:699:20505":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:46284:22771":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:41335:3342":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:21707:8601":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:2541:157":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:9959:16289":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:0:1998":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1104:29931":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:47996:8589":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:44446:224":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:3401:3296":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:10850:124":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:11848:3501":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:3570:177":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10430:16377":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:5073:13233":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:41777:200":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7006:16121":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10726:16437":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12621:19650":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:12810:19663":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:12907:2745":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6017:16081":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:8851:9209":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:6190:2748":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:9010:27854":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:9747:148":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:2644:9069":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:1558:10603":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:6638:2122":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13487:20401":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:3077:2152":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12876:19666":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:42596:22921":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:1525:15052":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:1557:2908":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:5322:16040":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11910:19132":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:40544:3331":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11337:16489":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:47783:8670":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:574:32058":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10561:16347":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13693:20398":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:5905:13891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:4862:15796":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"11:2394:2712":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:44277:3463":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:7053:2754":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:14068:20438":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:1036:8954":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:8953:16236":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13890:20422":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"11:759:8944":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:0:1996":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:1682:10614":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:2845:2129":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:926:8949":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:40000:3238":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:40162:2777":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:3244:259":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5020:13228":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:4728:9164":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7660:16142":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:40172:3283":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"5:7301:29401":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:7932:3219":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11381:16492":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"7:78:14908":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:731:8948":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:46779:8623":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6268:31361":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:7265:9660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:727:20506":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:45765:8615":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:13298:19694":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"4:558:2917":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:582:16227":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:10475:3412":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:599:32068":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:4949:15811":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"4:7743:8931":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:30259:69":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:4989:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4829:13207":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:8363:9165":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:3994:9099":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:46589:8663":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11098:16454":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:4835:15793":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13710:20411":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13906:20424":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6531:16104":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:9994:2735":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:8713:16229":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:8659:16208":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:10478:16374":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:10511:2761":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:5833:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:44265:3467":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:21280:8599":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:10573:9078":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:45520:8648":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:39988:3247":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:5419:16060":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13010:19675":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:43648:3409":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:11423:26689":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:11390:26194":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"4:9201:28215":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:4792:13202":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:46233:8690":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:43253:22511":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:2143:29918":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7128:16124":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:42612:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:6560:2658":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:12496:19643":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6968:16120":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:1067:8954":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:43512:3482":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:7890:9027":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:3519:2693":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10661:16434":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:3201:27445":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:4992:9172":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:2909:2141":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:6212:22939":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:47894:8583":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:1537:10601":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:39948:21055":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:8036:27865":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:44507:3553":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:22218:21041":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:4759:13198":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:4497:9137":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:12084:1612":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:8422:9176":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:636:32057":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11535:16258":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:13274:16265":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:8194:2920":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:9372:16243":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:483:9700":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:3185:29928":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:1761:2930":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:44026:3514":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:32045:2083":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"17:10949:16395":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:880:2679":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:10978:8994":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11710:16265":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:6100:2699":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:5375:9264":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13685:20410":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:1650:10611":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:646:8928":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:10376:2924":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:42036:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:3313:9074":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:22639:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"14:0:1994":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:9312:2386":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:46141:8628":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:4667:27057":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:40049:3243":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13451:20400":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4497:15695":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:14001:20432":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:3234:2155":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"11:1842:2908":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:4986:15824":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:7452:9007":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:0:531":{"crate_id":1,"path":["core"],"kind":"module"},"16:2526:15144":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:9218:22958":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:2596:15147":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7862:16151":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:12038:8933":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9852:16275":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:10616:16385":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:11851:2773":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10929:16399":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:2992:2160":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:207:2669":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:4236:2908":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:13286:19693":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:495:9702":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:40212:3308":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:45872:8688":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13876:20421":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:12090:1668":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:12671:19653":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:5612:16063":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"11:2165:15046":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:4838:13208":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:43748:3491":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:2394:9024":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"17:1075:16291":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11327:16488":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"4:505:2690":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12750:19659":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:44273:3462":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5851:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:11348:9214":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:6059:30178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:41381:22899":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:41564:198":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:7406:27866":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:589:8923":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:2692:29481":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:41543:3347":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"11:1687:151":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:5443:9203":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:9546:211":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:21804:3405":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:8323:9135":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:42316:3376":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:5935:13893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6613:14311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7782:16148":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:2850:2134":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10316:16330":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:9823:16274":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:6571:2117":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:14316:20456":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:1514:10598":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:22936:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:9223:24054":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:9070:16059":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:7555:16227":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"4:3514:3250":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:11235:16485":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:6604:9583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5963:16078":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6583:16107":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:1051:15050":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:10878:27212":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12513:19644":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:8154:16158":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12184:19149":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:41640:2243":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:6915:16117":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:21491:8598":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:12033:27870":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:45795:8621":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:4934:9162":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:7436:16127":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10084:16285":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8608:2221":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:475:9699":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:9003:16238":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11244:16262":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:14536:20472":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:5627:3310":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:1549:2699":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"11:2461:30858":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:46701:8617":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11845:16499":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12737:19658":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12473:16440":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:6204:16084":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:1635:633":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:3276:9079":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:10126:16313":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"4:11082:2765":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:40068:3237":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7651:16141":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12778:19661":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:43405:3418":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:40333:3325":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"14:221:15070":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:44253:3466":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:6797:2710":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:4068:3221":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:548:9708":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:3760:9093":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:785:2693":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6332:16090":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:4719:15773":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"11:2058:8953":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:7422:9009":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"4:8887:2908":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4480:13171":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2359:15137":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:41524:3346":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11272:16486":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:12081:796":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:2929:133":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:10344:2908":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:5421:2699":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:12083:793":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:1781:8976":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:3034:2062":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:32031:16163":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:44115:3518":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13554:20403":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:9542:3377":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:548:148":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:784:2674":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:1184:16299":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:44257:3465":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:1076:8955":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:5860:2693":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:4066:9104":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:45854:8682":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:2223:9011":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:40554:3332":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:43544:3415":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:7606:2756":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:507:9704":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:47245:8652":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:21194:8608":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"18:681:20503":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11124:16452":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:8594:16211":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:10800:28396":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:43809:3495":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:42075:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12711:19656":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11448:16254":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13949:20427":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:9223:28255":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:10393:3411":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12846:19665":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7677:215":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:4665:27055":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:11071:2764":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:1275:8954":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:40322:3334":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4859:13211":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:2284:15107":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6929:16118":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:5137:2108":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:45919:8592":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:3032:15163":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:1576:10605":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:7520:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5435:31286":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:11367:16455":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:47497:8658":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:43392:3420":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:2832:15157":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5864:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:3964:9097":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:21928:8596":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:6189:31307":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:298:2888":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:22672:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:6844:16114":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:11213:3525":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:11295:16487":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"4:5999:2749":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"14:40:19133":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:4960:13222":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:30835:3184":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:40008:3218":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:43947:3511":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:2931:2146":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:2964:29419":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:10991:9205":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12645:19651":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:1013:2671":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:536:31278":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:9752:16250":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:2225:30001":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:96:20486":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:0:475":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"11:796:2712":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:41997:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"15:394:15096":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"16:2321:15135":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1778:2712":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10627:3413":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7041:31294":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:8903:2243":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:10869:27180":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:10818:27061":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:22804:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:8250:3411":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:3763:9092":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"11:693:2243":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13914:20425":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:9911:2786":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13826:20417":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:1674:2671":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:12074:1593":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"1:4211:1904":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"5:4987:2699":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:727:149":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10534:16351":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:2784:2091":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:4934:13218":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:9985:16287":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:47848:8579":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:9488:32036":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4461:13168":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11971:19135":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:6726:14315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:5403:16059":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:4045:106":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:7391:16126":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:400:16225":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:11887:3500":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13838:20418":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:2876:2135":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:10397:16375":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:113:20487":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:44104:3517":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:9086:16060":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:3232:15166":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:5781:2111":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:4407:2084":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:8337:9091":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6742:15078":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"11:1869:8959":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12970:19672":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12196:19150":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6545:16105":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13071:19679":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:47637:8664":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:7935:3303":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:42194:2109":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4494:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:5808:2112":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3830:15196":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6588:10555":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4823:13206":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:6051:13903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:590:22938":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:13259:19692":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:1561:2243":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:40082:104":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:44499:3552":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:4033:23020":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:2836:3107":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:10370:16322":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:6580:9750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:5634:16064":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12698:19655":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:1044:8953":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:11417:28336":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:6924:2753":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:10603:16384":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:14100:20442":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:2161:634":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7503:16131":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:1428:2909":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:2367:206":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12484:16441":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:5892:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6361:16093":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12422:19640":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:1855:2712":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:907:2712":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:10669:3410":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11951:19134":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:12999:3555":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6425:16098":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:5790:256":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:8513:9192":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:42858:9191":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:39272:221":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4451:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:11325:2767":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:30237:3149":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9538:3375":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:41692:2315":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:2339:15136":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:489:9701":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"11:2074:2895":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:11375:26699":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:6222:27867":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:515:20511":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:4416:2085":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"16:6513:16103":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"14:7:15060":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:652:32058":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:4344:15614":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:736:20499":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:39184:215":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:43304:3408":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12724:19657":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:6028:3335":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:6883:14326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"4:8227:3317":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:30203:3148":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:3888:15230":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:6600:16108":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12305:19158":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13422:20399":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:21106:23045":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:22233:22935":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:22166:22901":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:7195:3291":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:10133:2923":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:3219:29917":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:6910:3316":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:1826:183":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:8205:16162":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:6415:16097":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10698:16415":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:6624:2121":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:11261:16476":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4385:13160":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11490:16256":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:3532:9034":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:12088:1608":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:9531:116":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:10547:16381":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:42155:95":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11922:3424":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:43978:3513":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:12252:19154":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:22606:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:14514:20470":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"10:36:30857":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:6633:14313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10575:16382":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:7670:8922":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10186:16316":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:12136:19146":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:4179:9128":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:4848:222":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"4:8367:9167":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2499:2958":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:41465:21083":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:3214:8958":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:40374:3328":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:6586:2243":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:7478:2708":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6893:31302":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:14335:20458":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:29988:2959":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:6792:16112":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:6696:15079":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:43353:3421":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"9:507:14933":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:10285:9213":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:45995:8662":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:7255:2073":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:9540:3376":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:4:1079":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:8848:16233":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:42621:69":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:41649:2219":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:12111:3470":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:47973:8588":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:6663:10740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:2214:134":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"18:719:20498":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:39978:3246":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:14145:20447":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5696:16068":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:5996:2914":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:8928:9218":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:690:20504":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:3171:216":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2838:110":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:10036:16292":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"11:122:2659":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:4768:9113":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12225:19152":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:5599:9207":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:10436:3424":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:44337:3527":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:4417:15663":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12543:19646":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:40754:22534":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:14056:20437":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:47868:8581":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10214:16327":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:15:1966":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:6672:238":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:30331:21086":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"4:949:8951":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:44537:3558":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"4:4849:9112":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:6809:2251":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:1564:2693":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:6820:14321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:2972:29421":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:2544:138":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:4053:15347":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4954:13221":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:7478:14856":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:2150:16363":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:41958:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:11179:9209":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5049:13230":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"4:10840:135":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:9136:239":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:7532:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:1596:10607":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:11871:3498":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:22295:21052":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"11:1862:8958":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"4:8839:203":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:10962:16396":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"11:2494:8942":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:5939:16077":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"4:7162:28337":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"4:871:8944":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:2776:242":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:9021:8908":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:10646:16433":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10494:16352":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:521:20508":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:101:30866":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"4:1779:8975":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:4362:2083":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:4157:28335":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:8181:16160":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:44158:3475":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"15:0:1995":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:21379:8598":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:41318:3341":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:45632:8620":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:11488:2769":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10240:16294":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:41295:165":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:6226:16085":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:46331:22773":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"11:2351:2243":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:13632:20407":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:2880:2139":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:2866:2133":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:47943:8586":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:2384:9019":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:10830:9031":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"4:8183:9081":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:1528:10600":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:43630:3413":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:45734:8667":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:9102:16213":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10447:15046":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4997:13226":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:20922:23529":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:14522:20471":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4978:13224":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11636:3402":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:40304:3323":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:45965:8656":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11162:16447":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:1573:8958":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:8041:9070":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:234:231":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4168:2096":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:534:2732":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:1983:202":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:46187:8683":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:6279:16088":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:7322:2243":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:1058:2895":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:43414:2939":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:7555:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"7:31:14901":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2914:2142":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:10805:9027":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:276:2067":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:9790:32050":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:42584:114":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:4519:9138":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6721:16110":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:755:20507":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10197:16341":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:41488:3344":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:2260:2895":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:22182:21065":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:9512:9030":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:8167:16159":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4753:13197":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:48:1669":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:3234:9076":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:40221:3317":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:13966:20428":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:8895:16234":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13135:19683":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5030:13229":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:9207:16240":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13868:20420":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:2574:15146":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:2368:9014":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:12689:143":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:574:9712":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:41701:210":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:7880:9029":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:1923:2933":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:8072:16154":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:9550:3380":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:11652:3404":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:8174:3291":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:7953:9068":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:22738:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:9058:27861":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:507:32058":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11407:16253":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2255:100":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:39921:3218":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:25818:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10980:16248":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6687:16109":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:2219:2730":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"11:703:8947":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:42868:22895":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:2548:15145":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:14308:20455":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:7897:9031":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"4:8269:9090":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:41919:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:40404:3330":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:6023:13899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:43526:3411":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:14024:20434":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:44325:3526":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:4411:9127":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:39294:2154":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:45716:8661":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:21365:8597":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:1484:8946":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:40272:3320":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:641:8927":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:4731:9137":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:2582:2735":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10520:16380":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:43576:3489":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:766:20500":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:47859:8580":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:6865:14325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:3249:140":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:533:9706":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10112:16312":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:43502:3483":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12452:19642":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:8440:9190":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:11201:16448":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"16:7544:16135":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:580:9713":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:4339:9133":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11215:16450":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:3600:15169":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:22206:2998":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6156:16083":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:1525:8965":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:5653:225":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:41352:3343":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:13040:19677":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:10009:2794":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:7722:16145":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:14355:20460":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5588:16062":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:42639:133":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:9544:3378":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11281:16477":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:3289:2092":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:4527:15701":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:9051:28211":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:3038:2063":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:6735:14316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:9921:16304":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10059:16290":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:11934:19133":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:22241:21057":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:14420:20463":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6401:16096":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:21926:9036":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:5853:2119":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:7554:16136":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6944:30954":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:913:8946":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:39067:2162":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:5371:9263":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:47905:8584":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:41682:2220":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:3261:2159":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:7694:8914":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:43076:22671":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3654:2243":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"4:5268:207":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:40414:3314":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:2892:2138":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7534:16134":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:7436:21050":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:39106:2161":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:46362:22774":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:7764:8956":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:10186:9036":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2498:9036":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:416:179":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:11511:9093":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:12066:999":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:47958:8587":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:9071:16124":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:13202:19688":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:21712:8609":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:4365:2702":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13758:20397":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:43484:3480":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2277:108":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:8237:3331":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:20903:23526":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:8607:2222":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:14042:20436":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:8490:9191":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:11062:16479":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:1413:2908":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:2303:15054":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"4:4008:9100":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:1579:8959":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:2860:2130":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:46855:8635":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:14469:20467":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:11269:156":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:11000:16403":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:3274:9078":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:7489:2066":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:3173:2908":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9455:32040":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"4:8909:9220":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:43780:3485":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11074:16480":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:0:1498":{"crate_id":4,"path":["std"],"kind":"module"},"5:1304:8955":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:9531:32037":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:3797:15187":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11473:16255":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6467:16100":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5752:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:7251:2693":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:7625:2758":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:10655:3414":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:6261:16087":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:4196:2699":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"4:5079:28197":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:1585:8960":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:4949:13220":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"11:1876:8960":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4511:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}