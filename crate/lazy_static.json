{"root":"0:0:1569","crate_version":"1.4.0","includes_private":false,"index":{"1:13387:54821":{"id":"1:13387:54821","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12486:2889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10911:214":{"id":"1:10911:214","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10913:181","1:10914:1574","1:10915:53075","1:10916:53076","1:10917:53077","1:10918:753","1:10919:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10902:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3163:227":{"id":"1:3163:227","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3165:127","1:3166:1408"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14127:141":{"id":"1:14127:141","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14128:277","1:14129:518","1:14130:280","1:14131:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3412:1953":{"id":"1:3412:1953","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3414:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3328:1936":{"id":"1:3328:1936","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3330:181","1:3331:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13496:2615":{"id":"1:13496:2615","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:12954:2573","FromStr::Err":"1:12954:2573"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:47564:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12954:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12954:2573","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9237:2030":{"id":"1:9237:2030","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13411:51327":{"id":"1:13411:51327","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15910:1726","self::pattern":"1:13015:2367"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3255:1854":{"id":"1:3255:1854","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13504:2966":{"id":"1:13504:2966","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15910:1726"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:49709:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13501:54341":{"id":"1:13501:54341","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3250:211":{"id":"1:3250:211","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3291:1855":{"id":"1:3291:1855","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13478:57776":{"id":"1:13478:57776","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13015:2367","prim@char":"4:15910:1726"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3404:1951":{"id":"1:3404:1951","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3406:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3349:1940":{"id":"1:3349:1940","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3351:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3721:1962":{"id":"1:3721:1962","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3723:52163"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13409:57762":{"id":"1:13409:57762","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:49665:2739","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3365:1943":{"id":"1:3365:1943","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3367:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3333:1935":{"id":"1:3333:1935","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3335:181","1:3336:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3756:1884":{"id":"1:3756:1884","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13381:4860":{"id":"1:13381:4860","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13414:55464":{"id":"1:13414:55464","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:13015:2367","prim@char":"4:15910:1726"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23096:2521":{"id":"1:23096:2521","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:23733:2268","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23087:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10278:2337":{"id":"1:10278:2337","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10279:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13471:57772":{"id":"1:13471:57772","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:2576:127":{"id":"4:2576:127","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2577:52716","4:2579:1790","4:2580:55081","4:2581:55082","4:2582:54892"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:10269:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:10276:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10276:119":{"id":"1:10276:119","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10277:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3318:1934":{"id":"1:3318:1934","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3320:181","1:3321:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13487:57777":{"id":"1:13487:57777","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13015:2367","prim@char":"4:15910:1726"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13505:57781":{"id":"1:13505:57781","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15910:1726"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:49718:2745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:1079:2964":{"id":"4:1079:2964","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1080:2115","4:1081:2924","4:1082:54337","4:1083:54338","4:1084:54339","4:1085:54340","4:1086:54341"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13490:57778":{"id":"1:13490:57778","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15910:1726","self::pattern":"1:13015:2367"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3698:1960":{"id":"1:3698:1960","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3629:1959","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13458:57767":{"id":"1:13458:57767","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"1:8425:120","str::matches":"4:15916:1731","prim@char":"4:15910:1726","self::pattern":"1:13015:2367"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:49623:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13440:57764":{"id":"1:13440:57764","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"4:15916:1731","self::pattern":"1:13015:2367","str::split":"4:15916:1731","prim@char":"4:15910:1726"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:49469:2730","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3408:1952":{"id":"1:3408:1952","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3410:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22899:2269":{"id":"1:22899:2269","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22889:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:17":{"id":"0:17","crate_id":0,"name":null,"span":{"filename":"src/inline_lazy.rs","begin":[16,0],"end":[16,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"import","inner":{"source":"self::std::sync::ONCE_INIT","name":"ONCE_INIT","id":"4:8920:1701","glob":false}},"0:4:1558":{"id":"0:4:1558","crate_id":0,"name":"lazy","span":{"filename":"src/inline_lazy.rs","begin":[8,0],"end":[57,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"spin_no_std\"))]","#[path = \"inline_lazy.rs\"]","#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:20:1702","0:17"],"is_stripped":true}},"5:6106:54337":{"id":"5:6106:54337","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15916:1731"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3562:1957":{"id":"1:3562:1957","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3564:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3558:1956","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8381:151":{"id":"1:8381:151","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8382:2053","1:8383:2054","1:8384:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3258:218":{"id":"1:3258:218","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2847:97":{"id":"1:2847:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2849:1716"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:5794:2941":{"id":"4:5794:2941","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5795:54996"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10564:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6795:2988":{"id":"4:6795:2988","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6796:54306"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10564:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13467:57770":{"id":"1:13467:57770","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:2859":{"id":"5:6085:2859","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3339:1938":{"id":"1:3339:1938","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3341:181","1:3342:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3382:1946":{"id":"1:3382:1946","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3384:181","1:3385:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13402:55819":{"id":"1:13402:55819","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15916:1731"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38:1569":{"id":"0:38:1569","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1390"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13382:57758":{"id":"1:13382:57758","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13500:54340":{"id":"1:13500:54340","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8864:2516":{"id":"1:8864:2516","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7905:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12954:2573":{"id":"1:12954:2573","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12955:126","1:12956:53302"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10517:146":{"id":"1:10517:146","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10518:652","1:10519:1754","1:10520:51383","1:10521:51384","1:10522:51385","1:10523:51386","1:10524:51387","1:10525:51388","1:10526:51389","1:10527:51390","1:10528:51391","1:10529:51392","1:10530:51393","1:10531:51394","1:10532:51395","1:10533:1524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8425:120":{"id":"1:8425:120","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8426:2043","1:8427:2044","1:8428:2045","1:8429:2046","1:8433:2047","1:8436:2048"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10507:142":{"id":"1:10507:142","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10508:715","1:10510:4836"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3629:1959":{"id":"1:3629:1959","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3631:51325","1:3632:51326","1:3633:51327"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13464:57769":{"id":"1:13464:57769","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13015:2367","`DoubleEndedIterator`":"1:8425:120","str::match_indices":"4:15916:1731","prim@char":"4:15910:1726"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:49569:2734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3259:217":{"id":"1:3259:217","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13406:5082":{"id":"1:13406:5082","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15916:1731"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:49675:2740","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13461:57768":{"id":"1:13461:57768","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"4:15916:1731","`DoubleEndedIterator`":"1:8425:120","self::pattern":"1:13015:2367","prim@char":"4:15910:1726"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:49551:2733","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3361:1941":{"id":"1:3361:1941","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3363:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13379:793":{"id":"1:13379:793","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15910:1726"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3260:106":{"id":"1:3260:106","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8344:2428":{"id":"1:8344:2428","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8346:2106"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5732:2937":{"id":"4:5732:2937","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5733:54228","4:5734:54907","4:5735:54908"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13743:150":{"id":"1:13743:150","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13744:181","1:13745:150","1:13746:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13420:2090":{"id":"1:13420:2090","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:47437:176","self::pattern":"1:13015:2367","prim@char":"4:15910:1726"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:7800:3170":{"id":"4:7800:3170","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7801:56935"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7905:2517":{"id":"1:7905:2517","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7906:54036","1:7907:54037","1:7908:54034","1:7909:54032","1:7910:54038","1:7911:54035","1:7912:54033"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6091:58407":{"id":"5:6091:58407","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6864:2951":{"id":"4:6864:2951","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6865:54512"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13431:5081":{"id":"1:13431:5081","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:15910:1726","self::pattern":"1:13015:2367"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12807:2695","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6868:2992":{"id":"4:6868:2992","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6869:56977"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5833:3342":{"id":"5:5833:3342","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3228:115":{"id":"1:3228:115","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3229:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3150:74":{"id":"1:3150:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3152:2041"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:10282:2330":{"id":"1:10282:2330","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10283:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4991:2967":{"id":"4:4991:2967","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4992:2581","4:4993:57193"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10284:2339":{"id":"1:10284:2339","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10285:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2850:2451":{"id":"1:2850:2451","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2852:50979"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3357:1942":{"id":"1:3357:1942","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3359:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22710:2571":{"id":"1:22710:2571","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22711:2510","1:22712:53428","1:22713:53928","1:22714:53929","1:22715:53930","1:22716:40205","1:22717:53931","1:22718:53932","1:22719:53933","1:22720:53934","1:22721:53935","1:22722:53936","1:22723:53937","1:22724:53938","1:22725:4862","1:22726:53939","1:22727:53468","1:22728:5195","1:22729:52902","1:22730:52901","1:22731:52903","1:22732:53429","1:22733:53430","1:22734:53431","1:22735:53432"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22812:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:41:1576":{"id":"0:41:1576","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39:1575","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"4:6690:2935":{"id":"4:6690:2935","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6691:55007","4:6692:55008","4:6693:55009","4:6694:55010","4:6695:55011","4:6696:55012","4:6697:55013","4:6698:55014","4:6699:55015","4:6700:55016","4:6701:55017","4:6702:55018","4:6703:55019","4:6704:55020","4:6705:55021","4:6706:55022","4:6707:55023"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3793:1967":{"id":"1:3793:1967","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6792:3004":{"id":"4:6792:3004","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6793:54688","4:6794:54865"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10564:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6103:58408":{"id":"5:6103:58408","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13498:2924":{"id":"1:13498:2924","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13410:4799":{"id":"1:13410:4799","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:49693:2742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13389:304":{"id":"1:13389:304","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:15927:1740","str::as_mut_ptr":"4:15916:1731"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23733:2268":{"id":"1:23733:2268","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:23734:2510"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23729:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2907:124":{"id":"1:2907:124","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22799:2570":{"id":"1:22799:2570","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22800:53428","1:22801:1220","1:22802:1221","1:22803:53429","1:22804:53430","1:22805:53431","1:22806:53432","1:22807:53433","1:22808:53434","1:22809:53435"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22812:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3558:1956":{"id":"1:3558:1956","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3560:181","1:3561:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"4:4631:2955":{"id":"4:4631:2955","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4632:2860","4:4633:56991","4:4635:56992","4:4636:56993","4:4637:3022","4:4638:5374","4:4639:5373","4:4641:56994","4:4642:2079","4:4643:3082","4:4644:2061","4:4646:2073"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13025:2368":{"id":"1:13025:2368","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13027:2366","1:13028:53994","1:13029:53995","1:13030:53996","1:13031:53998","1:13032:53997","1:13033:53999"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5652:3002":{"id":"4:5652:3002","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5653:54876","4:5654:3426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10564:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13408:3688":{"id":"1:13408:3688","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:49655:2738","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3156:135":{"id":"1:3156:135","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3158:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13388:57760":{"id":"1:13388:57760","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:8390:1858":{"id":"1:8390:1858","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8392:2050","1:8394:2051","1:8395:2052"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13469:57771":{"id":"1:13469:57771","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10286:189":{"id":"1:10286:189","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10287:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2948:184":{"id":"1:2948:184","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2950:997","1:2951:826","1:2952:792","1:2953:713","1:2954:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13437:57763":{"id":"1:13437:57763","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"4:15910:1726","str::split":"4:15916:1731","`DoubleEndedIterator`":"1:8425:120","str::rsplit_terminator":"4:15916:1731","self::pattern":"1:13015:2367"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:49451:2729","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6562:2996":{"id":"4:6562:2996","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6563:54989","4:6564:54990"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10288:2340":{"id":"1:10288:2340","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10289:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13040:2370":{"id":"1:13040:2370","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13042:2043","1:13043:53415","1:13044:53416"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:13034:2366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13407:5080":{"id":"1:13407:5080","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15916:1731"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:49684:2741","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3387:1947":{"id":"1:3387:1947","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3389:181","1:3390:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13473:57773":{"id":"1:13473:57773","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3147:75":{"id":"1:3147:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3149:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6105:3050":{"id":"5:6105:3050","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8857:2483":{"id":"1:8857:2483","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5802:2943":{"id":"4:5802:2943","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5803:54228"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13400:57761":{"id":"1:13400:57761","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:15916:1731","crate::ops::IndexMut":"1:3562:1957","str::slice_unchecked":"4:15916:1731"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3392:1949":{"id":"1:3392:1949","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3394:181","1:3395:1226"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5658:3000":{"id":"4:5658:3000","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5659:4063","4:5660:54821"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10564:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10280:2338":{"id":"1:10280:2338","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10281:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14201:2501":{"id":"1:14201:2501","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14202:52990","1:14203:52991","1:14204:52992","1:14205:52993","1:14206:52994","1:14207:52995","1:14208:2079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5724:2936":{"id":"4:5724:2936","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5725:54455","4:5726:54457","4:5727:54456","4:5728:54458"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:9342:2984":{"id":"4:9342:2984","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9343:56868","4:9344:56869","4:9345:56870","4:9346:56871","4:9347:56872","4:9348:29573","4:9349:56867"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10564:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3497:1856":{"id":"1:3497:1856","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3498:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13405:3082":{"id":"1:13405:3082","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49387:2725","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3416:1954":{"id":"1:3416:1954","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3418:1227"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10290:2341":{"id":"1:10290:2341","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10291:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13502:57780":{"id":"1:13502:57780","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15910:1726"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:49700:2743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:58409":{"id":"5:6104:58409","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8359:216","`Box<str>`":"5:432:1859"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1859","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:3348","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8579:157":{"id":"1:8579:157","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8580:2053","1:8581:922","1:8582:2055","1:8585:2056","1:8586:495","1:8588:2057","1:8591:2058","1:8592:2059","1:8593:2060","1:8594:2061","1:8596:2062","1:8598:2063","1:8599:2064","1:8601:841","1:8604:2065","1:8611:2066","1:8613:2067","1:8616:2068","1:8617:2069","1:8618:2070","1:8620:2071","1:8622:2072","1:8625:1301","1:8626:2073","1:8627:2074","1:8631:2075","1:8634:2076","1:8635:2077","1:8636:2078","1:8638:2079","1:8639:1864","1:8641:2080","1:8644:2081","1:8646:2082","1:8656:2083","1:8671:2084","1:8673:2085","1:8677:2086","1:8686:2087","1:8689:2088","1:8691:2089","1:8694:276","1:8701:294","1:8708:2090","1:8715:2091","1:8724:2092","1:8734:1014","1:8741:2093","1:8748:2094","1:8749:2095","1:8750:2096","1:8762:2097","1:8769:2098","1:8781:2099","1:8788:2100","1:8789:2101","1:8794:2102","1:8797:2103","1:8800:2104","1:8801:2105","1:8803:2106","1:8805:415","1:8808:2107","1:8811:997","1:8814:2108","1:8817:604","1:8820:2109","1:8823:907","1:8825:826","1:8827:792","1:8829:713","1:8831:696","1:8833:2110","1:8834:2111","1:8842:2112"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13493:57779":{"id":"1:13493:57779","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:15910:1726","self::pattern":"1:13015:2367"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13452:57766":{"id":"1:13452:57766","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13484:55834":{"id":"1:13484:55834","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15910:1726","self::pattern":"1:13015:2367"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5837:3344":{"id":"5:5837:3344","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:15255"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13395:53076":{"id":"1:13395:53076","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"4:6866:2991":{"id":"4:6866:2991","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6867:54930"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3153:149":{"id":"1:3153:149","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3155:2042"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13380:2049":{"id":"1:13380:2049","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5746:2935":{"id":"4:5746:2935","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5747:56886","4:5748:56887","4:5749:54228","4:5750:56888","4:5751:3307","4:5752:3308","4:5753:56889","4:5754:1297","4:5755:56890","4:5756:56891","4:5757:56892","4:5758:56893","4:5759:56894","4:5760:56895","4:5761:56896","4:5762:56897"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13391:1574":{"id":"1:13391:1574","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47437:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3715:137":{"id":"1:3715:137","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3717:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13045:2371":{"id":"1:13045:2371","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3370:1948":{"id":"1:3370:1948","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3371:181","1:3372:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20:1702":{"id":"0:20:1702","crate_id":0,"name":"Lazy","span":{"filename":"src/inline_lazy.rs","begin":[19,0],"end":[19,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"1:3262:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"1:23429:29193":{"id":"1:23429:29193","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23430:52901","1:23431:52902","1:23432:52903"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"1:23424:2511","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3500:130":{"id":"1:3500:130","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3502:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3503:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22836:2572":{"id":"1:22836:2572","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22837:2510","1:22838:1240","1:22839:1265"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4713:3028":{"id":"4:4713:3028","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4714:54690","4:4715:54691","4:4716:54692","4:4718:3027","4:4719:54693","4:4721:54694","4:4722:3688"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4631:2955","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13403:2763":{"id":"1:13403:2763","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15910:1726"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49371:2723","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3345:1937":{"id":"1:3345:1937","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3346:181","1:3347:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9236:2031":{"id":"1:9236:2031","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3506:132":{"id":"1:3506:132","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3508:181","1:3509:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13399:3078":{"id":"1:13399:3078","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:3558:1956","`str`":"4:15916:1731","str::slice_mut_unchecked":"4:15916:1731"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3085:2450":{"id":"1:3085:2450","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:3084:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13434:55828":{"id":"1:13434:55828","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13015:2367","prim@char":"4:15910:1726","`DoubleEndedIterator`":"1:8425:120","str::split":"4:15916:1731"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49419:2698","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3159:228":{"id":"1:3159:228","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3161:127","1:3162:1409"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8340:2429":{"id":"1:8340:2429","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8342:2105"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13449:57765":{"id":"1:13449:57765","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2902:183":{"id":"1:2902:183","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2904:604","1:2905:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3255:1854","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:3353:1944":{"id":"1:3353:1944","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3355:1349"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3540:1965":{"id":"1:3540:1965","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3542:237","1:3543:206","1:3544:52811"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13728:138":{"id":"1:13728:138","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13729:181","1:13730:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5780:2939":{"id":"4:5780:2939","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5781:54847","4:5782:54848","4:5783:54849","4:5784:54850"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6107:54338":{"id":"5:6107:54338","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15916:1731"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23048:29174":{"id":"1:23048:29174","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23049:53356","1:23050:53357","1:23051:53358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:23041:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3323:1939":{"id":"1:3323:1939","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3325:181","1:3326:1348"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4764:2328":{"id":"1:4764:2328","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4765:2053","1:4766:53547","1:4767:2056"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13384:57759":{"id":"1:13384:57759","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15916:1731"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8860:2484":{"id":"1:8860:2484","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8377:136":{"id":"1:8377:136","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8379:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10552:2407":{"id":"1:10552:2407","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10553:146","1:10554:4508","1:10555:53184"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3486:1885":{"id":"1:3486:1885","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3487:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3473:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10219:2332":{"id":"1:10219:2332","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10220:1524","1:10221:53514","1:10223:53515"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:58405":{"id":"5:6084:58405","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1859","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:3348","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1859","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:3348","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13428:54694":{"id":"1:13428:54694","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"1:8425:120","str::rsplit":"4:15916:1731","prim@char":"4:15910:1726","self::pattern":"1:13015:2367","str::split_whitespace":"4:15916:1731"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49401:2694","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13455:1753":{"id":"1:13455:1753","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"4:15916:1731","prim@char":"4:15910:1726","self::pattern":"1:13015:2367","`DoubleEndedIterator`":"1:8425:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:49605:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:58406":{"id":"5:6088:58406","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13401:55818":{"id":"1:13401:55818","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15916:1731"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3981:68":{"id":"1:3981:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3982:1421"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"4:5790:2940":{"id":"4:5790:2940","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5791:56887"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4688:2332":{"id":"4:4688:2332","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4689:1754","4:4690:54552","4:4692:54553","4:4693:3611","4:4694:54554","4:4695:5451","4:4696:53515","4:4705:2079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10269:109":{"id":"1:10269:109","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10270:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13378":{"id":"1:13378","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12475:1333","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13379:793","1:13380:2049","1:13381:4860","1:13382:57758","1:13384:57759","1:13387:54821","1:13388:57760","1:13389:304","1:13390:55799","1:13391:1574","1:13393:53075","1:13395:53076","1:13397:53077","1:13399:3078","1:13400:57761","1:13401:55818","1:13402:55819","1:13403:2763","1:13404:2396","1:13405:3082","1:13406:5082","1:13407:5080","1:13408:3688","1:13409:57762","1:13410:4799","1:13411:51327","1:13414:55464","1:13417:55466","1:13420:2090","1:13424:2048","1:13428:54694","1:13431:5081","1:13434:55828","1:13437:57763","1:13440:57764","1:13443:55830","1:13446:55832","1:13449:57765","1:13452:57766","1:13455:1753","1:13458:57767","1:13461:57768","1:13464:57769","1:13467:57770","1:13469:57771","1:13471:57772","1:13473:57773","1:13474:57774","1:13475:57775","1:13478:57776","1:13481:5410","1:13484:55834","1:13487:57777","1:13490:57778","1:13493:57779","1:13496:2615","1:13498:2924","1:13499:54339","1:13500:54340","1:13501:54341","1:13502:57780","1:13504:2966","1:13505:57781"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3262:220":{"id":"1:3262:220","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1333","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:58405","5:6085:2859","5:6088:58406","5:6091:58407","5:6103:58408","5:6104:58409","5:6105:3050","5:6106:54337","5:6107:54338"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13417:55466":{"id":"1:13417:55466","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:13015:2367","prim@char":"4:15910:1726"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4706:3025":{"id":"4:4706:3025","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4707:54370","4:4708:37182","4:4709:54371","4:4710:54372"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13390:55799":{"id":"1:13390:55799","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15927:1740"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6442:2988":{"id":"4:6442:2988","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6443:3307","4:6444:3308","4:6445:54305","4:6446:57221","4:6448:57225","4:6450:57222","4:6451:57223","4:6453:57224"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10564:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13424:2048":{"id":"1:13424:2048","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"4:15910:1726","self::pattern":"1:13015:2367","`None`":"1:47437:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13443:55830":{"id":"1:13443:55830","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:15910:1726","str::rsplitn":"4:15916:1731","self::pattern":"1:13015:2367"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:49505:2701","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12462:2931":{"id":"1:12462:2931","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12463:2053","1:12464:52737"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3710:224":{"id":"1:3710:224","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3711:181","1:3712:1962","1:3713:686","1:3714:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3715:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22763:2507":{"id":"1:22763:2507","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:22764:2510","1:22765:53428","1:22766:1220","1:22767:1221","1:22768:40205","1:22769:53465","1:22770:5036","1:22771:53466","1:22772:53467","1:22773:53468","1:22774:53429","1:22775:53430","1:22776:53431","1:22777:53432","1:22778:53433","1:22779:53434","1:22780:53435"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22812:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13499:54339":{"id":"1:13499:54339","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1569":{"id":"0:0:1569","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39:1575","0:41:1576","0:38:1569"],"is_stripped":false}},"4:6464:2985":{"id":"4:6464:2985","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6465:54959","4:6466:37330","4:6467:54960","4:6468:54961","4:6469:54962","4:6470:54963"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10564:2466","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13474:57774":{"id":"1:13474:57774","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2115","5:785:2116","5:786:2117"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5740:2938":{"id":"4:5740:2938","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5741:54228","4:5742:54240"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13034:2366":{"id":"1:13034:2366","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13036:2389","1:13037:922","1:13038:51343","1:13039:51344"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2872:104":{"id":"1:2872:104","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2873:408","1:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13397:53077":{"id":"1:13397:53077","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3473:116":{"id":"1:3473:116","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3474:221","1:3475:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13446:55832":{"id":"1:13446:55832","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"1:13015:2367","prim@char":"4:15910:1726","str::splitn":"4:15916:1731"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:49523:2702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:13040:2370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3421:1955":{"id":"1:3421:1955","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3423:1230"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8450:1857":{"id":"1:8450:1857","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8451:793","1:8452:2049"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4032:2468":{"id":"1:4032:2468","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4033:54892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3377:1945":{"id":"1:3377:1945","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3379:181","1:3380:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3398:1950":{"id":"1:3398:1950","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3400:181","1:3401:1229"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13393:53075":{"id":"1:13393:53075","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47437:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39:1575":{"id":"0:39:1575","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13475:57775":{"id":"1:13475:57775","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:13015:2367","prim@char":"4:15910:1726"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:13045:2371","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3503:131":{"id":"1:3503:131","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3505:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3506:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13481:5410":{"id":"1:13481:5410","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:13015:2367","prim@char":"4:15910:1726"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:13025:2368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6964:2950":{"id":"4:6964:2950","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6965:54980"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23424:2511":{"id":"1:23424:2511","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23425:1263","1:23426:1262","1:23427:1260","1:23428:1259"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"1:22836:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13404:2396":{"id":"1:13404:2396","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15910:1726"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49377:2724","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2938:177":{"id":"1:2938:177","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2939:415","1:2940:2094","1:2941:2095","1:2942:2114"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2907:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"16:7843:3904":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:11331:2969":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:11137:2969":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"18:744:60346":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:820:4189":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:13034:2366":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:15916:1731":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:9638:4423":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:49665:2739":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:7420:3847":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:3698:1960":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11254:4124":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:23098:2510":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:3997:3184":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:13356:49974":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:46270:2634":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:49655:2738":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:23901:2781":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:6964:2027":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:24174:6151":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3377:1945":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4112:40460":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:6106:41511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:13875:3164":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:13978:50454":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:2062:3014":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:5082:1875":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:2399:31972":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:13488:50341":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:10637:31022":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12467:49203":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:12156:1906":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:11653:45054":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:5953:38275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:24662:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:4047:2474":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"6:6644:41880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:49240:2710":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:2492:2329":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:49230:2709":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"4:1442:2054":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:53419:20625":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:3357:1942":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:14154:3045":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:12783:49352":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10635:44504":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:7514:3846":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:6870:2306":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:48200:2338":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:4387:40487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:10652:31025":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:11260:2697":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11015:44618":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:10565:3206":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"4:7980:4316":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"16:6391:3878":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:10611:44536":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5522:3728":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:3335:3250":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"5:2262:3453":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:22523:51055":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:23830:2778":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10304:4077":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:49359:2575":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:51534:2546":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:4991:2967":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"4:5376:3284":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:7905:2517":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"17:11993:49009":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13842:50412":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"12:1235:3641":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:3262:220":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"4:8978:1917":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13733:50367":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:49310:2715":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:14091:201":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"6:5400:41105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:48464:133":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:7024:4044":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:14732:3167":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"18:712:2272":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:1644:3137":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:10807:2949":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:49987:2384":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:3522:42687":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:15380:35887":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:5433:3721":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6014:3869":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:801:4187":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:12771:44329":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:15914:1729":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:10276:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:3715:137":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:48214:2330":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"12:1762:4290":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10200:44388":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8857:2483":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:14507:54227":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13296:49907":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:624:37465":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:2816:4015":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:5273:3758":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"14:0:1785":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:5815:3744":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:3197:2860":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"12:0:1784":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:5420:41108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:46523:2300":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:5717:3737":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"12:2009:2054":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10458:44433":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7823:3838":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:9342:2984":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4425:40492":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"4:9626:4422":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"6:6935:42066":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:4045:127":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:47910:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:5459:41110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:49675:2740":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:53457:20627":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:3990:40445":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11616:45017":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:51808:51148":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:10564:2466":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:53442:20626":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11045:44322":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:47504:2027":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"4:9068:1911":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:9186:4089":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:22710:2571":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:2200:4294":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:45994:2257":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:9896:60325":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6554:3882":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"4:1476:3093":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6718:4033":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:11197:3105":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"12:2018:3094":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:49202:2706":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7205:3896":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:14956:54889":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:632:37466":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:53534:20630":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"12:2303:59460":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:3868:40435":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:7446:185":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"6:5269:41095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:15925:1738":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:46644:2291":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:3085:2450":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:48988:2922":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5292:41098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6893:40631":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:774:60340":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:6887:40630":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13163:49812":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:1665:38351":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"5:3951:3094":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:46395:2636":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:6792:3004":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:4902:1888":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:15305:3285":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:56303:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:3241:4005":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:6764:3014":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:9296:44292":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3339:1938":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:3145:4011":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:10451:4337":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:46744:2299":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:6690:2935":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:4359:3269":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:161:37143":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:6672:1901":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:46545:2301":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:12334:4417":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11555:45007":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6252:3875":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:4501:40500":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11277:44291":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:1511:3142":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:10701:2283":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"5:1215:3450":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:11079:3026":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:55906:2262":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:2991:4010":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"12:112:59454":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"4:11435:34193":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:51660:2523":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:3336:3096":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"9:1056:3567":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"12:774:2054":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:5855:3745":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10179:44389":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:24128:6141":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"4:14930:3165":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:49371:2723":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"5:8289:3423":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:5548:41139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1091:4292":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:3258:218":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:2170:3094":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:9717:3278":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"4:12087:3196":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:51173:2557":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:610:4197":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13582:50354":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:6204:3303":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:49700:2743":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:3370:3095":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:11386:34191":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"12:1651:3651":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:7654:3160":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:4649:3023":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:50390:2504":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:24209:2797":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:48577:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11628:45052":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:8188:2054":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"14:194:42605":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"12:968:3144":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:52102:2562":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:13501:4424":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:4443:2581":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:12195:49184":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9245:4081":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:11434:44728":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6413:3657":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"7:85:42165":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:7260:54226":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1729:3298":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:50133:2758":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:15921:1734":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"6:1554:38341":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:88:37076":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11726:45114":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4272:40473":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2253:2452":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"12:2323:59456":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13564:50352":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"15:230:3660":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4060:40454":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:49266:2711":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:5996:3868":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:52735:2568":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:49469:2730":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:3200:3022":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:2866:3997":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6691:3886":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:12053:3192":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:3172:4002":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:6464:2985":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11981:44540":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:4946:1697":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"16:4230:43114":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"4:11504:3117":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"1:48737:2410":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:3319:3245":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:8651:1904":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9162:4125":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:605:37462":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12552:49209":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11714:45113":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12221:49186":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:5011:1868":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"16:7571:3823":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1622:38348":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:22952:2510":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:1617:38347":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7174:3893":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:9633:4331":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"12:949:3143":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11835:45251":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:46601:52709":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:9600:60319":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:46554:2304":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:4709:2444":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6636:41879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12917:49748":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:3345:3255":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"9:722:3508":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:3256:1883":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"5:3341:3414":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13402:50332":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:10278:2337":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:53068:2540":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5210:41092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:10365:44301":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:4325:40479":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:10517:146":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:13898:50439":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:6700:55016":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:4438:3048":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:7146:3891":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:10609:2248":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:53319:2528":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:5766:3742":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:12307:49192":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:24027:6107":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:48473:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:4359:2054":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13497:50342":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:46428:2810":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:15908:1724":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:14847:4341":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:510:44299":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:1736:38358":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:7786:3837":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:3163:227":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:49781:2369":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:13819:187":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12182:49183":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:1655:3149":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:9440:44312":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:5595:3732":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"9:749:3509":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"4:7512:119":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:8381:151":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:6488:2303":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12568:49210":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10041:44375":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11947:49004":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:32293:2577":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12598:49212":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10052:44376":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12795:49355":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:9956:2681":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:8479:202":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:4317:40478":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8450:1857":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:49320:2716":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:8198:4316":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"14:189:42604":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7342:3859":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:5875:4301":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:6366:3658":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:8382:3350":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:48503:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:46355:2743":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:10284:2339":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:46369:2912":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:9358:2368":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:13205:49858":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13221:49859":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:46339:2910":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:49142:2700":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:49623:2737":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:3894:3477":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:50141:2753":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4517:40502":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3500:130":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:47994:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10656:44519":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:46333:2744":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:4697:55140":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"12:2025:3095":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1630:38349":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:591:37460":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4203:40468":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:12176:1908":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:49279:2712":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:6704:55020":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:50283:201":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10887:44507":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:5166:1879":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:23729:2466":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:5015:1869":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:46232:11706":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:2843:3996":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:45843:195":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:14201:2501":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7073:3890":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"12:747:2581":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"14:47:42604":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:0:1788":{"crate_id":17,"path":["object"],"kind":"module"},"1:12954:2573":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:896:4195":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:5736:3738":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:3772:2582":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13318:49971":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:12012:54511":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:24065:2618":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:11191:2976":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"4:15112:3073":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5528:40350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"9:692:3507":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:10061:44392":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:51015:2564":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:8335:3425":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12010:49012":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:46008:1876":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"6:3905:40438":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11231:4126":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:1441:3146":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:12095:49120":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:5020:1870":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:15127:3074":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:7212:3093":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5407:41106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:24560:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:7797:3168":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:786:4334":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:6269:3876":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:11349:3297":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:5935:3327":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11962:44541":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4377:40486":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:8194:2054":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:3387:1947":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:49718:2745":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12118:49121":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:48440:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:6166:3871":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:5189:1880":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:24181:2844":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"12:429:3643":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:5582:2518":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:6954:3336":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:8167:3341":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:1676:38352":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12982:49750":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:3150:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:11294:3288":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:4215:40469":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11358:4084":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"4:13837:3162":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:11847:45252":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10623:44537":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:4614:43273":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4033:40450":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:11051:3052":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:49451:2729":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13865:50415":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:14:1754":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:3291:1855":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:12494:49205":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:1674:3140":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5255:41074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:3506:4008":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4183:40466":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:52989:2556":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:157:37142":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"4:2460:4417":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:9809:60318":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"12:812:3140":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:51431:2554":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"9:900:42311":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:3195:4003":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:15928:1741":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:10106:4169":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10290:2341":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5927:3748":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:22836:2572":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:616:37464":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:3404:1951":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5371:41102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4133:40463":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"12:463:59455":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9961:44320":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:6442:2988":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:32307:52945":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"12:2045:3098":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:1939:3094":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:3714:42698":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7250:3900":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"10:0:1782":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"19:117:60358":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"17:10502:44434":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:11183:2695":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:1306:143":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:22899:2269":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:9332:4082":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:4764:2328":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7611:3400":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:3228:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:48753:2409":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:3549:42688":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:8151:2054":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:6464:3839":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7226:3898":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:11982:3167":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:9368:44310":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13620:50363":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:50113:2754":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:24526:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:5986:3333":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:9839:4101":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:9179:54232":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:10435:44432":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"4:13700:3172":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:4032:2468":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"5:2777:3455":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:3320:4060":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:8864:2516":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13986:50456":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:8137:57341":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11809:45237":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4095:40458":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6569:4030":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:5436:58981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:670:37495":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:46693:2295":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:1744:38359":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3721:1962":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10988:44592":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"4:15929:1742":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:6923:42065":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9574:4092":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:9236:2031":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"7:38:42158":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:9005:44304":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:4643:4297":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:4120:40461":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:11118:2725":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:11990:57329":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:4823:43307":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"4:4397:3045":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10377:4137":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:8097:3348":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:15923:1736":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:2847:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"0:0:1569":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"4:15140:3079":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"4:15404:3669":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9849:60329":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"12:396:3644":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:12186:1915":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:8271:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4523:40503":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:11416:2704":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:24458:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:46931:12368":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:5314:42684":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:5386:41104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:12171:1907":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:46940:3053":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:1623:3146":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:53378:20622":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:11111:2297":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"6:3881:40436":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2902:183":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4364:40484":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12645:49276":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10403:4100":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:1497:3139":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"12:853:3137":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"4:8137:3232":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:12155:49181":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:8393:3117":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:7406:3830":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:7444:4292":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"4:12673:4339":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:2733:3712":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:2793:2959":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:10376:54308":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:15876:57212":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:52528:2548":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:9799:44317":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:6795:2988":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:5969:37332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:511:37451":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"12:1118:3147":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:9034:44305":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:46960:12371":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:4:979":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:11001:44591":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:48078:1902":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13627:50364":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:7633:3401":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:9238:2029":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:7733:2309":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:374:3422":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:6605:3841":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:52071:2559":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:4706:3025":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"6:4255:3305":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:3800:42734":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:3064:4058":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:6100:41510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:3429:3756":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:1547:38340":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:4304:43163":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13453:50338":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:51864:51149":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"12:937:3142":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:15934:1747":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:46503:12087":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:24628:2647":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"16:7761:3903":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:5428:41109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:6200:41516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:49804:2372":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:13482:31984":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:9951:2680":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:10864:44509":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:11164:2971":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:56264:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2753:579":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:15932:1745":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:823:4334":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"6:525:37453":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:5863:3324":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:25202:2638":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:3323:1939":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:5561:12086":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:5137:1877":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:9732:3279":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:13598:50356":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11794:45236":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:32258:2805":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:3361:1941":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"9:1075:3575":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11482:44730":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:1533:38338":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:51612:2538":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:46295:2915":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"4:7800:3170":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:8377:136":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6577:3883":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:49523:2702":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:11222:2696":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"4:8032:3232":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:13272:49904":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:6964:2950":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7185:3894":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2178:8632":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:12733:2731":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:49850:2379":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:48561:2336":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:547:3739":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10224:44393":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:24088:6149":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:13810:50408":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:3647:3030":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:52264:2535":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8340:2429":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:7392:3832":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:1492:3138":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:46001:2258":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"4:14869:4343":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:152:50811":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7894:3862":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:5274:41096":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:1658:38350":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"15:248:3661":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:9659:60328":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12521:49207":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:866:4193":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:1690:38353":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:15041:3174":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:12005:54256":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"6:6864:40627":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:10795:3241":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:0:1787":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9759:44316":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:14030:2252":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"9:157:3524":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:6072:3710":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:47952:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:5987:41506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:542:3761":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:4866:1887":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:15935:1748":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:2031:145":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"12:160:3642":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:49505:2701":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:10507:142":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:50990:51164":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:15917:1732":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:13884:50421":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6858:40626":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:8390:1858":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11402:2703":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5241:41073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:22563:51199":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:51063:2544":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:50378:2506":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:2553:3456":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"9:776:3554":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:32118:2839":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:10149:44318":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:15881:31028":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7042:4045":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:6085:41508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:45864:198":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:15913:1728":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"16:6101:3822":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:13778:51256":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:4733:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:7216:3897":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:10902:2466":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:7477:3848":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:9770:4333":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:49684:2741":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:12699:49280":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4410:40490":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:22508:51055":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:14983:54508":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:660:4200":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:10675:31979":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:1501:3140":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:14964:3086":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:11283:3286":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10814:4160":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:46445:2811":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:6185:41515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:14040:2768":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"9:41:3557":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:3259:217":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:3156:135":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:4459:40496":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:1563:38342":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:37569:178":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4331:40480":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13192:49857":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:9719:44315":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:1637:3147":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"4:4477:3044":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:50360:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6032:3759":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9729:60317":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:1011:2581":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:6110:3864":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:5282:41097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5960:3750":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:4477:43211":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12507:49206":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:49292:2713":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4494:40499":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:7111:4306":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"4:3623:4314":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:52185:2547":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:4083:40457":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6744:4035":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:11952:3165":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:11333:2699":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12537:49208":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11970:44539":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"12:877:3094":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:8425:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:6731:4034":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:1079:2964":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5472:3725":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:4641:43275":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:11382:3005":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:50346:2767":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:12696:2728":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1602:38346":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:6324:3304":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:6415:2288":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3318:1934":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:4227:40470":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"13:232:59461":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:13590:50355":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:10586:3214":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:2598:54225":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"18:857:4192":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4127:40462":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:4386:43195":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:897:3209":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:1653:3138":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12287:49191":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10280:2338":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:13306:49969":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5146:1878":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:46703:2296":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13772:50404":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:32299:2829":{"crate_id":1,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:6644:3885":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:37593:2272":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12741:49288":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:8902:44302":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:1646:3148":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:12480:49204":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:578:5271":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1663:3139":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:300:205":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13172:49813":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:9971:60320":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:4734:43293":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"12:784:3139":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"9:1020:3574":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6087:3824":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:8159:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:46583:2286":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7264:3842":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"12:761:2582":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:3392:4013":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:46672:2293":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:5167:41088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11588:45015":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7884:3834":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:3945:40440":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"4:8415:3476":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:51945:2567":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6620:4028":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:8743:1916":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10584:4163":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:4242:4292":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:5973:3332":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11147:44324":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:3540:1965":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:650:4196":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:47658:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13933:50447":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:23096:2521":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6899:40632":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4023:40449":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:49551:2733":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:2330:3452":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:10933:3181":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:12462:2931":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:12772:2735":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13465:50339":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:53404:20624":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:6881:40629":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:6176:41514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7870:3833":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2754:3754":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:50010:15011":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:10558:44533":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:53338:20618":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4193:40467":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:6087:3294":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:53347:20619":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10543:44532":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:12725:49287":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:11994:54884":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:607:44300":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:38813:2325":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:4995:43354":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:53131:2560":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"4:9860:4334":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:1572:38343":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:56329:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:12045:2581":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:46308:2745":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:3396:3098":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:9144:1913":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11932:49003":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"12:2331:3081":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:6636:3843":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:3701:3037":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:3966:40443":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:1153:31024":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:5790:2940":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:3317:2453":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:3345:1937":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:136:50810":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:6214:41517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:11118:44323":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7195:3895":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:49819:2375":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3260:106":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"9:927:42277":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:7295:3844":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:1908:38495":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:47784:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:47616:2582":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:10855:3036":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:7119:3760":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4395:40488":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:3040:57521":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:3488:4009":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:49220:2708":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10160:44391":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:4008:44508":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:46226:2744":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:56316:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:23623:2267":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:15245:2978":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:1635:3136":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12756:49289":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8579:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:2166:3093":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:3353:1944":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:531:37454":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5389:2906":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:5185:41089":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"4:2934:180":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:2938:177":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:10938:44616":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:7937:4420":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"4:15892:54886":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:22799:2570":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13477:50340":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:48207:2337":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13554:50351":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:5415:3014":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6028:38302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:10426:4335":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"12:2315:59459":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:2187:3097":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:13760:50369":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:9649:44314":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6949:4041":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10448:4099":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4101:40459":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:10286:189":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"4:2437:31984":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:53280:2563":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:9765:4332":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"4:5746:2935":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:10477:4097":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:10269:109":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:11343:3331":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:48774:3117":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:15922:1735":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:11499:44945":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:2401:31973":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:6238:3829":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:6611:53572":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"9:809:3117":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4347:40482":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:5346:3825":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:24492:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13240:49861":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6091:41509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:15660:4344":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4046:40452":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:5794:2941":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:23429:29193":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:45726:1968":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:1584:38344":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13180:49855":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:1760:38360":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:4535:43219":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:2889:4016":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:47556:188":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:50117:2756":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:56342:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10844:4101":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:6562:2996":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7549:3835":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11696:45057":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:49962:2382":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:46713:2302":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12073:49114":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:32359:52944":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"12:866:3093":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13348:49973":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6126:3870":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:13573:3135":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:46376:2913":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:11328:44329":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:8141:52708":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:5790:3743":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:7737:3164":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:49997:2385":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13685:50366":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11406:44720":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:46573:2285":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11750:45224":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6424:3879":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:432:1859":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:6124:41512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3349:1940":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:46633:2305":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10788:44506":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:51224:2545":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:6870:40628":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:5197:41091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13506:50343":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:5221:41093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:1432:2582":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"4:12067:3195":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:5561:3730":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:7158:3892":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:1021:3232":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:52878:2536":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:23733:2268":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"12:1253:3149":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13054:49803":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:15033:54312":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:2381:1886":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:47487:2582":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"9:27:3556":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:563:37457":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:10821:129":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:46653:2307":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:10692:31986":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:3041:4001":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:11939:181":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:50121:2755":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:45966:1961":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6208:3873":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"12:181:3646":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:543:37456":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"4:12061:2054":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:5802:2943":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:3268:1882":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:2175:3095":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:9593:4330":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:2576:127":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"1:23424:2511":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:47437:176":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:10599:44535":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:46532:2283":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:12408:49199":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:53393:20623":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:3951:40441":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:584:37459":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"18:739:60357":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12327:49193":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11572:45014":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:10552:2407":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:4350:43184":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:4052:40453":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:13924:51254":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:12142:49180":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11100:4128":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4005:40447":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:6239:41519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12712:49281":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:47547:2118":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:5379:3285":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"9:603:42388":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:3562:1957":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11519:44946":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:5788:4292":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:13040:2370":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:790:4186":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:3972:40290":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:6866:2991":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:8359:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:2751:2958":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"12:2309:53356":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:3118:4012":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:15267:3284":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:11614:3123":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:4704:43288":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:2462:4418":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:51635:2541":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:50137:2752":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:8321:3424":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:3997:40446":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:1843:4292":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5469:41111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:11357:3286":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6219:3874":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:53472:20628":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:13245:15010":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"12:925:3138":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:11603:3122":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:1156:31026":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:11388:2702":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:3147:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:10407:4133":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:294:60321":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:299:60326":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:12132:3199":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:8808:162":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:1486:3149":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:4955:43339":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9065:44306":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:11131:2738":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:13540:50349":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:15915:1730":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"18:694:4202":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"14:56:44730":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:52342:2542":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:4362:3270":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:537:37455":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:50109:2751":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:9264:42684":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:14537:118":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:24052:2617":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:23635:51060":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3497:1856":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:50293:4429":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:14235:2248":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:50167:2823":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"4:11289:3287":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:14494:2948":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:49925:2381":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6518:3881":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:14160:3043":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:6021:3995":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:15924:1737":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:2159:2581":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4449:40495":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11767:45232":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:12181:1914":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:56290:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:13336:3299":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:12385:49198":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13547:50350":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:13637:50365":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:48036:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:23048:29174":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:50145:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:48458:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"16:4922:43331":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:3333:1935":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:3524:3034":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:4699:4297":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11304:44328":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"4:1534:3145":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4511:40501":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3370:1948":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:9689:60330":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:45910:199":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:54:3628":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"16:5632:3733":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:11058:3054":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:10696:3459":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"12:892:3630":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:21:672":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"18:754:60343":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:994:3469":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:49709:2744":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:1528:3144":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"0:38:1569":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"16:7333:3845":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:49569:2734":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6999:3889":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13532:50348":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:5360:3717":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:23087:2466":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:24011:53176":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:10489:4102":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:169:50812":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10117:4170":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:12275:49190":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:4599:4295":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:3392:1949":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:4040:40451":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13377:49987":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"4:1045:2999":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"14:244:42606":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:4890:43324":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:11587:3120":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:6768:4037":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4478:40498":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:8860:2484":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5945:37373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:15910:1726":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"4:5965:3330":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:13854:15259":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:11597:2581":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"4:14943:3166":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:50337:2766":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:8157:1867":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5159:41087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10529:44435":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:51038:2552":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:2192:3098":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11082:4090":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"14:250:42612":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13788:50406":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5522:41138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4145:40464":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:4475:3043":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:15933:1746":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:9740:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:4631:2955":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"17:10028:44374":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13258:49902":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:47564:205":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"16:5456:3722":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:9065:1910":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:53358:20620":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:14157:3047":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:10468:4098":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:2314:4138":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:8954:4091":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:11338:3328":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:49344:2814":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:46254:2632":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:7378:3831":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5231:43540":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:3382:1946":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:11269:33607":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:4721:2445":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:15389:55078":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:11408:2990":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4262:40472":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:48745:53167":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:2912:3998":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:2203:1050":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:8084:3052":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:837:2366":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:8112:3470":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:47608:2581":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:610:37463":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:2907:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:23041:2466":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12247:49188":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:51760:51177":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:9769:60333":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:12756:2732":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:51278:2537":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4293:40475":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:12671:3241":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9280:42683":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:11246:54254":{"crate_id":4,"path":["std","net","parser","AddrKind"],"kind":"enum"},"4:13853:4425":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:22540:51198":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7804:3836":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:10424:53654":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:519:37452":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6155:41513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:12442:49201":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:8644:1903":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10571:44534":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"12:1667:3652":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:667:4201":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:6005:34191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12685:49279":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:10211:44387":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:7738:3902":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:1450:3136":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"13:120:42559":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:57617:52947":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:13728:138":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:4306:40477":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2948:184":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:3365:3753":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:681:44301":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:3375:3415":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:11779:45233":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:8241:3081":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:7337:186":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:10847:3262":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:5672:3734":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:3365:1943":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:5608:779":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:24106:6150":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:13025:2368":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:8254:3153":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:1463:3137":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:3743:4157":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:636:60340":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:3503:131":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:4365:3271":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:4852:43311":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:3939:42848":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:9551:4123":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"4:2163:2054":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:7682:3162":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:12040:49112":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11374:2701":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:644:4199":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:47742:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:24798:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"4:4688:2332":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"18:885:4194":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12431:49200":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:5563:41140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"12:1144:3148":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:5029:43363":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:1236:44390":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:12116:3198":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12456:49202":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11115:2582":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"12:2039:3097":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"4:70:1483":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"4:10790:3007":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:45933:1958":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:3048:58595":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:4604:3014":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:14489:57326":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"12:976:3145":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5359:41101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"15:0:1786":{"crate_id":15,"path":["addr2line"],"kind":"module"},"12:1180:3639":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:51384:2566":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:2850:2451":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:569:37458":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13062:49805":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:8913:1700":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:13942:50448":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:3018:4000":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:52024:2555":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:1540:38339":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:829:4190":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"9:0:1781":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13282:49905":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:10128:4171":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:5407:3719":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:2512:4134":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:2218:3417":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"4:5503:3292":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7453:3827":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:4762:43296":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:1618:2054":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:11967:3166":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:14520:129":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:5191:41090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"12:930:3141":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:11915:49002":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3416:1954":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12946:49749":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13799:50407":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:10668:3150":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:5488:3726":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:11140:2694":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:3629:1959":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:7373:2054":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:51192:51179":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:50129:2757":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"9:234:3532":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:6780:3887":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12234:49187":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:15415:3669":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:10591:3230":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13609:50357":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10975:44593":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:51840:51176":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:49976:2383":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"0:41:1576":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"5:8304:2810":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:469:42283":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:56277:236":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:46915:12366":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:46316:2909":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:2171:578":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:13948:3163":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12582:49211":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"14:216:42613":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:9237:2030":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:5837:3344":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:23972:6119":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:13091:2374":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:12191:3085":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:53495:20629":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:10801:44505":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:49211:2707":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:10001:44373":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:12208:49185":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4431:40493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:4417:43201":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:1419:2581":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:5975:3867":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:3488:3094":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:0:430":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:46053:2600":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"4:6864:2951":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7279:4046":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"4:10938:3182":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:13520:50345":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4371:40485":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:2276:2459":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4164:40465":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:49301:2714":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10331:4101":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6807:3888":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13331:49972":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:46493:4346":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:3159:228":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:7291:54226":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:48491:107":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"16:4790:43299":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:45818:194":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:49898:2380":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10253:4136":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:51462:2558":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:9886:44318":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6852:40625":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"11:46:59450":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11640:45053":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"15:269:3665":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3408:1952":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"5:8454:3396":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:15927:1740":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"16:3604:42689":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:4448:43207":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:9466:54846":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:38750:2449":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:3044:58596":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:12231:3087":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:51150:2553":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:8920:1701":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:8844:54232":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"4:1505:3141":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:10266:4135":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:6812:42039":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:5652:3002":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5130:41045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:8486:3193":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:10926:44615":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:4157:4164":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5707:3735":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:9476:44313":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1700:38354":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7236:3899":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:1522:3143":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:15911:1727":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:47495:2054":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:14000:50490":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4358:40483":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:49401:2694":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:3329:2581":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:14544:3024":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"12:354:4409":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"4:5724:2936":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:2267:2458":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:22889:2466":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:7928:2257":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:49605:2736":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:24144:6152":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:50969:51165":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:8370:3349":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:51336:51178":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"18:620:60353":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"9:686:3505":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"4:14021:4340":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:10943:3039":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12659:49277":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:53367:20621":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6136:3865":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13394:50305":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:1527:38337":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"13:0:1779":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:47479:2581":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:13045:2371":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5998:41507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:15920:1733":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"5:8353:57522":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:4401:40489":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:11918:2718":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:46563:2284":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:3710:224":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10420:4132":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5312:41099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:47538:2028":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12610:49226":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:46241:2631":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:11161:2970":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13746:50368":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:3255:1854":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:4265:3055":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:10071:4174":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:49387:2725":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:2181:3096":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:7771:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:51683:2526":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:6682:3840":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:12100:3197":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11458:44729":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:6688:3357":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"4:7932:3231":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"4:15926:1739":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:7634:3159":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"12:2032:3096":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:729:60350":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:51297:51161":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4281:40474":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4300:40476":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:782:60340":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:720:53180":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:12807:2695":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6221:41518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:24594:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11091:2581":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:377:3645":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:3338:3752":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:47700:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10950:44617":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8344:2428":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:32459:52980":{"crate_id":1,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:46362:2911":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:11453:3107":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:3957:40442":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:3287:4007":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:903:3210":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:4306:2582":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:4043:205":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"12:1159:3638":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:10673:44538":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13912:50445":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:3250:211":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:53194:2525":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:5833:3342":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:48762:146":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10229:134":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"5:8437:3094":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:47868:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3739:2477":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:8106:2054":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:4713:3028":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:15909:1725":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:51119:2565":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:11226:55073":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:9933:44319":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:4066:40455":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13446:50335":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:3153:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:13370:49975":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:14863:4342":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:48792:51321":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"7:0:1472":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:9745:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5414:41107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7856:3905":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:14469:3006":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:7303:3901":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:840:3136":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"4:15146:3080":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:10800:2948":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:5889:4304":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:13574:50353":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:599:37461":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:4399:3046":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:6051:38276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:46724:2297":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:811:4188":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:2484:44421":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:3039:58654":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:3558:1956":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:7815:4306":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:11544:3119":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:3398:1950":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:22763:2507":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"6:5978:41505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13963:50449":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9210:44309":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:766:60351":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"14:231:3352":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:10236:4094":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:2937:179":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:5780:2939":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:11363:3306":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4439:40494":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:1455:1699":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:10095:4168":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:10353:4139":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:6357:3877":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:7668:3161":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:3486:1885":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:10279:4074":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:12018:4352":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:13240:15009":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"5:6475:3093":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:46410:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:1472:3147":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"12:2005:2581":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:6942:2993":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:11738:45223":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:24696:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:3727:1964":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10962:44594":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:1311:4175":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"4:3613:3035":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:24080:6131":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:24730:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:1235:3451":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:3278:2324":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:8849:4122":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:22893:2266":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:12211:3086":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"1:52311:2539":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:3981:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"14:11:42604":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:6257:3400":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:3759:2581":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:10912:44606":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:28013:2515":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:12343:49194":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:53241:2543":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:1457:3148":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:6614:37410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:1136:2960":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:8294:3232":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"4:3192:128":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:1194:4415":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:46949:12369":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"4:5740:2938":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3084:2466":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:3038:2115":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13429:50334":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6491:3880":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:12051:49113":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:5330:42683":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6591:3884":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10317:4080":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:5658:3000":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:52377:2524":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:7840:4312":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"9:963:3572":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:8121:3093":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4470:40497":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:11295:2698":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:13743:150":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"12:1200:3640":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6152:3826":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6910:40633":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:24764:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13119:49807":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:51581:2534":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:9943:60331":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12632:49275":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"11:0:1783":{"crate_id":11,"path":["adler"],"kind":"module"},"4:3194:3242":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:8929:44303":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:11539:45006":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12168:49182":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:5092:1876":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"5:2310:3486":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:46624:2290":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"4:699:3205":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:9133:44308":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:4215:3093":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4341:40481":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:4651:3014":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"4:7620:3158":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"4:5957:3329":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12373:49197":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:22561:51201":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:45973:2469":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"18:704:60340":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:13015:2367":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:5732:2937":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13780:50405":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:15326:3292":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:7647:2062":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5421:3720":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:3918:40439":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:46615:2289":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:10911:214":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:2968:3999":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:46592:2287":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:3882:3038":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:51485:2561":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:48221:2339":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:49377:2724":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:22495:2272":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:48984:2921":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4241:40471":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"9:996:3573":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:4515:3437":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:47624:2054":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:3756:1884":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:3970:4292":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11885:2717":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12262:49189":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:49693:2742":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:15930:1743":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:10839:118":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:49419:2698":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:10272:109":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"4:10576:55077":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:4013:40448":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:49833:2378":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:11167:2975":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"4:11527:3118":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:5384:3718":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:15096:3072":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:51255:2533":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:51317:2522":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:46285:2914":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:1597:2581":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:5505:3727":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2945:4021":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:12028:49056":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:923:3468":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:2543:4095":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11604:45016":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:50125:2759":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:51086:2532":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:1486:3094":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"5:8129:3471":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:45802:196":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:6176:3872":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:51708:2527":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:57638:52946":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:3473:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:6868:2992":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:1607:2582":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:5536:1901":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:7122:34192":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:10219:2332":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"5:1195:58597":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:2773:4022":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:47826:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:11186:44326":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:3506:132":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:14719:3003":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:12671:49278":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"0:39:1575":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"16:3218:4004":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:11067:3024":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"6:4073:40456":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3421:1955":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:3362:3097":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:50180:2824":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"6:5228:41094":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"12:469:59451":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:49193:2705":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:46922:1700":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:2872:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:13819:50411":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10827:4161":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:11101:2283":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:13386:50304":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9088:44307":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"12:1100:3146":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10557:2408":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:48525:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:1708:38355":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:45754:1966":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:24832:2784":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"8:0:1780":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:3264:4006":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:11124:2694":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:5379:41103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:12664:128":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:11337:4085":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:11933:3163":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"5:7257:4292":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:45887:197":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4419:40491":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:1694:3448":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:1161:31027":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:10863:3038":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:3978:40444":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:14715:31986":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:3328:1936":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:1522:38336":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:11378:4083":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11159:44325":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:15003:3085":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"4:8493:3194":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9528:2725":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:10282:2330":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11026:44321":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:48784:51320":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:14127:141":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13041:49751":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11665:45055":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:24196:2798":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"3:0:1776":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:7835:2280":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7467:3828":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:3772:42731":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:1717:38356":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:10288:2340":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3793:1967":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:1723:38357":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"12:1688:3653":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1596:38345":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:22542:51196":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:46662:2292":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10140:4101":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:2794:3755":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:14484:54676":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:9404:44311":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:46415:2809":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13924:50446":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:46734:2298":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:3412:1953":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11822:45238":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11199:44327":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:22812:2466":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"4:8695:1905":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:12486:2889":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:3892:40437":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:69:3395":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:4436:3047":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:5347:41100":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:15931:1744":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"4:2366:600":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:23994:2622":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10081:4074":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:13098:49806":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10516:4103":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:5753:3741":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:46681:2294":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:3333:3249":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"4:6702:55018":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:0:1789":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6068:38279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:3862:40434":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:47633:178":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:849:4191":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:3091:4059":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:14554:54880":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13154:49811":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:50301:190":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"4:8930:2246":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"4:8385:3232":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:4671:43280":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:10658:3101":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:47470:2053":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"5:3839:4292":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:0:1324":{"crate_id":4,"path":["std"],"kind":"module"},"16:5580:3731":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:4572:3053":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"16:5295:42686":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:4506:43215":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"12:2013:3093":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11678:45056":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:11194:2977":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"}},"external_crates":{"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}