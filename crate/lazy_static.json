{"root":"0:0:1640","crate_version":"1.4.0","includes_private":false,"index":{"1:12025:24207":{"id":"1:12025:24207","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12031:31342":{"id":"1:12031:31342","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11894:1397","str::slice_mut_unchecked":"1:12032:31343","crate::ops::Index":"1:2981:2026"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12105:31355":{"id":"1:12105:31355","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12020:31341":{"id":"1:12020:31341","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12037:24994":{"id":"1:12037:24994","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43343:3222","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12040:28082":{"id":"1:12040:28082","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43611:3225","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12042:23550":{"id":"1:12042:23550","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43649:3234","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12066:28517":{"id":"1:12066:28517","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11712:3196","`DoubleEndedIterator`":"1:7240:121","prim@char":"4:11888:419","str::split":"1:12060:28081"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43375:3155","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:32015","5:5384:2877","5:5387:32016","5:5390:32017","5:5398:32018","5:5399:32019","5:5400:3028","5:5401:29714","5:5402:29715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12084:31348":{"id":"1:12084:31348","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12099:31352":{"id":"1:12099:31352","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12090:31349":{"id":"1:12090:31349","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11712:3196","`DoubleEndedIterator`":"1:7240:121","prim@char":"4:11888:419","str::matches":"1:12087:1839"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43579:3231","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12036:23577":{"id":"1:12036:23577","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43333:3223","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12130:29619":{"id":"1:12130:29619","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12107:31357":{"id":"1:12107:31357","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11737:3211","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12022:28488":{"id":"1:12022:28488","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12043:20874":{"id":"1:12043:20874","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12033:28507":{"id":"1:12033:28507","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12034:28508"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12113:27555":{"id":"1:12113:27555","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12087:1839":{"id":"1:12087:1839","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11712:3196","`DoubleEndedIterator`":"1:7240:121","prim@char":"4:11888:419","str::matches":"1:12087:1839"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43561:3230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:32018":{"id":"5:5398:32018","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1646":{"id":"0:29:1646","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12096:31351":{"id":"1:12096:31351","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11712:3196","`DoubleEndedIterator`":"1:7240:121","prim@char":"4:11888:419","str::match_indices":"1:12093:31350"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43525:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12023:1645":{"id":"1:12023:1645","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12106:31356":{"id":"1:12106:31356","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1640":{"id":"0:0:1640","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1646","0:31:1647","0:28:1640"],"is_stripped":false}}},"1:12011:811":{"id":"1:12011:811","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11888:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12081:31347":{"id":"1:12081:31347","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12060:28081":{"id":"1:12060:28081","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11712:3196","`DoubleEndedIterator`":"1:7240:121","prim@char":"4:11888:419","str::split_whitespace":"1:12038:23527","str::rsplit":"1:12066:28517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43357:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12014:31339":{"id":"1:12014:31339","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12075:28519":{"id":"1:12075:28519","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196","str::rsplitn":"1:12078:28521"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43461:3153","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12016:31340":{"id":"1:12016:31340","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12014:31339"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12027:24208":{"id":"1:12027:24208","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12078:28521":{"id":"1:12078:28521","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11888:419","str::splitn":"1:12075:28519","self::pattern":"1:11712:3196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43479:3149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12110:31358":{"id":"1:12110:31358","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12125:31361":{"id":"1:12125:31361","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12038:23527":{"id":"1:12038:23527","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12039:23515"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43631:3226","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12072:31346":{"id":"1:12072:31346","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11712:3196","str::split":"1:12060:28081","prim@char":"4:11888:419","str::split_terminator":"1:12069:31345"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43425:3228","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12137:2950":{"id":"1:12137:2950","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4536:2950"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43665:2951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:32016":{"id":"5:5387:32016","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12052:2155":{"id":"1:12052:2155","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12012:2114":{"id":"1:12012:2114","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5402:29715":{"id":"5:5402:29715","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12134:29624"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12093:31350":{"id":"1:12093:31350","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11712:3196","`DoubleEndedIterator`":"1:7240:121","prim@char":"4:11888:419","str::rmatch_indices":"1:12096:31351"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43507:3232","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12056:2113":{"id":"1:12056:2113","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12116:28525":{"id":"1:12116:28525","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12119:31359":{"id":"1:12119:31359","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1640":{"id":"0:28:1640","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12135:31363":{"id":"1:12135:31363","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4535:31363"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43656:2972","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12013:31338":{"id":"1:12013:31338","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12010":{"id":"1:12010","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12011:811","1:12012:2114","1:12013:31338","1:12014:31339","1:12016:31340","1:12019:28471","1:12020:31341","1:12021:314","1:12022:28488","1:12023:1645","1:12025:24207","1:12027:24208","1:12029:24209","1:12031:31342","1:12032:31343","1:12033:28507","1:12034:28508","1:12035:23548","1:12036:23577","1:12037:24994","1:12038:23527","1:12039:23515","1:12040:28082","1:12041:31344","1:12042:23550","1:12043:20874","1:12046:28523","1:12049:28524","1:12052:2155","1:12056:2113","1:12060:28081","1:12063:23542","1:12066:28517","1:12069:31345","1:12072:31346","1:12075:28519","1:12078:28521","1:12081:31347","1:12084:31348","1:12087:1839","1:12090:31349","1:12093:31350","1:12096:31351","1:12099:31352","1:12101:31353","1:12103:31354","1:12105:31355","1:12106:31356","1:12107:31357","1:12110:31358","1:12113:27555","1:12116:28525","1:12119:31359","1:12122:31360","1:12125:31361","1:12128:31362","1:12130:29619","1:12131:29620","1:12132:29622","1:12133:29623","1:12134:29624","1:12135:31363","1:12137:2950","1:12138:31364"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12122:31360":{"id":"1:12122:31360","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12034:28508":{"id":"1:12034:28508","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12033:28507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12101:31353":{"id":"1:12101:31353","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:3028":{"id":"5:5400:3028","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12039:23515":{"id":"1:12039:23515","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12038:23527"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43640:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:31354":{"id":"1:12103:31354","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12032:31343":{"id":"1:12032:31343","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11894:1397","crate::ops::IndexMut":"1:2985:2027","str::slice_unchecked":"1:12031:31342"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:32015":{"id":"5:5383:32015","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1943","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:8705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:1943","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:8705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12049:28524":{"id":"1:12049:28524","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:3212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12138:31364":{"id":"1:12138:31364","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4533:31364"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43674:2971","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12131:29620":{"id":"1:12131:29620","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39552:21375","Self::is_ascii":"1:12130:29619"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39552:21375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12134:29624":{"id":"1:12134:29624","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12041:31344":{"id":"1:12041:31344","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43621:3227","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12019:28471":{"id":"1:12019:28471","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11279:3216"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1647":{"id":"0:31:1647","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12029:24209":{"id":"1:12029:24209","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12128:31362":{"id":"1:12128:31362","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11673:127","`FromStr`":"1:11672:2726"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11672:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11672:2726","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12035:23548":{"id":"1:12035:23548","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11888:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43327:3224","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:29714":{"id":"5:5401:29714","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12133:29623"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:32017":{"id":"5:5390:32017","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12133:29623":{"id":"1:12133:29623","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:2877":{"id":"5:5384:2877","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12069:31345":{"id":"1:12069:31345","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11712:3196","str::split":"1:12060:28081","prim@char":"4:11888:419","`DoubleEndedIterator`":"1:7240:121","str::rsplit_terminator":"1:12072:31346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43407:3229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12046:28523":{"id":"1:12046:28523","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12132:29622":{"id":"1:12132:29622","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12021:314":{"id":"1:12021:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12022:28488","`u8`":"4:11905:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12063:23542":{"id":"1:12063:23542","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11888:419","self::pattern":"1:11712:3196"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11535:3164","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:32019":{"id":"5:5399:32019","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:1943","`String`":"5:7255:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1943","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:8705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:11410:18710":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:44283:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"5:6598:2460":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:9813:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12835:19966":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13821:20035":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:20577:26523":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:4141:1971":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:2856:2025":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:6061:14803":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5857:13593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:8389:15922":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:41470:2119":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:9151:3115":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:11585:18723":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12607:19262":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:11015:8946":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13332:19998":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:20841:8348":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"4:4639:8899":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:6904:15809":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:4602:2964":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:43245:2673":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:21083:8774":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"4:5719:1987":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:7791:8765":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:9566:15940":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:7572:33618":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:880:2642":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"11:1035:8691":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:41454:2642":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"16:6236:15778":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:43084:23529":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"6:4920:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:39982:21725":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11770:19210":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4980:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:3170:8812":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3152:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"18:491:34489":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10626:16150":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:9038:34459":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:4641:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:41462:2643":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:4761:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:2515:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"5:1995:2646":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:7677:8731":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:11011:15903":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:21966:2730":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:1071:8691":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:2426:14836":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:42917:3169":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4960:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:30288:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:11195:27007":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9670:15999":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:917:8683":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7588:15830":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:2784:2010":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:947:2627":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7588:2952":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:40726:3034":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:43640:3235":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:11870:27614":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:1144:8692":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4991:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:44152:3266":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"0:0:1640":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"17:13240:19990":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:46446:8411":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2161:2894":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:7065:33524":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:2908:30916":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:624:34470":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:11900:745":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:12138:19232":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:8025:15844":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:41538:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:2832:2477":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:4366:2438":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13453:20010":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:7258:14400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:4112:8865":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:5741:15763":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:8800:2119":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:40034:2971":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10569:16114":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:6814:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:5779:15764":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13316:19996":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:7529:15827":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:12295:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:2684:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:4074:30584":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"15:198:14780":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"4:10826:27574":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:5811:15765":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:43265:2674":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13791:20032":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:43407:3229":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:8651:14800":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:1366:2643":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:5910:2480":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:7211:1942":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:10682:8769":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:11737:3211":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4404:12894":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3169:2035":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11544:18720":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:8893:1988":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:11911:1553":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:41911:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"11:675:8684":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11502:18717":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:13516:20017":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"13:110:33349":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:8420:15923":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:11072:26992":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:43333:3223":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13667:20024":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:2981:2026":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:9098:28365":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:44364:3298":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10130:3165":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:41589:2643":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:8443:15924":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:5071:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:1768:610":{"crate_id":4,"path":["std","env"],"kind":"module"},"16:6376:15787":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:9322:34447":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:2701:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:9370:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:42421:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:494:9439":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:5000:15525":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1667:1087":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:9142:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:44104:3202":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:7538:13118":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:40102:2970":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:10948:2503":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:10272:3154":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4609:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:3677:8828":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:7335:2398":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:4999:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12282:19239":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:46716:8426":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:21803:21620":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:4508:8890":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:681:20069":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:20768:23926":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"16:3749:14874":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:2843:2022":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6016:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10142:16103":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:930:8686":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:5563:2480":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:2242:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1042:32121":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:7013:2119":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:8141:3222":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"4:11145:2504":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:6674:3048":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:10923:15951":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:1555:10357":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:2911:1967":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11220:16164":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:8573:15928":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:4400:15357":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:8968:15815":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6400:15789":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:8360:15921":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:8948:28349":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12403:19248":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2922:1938":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:44164:3267":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:47214:8366":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:43210:3040":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:39955:2951":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:4624:15413":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6793:15804":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:43884:3255":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7259:2095":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6520:15796":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"15:0:1870":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:80:20051":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:6553:10291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4797:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:9959:16050":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4767:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7859:15843":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:4702:15467":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:8170:15852":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12915:19969":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:10580:16148":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"9:481:14633":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:22227:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:242:34448":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:731:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11355:18707":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:635:8665":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:11910:789":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:7077:15814":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:1700:10370":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12006:19222":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:7757:15839":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:5468:2438":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:44273:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5809:13591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11628:18726":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:42683:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"11:816:8683":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:11210:26987":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12072:19227":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7488:15823":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:2916:30915":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4952:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:5367:14802":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:7471:28355":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:43343:3222":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:521:20074":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:2741:1937":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"11:359:2396":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:9985:2643":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:8912:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:39970:2978":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:8234:8826":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:2926:1939":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:9043:8959":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:11424:3239":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:20549:26035":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:9748:15939":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:40042:2951":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:386:15916":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5843:13554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:42031:1984":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:21827:2729":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:4845:15490":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:41260:3075":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:9374:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:11136:16161":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13376:20002":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6544:15797":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:2905:14856":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6935:15810":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:2372:8762":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:10138:8949":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:9003:27306":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:7195:8747":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:6293:15780":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:6848:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:8909:3222":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1721:8858":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:8598:15929":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:40057:2973":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:11484:18716":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:45968:8370":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:6236:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13612:20019":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:5346:15751":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:3184:8698":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:2869:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"1:2746:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:7497:13112":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:7644:8668":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:6721:20904":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:40286:3050":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:6538:1996":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:44376:3296":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:2477:8802":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:8082:8816":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"16:7669:15834":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:43173:2672":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10967:15953":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"11:0:1867":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:3163:2033":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:11299:18704":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13506:20016":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11861:19214":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:45459:8362":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:8918:8647":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:573:9449":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6876:15807":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:2847:2023":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"4:11913:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:10705:16154":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:11879:19215":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:46652:8371":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:4681:8851":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:11054:8778":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"4:3355:2438":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:9839:15993":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:707:3213":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:4898:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:4416:12895":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:6180:2452":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:3753:2398":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:2744:2841":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:13744:20029":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:3157:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"14:0:1869":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9161:3119":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:2616:14844":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:2768:2005":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:41380:3079":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:11859:8670":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:20536:2915":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:10422:8809":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:21431:3145":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:10226:2659":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"4:1577:8695":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11726:3213":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"9:52:14653":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:20760:8341":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:11732:3212":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:2839:2021":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12522:19256":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:8753:15930":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:113:20053":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:40338:3055":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:10462:2499":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:42898:3193":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:0:1871":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:45792:8398":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:8166:8825":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:4914:2438":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4377:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:7659:8669":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:12308:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:1692:10369":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:1747:21776":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:2169:32117":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:20909:8349":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:4653:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:5693:1986":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:9876:16048":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:21862:21782":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:39161:2028":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:40306:3052":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:8982:27055":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"4:10931:2501":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4433:1962":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:20729:8344":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"4:11906:1496":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:4574:30300":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:7509:2493":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12019:19223":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:43741:3249":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:11372:8827":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:9523:15979":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:305:33294":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:6545:9487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:11035:3265":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:7244:33791":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"4:676:2651":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"4:4642:8872":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:7275:14401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7711:15837":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:4322:1957":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4875:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:5499:8942":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:44088:3205":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"11:2198:26057":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"11:2192:33293":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:11168:8950":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10615:16140":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:1404:8681":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10092:16102":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:535:33775":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4344:12889":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:2796:2011":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:3158:8695":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"9:174:14737":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:6116:12800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:3292:8799":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:5974:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13689:20026":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:43946:3258":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:10068:16100":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4492:12905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:653:9499":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:6361:15786":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:2720:14848":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:43525:3233":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:40196:2514":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:2614:8804":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:2546:14841":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:39075:2038":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:7665:8693":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:3872:14925":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:3401:2654":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"4:618:8663":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:7846:28042":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:7528:2495":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9178:15938":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:10092:3152":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:515:20077":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9265:15940":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6724:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:1609:10362":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:45746:8333":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:9380:15965":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:9120:28301":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4459:12900":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:744:8682":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12372:19246":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:8171:8823":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:9886:16021":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:11907:1497":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"5:6765:2466":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:8806:8955":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3382:2923":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:2963:2036":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12592:19261":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:2312:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12224:19236":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4431:12897":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"11:828:8687":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:4371:12890":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:10354:16067":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:2407:2637":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:7352:2455":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:45437:8356":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:2800:2013":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:595:9452":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:41711:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4307:12886":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:1821:1969":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:2827:2019":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:6485:1992":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:12512:2484":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11924:19218":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:10771:3162":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11471:18715":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:8142:15850":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:1783:8713":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"11:783:2402":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:43315:3220":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:12542:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:2642:14845":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:6917:3024":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:7503:13113":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:9340:15942":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:44347:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:11886:371":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"1:47648:8433":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:47800:8329":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:44389:25508":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:7837:15842":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"4:8748:8945":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:3030:14859":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:43935:3257":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4688:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9534:15978":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:7162:8680":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11391:18709":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:2574:8795":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:3547:2643":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:39552:21375":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:6294:2409":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:5305:15734":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:10692:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:10702:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:47072:8394":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4386:1960":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:9609:2472":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"11:1839:2642":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:43665:2951":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:13857:20037":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:39192:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"18:481:20075":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:43621:3227":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:11894:1397":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:922:8684":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:46111:21781":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:8337:8925":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:5880:13596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:11520:18718":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:9149:3114":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:2151:589":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"11:1873:8697":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:9117:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"16:4540:15401":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:609:34498":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:45521:8397":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4439:12898":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2448:14837":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:2317:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:10053:3164":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:7526:13116":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"9:388:14635":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:582:2915":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:487:15917":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:587:9451":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:40163:2992":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"4:8870:8957":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:1213:8691":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:3782:8829":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10334:15939":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"18:644:34467":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:1947:15995":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"4:11908:1498":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"11:2060:8690":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6890:15808":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5557:15752":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11712:3196":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"14:165:14762":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:4436:8873":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:8667:14798":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4472:12902":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:1787:16001":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:7767:15840":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:844:2642":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:4480:15389":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:45699:8430":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:8427:8928":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:12085:19228":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:8103:8773":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:21088:8335":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:43809:3253":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:40296:3051":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:1443:8685":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:1752:10375":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:20938:8334":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:6868:33620":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13564:20018":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13659:20023":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:40718:3032":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:7252:14399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:30360:21778":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:10104:16058":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:9973:16023":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"11:1091:2633":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:11279:3216":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:42174:3117":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9275:34446":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:40708:2520":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:10257:16064":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:6854:15806":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"9:445:14634":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:49668:8353":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:5870:13595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:7066:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:30232:2881":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:10897:15950":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:8788:15931":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"4:10722:27602":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:43327:3224":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11946:19219":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"4:4737:2478":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13181:19985":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:1614:10363":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:9159:3118":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:3534:2642":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:3168:8811":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:40367:3057":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:3234:1968":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:11532:18719":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:1058:2636":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:10050:28343":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5995:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:47747:8326":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4751:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4486:12904":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:8823:15932":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:43163:3157":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:6696:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:5104:15557":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4110:1970":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:13842:20036":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:3124:8696":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9218:15939":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:10478:16116":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4398:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:11225:26991":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:12501:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:1242:8692":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:41631:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4707:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5708:15761":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"4:361:8660":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12059:19226":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"7:0:1543":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:4510:15395":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12959:19971":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7240:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9545:15977":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:154:2388":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:44291:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:40149:3017":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12550:19258":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:4773:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:5191:2409":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:8180:15853":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:41831:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:7028:2433":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:44326:3292":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:7683:15835":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:1524:14754":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:3622:2409":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:43763:3250":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:4845:8897":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12358:19245":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"14:160:14761":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6201:15776":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:4449:12899":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:4183:1777":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:11556:18721":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:3975:2433":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13135:19981":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:5385:8940":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"6:1564:10358":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"16:6474:15793":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:532:9443":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10516:16111":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:9424:15967":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:48:1554":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"5:2077:2426":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:43184:3161":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"4:7854:8803":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:7019:8699":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:8256:15855":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:7150:8679":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:7670:8694":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:43223:3160":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9653:16013":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:3644:2119":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:5235:8999":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6460:15792":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:5556:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7255:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:2817:2016":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1682:10368":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:119:9119":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4538:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:11903:744":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"6:4698:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2695:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13041:19976":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:21116:8339":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11484:3238":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:8521:15926":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:4406:1961":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:2912:30917":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:40324:21914":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:3150:8697":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:8548:15927":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:11003:8945":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:2898:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4590:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:6097:8963":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:5616:15755":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:4377:1959":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:2518:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:40424:3061":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:9526:2522":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:20594:26520":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:482:9437":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:47402:8372":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:41226:3073":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:6409:1995":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:2404:14835":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6706:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:45391:8391":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:766:20066":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:39334:2032":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:42167:3116":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:21952:2733":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:4005:2409":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"4:11393:8829":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:30041:2693":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:10555:16112":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:3911:8834":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:1519:10352":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:44092:3209":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:1594:8698":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9557:15939":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:9062:8778":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"6:4911:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:9068:34439":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:47675:8320":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:9986:16051":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12098:19229":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4294:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10885:15949":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:10589:16149":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:13249:19991":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:2346:8752":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:5370:8939":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:3210:8814":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:40012:2979":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:45622:8363":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13024:19974":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:42433:21794":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12388:19247":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:736:20065":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:9734:15996":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4813:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:47324:8400":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:42498:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:5834:2647":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:0:1872":{"crate_id":17,"path":["object"],"kind":"module"},"1:23037:2727":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:21559:8774":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:8955:27289":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12033:19224":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:8925:27562":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"11:2212:33291":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"4:8387:8926":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:6598:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:30466:21713":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:40069:2974":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:43674:2971":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:7058:2119":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:11461:28335":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:1919:16035":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:7230:9397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:5747:13585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10598:15953":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8250:2098":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:1048:8690":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:4414:8872":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13324:19997":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:5334:8937":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9853:16047":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:45938:8364":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:10000:16097":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10691:16153":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:3135:28048":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:5944:15769":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:9157:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:6691:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:562:15918":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:12496:19254":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"4:8220:8870":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:3775:2409":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:6248:2433":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:875:8681":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:20770:2894":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"16:4037:15042":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:41479:2095":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:9512:15980":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:45543:8403":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"10:36:33287":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4790:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"4:3129:27272":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:2696:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:47721:8324":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:7590:8651":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:8154:3225":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:8310:15920":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:40487:3065":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:531:20078":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:3063:14861":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6535:2391":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:40693:3027":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:10712:2655":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:8953:15934":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"4:6907:2491":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13698:20027":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:4990:28331":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:41521:2188":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13265:19993":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:4782:25566":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:3060:8817":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"4:413:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:9038:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:9696:15984":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:4336:2441":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:40389:3058":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9098:15936":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"4:1982:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:8208:3077":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12980:19972":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:719:20064":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2792:2012":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:3899:14928":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:8718:15905":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6351:15785":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:43425:3228":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:39372:1958":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"17:10440:16145":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:6327:15783":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:11234:18701":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13461:20011":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"4:857:2643":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:2189:30859":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:2851:2024":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:5987:3067":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:652:2643":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:7942:8805":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7543:15828":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:757:2433":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:1525:10353":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:562:9447":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"11:840:2627":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:8632:15900":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:39280:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:2932:1785":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:6587:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:11468:28291":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"4:11091:8959":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:6488:15794":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6022:15773":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10735:16156":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:9028:15935":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"11:1050:14752":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3510:2433":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:13651:20022":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:3815:14892":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:11899:643":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:10721:16119":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:8683:15904":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:5354:8938":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4726:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10039:16057":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:2738:2927":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:13292:19994":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:39961:2955":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:1544:2438":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:42713:25511":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:12597:3295":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:5926:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:39258:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:10822:8732":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:4499:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"10:44:14742":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:1514:10351":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:47706:8323":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"4:3440:2983":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:2812:2015":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:45347:8390":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:40255:3049":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:3925:8835":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13488:20014":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:9498:15984":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"4:2344:2885":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:2540:2474":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7317:33589":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:5847:15766":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:8256:15899":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:45592:8357":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12307:19241":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12563:19259":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4553:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:5764:1994":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"4:959:8689":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:564:20080":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11319:18705":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:4904:15501":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:6776:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:13194:19986":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:9443:15968":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:13499:20015":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:47695:8322":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:41289:21643":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:1736:10374":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:1034:15986":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:1668:10367":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:8072:15846":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:21945:25521":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13678:20025":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:3276:2398":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"14:215:14770":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:2219:8679":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2788:2014":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"13:0:1863":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:46866:8360":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:554:9446":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4392:12893":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9577:15983":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:12158:19233":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:46189:21719":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:7095:2119":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"4:4256:8868":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:40246:3041":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11641:18727":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12293:19240":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13469:20012":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:5959:13600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:42695:8926":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:2512:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:10712:16155":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:10283:16063":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:6800:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:2691:1936":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:39236:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:32147:2930":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:5967:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:1382:2119":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:9895:16020":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:40699:3029":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:5677:15759":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:8214:15854":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:20982:8774":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10052:16079":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:6009:2482":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:1588:10360":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:46528:8359":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"3:0:1860":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:4757:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:42476:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:11069:15957":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"4:10314:8944":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:633:30940":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:11837:27586":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:11090:15958":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:20922:8774":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11993:19221":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:39358:15854":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:12113:19230":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:8496:8931":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"4:9381:8768":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:4137:2438":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:7015:30585":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2805:2018":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:526:9442":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:13865:20038":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12236:19237":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:9866:16014":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:5502:8943":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:43792:3252":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:9683:15998":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:9295:26844":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:2509:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:9386:2497":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"4:8410:8927":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:6685:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:1432:8684":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:7165:3038":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"4:11243:27771":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:30864:2915":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2694:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:43236:3158":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12194:19235":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10743:15943":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:1576:10359":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:279:2624":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4383:12892":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:9772:16002":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:4683:8852":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:6218:15777":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9617:15976":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"11:991:8690":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:2204:33290":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:20879:2894":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:47666:8319":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:2931:14857":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:4932:15505":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6981:15812":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:42705:25512":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"11:2076:2631":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3079:2030":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:9453:15969":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:40459:3063":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:13639:20021":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:40438:3062":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:10286:3150":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:6024:32678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:3163:31131":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:42913:20457":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:6621:28342":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:5829:13553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:8675:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:11493:14788":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9148:34435":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:7555:13120":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:41445:2118":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:43649:3234":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:8858:15933":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:4679:8848":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"14:221:14771":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:30266:2882":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:2354:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6431:15790":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:4578:30304":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:2502:14839":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5071:15548":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:7509:13114":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:9107:2983":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:10798:15945":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:3300:14863":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"4:3939:8837":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:5908:2438":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4821:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:671:20068":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4941:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:39365:21931":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10857:15948":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:43301:3221":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:7578:14589":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5988:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:6740:2452":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:8195:15901":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:5724:15762":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:585:8662":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:11535:3164":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2692:1965":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:13356:20000":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:3047:14860":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:22260:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:7074:30898":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:4019:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"14:202:9005":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6755:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:20984:8336":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:9312:15941":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:9469:15970":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:9826:15994":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"11:97:33288":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:40050:2972":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6047:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:9155:3117":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6830:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11717:3210":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:13233:19989":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:39379:2946":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:40448:3046":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:12178:19234":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9641:15988":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13169:19984":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:7693:8732":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"4:1062:2631":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4332:1958":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:4255:1951":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9822:16007":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4845:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:5570:2481":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11813:16106":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:393:33300":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:11912:1126":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:1014:1779":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"5:3688:2646":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:7798:8769":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"18:507:34467":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:41597:2119":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:21114:8343":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"4:8215:8869":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:6321:15782":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:638:8666":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:12483:19253":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:474:9436":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:39341:2925":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:5594:15754":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:4784:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:8160:8826":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:5797:33528":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:10244:3153":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:2636:31088":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11109:15959":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10660:15956":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:1981:2644":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:3129:31121":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:47785:8328":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:5998:15772":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:8490:15925":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:8479:2642":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"16:2742:14849":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:1908:10518":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:0:1389":{"crate_id":4,"path":["std"],"kind":"module"},"4:11909:1495":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:9961:2642":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:10209:8940":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:5798:13590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7478:15822":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6136:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:41203:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:7178:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:10647:27723":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:9033:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:2862:14854":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:7572:8661":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:1351:2642":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:40116:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:6757:8962":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:5947:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:11887:936":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"5:1612:2409":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:768:2398":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13211:19987":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"4:8730:8944":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:12576:19260":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12770:19964":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:2833:2020":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11832:16105":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"4:10652:30313":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:22392:2731":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:7004:8705":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:22557:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:13879:20039":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:3995:8842":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:1561:14755":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"4:6865:30576":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:8226:8861":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:2470:14838":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:40315:3053":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:2572:14842":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:280:1943":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2163:2895":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:10989:15954":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7016:33675":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7519:15826":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:21561:8337":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:690:20070":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:11892:312":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:8776:8947":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:11721:19209":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:568:9448":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:9081:8961":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:1080:8692":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:11905:1499":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:20804:8347":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:2506:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:783:2412":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:46606:8365":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:4808:795":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:42403:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:12419:19249":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:20990:8338":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:1716:2398":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:6057:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:46014:8425":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:4872:15493":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:2603:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"16:4327:15308":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:2298:14804":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11461:3241":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9721:15997":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"4:5439:8941":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:1931:653":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:46416:8405":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5717:13525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:6586:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:7932:28327":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"14:187:14769":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4571:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10015:16098":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:11500:3240":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:4176:8867":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:45844:8410":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2763:2006":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7029:33377":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:20869:8342":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:3458:8772":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"16:2694:14847":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:21:681":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"15:180:14779":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:44100:3208":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:8843:26258":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6132:15774":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"4:11308:2506":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10377:16065":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4042:2954":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:2378:14834":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13385:20003":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:12382:3290":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:45681:8424":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:47464:8406":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4527:12909":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:42674:3133":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:45822:8404":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:2087:31127":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4970:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:2208:8748":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:41345:3077":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"9:234:8926":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:21665:21235":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5920:15768":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:5239:9000":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:21718:21389":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:6101:2487":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:20564:26035":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:7269:9006":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:40083:2976":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:41751:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:2985:2027":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13411:20005":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"4:3449:27886":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:13033:19975":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4681:8831":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11600:18724":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:5179:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:1785:8714":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:10865:8947":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:3640:14866":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11891:19216":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"4:8960:27294":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10203:3156":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:10835:8941":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"4:355:8659":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:5051:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:6662:15800":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10840:15947":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:43857:3254":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:41791:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:506:9441":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10080:16101":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:22359:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:1622:10364":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:2245:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:6768:3021":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:45367:8355":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11800:19212":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:47526:8427":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:42153:3115":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:6696:15801":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:4760:8847":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10635:16141":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:11785:19211":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:14:1840":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:11037:15955":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:699:20071":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:9188:34445":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:1546:10356":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:7103:15815":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10465:16117":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"0:28:1640":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"6:6569:9321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:4125:8866":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:3446:14864":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11783:3243":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7803:15841":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:4854:8898":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:2387:1877":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:45662:8375":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:40670:3025":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:2211:2467":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"18:755:20073":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4947:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:12357:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"4:1583:8696":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12433:19250":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:10804:3163":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:2357:14833":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:2933:16061":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:5630:15756":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:45990:8376":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4619:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:9405:3131":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:11902:743":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:7786:8768":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:4564:8837":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13426:20007":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:9624:2530":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:30302:21664":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:6919:33573":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:10416:8811":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"4:1589:8697":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:1540:2635":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4423:12896":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:574:34467":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4732:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9917:16046":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:10545:15954":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"14:40:18703":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11258:18702":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5935:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:11500:14788":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:4757:15474":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:9907:16049":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"7:79:14612":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11615:18725":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:10649:16151":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:22326:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:727:20072":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:6332:28342":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:4007:23730":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:41871:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:8260:8900":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:44108:3203":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:2362:8757":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:6821:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:4445:15378":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:11854:27297":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:40076:2975":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:21004:8339":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:2116:30907":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:3680:8827":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:579:9450":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7626:15832":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4466:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10452:16118":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10823:15946":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"4:9184:2259":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:3370:2924":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:13443:20009":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:47610:8412":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:9228:34449":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7635:15833":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9108:34455":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:1924:8743":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:11904:740":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:10125:16078":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6717:14776":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6651:10292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:21771:21636":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:11938:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:46370:8399":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:8264:8902":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:43631:3226":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:7697:15836":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"4:4096:8863":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12449:19251":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:7036:2421":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:6296:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:1985:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:40684:1780":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6110:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:21978:2734":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:7544:13119":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:42449:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:3782:14883":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"4:7697:20700":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:8736:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13344:19999":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:6151:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:2524:14840":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11844:19213":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:1228:2631":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:8931:15902":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:7318:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:12894:19967":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:1916:2668":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"12:0:1868":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:35:2405":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:10270:16062":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:863:2417":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:7821:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:25847:2728":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11821:16104":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1715:10372":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13145:19982":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:4318:12887":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:7411:15818":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:62:9065":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:6700:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:8129:15849":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"14:31:14761":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"0:31:1647":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"16:5386:14800":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:1561:2642":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:4890:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:30272:2883":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:11888:419":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:7198:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10428:16144":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:40347:3056":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:975:15982":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9946:16022":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:1847:2433":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:5247:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:43375:3155":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"10:0:1866":{"crate_id":10,"path":["adler"],"kind":"module"},"1:20742:8345":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:46212:21631":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:538:20079":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:6367:2119":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:11898:642":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"16:2764:14850":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:4596:15409":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:6943:15811":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:6085:2484":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:11901:742":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:7202:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:6373:1989":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:1568:2433":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:46036:8431":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:40473:3064":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:4719:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:4789:15482":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:11162:27291":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:2470:2692":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:9981:8724":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:488:9438":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"9:325:14689":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:3132:28044":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:1071:33301":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:4167:2438":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:32020:2920":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"16:8047:15845":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:43461:3153":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:1650:10365":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7596:15831":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:5643:15757":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"11:1009:2631":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:10010:3151":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:5065:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:2522:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:1895:8742":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:41309:24663":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"11:1879:8698":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9596:15981":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:4399:2441":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:11893:1367":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:11969:19220":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11459:18714":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:42658:3134":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12331:19243":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:3933:8836":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:8109:15848":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4743:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:4288:12884":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:2469:8774":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6628:10318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:4331:12888":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6002:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5886:15767":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8670:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:8124:3049":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:10165:3155":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:901:2433":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:43561:3230":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"9:352:14650":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:11895:1481":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"6:4857:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6578:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:7509:15825":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6728:15802":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10416:16143":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:7632:24457":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:8147:3151":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:13082:19979":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:10670:27605":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"4:1821:8724":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7591:3036":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:2087:8691":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:247:34451":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:6336:15784":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:11249:3142":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:8825:8953":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:9877:24660":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:43921:3256":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3931:2438":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:5862:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7557:15829":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"4:8047:8770":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"4:8091:2655":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"9:0:1865":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:11891:1049":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:3247:8809":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:2780:2007":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:8286:8850":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:6382:1781":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"16:6442:15791":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:936:8687":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7437:15819":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:10258:3149":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:9147:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:3383:8771":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:7616:2499":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:9350:34456":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5032:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:2594:14843":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:4667:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:8979:34458":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:6164:33609":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:40226:3040":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:9410:3132":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:11282:18703":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9409:15966":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"5:1413:8682":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:8242:8871":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:3208:8813":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10670:16142":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:6133:27301":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:888:8682":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:5586:3043":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:2929:1940":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:5963:15770":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5032:15533":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"1:8838:24456":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:43507:3232":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:2753:2004":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:953:8688":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13777:20031":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12318:19242":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:6579:2448":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13812:20034":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:10628:8901":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"11:638:2642":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"9:502:14637":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:9628:15975":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:911:2398":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"4:3973:8838":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:4851:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:7520:13115":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4803:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6668:10295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"14:7:14761":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:5077:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:8075:3024":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:2706:1964":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12259:19238":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:46060:8432":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:43611:3225":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:2906:30926":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5022:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:42666:25524":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:6990:15813":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:41512:2096":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:46292:8393":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:39176:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4827:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:7532:13117":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"4:5320:8936":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:541:9444":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:12510:19255":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:6179:15775":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:44076:3201":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:8356:3210":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:815:2415":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:1532:10354":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4260:1952":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:4576:30302":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"11:1843:2119":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"9:421:14636":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13477:20013":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"4:10000:2658":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"4:10942:2502":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:1733:2911":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:7862:2644":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:1594:10361":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:11163:16162":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:1852:2398":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:40268:2661":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:44084:3206":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:7595:3037":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13721:20028":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10761:15944":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:2905:2181":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:43357:3151":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:211:2407":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:8838:8956":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:1637:2860":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12622:15956":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2319:14831":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"7:32:14605":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:500:9440":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:6585:2127":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:6369:1780":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:6605:8902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12461:19252":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:3117:2642":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6008:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:13015:19973":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13257:19992":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:96:20052":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:45644:8369":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:7443:14560":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:10847:27597":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:12536:19257":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"4:2867:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:41332:3076":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:40022:2980":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:43255:3159":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13121:19980":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"11:119:2392":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:703:8685":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:0:1873":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4521:12908":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:40121:3018":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"11:1866:8696":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:590:25523":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:6446:2409":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:7491:13111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:3983:8839":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:5402:14798":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:554:2650":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:47823:8330":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11902:19217":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:6977:1950":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:41951:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:42160:3114":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8251:2097":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"4:8762:8946":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:7937:27317":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:21916:21635":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:5035:1983":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:2589:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"16:4568:15405":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11672:2726":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6819:15805":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:40399:3059":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:46682:8377":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:21337:8350":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:40376:3044":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12345:19244":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:39302:2029":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:8907:27303":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:45491:8392":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5900:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:1728:10373":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13419:20006":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:4629:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"4:7838:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11372:18708":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:47770:8327":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:41530:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:9478:15987":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:3225:14862":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:3249:8810":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13625:20020":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6307:15781":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:21854:21714":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:43989:3215":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:6482:1991":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:41394:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:44334:3293":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:9153:3116":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:7280:9007":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:4559:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6558:15798":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:3325:3029":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13219:19988":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:45561:8409":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:22491:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:43144:3147":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:1630:588":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:7595:8653":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:2550:2472":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:11237:30312":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"15:219:14784":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:7209:24648":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4932:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:13066:19978":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11060:15956":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13101:19963":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10681:16152":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12923:19970":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:43656:2972":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:44080:3204":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:5418:33425":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13803:20033":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:7044:31123":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10316:16060":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:10657:8765":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:9138:15937":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:1846:2653":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5816:13592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:8090:15847":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:2830:14853":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:7366:15817":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:8283:15919":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"4:6552:1997":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:4818:15487":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13399:20004":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:13763:20030":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:963:2409":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:7808:8766":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"17:11422:18711":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12799:19965":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:599:34481":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5755:13586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:3673:2644":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11339:18706":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:6254:15779":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:12330:21106":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7042:33774":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:21107:8774":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13159:19983":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:40408:3060":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:11889:1515":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"17:10303:16059":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:7335:33442":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:2264:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:10936:15952":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4836:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12634:19263":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:8319:8911":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:44131:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:7238:8746":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:480:2468":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:5021:28331":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:9028:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:40677:23559":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:1978:16019":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10491:16115":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:1463:8701":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:7161:3039":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"4:7460:15918":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:7498:15824":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:5785:13589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:22425:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:47686:8321":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:7225:8745":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"11:1859:8695":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:21839:24650":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:2808:14852":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:4509:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:614:34478":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5779:13588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:39216:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:41991:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6390:15788":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:7571:8774":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:7257:27318":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"11:821:8686":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:9933:16024":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:44096:3207":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:41368:3078":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:7449:15820":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"4:6188:2480":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:41606:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:43778:3251":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10505:16146":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:41243:3074":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:660:20067":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:4207:2642":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:3615:8824":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:3142:16066":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"11:867:8689":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4546:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4478:12903":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7743:15838":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9488:15985":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:6608:2462":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:40133:24648":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:3881:8832":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:5485:2448":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:6243:33408":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10402:16131":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:47732:8325":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11653:18728":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:3266:16084":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"11:1634:2403":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:8134:3063":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:867:2119":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2786:14851":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:1126:14753":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:6785:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:43153:2670":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:9592:2525":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:1539:10355":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:21900:21639":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:30836:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:40206:3016":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:8469:8929":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"16:2967:14858":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5571:15753":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11193:16163":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:7485:13110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:8784:2642":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:6767:15803":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"4:10419:8813":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:21879:21770":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:1709:10371":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:46158:21598":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:42458:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"18:636:34475":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:45892:8358":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13053:19977":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:11446:18713":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:41671:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:42393:21628":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"11:859:8688":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:9362:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:1078:32122":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:4728:15469":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"4:4104:8864":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:5976:15771":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"11:731:8681":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3995:23766":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:3987:8840":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:43479:3149":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:3182:26861":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12126:19231":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:7568:14588":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:501:2426":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:41581:2642":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"4:643:8667":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"11:399:33297":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:265:2409":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:2879:14855":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:20579:26518":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:6575:15799":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:12646:19264":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5058:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:652:34467":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:11449:8976":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:4251:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"5:5818:1983":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6506:15795":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:2749:2908":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11573:18722":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13309:19995":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:8792:8958":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:11027:27618":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:32060:2922":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"0:29:1646":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"16:7467:15821":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:420:14806":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:3142:2031":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:2215:8749":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:2758:2009":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:7263:1941":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:2774:2008":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:5655:15758":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:9803:8774":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:530:2469":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"1:47862:8331":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:43969:3214":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11434:18712":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:47572:8378":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:40356:3066":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:11331:8828":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:39998:2977":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:8854:8954":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:5067:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:22458:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:7781:8767":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"4:1844:2259":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"16:2337:14832":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5015:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:2348:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"16:55:14799":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"4:11688:2510":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:4969:15518":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:4047:2643":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:1572:2398":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"4:1433:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:3875:8833":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:21787:25515":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4865:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:39114:2037":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:32056:20700":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:20596:26522":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"4:4903:8907":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:21332:8340":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:6671:14777":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:43135:3148":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:5528:3054":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:547:9445":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:1422:8683":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:7103:2119":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:60:33296":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:43579:3231":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:8485:8930":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"1:5380:2438":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:5712:2433":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:2668:14846":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:926:8685":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:22524:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7293:15816":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:4:1014":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"13:226:33302":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:10357:2498":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"8:0:1864":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:45413:8396":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:2206:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"16:8156:15851":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:2822:2017":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:11265:3144":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:43956:3259":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:1657:10366":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:1565:2119":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8249:2099":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:40277:3042":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12902:19968":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:123:9120":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:1197:8690":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:22293:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10026:16099":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:3585:14865":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9796:16000":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:2360:8756":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:44112:3265":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:21443:26038":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:3197:1966":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:5693:15760":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12046:19225":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"11:665:2119":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13367:20001":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:326:2394":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"4:3465:8793":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"1:22590:2732":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"4:5686:1985":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:10527:16147":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:1756:2665":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:4328:8862":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13433:20008":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5773:13587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}