{"root":"0:0:1782","crate_version":"1.4.0","includes_private":false,"index":{"1:12778:29577":{"id":"1:12778:29577","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12716:21252":{"id":"1:12716:21252","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12176:3466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12693:28386":{"id":"1:12693:28386","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44025:3526","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5550:26233":{"id":"5:5550:26233","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12787:26236"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12673:29559":{"id":"1:12673:29559","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12775:29576":{"id":"1:12775:29576","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12692:21241":{"id":"1:12692:21241","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12691:21261"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44054:3536","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12787:26236":{"id":"1:12787:26236","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1789":{"id":"0:31:1789","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12731:26575":{"id":"1:12731:26575","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12032:448","str::splitn":"1:12728:26573","self::pattern":"1:12360:3497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43893:3451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5549:26232":{"id":"5:5549:26232","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12786:26235"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12728:26573":{"id":"1:12728:26573","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497","str::rsplitn":"1:12731:26575"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43875:3455","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12702:26580":{"id":"1:12702:26580","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12790:26490":{"id":"1:12790:26490","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:33418"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12663":{"id":"1:12663","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12664:869","1:12665:2261","1:12666:29556","1:12667:29557","1:12669:29558","1:12672:26456","1:12673:29559","1:12674:339","1:12675:26541","1:12676:1787","1:12678:24467","1:12680:24468","1:12682:24469","1:12684:29560","1:12685:29561","1:12686:26560","1:12687:26561","1:12688:21247","1:12689:21309","1:12690:22552","1:12691:21261","1:12692:21241","1:12693:28386","1:12694:29562","1:12695:21249","1:12696:24853","1:12699:26579","1:12702:26580","1:12705:2302","1:12709:2260","1:12713:26568","1:12716:21252","1:12719:26571","1:12722:29563","1:12725:29564","1:12728:26573","1:12731:26575","1:12734:26577","1:12737:26578","1:12740:1989","1:12743:29565","1:12746:29566","1:12749:29567","1:12752:29568","1:12754:29569","1:12756:29570","1:12758:29571","1:12759:29572","1:12760:29573","1:12763:29574","1:12766:25299","1:12769:26581","1:12772:29575","1:12775:29576","1:12778:29577","1:12781:29578","1:12783:26230","1:12784:26485","1:12785:26234","1:12786:26235","1:12787:26236","1:12788:26488","1:12789:26489","1:12790:26490","1:12791:29579","1:12793:3252","1:12794:29580"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12758:29571":{"id":"1:12758:29571","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12705:2302":{"id":"1:12705:2302","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41875:197","prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12687:26561":{"id":"1:12687:26561","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12686:26560"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12666:29556":{"id":"1:12666:29556","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12722:29563":{"id":"1:12722:29563","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12360:3497","str::split":"1:12713:26568","prim@char":"4:12032:448","`DoubleEndedIterator`":"1:7752:127","str::rsplit_terminator":"1:12725:29564"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43821:3530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12749:29567":{"id":"1:12749:29567","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12360:3497","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::match_indices":"1:12746:29566"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43939:3534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12684:29560":{"id":"1:12684:29560","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12038:1531","str::slice_mut_unchecked":"1:12685:29561","crate::ops::Index":"1:3095:2172"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12760:29573":{"id":"1:12760:29573","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12385:3512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12688:21247":{"id":"1:12688:21247","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43741:3525","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:30253":{"id":"5:5531:30253","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2088","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2088","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5546:30256":{"id":"5:5546:30256","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5547:30257":{"id":"5:5547:30257","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2088","`String`":"5:7529:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2088","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12664:869":{"id":"1:12664:869","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12032:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12675:26541":{"id":"1:12675:26541","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:30254":{"id":"5:5535:30254","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12713:26568":{"id":"1:12713:26568","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12360:3497","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::split_whitespace":"1:12691:21261","str::rsplit":"1:12719:26571"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43771:3453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530":{"id":"5:5530","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5531:30253","5:5532:3178","5:5535:30254","5:5538:30255","5:5546:30256","5:5547:30257","5:5548:3333","5:5549:26232","5:5550:26233"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12781:29578":{"id":"1:12781:29578","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12321:133","`FromStr`":"1:12320:3021"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42018:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12320:3021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12320:3021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12669:29558":{"id":"1:12669:29558","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12667:29557"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12791:29579":{"id":"1:12791:29579","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4596:29579"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44070:3274","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12752:29568":{"id":"1:12752:29568","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12665:2261":{"id":"1:12665:2261","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12719:26571":{"id":"1:12719:26571","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12360:3497","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::split":"1:12713:26568"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43789:3457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12756:29570":{"id":"1:12756:29570","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12696:24853":{"id":"1:12696:24853","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12680:24468":{"id":"1:12680:24468","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12685:29561":{"id":"1:12685:29561","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12038:1531","crate::ops::IndexMut":"1:3099:2173","str::slice_unchecked":"1:12684:29560"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12763:29574":{"id":"1:12763:29574","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12769:26581":{"id":"1:12769:26581","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12740:1989":{"id":"1:12740:1989","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12360:3497","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::rmatches":"1:12743:29565"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43975:3531","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:30255":{"id":"5:5538:30255","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12676:1787":{"id":"1:12676:1787","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41875:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12743:29565":{"id":"1:12743:29565","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12360:3497","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::matches":"1:12740:1989"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43993:3532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1788":{"id":"0:29:1788","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12686:26560":{"id":"1:12686:26560","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12687:26561"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12672:26456":{"id":"1:12672:26456","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11915:3517"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12754:29569":{"id":"1:12754:29569","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12794:29580":{"id":"1:12794:29580","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4594:29580"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44088:3273","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12667:29557":{"id":"1:12667:29557","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12691:21261":{"id":"1:12691:21261","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12692:21241"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44045:3527","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12737:26578":{"id":"1:12737:26578","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12674:339":{"id":"1:12674:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12675:26541","`u8`":"4:12049:1636"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12682:24469":{"id":"1:12682:24469","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12690:22552":{"id":"1:12690:22552","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43757:3523","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12772:29575":{"id":"1:12772:29575","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12695:21249":{"id":"1:12695:21249","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44063:3535","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12689:21309":{"id":"1:12689:21309","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12032:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43747:3524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12694:29562":{"id":"1:12694:29562","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44035:3528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12759:29572":{"id":"1:12759:29572","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12789:26489":{"id":"1:12789:26489","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:33418"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12709:2260":{"id":"1:12709:2260","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41875:197","prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12783:26230":{"id":"1:12783:26230","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12699:26579":{"id":"1:12699:26579","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12725:29564":{"id":"1:12725:29564","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12360:3497","str::split":"1:12713:26568","prim@char":"4:12032:448","str::split_terminator":"1:12722:29563"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43839:3529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12380:3513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:3178":{"id":"5:5532:3178","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12678:24467":{"id":"1:12678:24467","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41875:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10449:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12734:26577":{"id":"1:12734:26577","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1782":{"id":"0:0:1782","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1788","0:31:1789","0:28:1782"],"is_stripped":false}}},"1:12746:29566":{"id":"1:12746:29566","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12360:3497","`DoubleEndedIterator`":"1:7752:127","prim@char":"4:12032:448","str::rmatch_indices":"1:12749:29567"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43921:3533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1782":{"id":"0:28:1782","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"5:5548:3333":{"id":"5:5548:3333","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7529:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7529:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12785:26234":{"id":"1:12785:26234","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12784:26485":{"id":"1:12784:26485","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39822:21163","Self::is_ascii":"1:12783:26230"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39822:21163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12788:26488":{"id":"1:12788:26488","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:896:33418"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12793:3252":{"id":"1:12793:3252","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4597:3252"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44079:3253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12786:26235":{"id":"1:12786:26235","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12766:25299":{"id":"1:12766:25299","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12032:448","self::pattern":"1:12360:3497"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41873:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12365:3511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:9021:25499":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:62:9368":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"4:9034:16233":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:8154:16267":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:7543:9311":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:7445:2727":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:7906:8986":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:5829:13925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5891:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13309:19293":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:3032:123":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:22524:3022":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:527:9746":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"14:187:15177":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:43939:3534":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13909:19805":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:22468:21703":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5867:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4455:13098":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:6415:16206":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:3837:9135":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"14:0:2018":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:43695:2964":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11523:16462":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:2937:2163":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:8453:9232":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"6:4870:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11168:16424":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"4:4231:9173":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6041:16191":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:30549:3184":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:47738:8689":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:2197:3195":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:14235:19826":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:43821:3530":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:12951:146":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"17:15384:20600":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:40266:3279":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:44025:3526":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:40631:3373":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:9812:3419":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:5866:16184":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:12380:3513":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:5632:2773":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:5518:2722":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"9:52:15058":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:44522:3566":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:43640:3346":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11497:16489":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:1873:9046":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:2915:2159":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4473:13259":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:4180:9172":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:3347:2115":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:1710:10658":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:43747:3524":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:12986:24917":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:2383:2932":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"15:288:15193":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:39649:3248":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:21112:21318":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:11978:16505":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:1063:8998":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"9:357:15055":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:1556:9001":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:10762:3467":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:7067:31577":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"11:2403:2933":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:13584:19789":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:364:2684":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:5992:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:44494:3507":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:13347:19296":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:10164:2810":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"4:2209:9053":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:44790:3597":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"4:10940:9036":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:7622:13495":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"14:221:15179":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:39822:21163":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:15527:20606":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"4:12035:1145":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"5:3682:2694":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:40664:3365":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:10337:16359":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:12141:3541":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:15345:20596":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:1680:2694":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:48237:8630":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:881:2702":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:7843:9072":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"4:11178:3566":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12418:16617":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"4:3735:9133":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13676:16552":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10559:16362":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:8828:9251":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:825:2700":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:13754:19796":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:41958:2241":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:45957:8692":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13162:19284":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:14786:20555":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:43685:3461":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1604:10649":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6929:16227":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:46006:8646":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:15177:20578":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11755:16547":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:3764:15287":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"10:36:31291":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:2536:31299":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:12014:25378":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11307:16434":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5111:13327":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:11370:25181":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:3192:217":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7523:16242":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:4487:2108":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:5746:2131":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7474:16238":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13463:19304":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:40877:3372":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:590:24176":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:42384:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:1909:701":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"1:46626:21704":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:1019:2694":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:2881:15268":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:40389:3320":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:4639:25156":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:40552:3348":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:44173:3551":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:42906:3209":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"13:226:31358":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:42503:2130":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:6898:14430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14145:19819":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"4:8891:9259":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:43603:2962":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:11563:16461":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:7343:9701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"11:787:8989":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"11:710:8991":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"4:3394:2722":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"4:8493:9234":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"17:16146:20782":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:42345:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:1110:28837":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:5322:16149":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:4440:2106":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"16:5648:16174":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"11:434:31308":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:42061:2932":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"11:2140:2919":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:4883:3322":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:3988:9142":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:10321:111":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:3220:9000":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12230:16558":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:1265:8997":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:8001:25748":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10059:3434":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:844:8994":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"4:2946:134":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"15:394:15205":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:7333:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:1769:2954":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:40318:3274":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:39596:2175":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7629:2740":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"18:736:20809":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:40521:3347":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10471:32570":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:45805:8680":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6352:16201":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:1126:2926":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:14099:19817":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"4:8545:2932":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:21170:21332":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:16049:20774":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"0:29:1788":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"4:4964:9213":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:8292:9167":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12264:16595":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7041:31733":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"4:6430:2135":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:10792:9073":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"4:7838:9071":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"6:7371:14805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:7341:28824":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:2281:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:40238:3280":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7006:16230":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:2744:15262":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:2618:15257":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:10962:16408":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:3065:15274":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:43514:23997":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2564:159":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:40290:3282":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:15507:20604":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:4038:9145":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:2966:2170":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"4:7643:9077":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11666:16497":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:47628:8655":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12273:16375":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:7677:3344":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:654:9803":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:6818:16222":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:22675:3026":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:12335:16334":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:1018:1929":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"17:15725:20620":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"4:2518:9109":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6263:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:4053:15456":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4755:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2355:131":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:12039:1617":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"5:7311:28947":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12659:16326":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7651:16250":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:548:9749":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5140:13331":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:42086:202":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:9808:3418":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6169:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:8169:9076":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"6:596:9756":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:719:20808":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:7529:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13202:19286":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:588:9755":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7660:16251":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13787:19798":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:599:32577":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:4821:9153":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12548:16605":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:6540:2137":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"15:0:2019":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:15689:20618":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:40561:3357":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7269:31808":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12396:16565":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7102:16232":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10449:245":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:22536:24173":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:9813:16351":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:2766:15263":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:9274:2409":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:4307:2095":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:1836:185":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:9800:126":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:13026:16647":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:507:9745":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:30741:21757":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:4924:850":{"crate_id":1,"path":["core","iter"],"kind":"module"},"0:0:1782":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:32356:3233":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:7651:13499":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:6960:16228":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:41604:167":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4480:13260":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12166:16561":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:21141:21328":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:1896:2736":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"18:652:32571":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:7417:8984":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:8097:16264":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:1501:10637":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:10812:125":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:14887:20559":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:7679:13502":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"9:486:15038":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4516:13264":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:1500:8991":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:48146:8625":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:1450:2265":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:3270:143":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:1545:2736":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:9730:16348":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:8050:16262":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:4192:2117":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13504:19307":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13935:19807":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:2548:15254":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:23110:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:6047:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"11:351:31302":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:45781:8644":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:481:20819":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:6297:226":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:40581:3359":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:4566:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6456:16208":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2641:122":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:14346:19833":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:6248:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:1664:10653":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:1746:3212":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:401:16344":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"4:3930:9139":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:96:20796":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:44748:3594":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:8858:9264":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:14156:19820":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:41070:3330":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:3540:2716":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"4:11170:26331":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"4:6896:2777":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:6560:2681":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"4:10738:9207":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:11045:2789":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:15659:20615":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:15337:20595":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"9:0:2014":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:40622:3363":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4523:13265":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11469:16488":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:14324:19832":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:16160:20783":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:16032:20773":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:11194:16425":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"4:12003:8974":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:6279:16197":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"4:8352:9156":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:42897:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:9790:16350":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:2788:15264":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:4235:1927":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"11:1910:9001":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"11:2231:15155":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"16:6721:16219":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:2370:9061":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"1:47130:8715":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:15645:20614":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13707:19793":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14208:19824":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:7702:14994":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:2698:28954":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:47816:8661":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2652:134":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:42601:3416":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:6856:2746":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:1203:16409":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:15160:20577":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:2469:2927":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:7529:16346":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:10642:3453":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"18:681:20813":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"4:10953:9246":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12684:16328":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:7128:16233":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11675:16543":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5928:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"4:914:8991":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:15356:20597":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:8274:3384":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"14:7:15169":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:119:9422":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:5963:16187":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:7710:142":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3674:2265":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:1094:16401":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11243:16437":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:7476:24151":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:39371:2183":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:699:20815":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11345:16440":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:2151:8998":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"4:11355:25193":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:6226:16194":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:2968:28976":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:23017:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:945:8995":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"7:0:1681":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:2548:31296":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:40325:3275":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:6189:31701":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:6361:16202":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6753:16220":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:7931:2934":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:644:32571":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:1434:2933":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:39410:2182":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:4361:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:9968:16354":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:42841:21837":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12029:16513":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:1591:10647":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:44267:3555":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:1883:2932":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:0:2022":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:12047:794":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:15557:20609":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:9971:24155":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:1819:2409":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:40651:3350":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"4:3491:25603":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:4045:2694":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:2807:2112":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:8846:2244":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:6162:2772":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"0:31:1789":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:43131:153":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:32443:3239":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:11234:158":{"crate_id":4,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"4:9467:135":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:22500:21829":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:1760:21705":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4431:2105":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:15589:20611":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:7556:14965":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:22613:21766":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:6225:3374":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:44366:3560":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:11690:16544":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15367:20598":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4998:13315":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:4497:15804":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:2522:2982":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:9459:22081":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4830:13296":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:707:3514":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7503:16240":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9599:3431":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:2969:15271":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:4686:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"19:0:1125":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13961:19809":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:40344:3277":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:12050:1633":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:14439:19840":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12898:16377":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:1891:2716":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:42464:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:14282:19829":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:1066:15159":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:7663:8953":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:2450:15250":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:636:32578":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:4847:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:3589:2932":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:12037:1498":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"6:4666:13280":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4064:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:15680:20617":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:11340:25254":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13235:19288":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"4:8137:3329":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"5:5956:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:5753:2132":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:8157:2944":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:12036:338":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"4:11476:9134":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"4:12043:690":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"5:1281:8998":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:12030:399":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"6:7645:13498":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5897:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:4949:15920":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:7325:2265":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:1025:2919":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:4052:24387":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4914:13307":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"4:5780:2133":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:5009:13317":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:4207:2722":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:2967:2329":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4860:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:5574:16170":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:123:2682":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10813:32567":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:4129:25269":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1490:8990":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:2423:2265":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:4800:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:43993:3532":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:11537:9135":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:40474:3318":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:22924:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:3280:9117":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:6420:2807":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"5:4087:2933":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:1558:10644":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"7:78:15017":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:30565:3209":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:42077:2265":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:12365:3511":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:1784:2736":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:4167:9171":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:6249:2773":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:46525:21680":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:7668:8955":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"16:7782:16257":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:13383:19298":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:11605:25729":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12191:16557":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:8200:3370":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:12244:16560":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12797:16374":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:8866:2265":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:1887:2265":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:9810:212":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:43666:3460":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:21493:8636":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:1718:10659":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:12009:16364":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:483:9741":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:4999:2722":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:39486:216":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:12324:16597":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10051:16169":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6583:16216":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:12374:3514":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:582:3219":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:4177:2722":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:1703:9164":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:4635:25152":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:10172:16356":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"11:490:150":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:515:20821":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:39574:222":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:39457:2174":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:4603:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:2878:2152":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:7805:2086":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:43741:3525":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:5941:13953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:3980:9141":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"4:4491:9179":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:41661:3382":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:6467:16209":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:44518:3504":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:3366:3334":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:2622:9102":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:10968:25361":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:43893:3451":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:7207:23995":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:43715:3522":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:30509:3182":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:44356:3559":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12432:16608":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:6107:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:2811:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:5117:13328":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:4824:13295":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15321:20593":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:32335:16272":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:10076:9028":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:15329:20594":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:6681:2694":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7722:16254":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:6901:16225":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7342:31766":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:14822:20556":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:12065:3540":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:44079:3253":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:46258:8699":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:42001:2338":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6658:9791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11885:3444":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:5395:9243":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:12053:1632":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"16:2644:15258":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:23079:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:14843:20557":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:10230:2813":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:2426:1951":{"crate_id":4,"path":["std","io"],"kind":"module"},"6:1639:10651":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:30635:21808":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:47940:8716":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:42010:3389":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:660:20811":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:3191:28942":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10593:2932":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:10338:2948":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"4:12031:1028":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:10986:9252":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:5339:2694":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:43153:22086":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:46076:8664":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4676:13281":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:12701:16329":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:504:2713":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:15710:20619":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:21386:8635":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:1956:2957":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:9651:16347":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:14266:19828":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:3199:9118":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:2284:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5033:13320":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:4344:15723":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:1310:8999":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:13155:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:42869:21701":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10102:16324":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14698:20551":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:1040:8997":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:4161:2116":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:14122:19818":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:4955:13311":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:40370:3272":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10315:16320":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9860:16352":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:548:149":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"4:723:150":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:5128:210":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"1:2199:3196":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:1682:10655":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:4439:2725":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:5149:2129":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:4527:15810":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:2554:31295":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:11477:3210":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:7534:16243":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:4461:13258":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:7738:9035":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:2339:15245":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11113:16395":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10657:16364":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"9:393:15040":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:1743:655":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:47986:8667":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:16170:19292":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:2057:2937":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12127:16564":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:12202:16593":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:9814:3420":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:5727:16179":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:44803:24148":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:11158:9251":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12758:16372":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:39628:2177":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:12431:3544":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:22282:8761":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"4:4625:9143":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11027:16396":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:44697:233":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12718:16370":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:6961:14435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"9:177:15144":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:12055:1691":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:11981:25366":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:7318:16234":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13395:19299":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"4:0:1523":{"crate_id":4,"path":["std"],"kind":"module"},"4:4742:9157":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15903:20768":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:44331:3557":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:48120:8623":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6819:14426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:14221:19825":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:2799:243":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:8959:2134":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:893:2716":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:4428:13254":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:875:8995":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:46352:8653":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:1641:631":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:2954:2167":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:12153:16562":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:4835:15902":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:43839:3529":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:10876:3455":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:11767:16548":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10988:16399":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5696:16177":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:32331:24328":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:47066:8660":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:11088:16400":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:13765:19797":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10803:16367":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:22146:21961":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:46784:8688":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:1537:10642":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:1496:10636":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12366:16599":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:2169:16473":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10207:16357":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:4247:2932":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:3255:2176":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:5830:16183":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11590:16457":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:47280:8649":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:687:2933":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:43729:3521":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2816:253":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:5383:9304":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:6700:14421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:13273:19290":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:2596:15256":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:3584:16530":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2920:2164":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6318:16198":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:41797:3383":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:6059:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:21925:8637":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"9:237:9232":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:2971:2171":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4764:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6376:16203":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:614:32585":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:2899:2156":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:1796:9028":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:10941:16389":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:10840:26336":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:11290:2791":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:6792:16221":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4989:13314":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:43975:3531":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3060:137":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:8476:9233":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"14:215:15178":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:755:20817":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11269:16404":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:9624:16318":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:46428:8714":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"11:2369:15163":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:12591:117":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"8:0:2013":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:1054:2919":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6136:31231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13478:19305":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11065:16402":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"4:12052:1635":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:4312:2096":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11991:16506":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:40571:3358":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:7752:127":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:15493:20603":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:3246:9003":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4841:13297":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:41873:200":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:10608:16363":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:2031:16439":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:6386:16204":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:42924:134":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:859:2265":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:35:2690":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:10535:9120":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:22559:21758":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:15480:20602":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:13254:19289":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:8326:9206":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:22955:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:40501:3346":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:22986:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:6146:2769":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10569:32549":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:6837:14427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:6439:1931":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"1:40590:3360":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:4845:24635":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:42946:3425":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12310:16587":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:15631:20613":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:4578:13272":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:3295:24668":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2574:263":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:48161:8626":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:11034:2788":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:44088:3273":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:5995:16189":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:2386:201":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:9272:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11412:16431":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:7848:9069":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:46095:8713":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4939:1095":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:15301:20591":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:45873:8651":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:40613:3362":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:113:20797":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:727:20816":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:43565:3450":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:766:20810":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:14934:20562":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:5017:15940":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:41644:3381":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"4:6610:2143":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:1541:2716":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:4040:24388":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11932:16510":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:42425:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4947:13310":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:12052:16511":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"4:2205:2754":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"6:1691:10656":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6012:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:15287:20589":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:10915:16387":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7568:16246":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:2561:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:48062:8722":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:785:2697":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13896:19804":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:4806:15897":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:5403:16168":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"14:31:15169":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:39552:220":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:43771:3453":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:11403:3464":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:4641:15828":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:574:32571":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:47486:8683":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4303:227":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:9186:25983":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:6159:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:4401:13253":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:10762:28759":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:2526:15253":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:10247:9254":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"4:2368:9060":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:5613:2722":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:11256:16436":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:5802:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:2883:2151":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"14:160:15169":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10262:2818":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:12385:3512":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:12320:3021":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:832:8990":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"4:7540:25323":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12560:16641":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:7271:2265":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:10944:25159":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:4506:13263":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:640:8968":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:16098:20778":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:44761:177":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:15027:20566":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:15566:20610":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:46474:8721":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:7616:13494":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:856:2915":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2521:9077":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12536:16606":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:15267:20587":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:8171:3342":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:5982:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:8802:205":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"16:3049:15273":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12301:16596":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:15253:20586":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:3936:9138":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:42111:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:4488:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:43365:3471":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:6644:239":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:5419:16169":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:5571:9248":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:15432:20601":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:2978:28953":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13419:19301":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:41774:24158":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:5384:16167":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:6261:16196":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11507:16484":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:5987:226":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:41086:3332":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2889:2154":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:41111:3337":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:15117:20574":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:4740:9154":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:0:874":{"crate_id":6,"path":["libc"],"kind":"module"},"1:8177:3343":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:43875:3455":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:3748:2937":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:44490:3505":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:8167:16268":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:7604:13492":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:7855:9073":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"6:6222:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:23203:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:11998:25504":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9806:3417":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:1576:10646":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:44045:3527":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6114:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:1917:9002":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12356:16598":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4789:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4968:13312":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10510:16361":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:22248:8762":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:10473:2785":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11476:15155":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12459:16404":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:14878:20558":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:5130:13330":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12572:16610":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:2821:2111":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:12964:161":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:4824:417":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:41949:2265":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"15:306:15194":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5363:16166":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"4:8011:9112":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:2696:15260":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4738:9137":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:16087:20777":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:7613:2736":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:1913:10824":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:7599:2782":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:10097:25724":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:5152:13333":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:22148:3195":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"11:2569:8984":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:3056:2085":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6499:16211":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:690:20814":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:2809:251":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5673:16176":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"4:11593:9281":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:2944:232":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:1821:2942":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:40310:3253":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:22484:22038":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:41690:21700":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:44578:3568":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:6204:16193":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6741:10781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15374:20599":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:41063:23977":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:12290:16586":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:4776:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"4:1760:9018":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"4:4798:2765":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:6764:10766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:5612:16172":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:22056:8767":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"11:800:2716":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:1562:9002":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2570:264":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:555:9750":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11155:16423":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:41991:2242":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:7388:14806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:3888:15339":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:542:9748":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:44514:3503":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4376:2103":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12115:16591":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"9:507:15042":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12584:16609":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"18:564:20824":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11727:16525":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:261:32565":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:9094:183":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11439:16452":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:6983:25311":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"4:12049:1636":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:22095:8768":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:7714:162":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:2354:9056":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12850:16376":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:1087:31306":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10067:16323":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"4:12048:790":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"17:11126:16394":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5885:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:10890:3451":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"4:8920:9260":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4585:15820":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:15733:20621":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:16016:20772":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"4:10831:26333":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"4:8207:3523":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:44566:3567":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:8006:25481":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"6:501:9744":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:6531:16213":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12140:16563":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:1566:15161":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6868:14428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8845:2245":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:43346:3494":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:43614:3463":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:8281:16273":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:4388:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6943:14434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:3251:16507":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:1603:15162":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"11:774:8988":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3014:2181":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:21124:21318":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:5146:13332":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"4:12054:844":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:10011:149":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:40250:21643":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:2469:2736":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:48214:8629":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:1296:2919":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:16134:20781":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:9128:9081":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"5:3733:2934":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:1632:10650":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"0:28:1782":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:46036:8652":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:15535:20607":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"4:7026:2778":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:1406:152":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:6401:16205":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:3600:15278":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:5085:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6086:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10617:2933":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:15990:20770":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:48276:8631":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10925:16388":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:5051:25712":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12596:16368":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:22551:21658":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9267:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:2907:2158":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:10578:2786":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:44379:3515":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"4:12033:1652":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:3966:9140":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:46450:8720":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:6426:1930":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"6:4647:13279":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6332:16199":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:43789:3457":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:31111:202":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"16:5634:16173":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:2933:15270":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10247:2759":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:3431:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:8190:3356":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:4700:9205":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"4:9147:9266":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:609:32594":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14296:19830":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:149:2678":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:7633:13496":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7828:16259":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:7429:8985":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11369:16438":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:4375:13251":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:1596:10648":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11632:16494":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:46603:21640":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:12091:16589":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:11144:9250":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:11612:15202":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:7462:9051":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:44541:128":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"16:7391:16235":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:10355:135":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:5088:15963":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:6866:2748":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:12474:16364":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:42189:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4884:13303":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:2504:15252":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:8115:16265":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:4719:15882":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:6915:16226":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:7362:2265":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:15133:20576":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:12045:792":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:10155:25177":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"11:2304:8997":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"10:44:15149":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"7:31:15010":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12486:16613":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:11645:16495":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:5015:13318":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:7023:2753":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:3602:2933":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:624:32598":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:0:2020":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:2948:2166":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:3186:9001":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:4703:9178":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:2359:15246":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"4:10538:9116":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:6228:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14757:20552":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:14399:19837":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13056:16648":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:2406:15248":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"3:0:2011":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"5:7518:2732":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:2722:15261":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:5689:3361":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:21801:3447":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:21312:9077":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:6070:2767":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:42615:3417":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:2139:2713":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:32295:3224":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"4:12042:688":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"17:14950:20563":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"4:3241:9121":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4854:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:1142:15160":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:207:2692":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:1146:28830":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7597:31673":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:40401:24151":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:6998:2749":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:849:2933":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:2562:31300":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:533:9747":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:15235:20584":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:2284:15216":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:43757:3523":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:357:8961":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:2043:2934":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:15101:20572":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:951:8996":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:1678:1182":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:40642:3364":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10432:32561":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:5743:16180":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:475:9740":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:46236:8693":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13882:19803":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:42608:3415":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4434:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:43653:3462":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:15:1990":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:637:8967":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:3063:138":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:6711:14422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:15244:20585":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:6889:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:5308:126":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:15062:20569":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:40337:3276":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:48089:8620":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:123:9423":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:6357:182":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:22202:3195":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:22642:24181":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:5240:209":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:40302:3273":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:5387:9305":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6893:31708":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"12:0:2017":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"14:202:9310":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:40223:3253":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4724:13285":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:44345:3558":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4616:13277":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:41924:170":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:40280:3281":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:3179:2932":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6687:16218":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:1419:2932":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7492:16239":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:2178:28892":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11701:16545":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:569:9752":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:2932:2162":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:3315:15276":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:44151:3550":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:4986:15933":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:8385:9217":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:4637:25154":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"4:8850:2932":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:2202:9052":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:21776:8641":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:22277:8763":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:22576:21654":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:495:9743":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:40530:3356":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:42306:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:1546:10643":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:40863:3371":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:14181:19822":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:16076:20776":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:363:8962":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6879:16224":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:1160:8999":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:12410:16602":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:7621:16249":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14359:19834":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:44740:3593":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:1528:10641":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:3670:9130":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:2861:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5068:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13989:19811":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:3461:15277":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:2942:2165":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5044:13321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:1511:8992":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:7279:9004":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:48135:8624":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:5123:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:22188:8770":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:14509:19844":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:14989:16403":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:16062:20775":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"4:9026:25496":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:10904:3456":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:11516:9133":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12125:3539":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:595:16346":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:2856:2084":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"11:2124:8997":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15125:20575":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:46113:8719":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:43106:3436":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:22415:22368":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:5381:9242":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:22597:21648":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:7673:3345":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:43361:21164":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"4:11619:15202":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:10430:9249":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:11800:16524":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:4417:15772":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:42622:3418":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:2810:250":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:11604:16492":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:15212:20582":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:5104:13326":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:673:2932":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15192:20580":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:8181:16269":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:2472:15251":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:9943:16332":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:7429:3329":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:15980:20769":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:1507:10638":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4584:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:5446:111":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:4386:2104":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:7054:31729":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:8796:9249":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:40713:3369":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6696:15188":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:1481:8989":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13648:19791":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:46942:8648":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:15961:19285":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"4:8232:9131":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4878:13302":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:836:2932":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:7136:25261":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:21813:21330":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13436:19302":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"11:742:8992":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:7259:3326":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:46382:8659":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:8215:25054":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:4549:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:8168:3254":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:16180:19294":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:30577:21698":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:3443:2943":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:4087:3256":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:15279:20588":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"11:1582:2924":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4364:13250":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13684:16550":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:4663:3266":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:48:1925":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"9:426:15041":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:7736:16255":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:14904:20548":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6017:16190":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:5825:2140":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:2907:15269":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"4:8226:9132":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:867:8988":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:6543:2138":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4710:13284":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:3099:2173":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"15:327:15198":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:11197:9081":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12510:16611":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:4902:13305":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10797:3457":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:12046:793":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:8551:9236":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:2574:15255":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"11:1007:8997":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:44510:3509":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7708:16253":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:4462:15793":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:2927:2161":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:5910:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:8535:9235":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"5:629:28840":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:3239:9120":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:14455:19841":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:10618:32560":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:21771:9077":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:12103:16590":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:3510:9097":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:557:2941":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:43593:3459":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:621:8965":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:8134:16266":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:7489:2094":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:3732:9134":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:10852:16384":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:1555:2722":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"11:2326:2919":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:8958:3511":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:7610:13493":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:5969:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"11:430:31307":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:48024:8701":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4808:13293":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:8984:8949":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:9802:3415":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:44778:3599":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:2350:207":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:7923:9110":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:9770:140":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"4:3278:9116":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:41810:3384":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:16109:20779":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:3310:2113":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:8072:16263":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:8842:9252":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:6944:31696":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:23048:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:11816:2797":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:10667:32569":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:15311:20592":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6913:14431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:7462:16237":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"11:811:2736":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4628:13278":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:22134:8769":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:10802:136":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:1650:10652":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:2810:15265":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11714:16503":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4535:13267":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7884:16261":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:44399:3516":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12387:16601":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:6079:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:7554:16245":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:8814:9250":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"1:42228:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:2197:16433":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:7505:9050":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:9164:25753":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:46206:8687":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:41627:3380":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:6691:14420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:1903:9000":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12953:16331":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13334:19295":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"4:2380:9066":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:40431:3294":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6682:9624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:10520:32557":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2558:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:44219:3554":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:42851:3209":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:13204:148":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:41852:3386":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:7380:25482":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:1072:8999":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:15294:20590":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:14170:19821":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12828:16375":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9759:16349":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:574:9753":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:15003:20564":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:3066:139":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:3460:16512":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:4928:16618":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:21373:8638":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:2586:2761":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:2187:632":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:1969:203":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13663:19792":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:21139:21322":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:1648:3158":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:6596:2142":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:11307:25475":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:42881:21815":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:10685:3466":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10726:32548":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:3225:28946":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:13869:19802":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"4:7878:136":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"5:276:2088":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:43583:2960":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:43122:3435":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:4773:16612":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"4:939:2915":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:8294:134":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:40599:23974":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:10532:9118":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11459:16487":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:45851:8645":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11449:16486":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:8991:25313":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:2859:3132":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:13365:19297":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:11617:16493":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:3163:25946":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:2903:2160":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:21367:8634":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:5500:9246":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:10035:16168":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4745:13286":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:22119:9077":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"4:9048:25374":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:6100:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:580:9754":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:1514:10639":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:3338:2736":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:44687:225":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10974:16404":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6171:212":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:11382:25275":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:12600:134":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:4015:2716":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:1567:9003":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:7291:2716":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:5760:16181":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:2895:2153":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:928:8994":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:13976:19810":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:14497:19843":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4556:13270":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:7370:2265":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7436:16236":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7582:16247":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11549:16490":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:6804:14424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6781:10764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:46706:8682":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:22663:3023":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:511:16345":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10950:16414":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:5023:13319":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:2864:3208":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:7677:216":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:6008:2938":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:15519:20605":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:909:8990":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3095:2172":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:563:9751":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:12032:448":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:11321:16364":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:14001:19812":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:5568:9247":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:23710:242":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:8403:9231":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"17:15747:20622":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"4:12057:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:4042:9146":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:8847:2243":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:536:31638":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:12614:16369":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7694:16252":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:9014:25744":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:6742:15187":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:9196:25984":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:11901:3446":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5004:13316":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"4:4915:9204":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13724:19794":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:0:475":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:2868:2150":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:16004:20771":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"11:102:31298":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:40417:3319":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:9454:25090":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:8872:9261":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13633:19790":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:46306:8647":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"16:7360:31797":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:2200:135":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"17:11958:16509":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:2443:2716":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:12380:16600":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:13218:19287":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:1966:204":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:7657:13500":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:15108:20573":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:14921:20561":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:7768:16256":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:40494:3323":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:13038:3591":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:21158:21329":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:40464:2801":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"4:8978:113":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:3166:25945":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:48184:8627":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:7598:13491":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:9479:2784":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:1472:8988":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6128:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:12360:3497":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:44188:3552":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"10:0:2015":{"crate_id":10,"path":["adler"],"kind":"module"},"4:3482:3285":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"5:7554:9312":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:5661:16175":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"9:450:15039":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12784:16373":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4351:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:6409:3351":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:13285:19291":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:1728:152":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:2251:28913":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:14373:19835":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:2962:2169":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:15546:20608":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:1758:9017":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:11576:16491":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:43143:9232":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"11:1107:2921":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:1902:9047":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:11536:16460":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:6346:9268":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:15013:20565":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:5049:15948":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:8904:9262":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:43921:3533":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:8330:9208":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:46160:8633":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:10016:16319":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:533:2756":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:2228:16458":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:5982:16188":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6798:14423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:44202:3553":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13322:19294":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:41101:2808":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:13407:19300":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:12102:3542":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:5859:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4977:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4529:13266":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4610:13276":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13809:19799":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:6112:2722":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:23172:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:44063:3535":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11399:16432":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12077:16577":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12746:16371":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:14413:19838":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:12972:16330":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:7901:8987":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:4908:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11817:16549":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:1676:2688":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:299:2912":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14778:20554":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4460:2107":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:39510:218":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:48109:8622":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:7580:2780":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:14057:19815":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:14485:16334":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:10835:3458":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:14021:19813":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:15224:20583":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:48100:8621":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:14470:19842":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:918:8992":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:32342:22316":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:21923:9077":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:5121:15972":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10422:16360":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11485:16459":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:7090:31715":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"4:8281:9175":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:7037:2273":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:645:8969":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:7692:14993":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:44035:3528":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:15842:19281":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:5082:25712":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:21365:9077":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:14251:19827":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:531:20822":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:256:32554":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:14041:19814":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:5816:31603":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:22362:22371":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:2873:2155":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:10242:16358":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11294:16435":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:45975:8698":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:6525:2694":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:6811:9267":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:7301:2706":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4543:13268":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"4:12056:1241":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:5625:226":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2911:2157":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12445:16607":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:5798:16182":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:1521:10640":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5435:31735":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:5712:16178":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:4774:15889":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:2853:3236":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"14:40:19283":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"4:5415:9244":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4440:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"11:1923:9003":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:6513:16212":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12255:16594":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:2321:15244":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6927:14432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:3797:15296":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:9891:16325":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"4:1534:2932":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:10293:3523":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:13856:19801":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:9099:240":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:12038:1531":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:11779:16504":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:7915:25725":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:6934:14433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13922:19806":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:3276:2178":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:521:20818":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:491:32574":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:41077:1930":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:31139:3219":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"13:0:2012":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:0:530":{"crate_id":1,"path":["core"],"kind":"module"},"4:8286:9176":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:46860:8700":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:6968:16229":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"4:3994:9143":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:4469:9178":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:41941:2933":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:40674:3366":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:4744:9158":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"4:880:8989":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:40699:3368":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:12176:3466":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:14426:19839":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:44486:3502":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"6:7639:13497":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:10757:25139":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:7262:9005":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:41933:2932":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:21484:9077":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:2911:2764":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4893:13304":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5075:13324":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:11215:25199":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:26112:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:883:8996":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4783:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:6120:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:10785:32556":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:7723:2087":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:3160:28743":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"11:2542:24724":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:22233:9077":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:4698:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13097:19281":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"11:2352:8998":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:4814:13294":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13121:19282":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:44506:3508":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:5872:2716":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:9804:3416":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:7862:16260":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:3655:15279":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6545:16214":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:700:2265":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:9752:3285":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:3265:260":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:13516:19308":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"4:10780:25180":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:30543:3183":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:2970:28951":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:6425:16207":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15612:20612":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:23265:3024":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:14765:20553":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:43161:22080":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:261:2694":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:14633:20549":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:5431:9245":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"4:8146:9123":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:11313:9255":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:3813:2736":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:1570:10645":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"5:5645:2734":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:22011:8766":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:13182:19285":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13742:19795":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:5802:3349":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:39470:219":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:15868:20767":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:3212:9002":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"4:3323:9106":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:10095:2947":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:43574:3449":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:32349:2104":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:4860:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:4496:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:47096:8666":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"4:11453:2793":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:1734:10660":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13448:19303":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:3425:9074":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"16:4745:15884":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:41833:3385":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:8239:16272":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"4:10822:2944":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"4:5639:9256":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:40683:3367":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:8220:3526":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"16:6600:16217":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6485:16210":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:0:2016":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:40543:2950":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:39530:221":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4922:13308":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:7717:8972":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:12220:16376":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:6083:15215":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12180:16592":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:9678:16333":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:22:728":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:4:1108":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:415:181":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:11051:2790":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:11041:16364":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:15855:19282":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"4:4050:9148":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7613:16248":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:10137:16355":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:15079:20570":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:1051:8998":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:7365:14804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"5:2974:28952":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:11052:16365":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"4:12044:795":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"2:234:232":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:42018:232":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:7861:175":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11141:16422":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:396:2686":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:1531:9007":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11436:3465":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11945:16508":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:12051:1634":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:5971:2773":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:41119:3339":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:21495:8635":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:10054:3433":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3045:2114":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:45761:8679":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"4:4311:9174":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:47878:8695":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11014:16397":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:2662:9111":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:4906:9203":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:44502:3510":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:30282:2983":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:14662:20550":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:44498:3506":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:7143:3355":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:21314:8639":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:40384:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:3500:9075":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"16:6569:16215":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2303:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:11915:3517":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:6415:24159":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:898:2932":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:5955:13954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:489:9742":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9559:16321":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:8213:3453":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:6071:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:15184:20579":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:4613:15824":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:4889:15908":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"4:7689:2786":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:2352:3186":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:46830:8694":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:4406:2722":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:507:32571":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:6479:2716":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:2958:2168":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7513:16241":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:11388:25273":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:10767:9069":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:3032:15272":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"4:4159:9170":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:6837:2734":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:6466:2141":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"13:110:31357":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:13297:19292":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:45935:8686":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:44070:3274":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:6718:9208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:45905:8681":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:4595:13274":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5052:13322":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:435:15218":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:2428:15249":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:16123:20780":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:43114:22074":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:9474:9072":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:46572:21681":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:482:2755":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:3915:15342":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5921:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:4376:2725":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7792:16258":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:922:8993":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:8237:9129":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:48080:8619":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12930:16378":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11657:16496":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5905:16185":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:44705:213":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6813:14425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7668:13501":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:7865:9070":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:41092:3334":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:7492:9049":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14896:20560":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:7644:8963":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:0:2021":{"crate_id":17,"path":["object"],"kind":"module"},"16:6346:16200":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:40351:3278":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:671:20812":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4862:15905":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:2149:28929":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:40229:3257":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:4028:9144":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:11226:16451":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:40723:3353":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:23234:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:13166:2769":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9795:117":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"18:80:20795":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2806:2083":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:42069:2933":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:13259:3596":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:2832:15266":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:15049:20568":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:2231:30426":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:6194:25473":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:3282:2180":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:4151:9169":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13695:16551":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4932:13309":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"4:2600:2759":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:8562:9237":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:1674:10654":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"4:3201:9119":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5939:16186":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"14:165:15170":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:48199:8628":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:4921:15916":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:15943:19284":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6268:31800":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5588:16171":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:7895:125":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2693:3229":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"16:2864:15267":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:3968:2722":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:903:2736":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:2392:208":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:42150:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:44054:3536":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10716:16365":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11215:16426":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:1697:10657":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9918:16353":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:6954:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14087:19816":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:10918:3452":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11426:16485":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:13083:16649":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:588:8964":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:7754:9036":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:15671:20616":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:2670:15259":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"4:1538:2265":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:46404:8665":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:7284:2241":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:5987:2129":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:538:20823":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:8195:16270":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"4:8300:9132":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6243:16195":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:14312:19831":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:44294:3556":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12345:16588":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:4383:9168":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:46058:8658":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"11:328:31292":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:4557:15816":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10775:16366":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:15037:20567":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10724:3454":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:43675:2963":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:8308:9177":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13948:19808":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:1550:9000":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:2567:141":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:13013:211":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12872:16322":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:40853:3370":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:3830:15305":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:45827:8685":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10881:16385":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:15200:20581":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:6599:2265":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:22649:3025":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:10439:9077":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"11:837:8993":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:5974:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10896:16386":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6844:16223":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:4569:9196":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:8973:25490":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:42267:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:11001:16398":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:2305:15243":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:7544:16244":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:9109:158":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"16:7015:16231":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14969:20547":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:39635:3234":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:12921:16334":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:21156:21324":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4449:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6666:10596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:9069:25190":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:8205:16271":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13832:19800":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11395:16445":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:3232:15275":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"9:330:15095":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:21102:3219":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:10019:153":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:13145:19283":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:9104:241":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:11743:16546":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:2380:15247":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13491:19306":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:8936:9263":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:15087:20571":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:23141:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6156:16192":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:14194:19823":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:47020:8654":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:7732:8973":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12999:16646":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:14385:19836":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}