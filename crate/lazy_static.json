{"root":"0:0","crate_version":"1.4.0","includes_private":false,"index":{"5:5414":{"id":"5:5414","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5234","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[lang = \"str_alloc\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5415","5:5416","5:5419","5:5422","5:5434","5:5435","5:5436","5:5437","5:5438"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10243":{"id":"1:10243","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:10245","1:10246","1:10247","1:10248","1:10249","1:10250","1:10251"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10234","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9865":{"id":"1:9865","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9866","1:9867","1:9868","1:9869","1:9870","1:9871","1:9872","1:9873","1:9874","1:9875","1:9876","1:9877","1:9878","1:9879"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12697":{"id":"1:12697","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5940":{"id":"4:5940","crate_id":4,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5941"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12764":{"id":"1:12764","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:46200","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5415":{"id":"5:5415","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:321","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7403","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:321","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7403","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3526":{"id":"1:3526","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"5:5435":{"id":"5:5435","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:7620","`Box<str>`":"5:321"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:321","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7403","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12773":{"id":"1:12773","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"1:7797","prim@char":"4:15973","self::pattern":"1:12330","str::matches":"4:15978"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:48351","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:7005":{"id":"4:7005","crate_id":4,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7006"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12814":{"id":"1:12814","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9648":{"id":"1:9648","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9649"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13442":{"id":"1:13442","crate_id":1,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13443","1:13444","1:13445","1:13446"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5131":{"id":"4:5131","crate_id":4,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5132","4:5133"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13058":{"id":"1:13058","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13059","1:13060","1:13061"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7753":{"id":"1:7753","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7754","1:7755","1:7756"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3198":{"id":"1:3198","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3200"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2933":{"id":"1:2933","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2935"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9655":{"id":"1:9655","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9656"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:39":{"id":"0:39","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2684":{"id":"1:2684","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2679","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3563":{"id":"1:3563","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12269":{"id":"1:12269","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12270","1:12271"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5932":{"id":"4:5932","crate_id":4,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5933"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9896":{"id":"1:9896","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9897","1:9898","1:9899"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12749":{"id":"1:12749","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12330","`DoubleEndedIterator`":"1:7797","str::split":"4:15978","prim@char":"4:15973"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:48147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12712":{"id":"1:12712","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10243","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10243","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3032":{"id":"1:3032","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3147":{"id":"1:3147","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3148","1:3149"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2927":{"id":"1:2927","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2929"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"1:12349":{"id":"1:12349","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12351","1:12352","1:12353","1:12354"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3483":{"id":"1:3483","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3484","1:3485","1:3486","1:3487"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"1:3488","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3483","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:38":{"id":"0:38","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:9663":{"id":"1:9663","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5438":{"id":"5:5438","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"4:15978"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5437":{"id":"5:5437","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"4:15978"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12715":{"id":"1:12715","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:15978","str::slice_unchecked":"4:15978","crate::ops::IndexMut":"1:3335"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n\"use `get_unchecked_mut(begin..end)` instead\")]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3175":{"id":"1:3175","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3177","1:3178"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3134":{"id":"1:3134","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3136"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2725":{"id":"1:2725","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2727","1:2728","1:2729","1:2730","1:2731"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"1:2679","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3154":{"id":"1:3154","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3156","1:3157"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12702":{"id":"1:12702","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11801"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[inline(always)]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6931":{"id":"4:6931","crate_id":4,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6932","4:6933"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3471":{"id":"1:3471","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"1:3402","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3259":{"id":"1:3259","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3260"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"1:3246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12718":{"id":"1:12718","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:15973"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:48099","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12729":{"id":"1:12729","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:12330","prim@char":"4:15973"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12743":{"id":"1:12743","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12330","str::split_whitespace":"4:15978","`DoubleEndedIterator`":"1:7797","str::rsplit":"4:15978","prim@char":"4:15973"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:48129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3110":{"id":"1:3110","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3112","1:3113"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:2546":{"id":"4:2546","crate_id":4,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:2547","4:2549","4:2550","4:2551"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"1:9648","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"1:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12723":{"id":"1:12723","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:48383","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:669":{"id":"5:669","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:670","5:671","5:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12724":{"id":"1:12724","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]","#[inline]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:48393","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12790":{"id":"1:12790","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:15973","self::pattern":"1:12330"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"1:12360","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12732":{"id":"1:12732","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:12330","prim@char":"4:15973"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12696":{"id":"1:12696","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9855":{"id":"1:9855","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9856","1:9858"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12779":{"id":"1:12779","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12330","prim@char":"4:15973","`DoubleEndedIterator`":"1:7797","str::match_indices":"4:15978"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:48297","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12776":{"id":"1:12776","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12330","`DoubleEndedIterator`":"1:7797","str::rmatch_indices":"4:15978","prim@char":"4:15973"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:48279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5436":{"id":"5:5436","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7620"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5870":{"id":"4:5870","crate_id":4,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5871","4:5872","4:5873"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6701":{"id":"4:6701","crate_id":4,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6702","4:6703"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12789":{"id":"1:12789","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_end`\",\nsuggestion = \"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9659":{"id":"1:9659","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3036":{"id":"1:3036","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3491":{"id":"1:3491","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3493"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2715":{"id":"1:2715","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2716","1:2717","1:2718","1:2719"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"1:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2725","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3068":{"id":"1:3068","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6603":{"id":"4:6603","crate_id":4,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6604","4:6605","4:6606","4:6607","4:6608","4:6609"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12752":{"id":"1:12752","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"4:15978","`DoubleEndedIterator`":"1:7797","self::pattern":"1:12330","prim@char":"4:15973","str::rsplit_terminator":"4:15978"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:48179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12726":{"id":"1:12726","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:15973","self::pattern":"1:12330"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12735":{"id":"1:12735","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:46200","self::pattern":"1:12330","prim@char":"4:15973"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:46200","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12725":{"id":"1:12725","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:48421","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3005":{"id":"1:3005","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3006"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12720":{"id":"1:12720","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:48115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3100":{"id":"1:3100","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3102","1:3103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12717":{"id":"1:12717","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"4:15978"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9598":{"id":"1:9598","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9599","1:9600","1:9602"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22332":{"id":"1:22332","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"1:22981","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22323","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9665":{"id":"1:9665","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9666"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12808":{"id":"1:12808","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12330","prim@char":"4:15973"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n\"superseded by `trim_end_matches`\", suggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12722":{"id":"1:12722","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"4:15978"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:48412","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3748":{"id":"1:3748","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3749"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"4:7095":{"id":"4:7095","crate_id":4,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7096"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5416":{"id":"5:5416","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7620"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2924":{"id":"1:2924","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2926"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"1:3246":{"id":"1:3246","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3247","1:3248"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12703":{"id":"1:12703","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:12755":{"id":"1:12755","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"4:15973","str::split":"4:15978","str::split_terminator":"4:15978","self::pattern":"1:12330"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:48197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12695":{"id":"1:12695","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9657":{"id":"1:9657","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9658"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8226":{"id":"1:8226","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:7948","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7822":{"id":"1:7822","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7823","1:7824"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:7948","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:6581":{"id":"4:6581","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6582","4:6583","4:6584","4:6585","4:6587","4:6589","4:6590","4:6592"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0":{"id":"0:0","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:39","0:41","0:38"]}},"4:5884":{"id":"4:5884","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5885","4:5886","4:5887","4:5888","4:5889","4:5890","4:5891","4:5892","4:5893","4:5894","4:5895","4:5896","4:5897","4:5898","4:5899","4:5900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6934":{"id":"4:6934","crate_id":4,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6935"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12816":{"id":"1:12816","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3193":{"id":"1:3193","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3195"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12694":{"id":"1:12694","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:15973"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3122":{"id":"1:3122","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3123","1:3124"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3126":{"id":"1:3126","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3128"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12784":{"id":"1:12784","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3181":{"id":"1:3181","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3183"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:6829":{"id":"4:6829","crate_id":4,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6830","4:6831","4:6832","4:6833","4:6834","4:6835","4:6836","4:6837","4:6838","4:6839","4:6840","4:6841","4:6842","4:6843","4:6844","4:6845","4:6846"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4825":{"id":"4:4825","crate_id":4,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4826","4:4827","4:4829","4:4830","4:4831","4:4832","4:4833","4:4842"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5419":{"id":"5:5419","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7620"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12708":{"id":"1:12708","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:46200"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:46200","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10243","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10243","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12746":{"id":"1:12746","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:15973","self::pattern":"1:12330"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:12122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5918":{"id":"4:5918","crate_id":4,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5919","4:5920","4:5921","4:5922"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7948":{"id":"1:7948","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7949","1:7950","1:7951","1:7952","1:7954","1:7957","1:7958","1:7959","1:7960","1:7962","1:7964","1:7965","1:7967","1:7970","1:7977","1:7979","1:7982","1:7983","1:7984","1:7986","1:7988","1:7991","1:7992","1:7993","1:7997","1:8000","1:8001","1:8002","1:8004","1:8005","1:8007","1:8010","1:8012","1:8022","1:8037","1:8039","1:8043","1:8052","1:8055","1:8057","1:8060","1:8067","1:8074","1:8081","1:8090","1:8100","1:8107","1:8114","1:8115","1:8116","1:8128","1:8135","1:8147","1:8154","1:8155","1:8160","1:8163","1:8166","1:8167","1:8169","1:8171","1:8174","1:8177","1:8180","1:8183","1:8186","1:8189","1:8191","1:8193","1:8195","1:8197","1:8199","1:8200","1:8208"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12705":{"id":"1:12705","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:15987"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12767":{"id":"1:12767","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:46200","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12788":{"id":"1:12788","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_start`\",\nsuggestion = \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12719":{"id":"1:12719","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:15973"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:48105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9661":{"id":"1:9661","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9662"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3335":{"id":"1:3335","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3337"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"1:3331","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12817":{"id":"1:12817","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"4:15973"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:48428","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2679":{"id":"1:2679","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2681","1:2682"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"1:7716":{"id":"1:7716","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7718"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5736":{"id":"5:5736","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5737"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8679":{"id":"1:8679","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12739":{"id":"1:12739","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the rightmost match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"4:15973","`None`":"1:46200","self::pattern":"1:12330"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:46200","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12813":{"id":"1:12813","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2936":{"id":"1:2936","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2938","1:2939"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3270":{"id":"1:3270","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3271"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3402":{"id":"1:3402","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3404","1:3405","1:3406"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"1:12793":{"id":"1:12793","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:12330","prim@char":"4:15973"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12811":{"id":"1:12811","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:12269","FromStr::Err":"1:12270"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:46327","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12269","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"1:12269","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5796":{"id":"4:5796","crate_id":4,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5797","4:5798"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3130":{"id":"1:3130","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3132"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7302":{"id":"1:7302","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7303","1:7304","1:7305","1:7306","1:7307","1:7308","1:7309"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"1:2725","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:22981":{"id":"1:22981","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22982"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22977","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"1:3037","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2627":{"id":"1:2627","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2629"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"1:2624","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:4768":{"id":"4:4768","crate_id":4,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4769","4:4770","4:4772","4:4773","4:4774","4:4775","4:4776","4:4778","4:4779","4:4780","4:4781","4:4783"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3185":{"id":"1:3185","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3187"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12819":{"id":"1:12819","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"4:15973"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:48437","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13513":{"id":"1:13513","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13514","1:13515","1:13516","1:13517","1:13518","1:13519","1:13520"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7712":{"id":"1:7712","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7714"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3273":{"id":"1:3273","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3275"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"1:3276","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2649":{"id":"1:2649","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2650","1:2651"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3138":{"id":"1:3138","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3140"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3142":{"id":"1:3142","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3144"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12782":{"id":"1:12782","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[inline]","#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12714":{"id":"1:12714","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"4:15978","`str`":"4:15978","crate::ops::Index":"1:3331"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.29.0\", reason =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]","#[inline]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:7762":{"id":"1:7762","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7764","1:7766","1:7767"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12340":{"id":"1:12340","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12342","1:12343","1:12344","1:12345","1:12346","1:12347","1:12348"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12796":{"id":"1:12796","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:15973","self::pattern":"1:12330"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:46200","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3488":{"id":"1:3488","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3490"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"1:3483","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8223":{"id":"1:8223","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:7948","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4388":{"id":"1:4388","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4389","1:4390","1:4391"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12355":{"id":"1:12355","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:12357","1:12358","1:12359"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"1:12349","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12758":{"id":"1:12758","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:12330","prim@char":"4:15973","str::rsplitn":"4:15978"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:48233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5422":{"id":"5:5422","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7620"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5878":{"id":"4:5878","crate_id":4,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5879","4:5880"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12710":{"id":"1:12710","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10243","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10243","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:9667":{"id":"1:9667","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9668"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3116":{"id":"1:3116","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3118","1:3119"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13043":{"id":"1:13043","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13044","1:13045"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3105":{"id":"1:3105","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3107","1:3108"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:7919":{"id":"4:7919","crate_id":4,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7920"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3037":{"id":"1:3037","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"1:2649","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3095":{"id":"1:3095","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3097","1:3098"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12805":{"id":"1:12805","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:15973","self::pattern":"1:12330"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_deprecated(since = \"1.33.0\", reason =\n\"superseded by `trim_start_matches`\", suggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3276":{"id":"1:3276","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3278"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"1:3279","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12799":{"id":"1:12799","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:12330","prim@char":"4:15973"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:46200","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12693":{"id":"1:12693","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:11790","path":"::str"}},"docs":null,"links":{},"attrs":["#[lang = \"str\"]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:12694","1:12695","1:12696","1:12697","1:12699","1:12702","1:12703","1:12704","1:12705","1:12706","1:12708","1:12710","1:12712","1:12714","1:12715","1:12716","1:12717","1:12718","1:12719","1:12720","1:12721","1:12722","1:12723","1:12724","1:12725","1:12726","1:12729","1:12732","1:12735","1:12739","1:12743","1:12746","1:12749","1:12752","1:12755","1:12758","1:12761","1:12764","1:12767","1:12770","1:12773","1:12776","1:12779","1:12782","1:12784","1:12786","1:12788","1:12789","1:12790","1:12793","1:12796","1:12799","1:12802","1:12805","1:12808","1:12811","1:12813","1:12814","1:12815","1:12816","1:12817","1:12819","1:12820"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2940":{"id":"1:2940","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2942","1:2943"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7749":{"id":"1:7749","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7751"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11777":{"id":"1:11777","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:11778","1:11779"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3313":{"id":"1:3313","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3315","1:3316","1:3317"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12360":{"id":"1:12360","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5928":{"id":"4:5928","crate_id":4,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5929"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8230":{"id":"1:8230","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"1:7302","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:5862":{"id":"4:5862","crate_id":4,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5863","4:5864","4:5865","4:5866"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3039":{"id":"1:3039","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12802":{"id":"1:12802","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:12330","prim@char":"4:15973"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:22138":{"id":"1:22138","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22128","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9669":{"id":"1:9669","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9670"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3279":{"id":"1:3279","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3281","1:3282"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5790":{"id":"4:5790","crate_id":4,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5791","4:5792"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"4:9448":{"id":"4:9448","crate_id":4,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:9449","4:9450","4:9451","4:9452","4:9453","4:9454","4:9455"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"4:10604","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12815":{"id":"1:12815","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3027":{"id":"1:3027","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:4843":{"id":"4:4843","crate_id":4,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4844","4:4845","4:4846","4:4847"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5170":{"id":"5:5170","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5172","5:5173"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12721":{"id":"1:12721","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"4:15978"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:48403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3159":{"id":"1:3159","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3161","1:3162"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:22287":{"id":"1:22287","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:22288","1:22289","1:22290"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:22280","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12699":{"id":"1:12699","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"4:15978"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:1063":{"id":"4:1063","crate_id":4,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:1064","4:1065","4:1066","4:1067","4:1068","4:1069","4:1070"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8680":{"id":"1:8680","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:7007":{"id":"4:7007","crate_id":4,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7008"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:7003":{"id":"4:7003","crate_id":4,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:7004"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12706":{"id":"1:12706","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:46200"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:46200","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10243","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"1:10243","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3169":{"id":"1:3169","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3171","1:3172"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5166":{"id":"5:5166","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5168","5:5169"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"5:5434":{"id":"5:5434","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7620"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:4850":{"id":"4:4850","crate_id":4,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:4851","4:4852","4:4853","4:4855","4:4856","4:4858","4:4859"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"4:4768","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12704":{"id":"1:12704","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"4:15987","str::as_mut_ptr":"4:15978"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3189":{"id":"1:3189","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3191"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12761":{"id":"1:12761","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"1:12330","prim@char":"4:15973","str::splitn":"4:15978"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:48251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"1:12355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3035":{"id":"1:3035","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2862":{"id":"1:2862","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:2861","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3331":{"id":"1:3331","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3333","1:3334"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"1:3164":{"id":"1:3164","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3166","1:3167"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41":{"id":"0:41","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"LazyStatic","id":"0:39","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:2624":{"id":"1:2624","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2626"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"1:3032","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"1:12716":{"id":"1:12716","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"4:15978"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7797":{"id":"1:7797","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7798","1:7799","1:7800","1:7801","1:7805","1:7808"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"1:7948","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:12820":{"id":"1:12820","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"4:15973"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:48446","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2930":{"id":"1:2930","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2932"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12770":{"id":"1:12770","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"1:7797","self::pattern":"1:12330","prim@char":"4:15973","str::matches":"4:15978"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]","#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:48333","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"1:12340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12786":{"id":"1:12786","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\" Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[inline]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"8:0":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:54848":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7970":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","for_each"],"kind":"foreign_type"},"6:1579":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13620":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:1633":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5929":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:6569":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:13963":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9729":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:46463":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:15029":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:8405":{"crate_id":4,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:22334":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"14:47":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12610":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10599":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:23217":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:52220":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1617":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:8849":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:8873":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:10234":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:3844":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:5996":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:49088":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:10945":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"18:811":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:806":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:12323":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"4:14110":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13532":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6964":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:10971":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:2932":{"crate_id":1,"path":["core","convert","Into","into"],"kind":"foreign_type"},"1:10704":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10827":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:1558":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:2099":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:3110":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13810":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:8249":{"crate_id":4,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"4:14769":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:5505":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4256":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13062":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:6110":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:3772":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"4:3809":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:2546":{"crate_id":4,"path":["std","error","Error"],"kind":"trait"},"16:7928":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13497":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:3831":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"12:968":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:7302":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:50910":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3402":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:15990":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:46319":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:7948":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4232":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:45184":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:0":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:50827":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:10912":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13582":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:535":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10814":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:47510":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:3042":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11254":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:23454":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11328":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9296":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:9856":{"crate_id":1,"path":["core","hash","Hash","hash"],"kind":"foreign_type"},"17:11932":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:2650":{"crate_id":1,"path":["core","clone","Clone","clone"],"kind":"foreign_type"},"17:13098":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:3241":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:9758":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"5:3354":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:6945":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"12:930":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:5815":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"4:15099":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:45378":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:5898":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8000":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","flatten"],"kind":"foreign_type"},"4:6076":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:6536":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:48861":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:48704":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"4:11013":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:2161":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:48857":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:6002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:6267":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13172":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:3145":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:36426":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8326":{"crate_id":1,"path":["core","lazy","Lazy"],"kind":"struct"},"4:11741":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"9:809":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:48437":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9600":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:52167":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:48849":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:3276":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:7712":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"12:2009":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:12560":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:11801":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:10412":{"crate_id":1,"path":["lazy_static","Item"],"kind":"typedef"},"16:6718":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:3041":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2754":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:10616":{"crate_id":4,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:22138":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:2785":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:4117":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:7761":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:7822":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:3604":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6807":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"14:11":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:5165":{"crate_id":4,"path":["lazy_static","Iter"],"kind":"typedef"},"16:4506":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:52005":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:9799":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:45114":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"9:1020":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:11274":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:11519":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:7967":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","map"],"kind":"foreign_type"},"6:1612":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13258":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:6127":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:7843":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:10845":{"crate_id":4,"path":["std","ffi","c_str","IntoStringError"],"kind":"struct"},"4:6935":{"crate_id":4,"path":["std","os","linux","process","CommandExt","create_pidfd"],"kind":"foreign_type"},"5:1397":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10200":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"12:1159":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:7295":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:1512":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:51793":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12040":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:10814":{"crate_id":4,"path":["std","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:13119":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:46250":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:12195":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:48279":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:0":{"crate_id":4,"path":["std"],"kind":"module"},"5:3912":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"9:1056":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"4:4499":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:21913":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:13986":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:11147":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:37670":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:45476":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:11714":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13240":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:11490":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:774":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:5825":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:44767":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:5003":{"crate_id":1,"path":["lazy_static","Target"],"kind":"typedef"},"17:9896":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12741":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:12259":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:8504":{"crate_id":4,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"4:10831":{"crate_id":4,"path":["std","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:15972":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"1:23735":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:5862":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:15467":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:11671":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"4:14267":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:837":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:10513":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:9769":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11665":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:51714":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:396":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"9:686":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:8912":{"crate_id":1,"path":["lazy_static","Target"],"kind":"typedef"},"4:5131":{"crate_id":4,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:52144":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:897":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:23703":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:2933":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:48351":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:69":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8055":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","reduce"],"kind":"foreign_type"},"17:10128":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7957":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","advance_by"],"kind":"foreign_type"},"16:6087":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:4709":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:6228":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:7247":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:48653":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:15979":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"6:4303":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:48072":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:2793":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:6691":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:7593":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:7075":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3027":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"4:15988":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"6:4430":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:5753":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11794":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:5580":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:5488":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"9:996":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:49875":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:48626":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:11580":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:7919":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"18:849":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:23863":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"4:9809":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRWLockWriteGuard"],"kind":"struct"},"6:163":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:667":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:15184":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13912":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:45224":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:11513":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:4659":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12343":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"4:10715":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"6:3962":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"4:7463":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:13400":{"crate_id":4,"path":["std","sys","unix","locks","pthread_mutex","PthreadMutexAttr"],"kind":"struct"},"5:5200":{"crate_id":5,"path":["lazy_static","Owned"],"kind":"typedef"},"1:48669":{"crate_id":1,"path":["lazy_static","Searcher"],"kind":"typedef"},"17:11186":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11100":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:23351":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:21866":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:0":{"crate_id":11,"path":["adler"],"kind":"module"},"4:13830":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"4:15980":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:3095":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9961":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1535":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"4:1069":{"crate_id":4,"path":["std","ascii","AsciiExt","make_ascii_uppercase"],"kind":"foreign_type"},"6:608":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:15984":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:50385":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:14411":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:11005":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"4:12214":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:10718":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:160":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13733":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:49898":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:3800":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:5468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"4:10736":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"6:1549":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:13377":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4280":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10081":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:739":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:7977":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","filter"],"kind":"foreign_type"},"5:6581":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2927":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:13419":{"crate_id":4,"path":["std","sys","unix","locks","pthread_remutex","ReentrantMutex"],"kind":"struct"},"17:12671":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:12355":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:48147":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"13:120":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:47980":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9657":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:22128":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2725":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:3130":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"4:11347":{"crate_id":4,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"6:541":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:50109":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:46715":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:9901":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:5316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11118":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:2105":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4180":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:50306":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:7643":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:4734":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"4:1137":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12699":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:49103":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:1330":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10571":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10041":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:1311":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:1695":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7406":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:51067":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:45387":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:3392":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:46757":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4270":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12431":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:1625":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:5717":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:11082":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10420":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13942":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:6166":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"4:12243":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:2031":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:12066":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:12467":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:4614":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4059":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9759":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"4:15042":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13163":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4446":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:46379":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:699":{"crate_id":5,"path":["lazy_static","Target"],"kind":"typedef"},"17:9933":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:6413":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:3335":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:4324":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:6051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:10975":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:3488":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:4826":{"crate_id":4,"path":["std","io","Write","write"],"kind":"foreign_type"},"1:13064":{"crate_id":1,"path":["lazy_static","Output"],"kind":"typedef"},"17:11277":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9245":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"18:754":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:11476":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:3027":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:1483":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:9162":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10502":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:1718":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:2143":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:7698":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:7511":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:4757":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:10418":{"crate_id":1,"path":["lazy_static","Item"],"kind":"typedef"},"5:4182":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11822":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:6932":{"crate_id":4,"path":["std","os","linux","process","ChildExt","pidfd"],"kind":"foreign_type"},"1:45061":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:159":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:3896":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:9598":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:10489":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"4:6585":{"crate_id":4,"path":["std","os","unix","process","CommandExt","pre_exec"],"kind":"foreign_type"},"17:11640":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:49011":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"18:801":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:48099":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:7073":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:48845":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9592":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:52129":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:47212":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:4304":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:9661":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:15989":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"4:2442":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:48865":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10317":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:8230":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:3944":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"12:976":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:45137":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:14752":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"4:11509":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:3686":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:2325":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:2773":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13884":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:5421":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"4:5161":{"crate_id":4,"path":["lazy_static","Iter"],"kind":"typedef"},"4:7760":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:2172":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"9:41":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:44611":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:23959":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"4:1066":{"crate_id":4,"path":["std","ascii","AsciiExt","to_ascii_uppercase"],"kind":"foreign_type"},"1:52103":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:829":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:2968":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:3522":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:977":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:23991":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:5522":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:4843":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"6:3991":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"4:15331":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:10413":{"crate_id":1,"path":["lazy_static","IntoIter"],"kind":"typedef"},"6:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:4762":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:4575":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:2543":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:12360":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:14701":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:51460":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:1397":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:9187":{"crate_id":4,"path":["lazy_static","Target"],"kind":"typedef"},"17:13799":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:5595":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:3365":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:46631":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:2816":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:23333":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11767":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:44675":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:607":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"4:14094":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:6603":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:4922":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12010":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:744":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:50485":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11001":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13520":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:10590":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1731":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:3142":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:10052":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:9682":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:7950":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","next"],"kind":"foreign_type"},"6:561":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"12:784":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"14:216":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:3018":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:45191":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:51036":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12208":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:9669":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:44583":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:12182":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:1236":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:6000":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:70":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"1:8226":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:4786":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:50210":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:48197":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:3055":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:14132":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:45317":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"13:232":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:50749":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:45712":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:1591":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:45364":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:54861":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2679":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:1972":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:6136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9719":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"0:39":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"5:1116":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:46547":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10179":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:6001":{"crate_id":4,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:9943":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:509":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:7453":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:3807":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:7965":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","intersperse_with"],"kind":"foreign_type"},"12:892":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:47309":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"4:4823":{"crate_id":4,"path":["lazy_static","Target"],"kind":"typedef"},"4:14934":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:5800":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:23389":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7250":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12917":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:1294":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13780":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4264":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:1653":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"4:5932":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:2733":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"19:117":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"4:4852":{"crate_id":4,"path":["std","io","BufRead","consume"],"kind":"foreign_type"},"16:7264":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"12:1651":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:11248":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:4876":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:7746":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"6:5381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"0:41":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"16:6605":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:1755":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:6115":{"crate_id":5,"path":["lazy_static","Target"],"kind":"typedef"},"16:3218":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:15944":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:11344":{"crate_id":4,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"16:7804":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8681":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:46233":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:3478":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:4850":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"17:13041":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6620":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:24423":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9659":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12118":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:7958":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","nth"],"kind":"foreign_type"},"4:687":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"12:2045":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:4407":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"12:1667":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:614":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:3006":{"crate_id":1,"path":["core","default","Default","default"],"kind":"foreign_type"},"5:7418":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:1063":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:10740":{"crate_id":4,"path":["std","error","Chain"],"kind":"struct"},"6:1712":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"4:12283":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:1006":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:4196":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"6:4316":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:44790":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"4:8806":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:22882":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:5384":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:11281":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"5:3576":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7119":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:9886":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"4:1145":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:6190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5736":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:7467":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:45168":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:11947":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10253":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2794":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3483":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5938":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:49715":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12051":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:8053":{"crate_id":4,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"12:2331":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:21894":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:4675":{"crate_id":1,"path":["lazy_static","Target"],"kind":"typedef"},"1:48895":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"5:7152":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:52197":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:3351":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"6:1660":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3509":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:21879":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:5250":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:12180":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:7753":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6208":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:5220":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:13746":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:3863":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4339":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:15453":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"4:12172":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:10649":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"9:603":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"4:15973":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"17:12659":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:37607":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:9608":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:5036":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:10635":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"4:4194":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:3032":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:46310":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9651":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"4:11376":{"crate_id":4,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:23426":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13386":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:48115":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:7527":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:10471":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:4890":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:5796":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:8755":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:13093":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6014":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:603":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:47736":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:9551":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:11993":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:9675":{"crate_id":4,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:2649":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:9005":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13842":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10448":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:13065":{"crate_id":1,"path":["lazy_static","IntoFuture"],"kind":"typedef"},"1:45162":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"4:2381":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:48547":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:3118":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:46589":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:46258":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"5:5728":{"crate_id":5,"path":["lazy_static","Target"],"kind":"typedef"},"4:2011":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:31481":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:5231":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:1428":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:7481":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:10466":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:3068":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:9368":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:46387":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:1615":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:6644":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:9858":{"crate_id":1,"path":["core","hash","Hash","hash_slice"],"kind":"foreign_type"},"17:12552":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:2784":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11539":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:12354":{"crate_id":1,"path":["core","str","pattern","Searcher","next_reject"],"kind":"foreign_type"},"6:4354":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"12:1688":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:4995":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:3126":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:6577":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13590":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:11970":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:12269":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:5893":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt","atime"],"kind":"foreign_type"},"6:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:48509":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6021":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:1067":{"crate_id":4,"path":["std","ascii","AsciiExt","to_ascii_lowercase"],"kind":"foreign_type"},"5:4167":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:3748":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:6165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:46978":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13282":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:13442":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:15992":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"5:7403":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:3848":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"9:1075":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:2930":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:45198":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:5865":{"crate_id":4,"path":["std","os","unix","fs","FileExt","write_at"],"kind":"foreign_type"},"1:12349":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:15169":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:0":{"crate_id":1,"path":["core"],"kind":"module"},"17:10584":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:6106":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"4:4856":{"crate_id":4,"path":["std","io","BufRead","read_line"],"kind":"foreign_type"},"4:6465":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:23799":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:13406":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"6:4084":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7514":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6252":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:4604":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:1120":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:7571":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:665":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:8902":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:12303":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"1:48561":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:15977":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:7676":{"crate_id":4,"path":["lazy_static","Item"],"kind":"typedef"},"1:45124":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:48873":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:1454":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"4:7003":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:3488":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8288":{"crate_id":1,"path":["core","lazy","OnceCell"],"kind":"struct"},"4:9901":{"crate_id":4,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"4:7808":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"17:13865":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:4621":{"crate_id":1,"path":["lazy_static","Target"],"kind":"typedef"},"16:7342":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:52063":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:1893":{"crate_id":1,"path":["lazy_static","Target"],"kind":"typedef"},"17:10864":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"4:9153":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"11:46":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"15:230":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:5897":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt","ctime"],"kind":"foreign_type"},"17:10331":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:3884":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:48715":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"9:234":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:0":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:3801":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12122":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:294":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"4:8310":{"crate_id":4,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"4:3504":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"4:12132":{"crate_id":4,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"6:6828":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:896":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:49074":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:10416":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:790":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10061":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:2146":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"4:12784":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12507":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:11779":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"12:866":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:885":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:10708":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:5304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:45497":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:3159":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:45145":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"4:8986":{"crate_id":4,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:50589":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4332":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"16:4955":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:1178":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:45444":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:11678":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"9:0":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"12:747":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:13506":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12685":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:309":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3037":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"4:5870":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:48179":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"4:9383":{"crate_id":4,"path":["std","lazy","SyncLazy"],"kind":"struct"},"18:866":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:2150":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:12373":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"4:1479":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:2114":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:46371":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:3526":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:6839":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:8969":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"12:1855":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:5166":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:7760":{"crate_id":1,"path":["lazy_static","IntoIter"],"kind":"typedef"},"4:4834":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:3952":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3273":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4297":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:15203":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10625":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:24055":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"4:10604":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"4:9630":{"crate_id":4,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"6:5414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:11562":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:15478":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:7863":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"16:3195":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:7759":{"crate_id":1,"path":["lazy_static","Item"],"kind":"typedef"},"9:722":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"12:2032":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:46301":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:11604":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4360":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:820":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:11093":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11231":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:4040":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:4773":{"crate_id":4,"path":["std","io","Read","read_to_end"],"kind":"foreign_type"},"6:5979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:5736":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:11835":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:3743":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:1671":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:7443":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"10:0":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13054":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:809":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:9186":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10266":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7631":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:3193":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:13058":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:48006":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:4417":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"4:5641":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"4:10692":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13898":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:1420":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:48403":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"12:2013":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:27234":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:4044":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:3064":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:45435":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:3154":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:3049":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:13355":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6032":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:48725":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13924":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"0:0":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"12:556":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13685":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6391":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:766":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"4:8590":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"4:15975":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:47532":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:46396":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:15993":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:7532":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:4804":{"crate_id":4,"path":["lazy_static","Target"],"kind":"typedef"},"6:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:44659":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:15107":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:620":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"4:4612":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:45703":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:10801":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6424":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"9:963":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:3820":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2218":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:1410":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:5790":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:660":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:3035":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:54809":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:853":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:4641":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:13345":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"16:6591":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:11251":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"4:9324":{"crate_id":4,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"5:678":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:13239":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:3039":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:45723":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:48041":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:8864":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:10749":{"crate_id":4,"path":["std","ffi","c_str","CString"],"kind":"struct"},"6:4194":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:3985":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7195":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:21":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:12139":{"crate_id":4,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:11026":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:14798":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:7715":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:7856":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:5672":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:1307":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:6345":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:45425":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:5920":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:7427":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"4:12079":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:15985":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"17:12946":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:10403":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:3821":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:50670":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:5407":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:7530":{"crate_id":4,"path":["lazy_static","Target"],"kind":"typedef"},"16:3549":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:3033":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:23256":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:5895":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt","mtime"],"kind":"foreign_type"},"17:10353":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:4741":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:11458":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:45308":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"4:3775":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:47273":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"4:11317":{"crate_id":4,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:4022":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4659":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:21934":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"7:85":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11199":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:11777":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:5170":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:3929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:4066":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:9180":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:1522":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:8526":{"crate_id":4,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"4:9413":{"crate_id":4,"path":["lazy_static","Target"],"kind":"typedef"},"1:48853":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:8904":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:6731":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:12406":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:49949":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:5177":{"crate_id":5,"path":["lazy_static","Output"],"kind":"typedef"},"1:2548":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:3091":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:1475":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2843":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:47522":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:5273":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:50433":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10377":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:24023":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:7986":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","take_while"],"kind":"foreign_type"},"14:0":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:48129":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:3492":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"17:9404":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:3287":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:4769":{"crate_id":4,"path":["std","io","Read","read"],"kind":"foreign_type"},"1:50003":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:9814":{"crate_id":4,"path":["std","sys_common","rwlock","MovableRWLock"],"kind":"struct"},"5:7614":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:3857":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:7495":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:7005":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:5346":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12521":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:4851":{"crate_id":4,"path":["std","io","BufRead","fill_buf"],"kind":"foreign_type"},"1:12352":{"crate_id":1,"path":["core","str","pattern","Searcher","next"],"kind":"foreign_type"},"4:1506":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:5928":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:52092":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:7962":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","zip"],"kind":"foreign_type"},"1:4903":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:2861":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5075":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:7762":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:782":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"4:11458":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:9689":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:21932":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:5940":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"4:14726":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:10516":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:811":{"crate_id":4,"path":["std","thread","local","os","Key"],"kind":"struct"},"6:5186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:4388":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:3198":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13356":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:3264":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"4:12109":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:0":{"crate_id":17,"path":["object"],"kind":"module"},"17:13453":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:13788":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:47239":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"14:244":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:3378":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:8223":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:7378":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11981":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:3134":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12168":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"4:15981":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:11465":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:46242":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:4245":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2969":{"crate_id":1,"path":["lazy_static","Error"],"kind":"typedef"},"17:12582":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7620":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:1096":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:567":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:10997":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"16:3172":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:13758":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:49740":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:4777":{"crate_id":5,"path":["lazy_static","Target"],"kind":"typedef"},"17:12095":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:5975":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"4:7677":{"crate_id":4,"path":["lazy_static","IntoIter"],"kind":"typedef"},"4:12786":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:7997":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","flat_map"],"kind":"foreign_type"},"17:12221":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:5918":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:23419":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:10423":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:1421":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13627":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:9110":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"12:2315":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:1431":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:7487":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:4211":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:5395":{"crate_id":5,"path":["lazy_static","Output"],"kind":"typedef"},"1:5010":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:9280":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"4:4402":{"crate_id":4,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:13760":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:10552":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:50187":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4239":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:22287":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:9663":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10477":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10962":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:4790":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4440":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:4350":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:3429":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"12:1180":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:14785":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1528":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:47221":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:52182":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:15995":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:6931":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:23373":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:50565":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:9649":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:1473":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8039":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","try_fold"],"kind":"foreign_type"},"16:6238":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:11229":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"5:1990":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"12:2303":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6357":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:4448":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:3189":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:49115":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:7949":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","Item"],"kind":"foreign_type"},"1:12270":{"crate_id":1,"path":["core","str","traits","FromStr","Err"],"kind":"foreign_type"},"1:2924":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:22191":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:15369":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:6701":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:9896":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:49788":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:3497":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11915":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:50042":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:5863":{"crate_id":4,"path":["std","os","unix","fs","FileExt","read_at"],"kind":"foreign_type"},"1:48060":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:46421":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:48251":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:48421":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:11159":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:10787":{"crate_id":4,"path":["std","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:3476":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:10435":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11782":{"crate_id":1,"path":["lazy_static","Item"],"kind":"typedef"},"9:157":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"4:6829":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"12:463":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12385":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:7007":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9440":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9849":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:3506":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"4:9804":{"crate_id":4,"path":["std","sys_common","rwlock","StaticRWLockReadGuard"],"kind":"struct"},"4:6114":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12783":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:12011":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:4201":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:4235":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10938":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:9687":{"crate_id":4,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:5766":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:7716":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:45685":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:2936":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:13272":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:729":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:4468":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:8148":{"crate_id":4,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:9264":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6768":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:3905":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"4:8976":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"18:694":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:2346":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:13169":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11962":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"4:8604":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"19:0":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:14721":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:3490":{"crate_id":1,"path":["core","ops","try_trait","FromResidual","from_residual"],"kind":"foreign_type"},"5:7580":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4348":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:9119":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:10677":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:9037":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:23325":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:22981":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:3445":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:49844":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"12:2039":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:2940":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:4825":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:45205":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:56097":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:3365":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10788":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:45678":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:45407":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"4:1464":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"5:3020":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:6843":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4166":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5360":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4220":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:3972":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10746":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1464":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:3138":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10149":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:48532":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:12442":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:8762":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4142":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:50259":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:23831":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"4:10957":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"12:925":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"12:354":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"12:112":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:547":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10529":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:1961":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:15987":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"6:4103":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10468":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"16:6744":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:23075":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:10117":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:10844":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"4:14950":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:15976":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"16:2912":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:15153":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"4:8597":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4614":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:4051":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:54783":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9665":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:3279":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2945":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:517":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:4823":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:9330":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:13205":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2019":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:11410":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2627":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:3134":{"crate_id":4,"path":["lazy_static","Target"],"kind":"typedef"},"17:11378":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"4:8048":{"crate_id":4,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:11030":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"14:250":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:11470":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"4:11654":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"9:469":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"12:1144":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:2314":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:14716":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:3147":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:48837":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:9476":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13221":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:2715":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:3045":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:5474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:46799":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6691":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7884":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2974":{"crate_id":1,"path":["lazy_static","Error"],"kind":"typedef"},"4:4614":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:45275":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:11724":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"1:4668":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:1442":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:15197":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:4452":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:23310":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:3939":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:1293":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:3103":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:13354":{"crate_id":4,"path":["std","sys","unix","locks","pthread_condvar","Condvar"],"kind":"struct"},"4:12298":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:6435":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:6092":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"4:9448":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12247":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:1489":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:13513":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:9210":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13819":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:47325":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"4:15939":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:45070":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7174":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:4775":{"crate_id":4,"path":["std","io","Read","read_exact"],"kind":"foreign_type"},"16:6219":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:6136":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:48412":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:7991":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","skip"],"kind":"foreign_type"},"16:3338":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:9867":{"crate_id":1,"path":["core","hash","Hasher","write"],"kind":"foreign_type"},"16:6366":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:22977":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:8005":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","collect"],"kind":"foreign_type"},"17:13296":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"9:692":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:48690":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:47732":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11482":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:12215":{"crate_id":1,"path":["lazy_static","Output"],"kind":"typedef"},"17:11696":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:3785":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:5707":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:5155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:11714":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:46673":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:45326":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:45099":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:2379":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"17:11406":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:9655":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:8798":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:1517":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:11217":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"16:6518":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:4537":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:6278":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7146":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:10279":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:5391":{"crate_id":5,"path":["lazy_static","Output"],"kind":"typedef"},"6:6564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:6581":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13547":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6269":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:13387":{"crate_id":4,"path":["std","sys","unix","locks","pthread_mutex","Mutex"],"kind":"struct"},"1:47882":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:10028":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:50061":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10140":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:44721":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:5980":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:44823":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"16:7279":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:9088":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10304":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:47493":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:44882":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:9175":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:11421":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:3130":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:3471":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13192":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14000":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:48297":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:4388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:12194":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:6072":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"4:2687":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:6934":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:45055":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:4855":{"crate_id":4,"path":["std","io","BufRead","read_until"],"kind":"foreign_type"},"4:13441":{"crate_id":4,"path":["std","sys","unix","locks","pthread_rwlock","RWLock"],"kind":"struct"},"17:13477":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12645":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:49917":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:2091":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"4:12121":{"crate_id":4,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"6:4132":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:15994":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"17:13540":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:11311":{"crate_id":4,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"4:4502":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:11341":{"crate_id":4,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"15:0":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:169":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:3164":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:15047":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"12:774":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7823":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:857":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:7457":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:47251":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"4:9771":{"crate_id":4,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3122":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:321":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:15986":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:3331":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"16:7226":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:12568":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"4:11287":{"crate_id":4,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:630":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4423":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:5855":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12632":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:5456":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13978":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:45466":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:681":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:5331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:47540":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10001":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:14408":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13598":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:511":{"crate_id":5,"path":["lazy_static","Target"],"kind":"typedef"},"18:677":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11809":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9648":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:7024":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:14739":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:7797":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:11631":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:10950":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:12330":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:10160":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3175":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:5183":{"crate_id":5,"path":["lazy_static","Output"],"kind":"typedef"},"16:2889":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:11268":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:46200":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:2991":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12071":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"4:10405":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:1542":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"12:840":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:8012":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","partition"],"kind":"foreign_type"},"6:5345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6682":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:10940":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:3563":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:2789":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4535":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"12:2005":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:1470":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:7780":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6554":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:22332":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:1645":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:54":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:10236":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:1077":{"crate_id":4,"path":["lazy_static","Owned"],"kind":"typedef"},"4:9127":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:12357":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher","next_back"],"kind":"foreign_type"},"17:10106":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6839":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:4150":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12456":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:13402":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:48050":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:6098":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:3100":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"4:1441":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:11088":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:5941":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:15955":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:11201":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:3034":{"crate_id":4,"path":["lazy_static","Output"],"kind":"typedef"},"17:13154":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:10407":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:11261":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"1:8199":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","is_sorted"],"kind":"foreign_type"},"17:10095":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:49811":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13331":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"4:7557":{"crate_id":4,"path":["lazy_static","Owned"],"kind":"typedef"},"6:4034":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:48446":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9809":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:11083":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:7749":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7158":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:48841":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:10213":{"crate_id":1,"path":["lazy_static","Output"],"kind":"typedef"},"4:2167":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"14:194":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13465":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:669":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:45336":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:51102":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10623":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:7798":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator","next_back"],"kind":"foreign_type"},"6:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:1624":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"12:949":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:2315":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:7130":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:7481":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:7412":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:1200":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:597":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:7435":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"4:13593":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:31339":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:13043":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:9667":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12598":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6101":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:2624":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:9659":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"18:644":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:3979":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:3036":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:11208":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:12234":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"4:12343":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:822":{"crate_id":5,"path":["lazy_static","Target"],"kind":"typedef"},"1:52072":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:6106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:7786":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:136":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12307":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:47960":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7236":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6636":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"4:3025":{"crate_id":4,"path":["lazy_static","Owned"],"kind":"typedef"},"6:4005":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"9:776":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"4:1601":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"4:15978":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:10988":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:7982":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","enumerate"],"kind":"foreign_type"},"4:3353":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:50989":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:44700":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:9574":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:47933":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:15309":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:2729":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:5884":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11572":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:22132":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:3917":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:3270":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:45083":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:48738":{"crate_id":1,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"6:1900":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:13348":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:52259":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10611":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:4230":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"12:2025":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11434":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:1483":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:1076":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:529":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:4049":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10224":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4072":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:7964":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","intersperse"],"kind":"foreign_type"},"17:8929":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"12:1253":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6126":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:1501":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6780":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:15982":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:3313":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12480":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8037":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","is_partitioned"],"kind":"foreign_type"},"17:11555":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:510":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"14:189":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:5173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:54703":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"9:927":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:4671":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:50022":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:4687":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:10767":{"crate_id":4,"path":["std","ffi","c_str","CStr"],"kind":"struct"},"4:13957":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:50156":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:0":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:2155":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:1703":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:1500":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:46505":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:3911":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:5142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:7232":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:45456":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:0":{"crate_id":6,"path":["libc"],"kind":"module"},"1:9865":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:9034":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"12:377":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:47501":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:12087":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:7303":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:469":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:5790":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:12555":{"crate_id":1,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"1:47942":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:11314":{"crate_id":4,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"12:181":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4989":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:5359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:51856":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"0:38":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"6:1685":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:44744":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:46964":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:5516":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:23146":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:5433":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:4154":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:10071":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"12:1235":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10458":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"3:0":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:542":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:3320":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:1079":{"crate_id":4,"path":["lazy_static","Owned"],"kind":"typedef"},"16:5927":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:49021":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13446":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:36450":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"18:636":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:48032":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:49980":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"4:15723":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:2417":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:1567":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:45487":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"12:429":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"12:0":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:52118":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7392":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:46267":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:13394":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:7333":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:7894":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:576":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:48019":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:9335":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12287":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:51253":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:5295":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:48869":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:49029":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4368":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"12:1100":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:880":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:3999":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12771":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"4:9034":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"15:248":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:3359":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:23927":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:4573":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:3494":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:10950":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6152":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13554":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:45396":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:4012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9971":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:610":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:13134":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:3181":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:3034":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:23767":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"4:10491":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:7095":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:10543":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:11484":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:10989":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:56118":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:7205":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:49694":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:582":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:4122":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:45295":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:5189":{"crate_id":5,"path":["lazy_static","Output"],"kind":"typedef"},"17:11750":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:48428":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:45416":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:5314":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:12262":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:4008":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6999":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:8496":{"crate_id":4,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:5632":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:8001":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","fuse"],"kind":"foreign_type"},"1:48646":{"crate_id":1,"path":["lazy_static","Searcher"],"kind":"typedef"},"17:10656":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:4768":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:54796":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11738":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:3116":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:51919":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:7044":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"4:10631":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"12:761":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:7417":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"12:877":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:7216":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:51966":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:5960":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:22280":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:6923":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:52083":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:3005":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:49065":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11499":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4286":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13429":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12494":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:523":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:54822":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12275":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:7916":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"6:589":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"12:1762":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"4:7386":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:23297":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:11730":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:8915":{"crate_id":4,"path":["lazy_static","Target"],"kind":"typedef"},"1:46957":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:0":{"crate_id":18,"path":["memchr"],"kind":"module"},"4:14405":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"7:0":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:7870":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:11628":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7185":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:9855":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:4310":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:1510":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:1739":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"9:749":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:4477":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:4536":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:3714":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:1597":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:54835":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2014":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:6127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"12:812":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"4:15066":{"crate_id":4,"path":["std","sys","unix","time","inner","SystemTime"],"kind":"struct"},"4:10772":{"crate_id":4,"path":["std","ffi","c_str","NulError"],"kind":"struct"},"4:6841":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"9:900":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8679":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:90":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4399":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13609":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:48333":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:50337":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:2563":{"crate_id":4,"path":["std","error","from","StringError"],"kind":"struct"},"4:12777":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"4:14956":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"4:1029":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:10732":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:50533":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10211":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11616":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12073":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:1724":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:45265":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:3500":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:15974":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:15971":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:10800":{"crate_id":4,"path":["std","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:7738":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:14":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:47206":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"18:704":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"4:12227":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:11416":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:50796":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10558":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13180":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:3185":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:48105":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:5519":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:21911":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:46971":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9133":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5472":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:3890":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:10673":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:15390":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:3356":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"16:6464":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:9839":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:8680":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:720":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:15016":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11343":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:1420":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:45507":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:4704":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:48578":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:4542":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:12155":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11588":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:10419":{"crate_id":1,"path":["lazy_static","IntoIter"],"kind":"typedef"},"4:3251":{"crate_id":4,"path":["lazy_static","Owned"],"kind":"typedef"},"4:12443":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"4:2139":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:9065":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"18:712":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6176":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:10663":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3169":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:4827":{"crate_id":4,"path":["std","io","Write","write_vectored"],"kind":"foreign_type"},"1:10243":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:13306":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:299":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:2531":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:10605":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:1455":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"18:650":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:7360":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:2079":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7042":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:4157":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:14775":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:48383":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:12982":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:50408":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"4:5878":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:7477":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:7638":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:23239":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:4496":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:49763":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:47197":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:7083":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12028":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3105":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10887":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6864":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:7572":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"5:2783":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:1319":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2684":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:46327":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:3246":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"14:56":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"7:38":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:622":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12537":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11653":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11215":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11304":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:52044":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:48233":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:47485":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8347":{"crate_id":1,"path":["lazy_static","Target"],"kind":"typedef"},"9:27":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"13:0":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:12094":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:9778":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:8954":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:11396":{"crate_id":4,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:2512":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:3557":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:11358":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:23272":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:9332":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6019":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:48393":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:6761":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3491":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12756":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:23441":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12712":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12142":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:7823":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator","len"],"kind":"foreign_type"},"4:4534":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:5029":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"12:2323":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13772":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:12188":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11337":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"12:2309":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4378":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13933":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:45346":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:5411":{"crate_id":5,"path":["lazy_static","Owned"],"kind":"typedef"},"4:15444":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"1:7805":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator","rfold"],"kind":"foreign_type"},"4:1070":{"crate_id":4,"path":["std","ascii","AsciiExt","make_ascii_lowercase"],"kind":"foreign_type"},"1:23895":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:12048":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:12340":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:5561":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:4831":{"crate_id":4,"path":["std","io","Write","write_all"],"kind":"foreign_type"},"1:8052":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","fold"],"kind":"foreign_type"},"1:48087":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2935":{"crate_id":1,"path":["core","convert","From","from"],"kind":"foreign_type"},"1:48908":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"4:12117":{"crate_id":4,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"4:774":{"crate_id":4,"path":["std","thread","local","fast","Key"],"kind":"struct"},"4:14815":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:7127":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:13318":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:1734":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"4:891":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"12:1118":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"4:14205":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"4:8096":{"crate_id":4,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"4:10698":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:2866":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:7420":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"4:7794":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:3259":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11045":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:47970":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:4386":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:3936":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8022":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","partition_in_place"],"kind":"foreign_type"},"16:6949":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:4533":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:12408":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:45694":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10447":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:885":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:4852":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13574":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13488":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:9528":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4330":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12327":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6491":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:6933":{"crate_id":4,"path":["std","os","linux","process","ChildExt","take_pidfd"],"kind":"foreign_type"},"16:7549":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11726":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:12486":{"crate_id":1,"path":["lazy_static","Searcher"],"kind":"typedef"},"1:50360":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:3488":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:12353":{"crate_id":1,"path":["core","str","pattern","Searcher","next_match"],"kind":"foreign_type"},"4:10732":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"15:269":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:47951":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:5330":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:2930":{"crate_id":4,"path":["lazy_static","Target"],"kind":"typedef"},"12:937":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:5206":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"4:14486":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:13564":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:22323":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:12060":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:7951":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator","size_hint"],"kind":"foreign_type"},"4:15991":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:13637":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"12:2018":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"4:14802":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"4:2440":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"16:7971":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:10626":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"17:12795":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:5121":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:51603":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:1140":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:8718":{"crate_id":1,"path":["lazy_static","Target"],"kind":"typedef"},"17:2484":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:1492":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:31516":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:9572":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:152":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:3100":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"4:11535":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11847":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:7240":{"crate_id":5,"path":["lazy_static","Target"],"kind":"typedef"},"5:5582":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:6016":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2862":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10926":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:45355":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"4:9191":{"crate_id":4,"path":["lazy_static","Target"],"kind":"typedef"},"17:12725":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:11015":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"14:231":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:15983":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:13370":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:675":{"crate_id":5,"path":["lazy_static","Owned"],"kind":"typedef"},"5:7533":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:13739":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"}},"external_crates":{"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":14}