{"root":"0:0:1650","crate_version":"1.4.0","includes_private":false,"index":{"1:12101:26697":{"id":"1:12101:26697","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43542:3245","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1650":{"id":"0:0:1650","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1656","0:31:1657","0:28:1650"],"is_stripped":false}}},"1:12171:31488":{"id":"1:12171:31488","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11801:3234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12075:816":{"id":"1:12075:816","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11978:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:21551":{"id":"1:12103:21551","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12102:21552"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43839:3258","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12183:31490":{"id":"1:12183:31490","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12139:28434":{"id":"1:12139:28434","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219","str::rsplitn":"1:12142:28436"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43660:3176","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12107:23452":{"id":"1:12107:23452","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12167:31485":{"id":"1:12167:31485","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12102:21552":{"id":"1:12102:21552","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12103:21551"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43830:3249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12145:31478":{"id":"1:12145:31478","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5428:32146":{"id":"5:5428:32146","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1953","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:8721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:1953","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:8721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12087:1655":{"id":"1:12087:1655","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5445:3051":{"id":"5:5445:3051","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12198:28069":{"id":"1:12198:28069","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5429:2900":{"id":"5:5429:2900","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12148:31479":{"id":"1:12148:31479","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41587:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12157:31481":{"id":"1:12157:31481","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11776:3219","`DoubleEndedIterator`":"1:7304:121","prim@char":"4:11978:418","str::rmatch_indices":"1:12160:31482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43706:3255","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12130:28432":{"id":"1:12130:28432","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11776:3219","`DoubleEndedIterator`":"1:7304:121","prim@char":"4:11978:418","str::split":"1:12124:27193"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43574:3178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12095:31473":{"id":"1:12095:31473","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11984:1406","str::slice_mut_unchecked":"1:12096:31474","crate::ops::Index":"1:2978:2036"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12165:31484":{"id":"1:12165:31484","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12084:31472":{"id":"1:12084:31472","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12113:28439":{"id":"1:12113:28439","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12127:21484":{"id":"1:12127:21484","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11599:3187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12154:31480":{"id":"1:12154:31480","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11776:3219","`DoubleEndedIterator`":"1:7304:121","prim@char":"4:11978:418","str::matches":"1:12151:1850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43778:3254","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5447:28066":{"id":"5:5447:28066","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12198:28069"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1657":{"id":"0:31:1657","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12195:29537":{"id":"1:12195:29537","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39626:20921","Self::is_ascii":"1:12194:28063"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39626:20921","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12099:21538":{"id":"1:12099:21538","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43526:3247","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12124:27193":{"id":"1:12124:27193","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11776:3219","`DoubleEndedIterator`":"1:7304:121","prim@char":"4:11978:418","str::split_whitespace":"1:12102:21552","str::rsplit":"1:12130:28432"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43556:3174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12186:31491":{"id":"1:12186:31491","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12177:27455":{"id":"1:12177:27455","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12078:31470":{"id":"1:12078:31470","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12083:27817":{"id":"1:12083:27817","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11343:3239"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12093:26097":{"id":"1:12093:26097","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12196:28067":{"id":"1:12196:28067","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5443:32149":{"id":"5:5443:32149","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12086:28403":{"id":"1:12086:28403","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12169:31486":{"id":"1:12169:31486","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12192:31493":{"id":"1:12192:31493","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11737:127","`FromStr`":"1:11736:2749"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41731:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11736:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11736:2749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12201:2973":{"id":"1:12201:2973","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4537:2973"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43864:2974","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12076:2124":{"id":"1:12076:2124","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12133:31476":{"id":"1:12133:31476","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11776:3219","str::split":"1:12124:27193","prim@char":"4:11978:418","`DoubleEndedIterator`":"1:7304:121","str::rsplit_terminator":"1:12136:31477"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43606:3252","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12160:31482":{"id":"1:12160:31482","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11776:3219","`DoubleEndedIterator`":"1:7304:121","prim@char":"4:11978:418","str::match_indices":"1:12157:31481"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43724:3256","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12110:28438":{"id":"1:12110:28438","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12120:2123":{"id":"1:12120:2123","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41589:179","prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12197:28068":{"id":"1:12197:28068","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12080:31471":{"id":"1:12080:31471","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12078:31470"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12096:31474":{"id":"1:12096:31474","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11984:1406","crate::ops::IndexMut":"1:2982:2037","str::slice_unchecked":"1:12095:31473"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12151:1850":{"id":"1:12151:1850","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11776:3219","`DoubleEndedIterator`":"1:7304:121","prim@char":"4:11978:418","str::matches":"1:12151:1850"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43760:3253","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12199:31494":{"id":"1:12199:31494","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4536:31494"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43855:2995","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12089:26095":{"id":"1:12089:26095","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41589:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12189:31492":{"id":"1:12189:31492","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12142:28436":{"id":"1:12142:28436","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11978:418","str::splitn":"1:12139:28434","self::pattern":"1:11776:3219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43678:3172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5444:32150":{"id":"5:5444:32150","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:1953","`String`":"5:7283:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:1953","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7016:8721","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12100:21568":{"id":"1:12100:21568","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11978:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43532:3246","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12174:31489":{"id":"1:12174:31489","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12091:26096":{"id":"1:12091:26096","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9877:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12098:28423":{"id":"1:12098:28423","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12097:28422"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12202:31495":{"id":"1:12202:31495","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4534:31495"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43873:2994","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5432:32147":{"id":"5:5432:32147","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5435:32148":{"id":"5:5435:32148","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7283:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12170:31487":{"id":"1:12170:31487","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12104:27194":{"id":"1:12104:27194","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43810:3248","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12163:31483":{"id":"1:12163:31483","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12074":{"id":"1:12074","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12075:816","1:12076:2124","1:12077:31469","1:12078:31470","1:12080:31471","1:12083:27817","1:12084:31472","1:12085:314","1:12086:28403","1:12087:1655","1:12089:26095","1:12091:26096","1:12093:26097","1:12095:31473","1:12096:31474","1:12097:28422","1:12098:28423","1:12099:21538","1:12100:21568","1:12101:26697","1:12102:21552","1:12103:21551","1:12104:27194","1:12105:31475","1:12106:21541","1:12107:23452","1:12110:28438","1:12113:28439","1:12116:2165","1:12120:2123","1:12124:27193","1:12127:21484","1:12130:28432","1:12133:31476","1:12136:31477","1:12139:28434","1:12142:28436","1:12145:31478","1:12148:31479","1:12151:1850","1:12154:31480","1:12157:31481","1:12160:31482","1:12163:31483","1:12165:31484","1:12167:31485","1:12169:31486","1:12170:31487","1:12171:31488","1:12174:31489","1:12177:27455","1:12180:28440","1:12183:31490","1:12186:31491","1:12189:31492","1:12192:31493","1:12194:28063","1:12195:29537","1:12196:28067","1:12197:28068","1:12198:28069","1:12199:31494","1:12201:2973","1:12202:31495"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12136:31477":{"id":"1:12136:31477","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11776:3219","str::split":"1:12124:27193","prim@char":"4:11978:418","str::split_terminator":"1:12133:31476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43624:3251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1650":{"id":"0:28:1650","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12116:2165":{"id":"1:12116:2165","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41589:179","prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41587:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5446:28065":{"id":"5:5446:28065","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12197:28068"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7283:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12097:28422":{"id":"1:12097:28422","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12098:28423"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12085:314":{"id":"1:12085:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12086:28403","`u8`":"4:11995:1509"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5427":{"id":"5:5427","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5428:32146","5:5429:2900","5:5432:32147","5:5435:32148","5:5443:32149","5:5444:32150","5:5445:3051","5:5446:28065","5:5447:28066"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12180:28440":{"id":"1:12180:28440","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11978:418","self::pattern":"1:11776:3219"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41587:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11781:3233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11796:3235","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1656":{"id":"0:29:1656","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12077:31469":{"id":"1:12077:31469","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12106:21541":{"id":"1:12106:21541","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43848:3257","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12194:28063":{"id":"1:12194:28063","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12105:31475":{"id":"1:12105:31475","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43820:3250","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"11:332:2404":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:9614:34232":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:2857:14897":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"4:1430:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:8792:8965":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6705:14056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:7633:8682":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:40190:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:4126:27909":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:11761:2517":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:9952:16024":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:40270:2521":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:42586:21496":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:4564:15449":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:6214:15824":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9887:16036":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:44303:3225":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:8632:15966":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13862:20159":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:41799:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:45690:8413":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:9095:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"19:0:1036":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:5841:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5987:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"4:11019:2508":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:42144:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11290:15991":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:2511:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"17:12982:19414":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:2332:14875":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:11483:8850":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13732:20148":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4506:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:4008:22096":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:10953:8968":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:9296:15949":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:434:14849":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:3183:31099":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:44482:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"4:6421:1791":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"16:4814:15531":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:9409:34169":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6931:15857":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:14177:20183":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:11979:18876":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:14259:20190":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7255:2105":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:22649:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:3154:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:3139:2041":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:40056:21193":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4650:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"11:836:8709":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"0:28:1650":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:10507:8834":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:1138:31187":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:4387:1970":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:42064:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:5962:2486":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:7515:15873":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11548:3261":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:1663:10368":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:10520:16122":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:6789:15851":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:11398:2513":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:3301:8831":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:5843:15813":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10845:16131":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:5437:8961":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"6:4374:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:9143:8982":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"4:11539:8997":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:13368:20130":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:47771:8399":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:47847:8454":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13683:20144":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8734:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:2378:8778":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"6:4291:12905":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"4:7860:8790":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:9048:15951":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"9:237:8947":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"11:1103:14792":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:5406:8959":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:21928:21162":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:6834:14065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"11:2049:2652":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:44287:3228":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:10914:27411":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:13566:20139":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:62:9084":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:21208:8357":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:3111:8838":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:10786:16135":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13999:20173":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:22517:2754":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:45720:8418":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11118:16220":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:8902:26545":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:4196:2442":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:5639:15804":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:20635:21950":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"13:110:33562":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:7696:26546":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:42906:20535":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:2497:14882":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13787:20153":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:41453:3098":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:728:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:5805:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5882:15814":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"4:551:2673":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:3583:2664":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:3810:14935":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:7012:33830":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:46805:8386":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9217:3139":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4716:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4315:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:41638:2128":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:7843:8788":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:43962:3273":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:4620:15457":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:2263:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:47874:8342":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14380:20198":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9434:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:7759:22090":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"4:4035:8860":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"4:8326:8923":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6077:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:10910:8753":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:4333:1968":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"16:5994:15819":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:2777:2017":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"4:4731:8869":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:3732:8848":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"4:7128:27910":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2150:588":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10253:16056":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:41723:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"17:2133:16057":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:46881:8398":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11467:15999":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"4:3344:8820":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"9:177:14777":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:40919:3057":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"11:630:2664":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:42614:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"9:330:14728":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:43991:3275":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:2962:14901":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:10088:2681":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:3519:16155":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"4:8932:8978":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:9965:21207":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:13830:20156":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12377:19376":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:14026:20176":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10377:16087":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:6136:12822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"14:40:18866":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:1820:1979":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"4:10069:8745":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:11315:27577":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"4:6894:2497":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:47984:8350":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"11:2186:33501":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:3204:8718":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:7592:15878":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14007:20174":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:44363:3290":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4824:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:1464:8702":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:7540:13150":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:4496:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:1048:33499":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13697:20145":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:9090:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11847:3266":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:2743:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:22715:2755":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13707:20146":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:119:9138":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:13659:16031":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5829:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:41436:3097":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:531:20241":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"4:8186:3072":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:9966:15986":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:21549:3168":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10511:16121":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:7445:15867":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13167:19426":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6484:15841":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:10716:8922":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:4441:15422":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13870:20160":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:2105:16098":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:7529:13149":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4787:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:41482:21572":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:43372:2695":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:22484:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:719:20227":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2505:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:2793:2021":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"4:7020:2498":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:41790:2129":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:4854:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:1702:8879":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:10923:8962":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10323:16113":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:5342:15795":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:45861:8396":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:46259:8453":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:10330:16084":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:6036:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13795:20154":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:482:9456":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9225:3142":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:40360:3073":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:9462:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:41864:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:7652:2975":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:5590:15801":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:45898:8451":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:4606:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:7016:8721":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:1059:2652":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11753:16235":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:1755:2688":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12346:16177":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3645:2129":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7665:15881":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:5553:15799":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1545:10358":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"11:2194:33502":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:4142:1981":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:9016:15797":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:40412:3078":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:6688:10479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:40342:2684":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"11:1517:2657":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:530:33833":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:21457:8372":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:44134:3280":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:1649:10367":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:42104:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6775:14061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:45612:8417":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7679:15882":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"4:11551:27520":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"18:96:20215":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:43820:3250":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:2403:1888":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:7916:8824":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3238:8719":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:624:34704":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:12002:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:1852:8718":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:10156:3175":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10969:16216":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10051:16022":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:12691:19396":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:10633:16129":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12905:19409":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:6153:2493":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:1928:656":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:14227:20188":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:11927:27380":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:10458:16117":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:1574:8716":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:3453:2677":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:40131:2996":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:12365:16176":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:7631:15880":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9866:16017":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:46235:8452":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:41705:2106":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:568:9467":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:707:3236":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"0:29:1656":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:2693:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:47601:8393":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:14:1851":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:1557:10359":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4256:1961":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:12372:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"14:215:14809":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:20803:8363":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:22418:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:9399:15982":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:47969:8349":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:6323:15830":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:3777:14926":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7297:9027":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:4691:8920":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"7:0:1553":{"crate_id":7,"path":["unwind"],"kind":"module"},"4:950:8709":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:21561:21954":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:805:8708":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:595:9471":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12878:19407":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"4:1045:8711":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:4592:15453":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4949:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10931:16202":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6160:33790":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"4:7530:27389":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:0:1882":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:9124:8799":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"6:6171:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:1681:10370":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"4:11997:1507":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"16:3867:14968":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10339:16083":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11329:15992":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"4:8541:2664":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"11:1121:8713":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:2737:14892":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"4:8531:8950":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"6:6671:10481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:7116:2129":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6470:15840":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:3894:14971":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:8740:15969":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:41396:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:9215:3138":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"4:8955:1998":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:40351:3065":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:45760:8430":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:43830:3249":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:39418:2948":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:9017:27397":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:8068:15893":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12065:18882":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3996:22102":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:1565:2436":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:40473:3082":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12089:18884":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:8086:15894":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13905:20163":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:10445:2505":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:32133:22090":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:45590:8412":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:30118:2716":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:261:34085":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:1590:10362":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11992:18877":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:1500:10352":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6713:14818":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:207:2412":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1746:21515":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:12035:18880":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:6461:2005":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:6516:15843":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:12446:3313":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:21124:8361":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:3667:8845":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:640:8688":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:40870:21513":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:12671:19395":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:1709:10373":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:2314:14874":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6357:15833":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"4:864:2129":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:40237:3015":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:3076:2040":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12424:19379":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:4166:2442":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:14329:20194":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:113:20216":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:2765:2015":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:44168:3237":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:39357:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4420:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:5807:15812":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:5236:2414":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:6319:2414":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:507:34693":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:43864:2974":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4729:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11905:18871":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"4:48:1564":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"6:5877:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:5469:2442":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:4488:8894":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:46310:21180":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:5567:15800":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:2825:14896":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"4:5372:8957":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:39439:22097":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:10194:3188":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:14150:20181":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12017:18879":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:21673:8359":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:39335:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:1492:8705":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"15:306:14825":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:10621:16173":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:40072:3000":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4770:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:43574:3178":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:9655:15987":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:11976:371":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:4626:27850":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"5:2223:31267":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:11600:16004":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:44056:3277":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:2978:2036":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:10810:27956":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"18:609:34721":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:8841:15972":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7407:15865":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:4556:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:5551:8963":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"5:7259:8767":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11127:16000":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:43778:3254":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:43422:3183":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:41904:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:2895:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:40124:2995":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:782:2417":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:40035:2978":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12851:19405":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13125:19424":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:21110:8360":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:43435:3181":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:1818:8745":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12539:19385":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6028:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6008:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2715:14891":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:5042:27403":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3178:8717":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:2164:16082":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:9777:16012":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"4:12001:1563":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"9:393:14673":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:2908:1977":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6841:14066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"4:10297:8961":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:504:15964":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:7283:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13964:20169":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3179:22132":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:5529:3077":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:3492:3006":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"1:2814:2026":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:41647:2664":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"16:2611:14887":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:1027:14791":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:30543:21251":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:11642:16006":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:1011:2414":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:4308:8889":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:8043:15892":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:4568:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:42024:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4543:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:20607:2938":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4984:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:8846:2664":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:515:20240":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:13719:20147":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:5363:15796":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:3262:8835":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:47946:8348":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:6392:2129":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:5793:33769":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:5491:8962":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"17:12333:19375":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:13749:20149":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"12:0:1879":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11776:3219":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"16:7584:15877":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:44546:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12936:19411":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"15:327:14829":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:40911:3055":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:40370:3074":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:22103:2757":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:8348:8871":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:40150:2998":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:1586:8718":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:4407:1971":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10267:3179":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:4965:15562":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:9153:15978":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:3186:16132":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4678:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:7382:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:6649:2137":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9475:15983":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:2848:2034":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:5051:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:7494:15871":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:12002:1134":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:11982:312":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"6:1536:10357":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:9474:2504":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:0:496":{"crate_id":1,"path":["core"],"kind":"module"},"4:2210:8769":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"9:507:14675":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4489:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:40223:3040":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:12303:19373":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:9032:15798":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5074:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10350:3173":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"4:11949:8691":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4955:12974":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:488:9457":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:2691:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:12646:19393":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:2353:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:6197:15823":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:7304:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8907:23116":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:39269:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:21236:8361":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4638:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:6673:27373":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"4:4466:8893":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:9673:2478":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:0:1883":{"crate_id":17,"path":["object"],"kind":"module"},"4:3260:8834":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:41655:2665":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"9:426:14674":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:1822:2129":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2809:2025":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:2959:2191":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:40044:3001":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:7727:8714":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"4:8558:8952":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:481:20238":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:32224:2953":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12254:19372":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:45566:8376":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6438:15838":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"4:11258:8971":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:4812:8868":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:46388:21174":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:927:8707":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:45843:8390":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:10780:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"11:1501:14793":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:5745:1996":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:3184:31014":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13492:20135":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:599:34712":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:21102:8795":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:477:2474":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8315:2107":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:3217:31117":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10161:16058":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:43606:3252":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:4365:2445":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11428:15997":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:40389:3076":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:1666:1092":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:4794:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:44588:21550":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:2443:14880":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:5028:15577":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:2819:2027":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:13096:19422":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:4434:1972":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:9219:3140":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6658:15847":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:7883:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"1:44490:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:46569:8420":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:40901:2527":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:1603:10364":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:614:34709":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:6303:15828":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:10336:3177":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:2388:8783":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:6789:2472":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"0:31:1657":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:43409:3063":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:3722:2666":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:9105:8980":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"6:5818:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"4:1562:2129":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:3737:2669":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:6809:8983":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:9977:15987":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:3212:8716":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9706:15988":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:14417:20201":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:3149:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:2469:2715":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:20895:8370":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:2519:14883":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:11264:16227":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:5689:15807":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13574:20127":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:7463:14598":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:7262:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11034:16217":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"4:854:2665":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:5687:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"15:288:14824":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:1575:10361":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:9442:34593":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8739:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:4039:8861":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:22352:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:8277:8890":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:9571:34472":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:40522:3069":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:7124:2129":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:7230:21203":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:4900:15545":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:48022:8352":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:4748:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13069:19420":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4754:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:2771:2018":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:6137:2490":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:44145:3281":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:39411:2042":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:22070:21492":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:44575:3319":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13604:20141":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"4:8137:3047":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"16:4928:15549":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6864:33868":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"4:6425:1999":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4862:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:10832:16130":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:6978:27831":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11542:15950":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:11115:27953":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:43839:3258":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5793:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11832:18867":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:49867:8374":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:1482:8704":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:21227:8795":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1915:2691":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:7739:8752":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"11:667:8705":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:7609:14627":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10812:16134":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:4536:15445":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:40096:3003":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:2541:14884":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:9223:15980":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:8109:8791":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:5737:15810":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:9274:3245":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:21042:8795":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"18:727:20235":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:7589:2502":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:3977:8856":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:2900:14899":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:12614:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13456:20134":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:1411:2664":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12864:19406":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:41824:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:3377:3052":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"5:5861:1993":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:494:9458":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:20801:8795":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:5025:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:8997:15947":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:11993:747":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:22616:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:4323:15352":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:12106:18885":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5979:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2465:14881":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:7240:33958":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:8899:15974":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:7652:8672":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"1:2468:8795":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10994:16188":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:12921:19410":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:6571:15846":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:43724:3256":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12479:19382":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:47999:8351":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:43106:20620":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:9867:8795":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"16:5100:15601":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:10025:2664":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13673:20143":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:40143:2997":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:6589:9340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:8659:15967":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1118:2658":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:9022:27517":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13179:19427":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13971:20170":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:2600:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"11:986:2652":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:8210:15901":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1631:10365":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10313:16112":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:10906:16136":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:11056:16218":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:47905:8345":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"11:1068:2654":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"4:11333:27917":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:4906:8919":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:11091:8966":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:12552:19386":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:44563:3321":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:541:9463":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:9221:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"5:7379:2459":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:12000:793":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"5:629:31122":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:10800:2678":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:40157:2999":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4446:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:3744:14917":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:7505:13145":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:7848:8789":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7739:15885":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9806:16013":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11155:16221":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:10074:3174":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4723:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:11988:643":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"16:6886:15855":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:841:2664":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:9192:28124":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:2663:14889":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:9083:15952":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6785:22115":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:13923:20165":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:554:9465":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12077:18883":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11007:16187":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:3383:2946":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"5:276:1953":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4304:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"9:450:14672":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"10:36:33498":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4818:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4938:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:5073:27403":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:47809:8433":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13591:20140":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:47894:8344":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"14:0:1880":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"4:11985:1490":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"6:4872:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:21025:8362":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:10597:16171":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:736:20228":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:3299:8830":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:914:8704":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:11252:27464":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6018:15820":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:4698:15511":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"4:11944:30761":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:6744:14060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:8810:8966":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:8969:27578":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:0:821":{"crate_id":6,"path":["libc"],"kind":"module"},"1:43848:3257":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13303:20128":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:4789:2484":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:43556:3174":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"10:44:14782":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:2926:1950":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6396:15836":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:39253:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:9561:15985":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:7095:31102":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:40512:3085":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:9030:15862":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:9223:3141":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:44155:3282":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"11:657:2129":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:43444:2696":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:4785:15526":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:42626:21581":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"4:5622:2487":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:2399:14878":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6022:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:4323:1967":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:8209:3174":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"16:5704:15808":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:21843:20734":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:5816:2004":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:41538:3100":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"3:0:1871":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11354:15993":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:4762:388":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"16:3441:14907":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6915:33783":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:8203:3245":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:11416:15996":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"4:7900:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:8771:15970":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:30379:21218":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:6185:27412":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:7229:3061":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:8542:15948":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:7370:30755":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"11:2180:33505":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:40482:3083":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:5757:2436":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:6471:2414":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:6603:2453":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:11998:1508":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"16:5398:15798":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:7055:2426":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:20851:23413":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:40029:2974":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:6573:10311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:12566:19387":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:365:2406":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:2874:14898":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6239:34007":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:673:2674":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:41663:2129":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:6372:15834":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:1690:10371":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:5877:2670":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:40398:21547":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13427:20131":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:4378:1969":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:632:8686":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10223:16062":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:7732:8715":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:11199:16213":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:4724:15513":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4261:1962":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:5231:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"18:590:21560":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:4164:8886":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:10568:16128":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6250:15826":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11696:16233":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:5301:15778":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12769:19400":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:1503:8706":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:14350:20196":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:41502:21210":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11520:16001":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:2688:1946":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:1473:8703":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6711:14057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4704:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10249:16069":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:1892:8763":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:9181:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:6832:3044":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"16:7568:33688":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12711:19397":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:1845:8717":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"4:5615:2486":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:7308:9028":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:4868:15537":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:20667:22129":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:7216:8768":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:21987:21194":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:2592:8816":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:5554:8964":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"17:13332:20129":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:5119:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:10013:16028":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:690:20233":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4428:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:42367:3140":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5068:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"11:1826:2436":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"7:32:14643":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:4783:27108":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:11123:3288":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"15:0:1881":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:22451:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13771:20151":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:7517:13147":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:1302:8713":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:41984:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12840:19404":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:23162:2750":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"4:10790:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:2141:31124":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:14163:20182":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:8924:15975":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:13043:19418":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:6044:33237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:1672:2414":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:42851:3157":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:22583:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:8152:15898":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:46167:8391":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:6537:2002":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:21203:8795":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:20939:8371":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"4:3510:8793":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"15:394:14836":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"11:793:8704":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:44307:3226":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:41782:2665":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:6986:15860":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"4:2360:2908":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:6061:2488":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:2681:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:43660:3176":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:20972:8366":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11241:16226":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:11462:8848":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:2241:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:261:2414":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:4626:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14205:20186":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:44283:3229":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:1638:10366":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:0:1884":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:5920:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:6590:2006":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:43678:3172":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13083:19421":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:6273:2436":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13548:20137":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:7327:1951":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:1495:10351":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:1782:8735":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"17:12394:19377":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:3985:8857":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10175:15986":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"14:202:9026":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:2970:32227":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12579:19388":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:1717:10374":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:47865:8341":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:521:20237":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"11:2033:8711":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:1858:8719":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:11981:1054":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:2703:1974":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"5:3802:2455":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:9716:34643":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9604:15986":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1673:10369":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:8125:15896":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:7693:15883":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:44188:3238":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:4413:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:14054:20179":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:9118:15977":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11781:3233":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:14403:20200":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:5612:15802":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:1831:2455":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:10745:8786":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:48061:8353":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:10049:2665":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:7266:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:42346:3138":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:4034:2414":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"11:736:8703":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:2960:2046":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:2982:2037":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:6534:2001":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:11999:1505":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:46137:8385":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:10390:16085":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4616:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"4:11996:1506":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:6434:1792":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:4228:8888":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:3181:28347":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:2311:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:5065:1993":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"4:5299:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"1:11790:3236":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:40320:3064":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"9:52:14691":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:7570:2500":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:44351:3289":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13991:20172":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:2131:2433":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:44311:3288":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2802:2028":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11924:18872":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:9213:3137":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:10471:16118":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:4809:799":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:2316:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"16:6317:15829":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:40207:21203":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10799:16133":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:22385:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:582:8683":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:45636:8377":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:878:2422":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12757:19399":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11109:16219":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"4:8449:8947":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:6939:15858":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:1426:2665":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10835:3185":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4963:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4895:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:11565:14833":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11178:16222":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13055:19419":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:9010:27481":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12605:19390":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7525:15874":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3166:2045":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"9:357:14688":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:5382:15797":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:2570:2478":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:11852:18868":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10945:16214":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:14341:20195":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14301:20192":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:2689:14890":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:4463:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7362:15864":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"4:10740:28119":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"14:7:14800":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:22550:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:2376:8777":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"5:7199:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:7546:13151":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"4:3933:8853":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4810:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:8399:8946":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"6:5044:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:30349:2906":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:3596:2665":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"9:0:1876":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"4:6348:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:9182:28118":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:4395:2442":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:5381:2442":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"11:968:8711":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:11801:3234":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:7755:8753":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:9318:15981":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:21058:8356":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:5284:9021":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:3395:16137":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:4603:2987":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:11967:18875":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:7833:15889":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11234:16225":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:671:20231":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2844:2033":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:6805:14063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:11978:418":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"6:4917:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:5530:2453":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11045:16182":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:1921:8764":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"1:30913:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10529:16168":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"5:1288:2652":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:7041:1960":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:1075:16029":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:11983:1376":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"4:410:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:547:9464":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:8296:8847":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10430:16116":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:2556:2480":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:11984:1406":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"17:9913:16027":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:6015:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:43383:3184":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9485:34365":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9344:34474":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9188:15979":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:44275:3224":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:8489:8949":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:7753:15886":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:9160:27588":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:40886:3050":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:44279:3227":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:43706:3255":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:25972:2751":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2589:14886":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:40300:3063":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6724:15849":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4475:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:40329:3072":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:500:9459":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:46851:8392":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:1077:8713":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:7313:33965":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:9211:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:7655:3059":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:615:8684":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:2347:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:39446:1968":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"17:12412:19378":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4992:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:44330:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:44120:3279":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:39432:15901":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"5:35:2410":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:1506:10353":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:11599:3187":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2824:2029":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:11994:743":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:42888:8947":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:8165:8794":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:43542:3245":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:4043:2977":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:1538:14794":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10883:16138":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10868:3186":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:43940:3272":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4341:12909":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:4887:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9688:2537":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"18:660:20230":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13435:20132":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:9990:16030":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:2692:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:2493:8823":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:47885:8343":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:2690:31213":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"11:399:33508":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10486:16119":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:582:15965":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"4:498:2433":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:7433:15866":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:4616:8858":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:652:34693":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:40430:3089":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:1973:16063":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:7908:27591":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:4560:8911":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:0:442":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:919:8705":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13847:20157":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"4:872:8702":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12118:18886":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:8282:8891":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:8138:15897":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:44525:3315":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:7073:15861":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:40877:1791":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:5836:13630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6667:14819":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:10066:16050":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5080:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:10654:16149":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:6128:15821":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11767:18864":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:45880:8445":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:22091:2753":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:41672:2105":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:22004:21323":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:5738:1995":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"14:160:14800":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"10:0:1877":{"crate_id":10,"path":["adler"],"kind":"module"},"16:6850:15853":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10080:16075":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12053:18881":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:10735:27943":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:2785:2024":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:30343:2905":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6796:14062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:5386:8958":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:47931:8347":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:43873:2994":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"4:4156:8885":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:1442:2129":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5890:13633":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:7994:27468":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:7799:15888":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:10148:16059":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:44295:3230":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10499:16120":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:8288:8882":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:7721:8690":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"4:10770:8790":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:14189:20184":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:6288:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:11160:27649":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13757:20150":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13882:20161":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"4:3991:8858":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:11235:2511":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11020:16186":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:4506:15439":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:40450:3067":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:12161:18889":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:12891:19408":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:4236:2664":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:11030:2509":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:908:2455":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:1732:2934":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:11189:16003":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:43352:2693":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:10117:3187":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:1543:2442":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6456:15839":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"11:1838:8716":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:20853:2917":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:43362:3180":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:3220:8832":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"4:6604:2007":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:2217:8770":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:42669:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"16:5414:33939":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4380:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:5940:15816":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4944:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:43760:3253":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3932:2442":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"4:0:1398":{"crate_id":4,"path":["std"],"kind":"module"},"4:8196:3086":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:2362:8773":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"4:10504:8832":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:7099:15862":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"4:4733:8872":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:8322:8921":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:14015:20175":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:43464:2697":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:7087:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:45658:8383":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"4:2632:8825":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:11179:8980":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"18:574:34693":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:9206:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:4389:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5015:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:8605:15946":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:6347:15832":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13914:20164":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:12792:19401":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:7853:8786":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:2760:2016":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:47523:8421":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:2960:32228":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:11623:16005":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:4076:2665":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:7272:2451":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10981:16189":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:14282:20191":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"4:10758:27454":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:4848:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:21790:20732":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6531:2401":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:5067:15592":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:8798:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:3371:2947":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:11210:16223":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:11591:16003":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"18:755:20236":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:4469:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"4:8980:8668":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:6130:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:12727:19398":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:4252:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:7523:13148":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:7484:15870":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:7272:14437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:7657:8674":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:20620:21950":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:2966:32230":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:8794:15971":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:5799:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4695:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:2755:2019":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11815:18866":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13937:20166":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:46021:8425":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:2689:1975":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:149:2398":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:2781:14894":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:9469:8789":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:6738:3071":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:2637:14888":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:9272:2269":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"18:766:20229":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:7586:13156":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:42360:3139":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11955:18874":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:2836:2031":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7025:33926":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4781:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:42224:1994":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:4955:8928":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"17:10038:16023":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:9044:27459":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:9656:2532":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:12577:2490":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:3194:1976":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:1184:16037":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:7511:13146":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"11:1818:2664":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"4:933:8708":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:4476:15433":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:587:9470":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:1520:10355":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"4:1068:8712":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:6386:15835":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:11272:15990":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:491:34689":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:42876:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:3025:14902":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:9734:15989":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"11:285:2645":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4456:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7474:15869":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:3671:2414":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:8824:8967":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"11:97:33514":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:2759:14893":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"4:1591:8719":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6607:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11329:3167":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:40441:3080":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1911:10538":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:43624:3251":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:9899:16032":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:4944:2442":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:39453:2969":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:8166:15899":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11943:18873":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:46645:8432":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"4:2920:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:11421:8849":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:42642:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:6625:8923":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:4380:8883":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5972:15818":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:9065:27813":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:40498:3084":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4833:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:2213:2473":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"6:506:9460":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11388:15995":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10609:16172":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:40680:3088":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:11098:16185":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:8868:8976":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:4996:15569":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11371:15994":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:2461:2659":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:43977:3274":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"11:403:33509":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13029:19417":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:5008:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:10544:16169":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"4:7632:8795":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:40421:3079":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:14236:20189":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:41573:3102":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:6332:15831":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:46915:8447":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:10199:16064":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:41419:3096":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:12966:19413":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:1776:2455":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"4:11989:645":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"4:11300:27361":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:7659:3060":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:43454:3182":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:6764:2468":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:9840:16015":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:21234:8367":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:2789:2022":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4929:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6057:14846":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:44299:3231":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:11488:3262":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"0:0:1650":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"4:6638:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13155:16003":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13140:19425":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11250:16190":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:2352:14876":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:3511:2436":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:21896:21128":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:10671:16174":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10280:16110":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:40652:3086":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2741:2864":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:6140:8984":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13778:20152":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10303:16111":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:7558:13153":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:6598:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:8974:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:10550:2506":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:40666:3087":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:2588:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:4587:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:9877:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1102:31189":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:6720:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"11:723:8702":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:123:9139":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:1841:2269":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:42867:3156":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"4:8987:27523":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"4:8233:8844":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:4524:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:14044:20178":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:10138:27467":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:46213:8446":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:898:2436":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:573:9468":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"4:8216:3248":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:14197:20185":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2926:14900":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:635:8687":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:7183:8701":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:20665:22127":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:817:2648":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:526:9461":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:12631:19392":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:7706:8689":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:2918:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"16:7061:33915":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:2243:31259":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"8:0:1875":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:12003:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:14395:20199":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13949:20167":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:44291:3232":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:8252:15902":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:6565:9506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:3042:14903":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:5916:15815":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:2049:2669":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:3729:8849":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:3580:14908":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13957:20168":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:923:8706":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:579:9469":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"4:11991:745":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"17:13448:20133":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:12174:18890":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12148:18888":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:2962:31260":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:8711:15968":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:3963:8855":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"4:8838:8968":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"5:3171:2664":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9744:34647":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:7855:15890":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:12186:18891":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:21671:8795":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6289:15827":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4550:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:4841:15534":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7463:15868":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:3187:31025":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:3231:1978":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"4:6240:2486":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:3295:14906":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13981:20171":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"4:8270:3100":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:5771:1997":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:7246:8766":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"13:0:1874":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:4483:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:4368:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:9850:16016":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"4:8004:8826":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:6232:15825":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12004:18878":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:3315:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:39626:20921":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12526:19384":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:12457:19381":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:4184:1788":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"16:6872:15854":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13803:20155":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7622:15879":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"4:11990:748":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:9518:15984":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:5988:3090":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13557:20138":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:474:9455":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:7575:13155":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:10314:2682":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:5587:3066":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:8153:2678":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:1780:8734":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:47663:8427":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:5959:15817":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:2421:14879":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:43283:22098":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:2170:31264":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:822:2420":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:11979:1525":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:10935:27502":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:21104:8358":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4535:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:6820:14064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"4:2208:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"5:7171:8700":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4436:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4800:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4664:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:2035:2666":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:21912:21472":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:5280:9020":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:1012:8712":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:7033:8720":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11726:16234":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:55:14844":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"6:6648:10496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:45991:8419":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:8021:15891":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:8144:8837":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"17:11220:16224":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"4:8547:8951":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"4:4694:8893":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:42184:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:40116:2974":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13854:20158":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:4395:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:4025:8859":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:46043:8431":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:47065:8381":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:1527:10356":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:358:8681":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:1013:1790":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:46357:21299":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:6868:14068":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:46091:8379":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:39191:2047":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"4:4897:8918":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:5608:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11796:3235":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12502:19383":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:3058:14904":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"18:564:20243":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10123:16032":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:681:20232":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"11:749:2436":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:7065:31129":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"4:3435:8792":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"6:1595:10363":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"4:3834:8850":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:9939:16025":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"9:486:14671":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7225:3062":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:9359:22101":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"4:11960:27816":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:1982:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"4:7519:15965":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"11:0:1878":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6763:15850":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:22077:2756":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:699:20234":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:2201:8700":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:21952:2752":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:4004:2436":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2698:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:1696:10372":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:653:9518":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"4:6384:27373":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:8314:2108":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:22041:21321":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:7599:14626":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4879:1006":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"4:1979:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:9171:3006":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"6:5737:13561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:43091:3216":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:41944:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:2521:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:45821:8384":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:12669:3318":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5849:13589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:7564:13154":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3330:2455":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:6726:14059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:10581:16150":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:43532:3246":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:2160:2917":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:42898:20536":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"13:226:33515":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:12318:19374":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13620:20142":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:43810:3248":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:44008:3276":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:20648:22125":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:8105:15895":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4518:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:2883:2483":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6900:15856":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:1611:2408":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:12354:16175":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:3517:8814":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:9100:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:4753:15518":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:2853:2035":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3160:2043":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:3927:8854":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:40280:3039":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:4020:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"16:6540:15844":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7505:15872":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:43343:3170":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9926:16026":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:46189:8397":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:7552:13152":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:6632:2467":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:885:8703":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:8176:15900":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:5967:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:2923:1949":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:2919:1948":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2746:2931":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:40892:3052":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11313:3165":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:10226:8970":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11498:16000":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:21452:8364":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:39313:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:2162:2918":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:10351:16114":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"4:8222:8847":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:11995:1509":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"5:6622:2465":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5994:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:30437:21161":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:20650:22130":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:527:2475":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"4:11036:2510":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:39379:2039":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6502:15842":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4842:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:11977:941":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:13639:20126":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:30365:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"11:2174:25751":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12815:19402":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2373:14877":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6850:14067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:2567:14885":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:3407:2442":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:8872:15973":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:43334:3171":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:11564:3263":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:4177:8887":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10555:16170":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6175:15822":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7331:33995":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5651:15805":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:1629:587":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:5775:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:3220:14905":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"7:79:14650":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:45546:8411":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4740:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:4396:15401":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"14:187:14808":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"4:3222:8833":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:8900:8977":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:45791:8378":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:11327:27913":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:2929:1796":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:7025:2129":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:798:8707":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:39293:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:7079:2129":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:47725:8448":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5900:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5863:13590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4908:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:2508:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:7678:2506":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"1:40463:3081":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:13513:20136":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:5775:15811":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"11:119:2402":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:7553:15876":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:7295:14439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:2803:14895":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:30309:2904":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:2244:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:8887:8974":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"4:1569:2455":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"11:644:2665":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4764:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:7707:15884":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11144:16211":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:10097:16061":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:2830:2030":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:21:684":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:2735:2950":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:9875:16042":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:9590:2529":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:11074:16001":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:1733:10375":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:9474:3155":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:2738:1947":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:46411:21181":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:46615:8426":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5673:15806":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"4:7999:27477":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:12994:19415":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:40086:3002":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:7539:15875":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:47920:8346":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:582:2938":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:11872:18869":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14315:20193":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:12659:19394":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:1523:8723":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:8304:8892":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:42353:3137":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:944:2648":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:11285:27363":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:40195:3041":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10293:16076":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:11164:16212":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:42691:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14102:20180":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"14:165:14801":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:32097:2943":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:21979:21490":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:8949:15976":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"4:5978:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:22682:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:12421:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10403:16115":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:11992:746":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:40176:2993":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"11:311:33506":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:8854:8979":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:43500:3244":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:42859:21526":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:40380:3075":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:45742:8424":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:41714:2198":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:6720:14058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7278:14438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:10510:8830":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"18:644:34693":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:39152:2048":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:44472:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"11:2060:8712":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:532:9462":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"14:31:14800":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"11:844:8710":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4401:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11454:15998":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:47413:8387":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:20839:8365":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5058:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11736:2749":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:7363:2455":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:3501:30751":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:43855:2995":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:8916:8975":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4032:15085":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"4:8862:2129":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"4:10402:8965":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:9426:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:4685:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:46491:8414":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:5626:15803":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6156:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:12618:19391":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11568:16002":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:256:34165":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:41525:3099":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:2514:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:9665:34473":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4973:12976":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:10322:3172":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10361:16109":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:44083:3278":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6554:15845":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:47271:8415":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6977:15859":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"4:11142:8799":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11343:3239":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10957:16215":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:1580:8717":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:1636:2883":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13016:19416":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:352:8680":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:4630:27854":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:14359:20197":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:9469:3154":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:44533:3316":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:12592:19389":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:538:20242":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:43110:3192":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:7763:15887":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:4328:12908":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:32137:2945":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:5882:13632":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:1765:610":{"crate_id":4,"path":["std","env"],"kind":"module"},"17:400:15963":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:46727:8380":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10266:16055":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:895:2664":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:5720:15809":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"14:221:14810":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:42651:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:41731:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:5422:8960":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8313:2109":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7045:2436":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:4:1019":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:5951:2442":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:2750:2014":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13109:19423":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"11:695:8706":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:1257:8711":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"4:4148:8884":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:4047:8863":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:11084:16183":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:8420:3233":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:40863:3048":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:3635:14909":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:7275:1952":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:5955:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"4:8472:8948":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:12435:19380":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:41561:3101":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:7289:15863":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12952:19412":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:41774:2664":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:42596:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:10308:3176":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2781:2020":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:1513:10354":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:2517:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:6981:3047":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:7924:2666":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"4:4628:27852":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:45945:8355":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:41587:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"16:6815:15852":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:43514:3243":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:2840:2032":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:30941:2938":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:1569:10360":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10110:16060":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:7038:33611":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:80:20214":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:1843:2676":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:12359:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:22025:21315":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6427:15837":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"4:1558:2664":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:8228:8846":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10444:16081":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13894:20162":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:1273:8712":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5767:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:4111:1980":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:11669:16232":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:11558:14833":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"11:760:2455":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:39238:2038":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"4:4735:8873":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9528:34462":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:9821:16014":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:20986:2917":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:14216:20187":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:14037:20177":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6692:15848":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:12826:19403":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:11103:8967":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:12133:18887":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:8381:8932":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:6618:14055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"18:636:34696":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:12566:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:2797:2023":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"4:956:8710":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:2168:33504":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:43526:3247":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:40108:2994":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10417:16086":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10863:15986":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:11791:18865":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11888:18870":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:2293:14847":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:21964:21178":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:6067:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:4428:2445":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:7250:9416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12394:23388":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:562:9466":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:10229:3178":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"4:7870:8787":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:11525:3264":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}