{"root":"0:0:1634","crate_version":"1.4.0","includes_private":false,"index":{"1:12025:29025":{"id":"1:12025:29025","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11904:1493"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12109:31354":{"id":"1:12109:31354","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12090:1831":{"id":"1:12090:1831","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11715:3188","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11887:419","str::matches":"1:12090:1831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43535:3222","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12084:31345":{"id":"1:12084:31345","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41368:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12015:2106":{"id":"1:12015:2106","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12119:29060":{"id":"1:12119:29060","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12017:31337":{"id":"1:12017:31337","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12113:31356":{"id":"1:12113:31356","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5382":{"id":"5:5382","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5383:32013","5:5384:2869","5:5387:32014","5:5390:32015","5:5398:32016","5:5399:32017","5:5400:3020","5:5401:28472","5:5402:28471"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12019:31338":{"id":"1:12019:31338","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12017:31337"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5398:32016":{"id":"5:5398:32016","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12040:23581":{"id":"1:12040:23581","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43317:3214","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12081:29058":{"id":"1:12081:29058","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11887:419","str::splitn":"1:12078:29056","self::pattern":"1:11715:3188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43453:3141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12041:22538":{"id":"1:12041:22538","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12042:22548"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43605:3218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12049:28592":{"id":"1:12049:28592","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12022:28418":{"id":"1:12022:28418","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11282:3208"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12137:28469":{"id":"1:12137:28469","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12069:29054":{"id":"1:12069:29054","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11715:3188","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11887:419","str::split":"1:12063:28088"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43349:3147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12024:314":{"id":"1:12024:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12025:29025","`u8`":"4:11904:1493"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12087:31346":{"id":"1:12087:31346","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41368:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12034:31340":{"id":"1:12034:31340","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11893:1395","str::slice_mut_unchecked":"1:12035:31341","crate::ops::Index":"1:2978:2018"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12046:23495":{"id":"1:12046:23495","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12108:31353":{"id":"1:12108:31353","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12035:31341":{"id":"1:12035:31341","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11893:1395","crate::ops::IndexMut":"1:2982:2019","str::slice_unchecked":"1:12034:31340"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12055:2147":{"id":"1:12055:2147","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41370:179","prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41368:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:28474":{"id":"1:12135:28474","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12138:31361":{"id":"1:12138:31361","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4538:31361"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43630:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12038:22520":{"id":"1:12038:22520","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11887:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43301:3216","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12116:27589":{"id":"1:12116:27589","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12099:31349":{"id":"1:12099:31349","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11715:3188","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11887:419","str::match_indices":"1:12096:31348"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43499:3225","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12052:28594":{"id":"1:12052:28594","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1640":{"id":"0:29:1640","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"5:5402:28471":{"id":"5:5402:28471","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12137:28469"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12066:22541":{"id":"1:12066:22541","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11538:3156","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12136:28470":{"id":"1:12136:28470","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12093:31347":{"id":"1:12093:31347","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11715:3188","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11887:419","str::matches":"1:12090:1831"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43553:3223","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12044:31342":{"id":"1:12044:31342","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43595:3219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12063:28088":{"id":"1:12063:28088","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11715:3188","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11887:419","str::split_whitespace":"1:12041:22538","str::rsplit":"1:12069:29054"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43331:3143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12013":{"id":"1:12013","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12014:811","1:12015:2106","1:12016:31336","1:12017:31337","1:12019:31338","1:12022:28418","1:12023:31339","1:12024:314","1:12025:29025","1:12026:1639","1:12028:23027","1:12030:23028","1:12032:23029","1:12034:31340","1:12035:31341","1:12036:29044","1:12037:29045","1:12038:22520","1:12039:21168","1:12040:23581","1:12041:22538","1:12042:22548","1:12043:28089","1:12044:31342","1:12045:22523","1:12046:23495","1:12049:28592","1:12052:28594","1:12055:2147","1:12059:2105","1:12063:28088","1:12066:22541","1:12069:29054","1:12072:31343","1:12075:31344","1:12078:29056","1:12081:29058","1:12084:31345","1:12087:31346","1:12090:1831","1:12093:31347","1:12096:31348","1:12099:31349","1:12102:31350","1:12104:31351","1:12106:31352","1:12108:31353","1:12109:31354","1:12110:31355","1:12113:31356","1:12116:27589","1:12119:29060","1:12122:31357","1:12125:31358","1:12128:31359","1:12131:31360","1:12133:28473","1:12134:28939","1:12135:28474","1:12136:28470","1:12137:28469","1:12138:31361","1:12140:2942","1:12141:31362"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12104:31351":{"id":"1:12104:31351","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12133:28473":{"id":"1:12133:28473","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5384:2869":{"id":"5:5384:2869","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12102:31350":{"id":"1:12102:31350","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12078:29056":{"id":"1:12078:29056","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188","str::rsplitn":"1:12081:29058"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43435:3145","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12072:31343":{"id":"1:12072:31343","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11715:3188","str::split":"1:12063:28088","prim@char":"4:11887:419","`DoubleEndedIterator`":"1:7243:121","str::rsplit_terminator":"1:12075:31344"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43381:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12128:31359":{"id":"1:12128:31359","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5383:32013":{"id":"5:5383:32013","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1935","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:8697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:280:1935","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:8697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12140:2942":{"id":"1:12140:2942","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4539:2942"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43639:2943","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1641":{"id":"0:31:1641","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5401:28472":{"id":"5:5401:28472","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12136:28470"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1634":{"id":"0:28:1634","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12042:22548":{"id":"1:12042:22548","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12041:22538"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43614:3227","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12134:28939":{"id":"1:12134:28939","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39526:20879","Self::is_ascii":"1:12133:28473"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39526:20879","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12032:23029":{"id":"1:12032:23029","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12131:31360":{"id":"1:12131:31360","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11676:127","`FromStr`":"1:11675:2718"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41512:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11675:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11675:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12026:1639":{"id":"1:12026:1639","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41370:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5387:32014":{"id":"5:5387:32014","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12037:29045":{"id":"1:12037:29045","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12036:29044"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12039:21168":{"id":"1:12039:21168","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11887:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43307:3215","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12110:31355":{"id":"1:12110:31355","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11740:3203","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12106:31352":{"id":"1:12106:31352","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12125:31358":{"id":"1:12125:31358","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12141:31362":{"id":"1:12141:31362","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4536:31362"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43648:2963","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5399:32017":{"id":"5:5399:32017","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:280:1935","`String`":"5:7255:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:280:1935","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7004:8697","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12045:22523":{"id":"1:12045:22523","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43623:3226","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12028:23027":{"id":"1:12028:23027","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41370:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41368:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12023:31339":{"id":"1:12023:31339","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1634":{"id":"0:0:1634","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1640","0:31:1641","0:28:1634"],"is_stripped":false}}},"1:12016:31336":{"id":"1:12016:31336","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12030:23028":{"id":"1:12030:23028","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9816:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12043:28089":{"id":"1:12043:28089","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43585:3217","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12059:2105":{"id":"1:12059:2105","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41370:179","prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41368:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5390:32015":{"id":"5:5390:32015","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12014:811":{"id":"1:12014:811","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11887:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12096:31348":{"id":"1:12096:31348","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11715:3188","`DoubleEndedIterator`":"1:7243:121","prim@char":"4:11887:419","str::rmatch_indices":"1:12099:31349"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43481:3224","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5400:3020":{"id":"5:5400:3020","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12075:31344":{"id":"1:12075:31344","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11715:3188","str::split":"1:12063:28088","prim@char":"4:11887:419","str::split_terminator":"1:12072:31343"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43399:3220","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12122:31357":{"id":"1:12122:31357","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11887:419","self::pattern":"1:11715:3188"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11720:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11735:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12036:29044":{"id":"1:12036:29044","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12037:29045"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:20563:23118":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12158:19226":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:6446:2401":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:11715:3188":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:11903:740":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"16:4932:15498":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:5862:13587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:4682:8844":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:21717:23850":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:8102:8765":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"1:44078:3194":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6728:15795":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:10989:15947":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10039:16050":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:3749:14867":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:10712:16148":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:5935:13591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"9:421:14629":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:2840:2014":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10505:16139":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5071:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:21977:2726":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:30040:2685":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:1454:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:11858:8662":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:11034:3257":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:9380:15958":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2919:1930":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:44086:3257":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:7570:8766":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"1:2777:1999":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:8072:15839":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:6254:15772":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7626:15825":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:62:9058":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4813:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:1895:8734":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:20593:23333":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:42887:20555":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4318:12880":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11299:18697":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"0:28:1634":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"17:13309:19988":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:9512:15973":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:40433:3055":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"4:7527:2487":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:7859:15836":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:11391:18702":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"4:8468:8922":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"17:13053:19970":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5630:15749":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:6865:28073":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:40289:3045":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:2504:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:1614:10356":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:1546:10349":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3154:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:8947:27510":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:5908:2430":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:21878:20948":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:40692:3024":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:8967:15808":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:3782:14876":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:8651:14793":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5717:13518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:47504:8321":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10052:16072":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10967:15946":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:20578:23334":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10670:16135":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:7258:14393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:8081:8808":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"5:2407:2629":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:574:34437":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:2704:1956":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"9:481:14626":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12072:19220":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"4:2868:128":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"16:3899:14921":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:863:2409":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:5022:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:5693:1978":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:3679:8819":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:39315:2917":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:2476:8794":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:11467:28005":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1635:2852":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:3986:8832":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:638:8658":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:40461:3057":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:41217:3066":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10465:16110":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:9188:34418":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:3874:8825":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:30271:2875":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"4:8133:3055":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:11911:1124":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:1628:588":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:857:2635":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11258:18695":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"4:11869:28004":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:3448:30469":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:7544:13112":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:45893:20972":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:1612:2401":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:1688:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12006:19215":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"11:1035:8683":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4423:12889":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:4398:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:45496:8390":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:43210:3150":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6814:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:47410:8315":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:46232:8351":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:3030:14852":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11891:19209":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:4827:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:4540:15394":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:46420:8418":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:1873:8689":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:40095:3010":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13257:19985":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:6587:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:12504:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:12536:19250":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:6367:2111":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:39526:20879":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"4:11904:1493":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"1:40700:3026":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"4:10691:130":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:22391:2723":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:2510:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:46074:8391":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:2742:2833":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:3775:2401":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:5439:8934":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"4:8318:8903":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:11786:3235":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:10313:8937":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"14:165:14755":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:39276:2021":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:42687:24171":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:5642:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:2694:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"10:0:1858":{"crate_id":10,"path":["adler"],"kind":"module"},"6:4553:12905":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:4389:1952":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"16:6819:15798":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"15:198:14773":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:21786:24561":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"11:1144:8684":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10257:16057":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:5563:2472":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:45764:8424":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:1768:610":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:44062:3197":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:45740:8423":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2789:2004":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:10711:2647":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:43909:3249":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11585:18716":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"4:1924:8735":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:9409:15959":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:7538:13111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13332:19991":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:7594:3028":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10857:15941":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11879:19208":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:55:14792":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"16:2572:14835":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:5886:15760":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2808:14845":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"0:31:1641":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"17:2933:16054":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:1519:10345":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:4288:12877":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:4680:8843":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:6409:1987":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13443:20002":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:768:2390":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:2844:2015":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:7598:3029":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:2908:1959":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:6740:2444":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:7790:8757":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:6553:10284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:4124:8858":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"0:0:1634":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:40341:3049":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:45296:8349":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:8799:2111":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:482:9430":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"4:7785:8760":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:7449:15813":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:5798:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:11893:1395":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"1:44308:3285":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:30301:20913":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:9964:2634":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:11836:27145":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:8025:15837":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:653:9492":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:4890:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:4911:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"4:8837:8949":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12607:19255":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4952:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"4:7941:8797":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:564:20073":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:6765:2458":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12098:19222":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:47425:8316":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4294:12878":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9627:2522":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:6605:8894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:8263:8894":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:0:1865":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9148:34414":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:731:142":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:2386:1869":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:9154:3107":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"16:4400:15350":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:4073:28283":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:40412:3054":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:8823:15925":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"4:5021:27529":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6848:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:1650:10358":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:8389:15915":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6061:14796":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13240:19983":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"9:0:1857":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13639:20014":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:5032:15526":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:21664:23848":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:12385:3282":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:9145:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:43289:3212":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:4818:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:40270:3043":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:8426:8921":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"16:7519:15819":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:2906:30886":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11740:3203":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:502:14630":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:6248:2425":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:2467:8766":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:8931:15895":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:6890:15801":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:7696:25470":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"4:11448:8969":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:13763:20023":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:42872:3185":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"16:5386:14793":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:7209:23854":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:44247:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:11907:1492":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:11687:2502":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:6482:1983":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"4:9374:129":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:488:9431":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:11615:18718":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:361:8652":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:9120:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12224:19229":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:7095:2111":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8841:23279":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:6236:206":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:13385:19996":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:21331:8332":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:11422:18704":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:7352:2447":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12449:19244":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:47230:8419":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:4047:2635":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:8521:15919":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"9:445:14627":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:44265:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4499:12899":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:47451:8318":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11459:18707":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10428:16137":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:10316:16053":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:8256:15892":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:5847:15759":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:1555:10350":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10440:16138":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:3128:30653":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:211:2399":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11502:18710":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:46570:8352":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:41486:2088":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:5920:15761":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:2739:1929":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:10555:16105":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9683:15991":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:20840:8340":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:13367:19994":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:7103:2111":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:9796:15993":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:4207:2634":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:6552:1989":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:47314:8404":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:4254:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:5816:13585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10354:16060":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:0:1863":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8170:15845":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:46120:8397":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:562:9440":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:7205:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:1080:8684":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"4:11902:744":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:45403:8422":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:44082:3195":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:7589:8643":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"5:2908:30881":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:4785:26939":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:113:20046":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5557:15745":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:39944:2970":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:10050:27565":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"4:1071:8683":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4377:12884":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"4:936:8679":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:9408:3123":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:10651:28273":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:20535:2907":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:11282:18696":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:757:2425":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12592:19254":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:46918:8358":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"4:5719:1979":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:8225:8853":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:8142:15843":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:3640:14859":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:7470:27520":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"4:1846:2645":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:1665:1087":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:4764:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:10569:16107":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:11071:27083":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:43381:3221":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:9478:15980":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:1242:8684":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:40644:3017":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:6009:2474":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:42472:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"5:5818:1975":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:652:2635":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"4:10656:8757":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:41177:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:7266:1933":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"4:4902:8899":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"1:43109:3140":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11573:18715":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"5:35:2397":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:11002:8938":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:7103:15808":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4439:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:1745:20904":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:43831:3246":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:40031:2965":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:7555:13113":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1197:8682":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:12563:19252":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:5712:2425":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:10846:27560":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:7004:8697":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:11014:8939":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:744:8674":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:46310:8357":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:1062:2623":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:2636:31202":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:8253:2090":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:4577:28269":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:2337:14825":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:6047:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:9959:16043":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:736:20058":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"4:6188:2472":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:3231:1960":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:22358:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9696:15977":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:2513:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:3207:8805":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:4144:1963":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:3815:14885":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:585:8654":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:40682:2512":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"14:202:8998":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:11897:642":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"6:4784:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4509:12900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:5686:1977":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:9184:2251":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:6442:15784":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:816:8675":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"15:180:14772":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:41354:3071":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:5708:15754":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:8360:15914":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:6724:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"4:11900:742":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"4:5910:2472":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:42134:3106":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:45916:20955":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6545:9480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:7578:14582":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4527:12902":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:10834:8934":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:9641:15981":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5843:13547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:6373:1981":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"4:3457:8764":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"17:10026:16092":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:10289:3142":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13376:19995":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:4605:2956":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:2895:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:45596:8350":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:5947:13592":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4836:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:4478:12896":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1422:8675":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:2616:14837":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:3673:2636":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:1947:15988":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:40050:2967":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:901:2425":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:43197:3152":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:680:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:1728:10366":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:13564:20011":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6136:13630":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:1622:10357":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:11144:2496":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:21770:20911":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6981:15805":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:45348:8361":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:41319:3069":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:11600:18717":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"4:7820:130":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:7692:8724":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"11:2192:33259":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:1071:33249":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9557:15932":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"4:11194:27140":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10092:16095":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10743:15936":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10761:15937":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:1532:10347":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:3872:14918":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:20937:8326":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:21087:8327":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11163:16155":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"18:538:20072":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:1588:10353":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:43219:2665":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:3150:8689":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13426:20000":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:45195:8384":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11136:16154":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:42640:24556":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:7238:8738":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:22523:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:41685:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:13721:20021":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:6598:2452":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:40280:3044":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:43715:3241":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:481:20068":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:399:33252":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:7321:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:4255:8860":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:4167:2430":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:10452:16111":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"4:3676:8820":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:3166:2027":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:40398:3053":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"4:2866:210":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"1:20548:23118":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:47489:8320":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:2755:2001":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:5741:15756":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6488:15787":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"4:7845:27568":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4821:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:12046:19218":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:9068:34415":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:6717:14769":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:3938:8829":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11813:16099":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4851:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:690:20063":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:20989:8330":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"4:3169:8804":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11861:19207":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:2905:2173":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:7485:13103":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:5320:8929":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:12461:19245":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:2546:14834":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:2310:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:3932:8828":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"4:8954:27164":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:8667:14791":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:11729:3205":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:501:2418":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:2765:1997":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:355:8651":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:3276:2390":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:45117:8388":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"4:7669:8686":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:1914:2660":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12358:19238":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:7437:15812":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:40200:3032":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:4492:12898":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:8074:3016":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:3998:22621":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:1716:2390":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:6771:3013":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:3934:2430":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:1692:10362":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2601:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:633:30894":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:7044:30895":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:532:9436":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"4:1844:2251":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"5:7074:30797":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:1314:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:39049:2030":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"14:221:14764":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:2214:8741":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"16:7767:15833":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:7164:3031":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10823:15939":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10247:3145":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2149:589":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:44058:3198":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9866:16007":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:10013:3143":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:42432:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10798:15938":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"18:699:20064":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"4:2831:2469":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10125:16071":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:5811:15758":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"11:1634:2395":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:609:34454":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:21802:20888":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:44338:3290":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:6588:2119":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:12600:3287":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6327:15776":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:10930:2493":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:42367:20940":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:42632:3126":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:4399:2433":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:5354:8931":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"16:7016:33652":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:7066:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10660:15949":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12634:19256":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9350:34421":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:45225:8389":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12980:19965":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10626:16143":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:10168:3147":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:46386:8369":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9617:15969":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:4865:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:4641:8864":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:39308:2024":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:11307:2498":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:494:9432":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:3149:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9453:15962":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:1539:10348":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:12333:26351":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:11090:8952":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:40076:2962":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:2060:8682":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2689:1928":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:6696:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"4:7664:8685":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"5:7195:8739":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:9826:15987":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11471:18708":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:652:34437":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:7201:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:2361:8749":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:4990:27529":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:43118:3139":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:43623:3226":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:8285:8842":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:7797:8761":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"17:8632:15893":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:8443:15917":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:10415:8803":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:43453:3141":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:4258:1943":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"11:1091:2625":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1228:2623":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9218:15932":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:40350:3036":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:9886:16014":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:6608:2454":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4698:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"8:0:1856":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6935:15803":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:4186:1769":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:13667:20017":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:9839:15986":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:40447:3056":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:917:8675":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:41845:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:2736:2919":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:6706:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:1443:8677":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:6876:15800":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:9946:16015":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"19:0:1031":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:3753:2390":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:43553:3223":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:6821:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:1754:2657":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:10208:8933":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:39232:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:5944:15762":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:8090:2647":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:6907:2483":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:5556:206":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:6558:15791":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"5:7255:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:1404:8673":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:10206:3148":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:8214:8861":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13461:20004":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:1783:8705":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"6:4797:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4991:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12085:19221":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:3225:14855":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:587:9444":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:47527:8322":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7335:33710":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:4678:8840":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:39332:15847":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"16:3585:14858":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:6236:15771":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:2204:33258":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"4:3439:2975":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:11908:1489":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:11193:16156":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12059:19219":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4845:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12282:19232":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:2189:30860":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9822:16000":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6151:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5959:13593":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"12:0:1860":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:506:9434":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:47474:8319":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"4:8241:8863":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:43737:3242":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:47566:8323":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:9670:15992":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:45450:8325":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:47370:8311":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10334:15932":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13659:20016":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13842:20029":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:44054:3196":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:386:15909":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5032:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12646:19257":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:4960:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:9162:3110":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:2905:14849":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:8953:15927":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6919:33597":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"11:828:8679":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:6598:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5058:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:4688:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:21560:8329":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:636:34440":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:7269:8999":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:11899:745":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"1:2797:2005":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:42657:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:9933:16017":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:21106:8766":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:7529:15820":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:42148:3109":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:45141:8348":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:13181:19978":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:1736:10367":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2524:14833":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:4573:28265":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:41645:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:6691:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:676:2643":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"4:6085:2476":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5995:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:10864:8940":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"4:7459:15911":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10635:16134":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"9:174:14730":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11735:3204":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:0:1864":{"crate_id":17,"path":["object"],"kind":"module"},"1:39353:2938":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:531:20071":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6002:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:12259:19231":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12622:15949":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:10649:16144":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:5485:2440":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:10646:27412":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12293:19233":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:491:34430":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:43630:2964":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:41885:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"4:413:165":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:11906:1491":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:6578:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4335:1950":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:4844:8889":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:13356:19993":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:6390:15781":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:8256:15848":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:11282:3208":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:41200:3065":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:7936:27162":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"16:7543:15821":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:9816:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:42377:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:10527:16140":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"11:2219:8671":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4404:12887":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:21442:23121":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"4:2210:2459":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"6:4416:12888":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:1982:185":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:1034:15979":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11372:18701":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"13:110:33309":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:45694:8368":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:7615:2491":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"4:11053:8770":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:4480:15382":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3139:2023":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:40180:3008":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"18:96:20045":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:7557:15822":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:9566:15933":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:0:816":{"crate_id":6,"path":["libc"],"kind":"module"},"11:1126:14746":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"4:9119:28013":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:43648:2963":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:5834:2639":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:526:9435":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:8195:15894":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:9917:16039":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:10807:3155":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:43481:3224":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:44138:3259":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:2929:1777":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"4:11392:8821":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13219:19981":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:41306:3068":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:44066:3201":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2926:1932":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:43239:2666":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"4:6101:2479":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:3781:8821":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:10705:16147":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:247:34411":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:10491:16108":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:46776:8386":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:11909:789":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"16:5367:14795":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"4:3400:2646":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:44350:3288":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:40057:2968":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"11:867:8681":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:11499:14781":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:10941:2494":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:21899:21028":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:12835:19959":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:959:8681":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:46150:8403":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:45642:8356":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:4010:22620":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:6776:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:7594:8645":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"5:2169:31304":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4590:12908":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"4:5926:206":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:3129:30918":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12522:19249":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:4327:8854":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"4:11892:1365":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:10516:16104":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:8259:8892":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"4:7837:119":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2848:2016":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4392:12886":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:11503:3232":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:1715:10365":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"4:7658:8661":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:9721:15990":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5829:13546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:13101:19956":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13344:19992":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:40382:3052":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:2642:14838":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:4757:15467":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:4875:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:6243:33744":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"4:6133:27168":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:681:20062":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:7225:8737":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12894:19960":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:20767:23699":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:7532:13110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6800:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:22490:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"11:859:8680":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:43399:3220":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:5655:15751":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:11832:16098":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:39956:20750":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:41342:3070":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"4:8805:8948":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4773:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11410:18703":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:4736:2470":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:3379:2915":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"6:1721:8850":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:4882:1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12923:19963":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:43752:3243":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4920:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:47379:8312":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:4728:15462":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11770:19203":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:521:20067":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:8683:15897":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10885:15942":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11109:15952":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:6008:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11544:18713":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:43331:3143":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:4641:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:3131:27991":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:7588:15823":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:5990:3059":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:8207:3069":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"4:3910:8826":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4898:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6569:9314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"4:2343:2877":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"4:3972:8830":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:2502:14832":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4609:12909":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:6022:15766":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:20878:2886":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:40229:3041":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:8959:27166":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4380:1951":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12331:19236":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:40260:3042":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:9469:15963":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10142:16096":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:21826:2721":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13145:19975":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:20595:23329":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:5963:15763":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:1463:8693":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:3641:2111":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:45548:8402":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:11888:1509":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:39986:2971":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12576:19253":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:562:15911":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11653:18721":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"16:7488:15816":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11821:16097":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:7757:15832":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:13516:20010":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:6685:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:1048:8682":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"9:234:8919":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13316:19989":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:2161:2887":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:39190:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:7508:2485":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4743:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:9150:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"4:4103:8856":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12483:19246":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"4:1821:8716":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"1:22226:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:1787:15994":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:4559:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:21861:20926":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:30863:2907":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:43317:3214":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:21003:8331":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:7443:14553":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:10377:16058":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:6293:15773":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4941:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"4:1565:2111":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:2262:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:42423:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:4845:15483":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:2750:1996":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:39135:2020":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:43229:3151":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:12126:19224":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:5383:2430":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:8747:8938":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6755:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:8140:3214":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"16:5797:33482":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"4:11894:1475":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"17:9498:15977":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:1078:31312":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:10580:16141":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:21082:8766":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9108:34422":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:3167:8803":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6520:15789":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:2786:14844":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:665:2111":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:6506:15788":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:13411:19998":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:3534:2634":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:595:9445":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:671:20061":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:43301:3216":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:42395:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:4970:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:46356:8363":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:3924:8827":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10416:16136":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9876:16041":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7042:33422":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7019:8691":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10721:16112":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"4:10225:2651":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4653:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6904:15802":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7711:15830":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"4:618:8655":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:4325:1949":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6132:15767":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:8180:15846":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:20908:8341":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13499:20008":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:11236:28249":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:13194:19979":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:515:20070":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:535:33590":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10283:16056":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:5571:15746":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:9110:2975":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"17:11946:19212":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:40107:23854":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"11:2076:2623":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5900:13590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4932:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"4:7256:27163":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"7:0:1537":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:8283:15912":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6024:32699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6830:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1594:10354":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:7214:1934":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"4:4638:8891":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:4818:15480":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:13651:20015":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"4:1785:8706":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:12360:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2240:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5785:13582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"4:11901:743":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"1:3314:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:4005:2401":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:1731:2903":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6854:15799":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12318:19235":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4431:12890":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:11898:643":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:45366:8367":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"4:10947:2495":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:10735:16149":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:13678:20018":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:13033:19968":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:8775:8940":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"16:6321:15775":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:10821:8724":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:3975:2425":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:875:8673":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:43147:2664":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:44070:3199":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:45071:8347":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:1700:10363":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"9:325:14682":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:7293:15809":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:2573:8787":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:39254:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:305:33250":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:10825:27435":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:3047:14853":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:8420:15916":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11993:19214":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:8165:8817":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:40024:2964":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:660:20060":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9098:15929":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6696:15794":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:6201:15769":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:2967:14851":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:3194:1958":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:11427:3231":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:21558:8766":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:5880:13589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10478:16109":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11785:19204":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:1995:2638":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12194:19228":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:9322:34404":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:44300:3284":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:2978:2018":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"11:60:33256":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:7178:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9365:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:9028:15928":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11339:18699":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:689:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9853:16040":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5724:15755":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:22556:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4371:12883":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:579:9443":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:7244:33702":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6376:15780":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:2830:2012":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:119:9112":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:41444:2111":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:2682:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"5:280:1935":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6361:15779":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:2923:1931":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:6724:22551":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:599:34433":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:43895:3248":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:9275:34405":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:507:34437":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:2359:8748":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:2742:14842":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4037:15035":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:6307:15774":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12902:19961":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:9178:15931":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:5000:15518":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:41571:2111":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:41725:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:7478:15815":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:2699:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"16:4327:15301":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:32059:2914":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:47168:8398":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:43435:3145":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:3521:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:8129:15842":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:635:8657":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"4:3354:2430":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:12515:2476":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:8729:8937":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"1:43605:3218":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:4969:15511":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:5589:3035":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4449:12892":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12433:19243":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:11720:3202":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:45326:8355":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:43920:3250":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"11:1843:2111":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:6057:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:1564:10351":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:13803:20026":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:21915:20945":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:7931:27594":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:22259:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:7676:8723":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"17:10068:16093":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4667:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:41436:2635":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:6294:2401":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11675:2718":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:13024:19967":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"4:11853:27173":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6400:15782":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:2862:14847":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:2159:2886":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"4:530:2461":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"17:13433:20001":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:22325:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:10421:8801":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"4:6586:217":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:7335:2390":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"11:1561:14748":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7635:15826":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:44105:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:10095:3144":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:1682:10361":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:42450:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"5:6097:8956":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5015:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:21:681":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:1432:8676":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:1609:10355":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:11891:312":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"1:41925:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"15:0:1862":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:20921:8766":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:41805:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:4702:15460":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10270:16055":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:43595:3219":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:45163:8354":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:6579:2440":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:3248:8802":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:10303:16052":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:4113:1962":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9534:15971":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:48:1548":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"14:31:14754":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:39150:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:326:2386":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:9612:2464":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2346:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:41563:2635":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"16:5305:15727":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:614:34452":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:40330:3058":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:5976:15764":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:3184:8690":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:8791:8951":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"4:11912:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"9:52:14646":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:5179:190":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"17:8718:15898":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"4:6332:27541":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:8788:15924":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7837:15835":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:2468:2684":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2802:2010":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6351:15778":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10000:16090":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:2345:8744":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:39996:2972":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13233:19982":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:2378:14827":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2587:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:45051:8382":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:9748:15932":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:5502:8936":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"1:47352:8425":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:1919:16028":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:21430:3137":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4719:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:755:20066":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:2116:30837":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:40090:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:1577:8687":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:2785:2006":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:6544:15790":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:21944:24558":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"0:29:1640":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"13:226:33262":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:4095:8855":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:20983:8328":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:43158:3153":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:4344:12882":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:4111:8857":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:20759:8333":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:2819:2009":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:11167:8943":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:40123:3009":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:7252:14392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:766:20059":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"4:7571:8653":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12019:19216":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:3622:2401":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9545:15970":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:47276:8370":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4466:12894":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:4409:1953":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13791:20025":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:643:8659":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4331:12881":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13453:20003":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:11460:27592":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:2916:30883":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:8981:27494":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:4681:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9986:16044":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:1908:10511":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"5:4137:2430":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:7317:33733":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4707:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12033:19217":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:4413:8864":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:43963:3207":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:11060:15949":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:821:8678":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:44126:3258":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:11161:27182":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:13082:19972":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:9424:15960":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:2809:2007":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:20769:2886":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11220:16157":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"4:8409:8920":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:10015:16091":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:2692:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:154:2380":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"4:3614:8816":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13211:19980":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:8214:15847":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2960:2028":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:3547:2635":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:41504:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"16:6535:2383":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:8490:15918":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:41965:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11520:18711":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"4:4435:8865":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:30287:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:3209:8806":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:1752:10368":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6651:10285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:4445:15371":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:2357:14826":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5693:15753":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:2793:2003":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9138:15930":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6336:15777":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:44050:3193":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:21115:8331":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:45996:8385":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:6460:15785":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:7807:8758":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:39210:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11628:18719":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:11209:27129":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6110:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:731:8673":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:3117:2634":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:6757:8955":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:45815:20910":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:3179:23117":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4538:12903":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4803:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:12298:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:45862:20903":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:13879:20032":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:2298:14797":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5616:15748":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"4:10137:8942":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9734:15989":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:590:24573":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:22292:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13506:20009":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:7635:23321":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:12545:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13292:19987":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:45247:8395":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"14:7:14754":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:3382:8763":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"1:41605:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"14:215:14763":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:1879:8690":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:11252:3134":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:11355:18700":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:5773:13580":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:4914:2430":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9373:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:6296:166":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:8979:34408":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"4:1985:184":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:42648:3125":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:32019:2912":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:4022:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:45672:8362":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:40137:2984":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"4:4563:8829":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6700:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12403:19241":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:780:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"11:1540:2627":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"4:8853:8947":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:40422:3038":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:3142:16059":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:43275:3213":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:7411:15811":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:8310:15913":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:21113:8335":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11090:15951":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6164:33678":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:30835:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:8869:8950":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"4:1594:8690":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:7366:15810":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:1657:10359":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12915:19962":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6431:15783":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:4366:2430":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:10418:8805":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:1213:8683":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2352:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:40170:2506":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:2982:2019":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:2087:30908":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:3300:14856":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:13777:20024":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:5235:8992":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5809:13584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:6485:1984":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:8824:8946":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:7259:2087":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:2720:14841":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:2404:14828":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11484:18709":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:1351:2634":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:9386:2489":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6943:15804":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:30465:20721":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:5247:120":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"16:5643:15750":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:7028:2425":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11434:18705":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"18:80:20044":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13399:19997":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:45526:8396":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4790:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13821:20028":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:13419:19999":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:7503:13106":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:44257:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11037:15948":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:41419:2110":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:4521:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:554:9439":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"4:5370:8932":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:41580:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:8386:8919":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"5:3688:2638":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2520:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:40658:1772":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:7861:2636":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:3163:30903":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:8109:15841":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13612:20012":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:9595:2517":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:922:8676":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:638:2634":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:41263:20941":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4857:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:11011:15896":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:1583:8688":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:5779:15757":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12113:19223":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:43930:3251":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:7243:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"4:8911:107":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:43349:3147":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:242:34420":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12236:19230":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:20803:8339":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:624:34429":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:47106:8364":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"4:5570:2473":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:9158:3109":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:4629:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3076:2022":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:719:20057":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"4:8761:8939":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:2764:14843":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:7029:33667":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:11371:8819":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"4:10461:2491":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"4:8123:3041":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"17:9577:15976":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:1576:10352":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6628:10311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:12345:19237":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11902:19210":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10897:15943":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:10261:3141":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"11:1847:2425":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"4:3246:8801":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:11242:27595":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:947:2619":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:40321:3048":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"13:0:1855":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:6016:13600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7572:33631":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:5035:1975":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7596:15824":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:9038:34423":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12959:19964":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"4:8233:8818":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:20868:8334":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:40373:3051":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:11886:936":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:10000:2650":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:2694:14840":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:9413:3124":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:1589:8689":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:1852:2390":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"7:79:14605":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:41428:2634":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"16:4624:15406":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:9895:16013":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:8858:15926":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"4:7643:8660":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:2912:30882":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:40016:2943":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:11464:3233":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:8159:8818":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:7497:13105":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:888:8674":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:43535:3222":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:953:8680":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12388:19240":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:5418:33658":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13041:19969":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:2448:14830":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:43127:2662":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11844:19206":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"4:911:2390":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"4:2207:8740":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"1:30359:20894":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:11234:18694":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"4:11492:14781":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"11:991:8682":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:39346:1950":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:8678:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:6668:10288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:7520:13108":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:30265:2874":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:7168:3030":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:4321:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13169:19977":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10545:15947":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"4:1572:2390":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:42891:3161":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4383:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"9:388:14628":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:10133:3157":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:30231:2873":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:21336:8342":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:13135:19974":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:13324:19990":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:45385:8416":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:4307:12879":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"1:43943:3206":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:9160:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13066:19971":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2315:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"16:8047:15838":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"11:2087:8683":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:6575:15792":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:47390:8313":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:4853:8890":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:39088:2029":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7077:15807":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10681:16145":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:9907:16042":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:41234:3067":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:40651:22524":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"4:4575:28267":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:975:15975":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"4:3880:8824":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:13698:20020":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:1525:10346":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"4:1561:2634":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"4:930:8678":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:39935:2947":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:8478:2634":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"17:8598:15922":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10615:16133":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:8336:8918":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"16:2668:14839":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:5798:13583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13159:19976":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"4:11026:28037":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7498:15817":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:2693:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:9298:25471":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:7591:2944":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:42407:21023":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:2781:2002":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11969:19213":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:42669:8919":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:39166:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:4757:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:9265:15933":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:7491:13104":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:2319:14824":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:43639:2943":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:40673:3021":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4726:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:4904:15494":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2243:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:41765:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:644:34437":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:22424:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:8170:8815":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"1:6677:3040":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11319:18698":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11268:3136":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:9097:27544":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:5104:15550":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"4:7015:28280":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:39929:2943":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:1709:10364":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5065:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6662:15793":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:4811:795":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:11487:3230":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5747:13578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"11:2212:33260":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:20981:8766":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"4:4759:8839":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:707:3205":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:43585:3217":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:2824:2011":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10691:16146":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:2744:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5755:13579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:815:2407":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"14:0:1861":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:10056:3156":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:43499:3225":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:9529:2514":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"3:0:1852":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"16:7065:33656":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4999:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:8254:2089":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13265:19986":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13488:20007":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:9806:8766":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:7275:14394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6179:15768":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:7280:9000":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:7669:15827":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:44074:3200":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:2931:14850":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:8909:3214":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:43766:3244":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:9037:219":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:41512:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"4:9981:8716":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:9653:16006":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:359:2388":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:4436:1954":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:3324:3021":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"1:4263:1944":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:9156:3108":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6767:15796":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:1668:10360":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:22457:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:43058:22533":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:32121:2922":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8673:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:1042:31311":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:11924:19211":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"4:3291:8791":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:6116:12793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"4:8924:27479":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:3446:14857":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"11:840:2619":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5402:14791":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:9027:167":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7683:15828":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:487:15910":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:8090:15840":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:880:2634":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:1819:1961":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:41283:23828":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:5191:2401":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"4:9032:218":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:9488:15978":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:582:2907":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"4:554:2642":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:25846:2720":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:43614:3227":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2507:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:21965:2722":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9596:15974":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:40242:2653":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:8548:15920":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:3059:8809":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"4:10356:2490":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:11330:8820":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12419:19242":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:5346:15744":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:963:2401":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6990:15806":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:7509:13107":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:10701:119":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:10721:28040":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"4:9877:23825":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:6369:1772":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"10:36:33247":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"4:7853:8795":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:9228:34402":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12770:19957":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:11538:3156":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:7162:8672":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10080:16094":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"10:44:14735":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:4510:15388":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11641:18720":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8252:2091":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7150:8671":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:7058:2111":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:40220:3033":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11721:19202":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:1014:1771":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:3367:2916":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:21951:2725":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"4:4175:8859":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:10669:27418":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:43783:3245":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:6538:1988":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"11:393:33255":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:40667:3019":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13477:20006":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:9340:15935":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:480:2460":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:1413:8674":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12307:19234":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7697:15829":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13812:20027":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:0:1387":{"crate_id":4,"path":["std"],"kind":"module"},"15:219:14777":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:2516:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:20576:23331":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:21853:20946":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:47399:8314":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"4:8495:8924":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:420:14799":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11532:18712":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:20741:8337":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:2760:1998":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:11885:371":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"11:279:2616":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:6180:2444":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:2077:2418":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"7:32:14598":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:3507:2425":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:3088:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13015:19966":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:21838:23846":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:573:9442":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:23036:2719":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:44321:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:3134:27990":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:11224:27127":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:44363:24567":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:3464:8785":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:8484:8923":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"11:783:2394":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6868:33699":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:40251:3034":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:2205:129":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"6:7230:9390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:41453:2087":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"16:7803:15834":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4459:12893":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10923:15944":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:541:9437":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10840:15940":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:40008:2963":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:5334:8930":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"1:2853:2017":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:3160:2025":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:10104:16051":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11069:15950":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:40312:3047":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:123:9113":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"4:2549:2464":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:783:2404":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:40363:3050":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:7036:2413":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:9164:3111":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8846:25744":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5779:13581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4546:12904":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11800:19205":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:8892:1980":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:4789:15475":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:5870:13588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4472:12895":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5967:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:1978:16012":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:3063:14854":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:5239:8993":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11941:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13625:20013":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:2198:23137":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:500:9433":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"16:2426:14829":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:2836:2013":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:867:2111":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:7526:13109":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:2690:1957":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:39972:2969":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:6785:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"4:8917:8639":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4751:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13469:20005":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:11890:1049":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"1:43858:3247":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"14:187:14762":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:5471:2430":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:547:9438":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:2470:14831":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:6980:1942":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2771:2000":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:1050:14745":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"4:3994:8834":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:4336:2433":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:1544:2430":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:6382:1773":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:7780:8759":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"16:2830:14846":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"11:119:2384":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:9628:15968":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:45095:8383":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:3266:16077":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12510:19248":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4980:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"11:452:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:13865:20031":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:4596:15402":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13249:19984":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:7013:2111":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:2371:8754":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"6:5051:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"4:8219:8862":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13121:19973":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:5764:1986":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:703:8677":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:3158:8687":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:1859:8687":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:45718:8417":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:49372:8345":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:2613:8796":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7743:15831":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:12550:19251":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:10627:8893":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"14:40:18696":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:1058:2628":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5077:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:265:2401":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:9973:16016":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:11905:1490":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"6:4767:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"11:1524:14747":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:4872:15486":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:4045:2946":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:40043:2966":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:2879:14848":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"11:1009:2623":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"14:160:14754":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:8906:27159":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:6621:27541":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:47028:8392":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:10589:16142":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:12799:19958":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:1366:2635":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13744:20022":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12138:19225":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:9772:15995":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:47436:8317":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"4:9002:27171":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:11556:18714":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:41495:2180":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:7568:14581":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:1568:2425":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4571:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:2746:2900":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"16:6474:15786":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:8359:3202":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:4947:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:1981:2636":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:45265:8401":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:9443:15961":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:41368:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:5857:13586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:9152:3106":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"4:8153:3217":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"17:10598:15946":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:10275:3146":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:22589:2724":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:12311:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:40298:22552":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:4568:15398":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5988:13596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:41555:2634":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"11:1839:2634":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:5531:3046":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:14:1832":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:11910:1547":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"17:12496:19247":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"11:1866:8688":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:7509:15818":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:5998:15765":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:10681:8761":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"4:9042:8952":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:11887:419":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:32055:25470":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:5067:191":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"4:844:2634":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:97:33248":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:2814:2008":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5594:15747":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:43137:3149":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:1433:144":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12372:19239":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"4:2539:2466":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:5677:15752":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13689:20019":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"4:8783:2634":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:20728:8336":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:474:9429":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"4:9061:8770":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"6:4619:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:675:8676":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:727:20065":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"4:926:8677":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:0:1859":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:12178:19227":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:8573:15921":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4486:12897":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:3124:8688":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9312:15934":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:8753:15923":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:8156:15844":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:8735:186":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"1:4:1014":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:4732:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:9988:2635":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5071:15541":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:42679:24172":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:42141:3108":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:1382:2111":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:8146:3143":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"6:1514:10344":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10936:15945":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:43307:3215":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:5385:8933":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:43184:3032":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6671:14770":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:3982:8831":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6218:15770":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"4:8046:8762":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:6793:15797":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:4507:8882":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"4:9080:8954":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:568:9441":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"4:5499:8935":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"17:10402:16124":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11446:18706":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:42127:3107":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:6920:3016":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:9381:8760":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:5974:13595":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10774:3154":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:2594:14836":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:39339:24170":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:7467:15814":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:9523:15972":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"9:352:14643":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:42005:1976":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:13857:20030":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}