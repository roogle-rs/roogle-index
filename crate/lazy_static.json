{"root":"0:0:1617","crate_version":"1.4.0","includes_private":false,"index":{"1:11926:20468":{"id":"1:11926:20468","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11399:3082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11904:30445":{"id":"1:11904:30445","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:42911:3146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11895:30444":{"id":"1:11895:30444","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:11878:1380","crate::ops::IndexMut":"1:2999:2000","str::slice_unchecked":"1:11894:30443"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5373:31114":{"id":"5:5373:31114","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1916","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:8567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1916","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:8567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11932:30446":{"id":"1:11932:30446","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11575:3116","str::split":"1:11923:27370","prim@char":"4:11872:411","`DoubleEndedIterator`":"1:7169:119","str::rsplit_terminator":"1:11935:30447"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:42697:3148","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11900:21526":{"id":"1:11900:21526","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:42633:3141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11888:21406":{"id":"1:11888:21406","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:40684:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11896:27362":{"id":"1:11896:27362","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11897:27363"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11899:20684":{"id":"1:11899:20684","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:42623:3142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11876:30439":{"id":"1:11876:30439","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11894:30443":{"id":"1:11894:30443","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:11878:1380","str::slice_mut_unchecked":"1:11895:30444","crate::ops::Index":"1:2995:1999"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:31:1624":{"id":"0:31:1624","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["lazy",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11898:20460":{"id":"1:11898:20460","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:11872:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:42617:3143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28:1617":{"id":"0:28:1617","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"},"1:11885:27343":{"id":"1:11885:27343","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11902:20500":{"id":"1:11902:20500","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11901:20482"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:42930:3154","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11912:26911":{"id":"1:11912:26911","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11988:30462":{"id":"1:11988:30462","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5392:28518":{"id":"5:5392:28518","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11996:27268"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29:1623":{"id":"0:29:1623","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:11941:27377":{"id":"1:11941:27377","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:11872:411","str::splitn":"1:11938:27375","self::pattern":"1:11575:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:42769:3067","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11966:30455":{"id":"1:11966:30455","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11883:30442":{"id":"1:11883:30442","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:31118":{"id":"5:5389:31118","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:1916","`String`":"5:7239:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1916","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6988:8567","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11892:21408":{"id":"1:11892:21408","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11999:2868":{"id":"1:11999:2868","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4522:2868"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:42955:2869","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11882:30234":{"id":"1:11882:30234","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11143:3136"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11935:30447":{"id":"1:11935:30447","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11575:3116","str::split":"1:11923:27370","prim@char":"4:11872:411","str::split_terminator":"1:11932:30446"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:42715:3147","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11976:26833":{"id":"1:11976:26833","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11905:20463":{"id":"1:11905:20463","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:42939:3153","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11877:30440":{"id":"1:11877:30440","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11890:21407":{"id":"1:11890:21407","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11873":{"id":"1:11873","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11874:802","1:11875:2088","1:11876:30439","1:11877:30440","1:11879:30441","1:11882:30234","1:11883:30442","1:11884:311","1:11885:27343","1:11886:1622","1:11888:21406","1:11890:21407","1:11892:21408","1:11894:30443","1:11895:30444","1:11896:27362","1:11897:27363","1:11898:20460","1:11899:20684","1:11900:21526","1:11901:20482","1:11902:20500","1:11903:29825","1:11904:30445","1:11905:20463","1:11906:21250","1:11909:26909","1:11912:26911","1:11915:2129","1:11919:2087","1:11923:27370","1:11926:20468","1:11929:27373","1:11932:30446","1:11935:30447","1:11938:27375","1:11941:27377","1:11944:30448","1:11947:30449","1:11950:1812","1:11953:30450","1:11956:30451","1:11959:30452","1:11962:30453","1:11964:30454","1:11966:30455","1:11968:30456","1:11969:30457","1:11970:30458","1:11973:30459","1:11976:26833","1:11979:27379","1:11982:30460","1:11985:30461","1:11988:30462","1:11991:30463","1:11993:27265","1:11994:27266","1:11995:27267","1:11996:27268","1:11997:30464","1:11999:2868","1:12000:30465"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11956:30451":{"id":"1:11956:30451","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11575:3116","`DoubleEndedIterator`":"1:7169:119","prim@char":"4:11872:411","str::rmatch_indices":"1:11959:30452"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:42797:3151","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1617":{"id":"0:0:1617","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:29:1623","0:31:1624","0:28:1617"],"is_stripped":false}},"1:11886:1622":{"id":"1:11886:1622","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:40684:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9756:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11947:30449":{"id":"1:11947:30449","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11964:30454":{"id":"1:11964:30454","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12000:30465":{"id":"1:12000:30465","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4519:30465"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:42964:2889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11901:20482":{"id":"1:11901:20482","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11902:20500"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:42921:3145","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11944:30448":{"id":"1:11944:30448","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11929:27373":{"id":"1:11929:27373","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11575:3116","`DoubleEndedIterator`":"1:7169:119","prim@char":"4:11872:411","str::split":"1:11923:27370"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:42665:3073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11969:30457":{"id":"1:11969:30457","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11997:30464":{"id":"1:11997:30464","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4521:30464"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:42946:2892","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11923:27370":{"id":"1:11923:27370","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11575:3116","`DoubleEndedIterator`":"1:7169:119","prim@char":"4:11872:411","str::split_whitespace":"1:11901:20482","str::rsplit":"1:11929:27373"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:42647:3069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11938:27375":{"id":"1:11938:27375","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116","str::rsplitn":"1:11941:27377"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:42751:3071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11915:2129":{"id":"1:11915:2129","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:40684:176","prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5377:31115":{"id":"5:5377:31115","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5390:2948":{"id":"5:5390:2948","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5372":{"id":"5:5372","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5373:31114","5:5374:2795","5:5377:31115","5:5380:31116","5:5388:31117","5:5389:31118","5:5390:2948","5:5391:28517","5:5392:28518"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11968:30456":{"id":"1:11968:30456","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11959:30452":{"id":"1:11959:30452","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11575:3116","`DoubleEndedIterator`":"1:7169:119","prim@char":"4:11872:411","str::match_indices":"1:11956:30451"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:42815:3152","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11906:21250":{"id":"1:11906:21250","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11875:2088":{"id":"1:11875:2088","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11962:30453":{"id":"1:11962:30453","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11973:30459":{"id":"1:11973:30459","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11985:30461":{"id":"1:11985:30461","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11884:311":{"id":"1:11884:311","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11885:27343","`u8`":"4:11889:1478"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11991:30463":{"id":"1:11991:30463","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11537:125","`FromStr`":"1:11536:2645"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40826:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11536:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11536:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11996:27268":{"id":"1:11996:27268","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5374:2795":{"id":"5:5374:2795","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5380:31116":{"id":"5:5380:31116","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5388:31117":{"id":"5:5388:31117","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7239:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11994:27266":{"id":"1:11994:27266","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5391:28517":{"id":"5:5391:28517","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11995:27267"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7239:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11919:2087":{"id":"1:11919:2087","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:40684:176","prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11970:30458":{"id":"1:11970:30458","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11600:3131","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11874:802":{"id":"1:11874:802","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:11872:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11879:30441":{"id":"1:11879:30441","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11877:30440"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11903:29825":{"id":"1:11903:29825","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:42901:3144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11950:1812":{"id":"1:11950:1812","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11575:3116","`DoubleEndedIterator`":"1:7169:119","prim@char":"4:11872:411","str::matches":"1:11950:1812"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:42851:3149","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11953:30450":{"id":"1:11953:30450","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11575:3116","`DoubleEndedIterator`":"1:7169:119","prim@char":"4:11872:411","str::matches":"1:11950:1812"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:42869:3150","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11979:27379":{"id":"1:11979:27379","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40682:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11982:30460":{"id":"1:11982:30460","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11595:3132","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11993:27265":{"id":"1:11993:27265","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11995:27267":{"id":"1:11995:27267","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11909:26909":{"id":"1:11909:26909","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:11872:411","self::pattern":"1:11575:3116"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11580:3130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11897:27363":{"id":"1:11897:27363","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11896:27362"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"16:5616:15600":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:12607:19107":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:8025:15689":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:4415:8734":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:1695:10228":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:11299:18549":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5741:15608":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:2594:126":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:12461:19097":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:8490:15770":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:547:9308":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:5963:15615":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:2967:14703":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5976:15616":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:21577:20894":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4510:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:13024:19819":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:4037:14887":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:9148:33690":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:11875:1037":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"16:4969:15363":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:7666:8593":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"1:3166:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11891:19061":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:30064:20892":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:6818:13875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:587:9314":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:7246:14246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:8283:15764":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4982:12804":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:20837:8255":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:2831:1989":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:3984:8700":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:2233:96":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:1743:2584":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:9990:2577":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"11:2053:8552":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:42697:3148":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:3743:2321":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"16:7317:33355":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:10994:8808":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:5630:15601":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:506:9304":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:2819:1991":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:40597:20891":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6460:15637":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12550:19103":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:42623:3142":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:9228:33629":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"11:1003:2550":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4422:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:5976:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6919:33080":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:6712:13868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:43259:3134":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:5418:33299":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:9443:15813":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11801:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:40750:2562":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:39334:2891":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:3171:133":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:247:34032":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:9071:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:42500:2960":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:10068:3083":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:46604:8243":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:2448:14682":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:4521:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:4834:12788":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10377:15910":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7077:15659":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:6164:2375":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:10670:15987":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:3177:2006":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"4:3974:8699":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"4:1930:8605":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"17:11069:15802":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12098:19074":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:8949:28684":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:13625:19865":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"14:160:14606":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:7767:15685":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"15:198:14625":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:2865:1997":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:4320:1931":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"5:2902:31541":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:39044:1931":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"4:11153:28673":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12403:19093":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"4:7258:28682":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:7336:2378":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6688:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:12915:19814":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:46546:8292":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:8858:15778":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:8718:15750":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:38744:2011":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:13499:19860":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:7588:15675":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:46593:8242":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6793:15649":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:7193:20862":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:10838:26806":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:11838:28653":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:50296:22029":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:8072:15691":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5015:12807":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:7090:2959":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:8269:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:4510:15240":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7557:15674":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:8667:14643":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13159:19828":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11060:15801":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:42633:3141":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:8416:8791":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"11:387:32872":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:3995:22148":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"10:44:14588":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:5071:15393":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:8957:15660":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:8113:2969":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:3511:2356":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"16:5594:15599":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:8823:15777":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:41455:3036":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:10569:15959":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10026:15944":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:22231:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"4:9971:8586":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"4:965:8551":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:9224:23560":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:210:2330":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:9923:2562":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:7012:2356":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:43454:3186":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:44389:8329":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:42434:3065":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:3114:8558":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:46698:8249":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:719:19909":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:4311:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"11:2205:8541":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11143:3136":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:123:8982":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:10626:15995":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7488:15668":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:7683:15680":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:975:15827":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:20587:8263":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:6011:2405":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:7127:132":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4277:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:4445:15223":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:9796:15845":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:5402:14643":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:9087:29068":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"4:11322:8689":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5693:15605":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:1120:14598":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:38783:2010":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:41448:3034":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2794:1980":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:9453:15814":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13066:19823":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:2319:14676":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1527:10212":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:7485:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7259:2068":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"4:1901:8604":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"16:5032:15378":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:4113:8727":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:7094:2958":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:44836:8298":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:3169:8672":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:777:2325":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6819:15650":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"4:591:8524":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"4:1589:8558":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"4:3926:8696":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:13240:19835":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:45009:20946":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:11573:18567":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:8789:2093":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:7247:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2682:1938":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:2933:15906":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13367:19846":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:1845:2321":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:7697:15681":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4399:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2461:2611":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:11234:29551":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"4:932:8547":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"11:751:2356":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:2905:14701":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5743:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"14:40:18548":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4171:1751":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:5912:2403":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:3171:8673":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:10673:8631":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:2686:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:11520:18563":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:8310:15765":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:6351:15630":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:39451:2912":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"4:7931:8666":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:119:8981":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4828:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12536:19102":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13689:19871":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:39574:2970":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:12592:19106":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11434:18557":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:11861:19059":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2786:14696":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:624:34062":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:39484:2437":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:7711:15682":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:9138:15782":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:39712:2981":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:7520:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"11:274:2543":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:9876:15893":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:9022:215":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:8901:105":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:3142:15911":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13135:19826":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"4:11888:731":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"11:669:8546":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:11628:18571":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:7654:8555":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:8632:15745":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"11:815:8548":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:3209:8674":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"4:11891:1476":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"6:474:9299":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:2077:31538":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4650:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:660:19912":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:6232:2356":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:1902:2587":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:942:8549":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:46683:8248":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1617:10222":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4584:2882":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10897:15795":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4671:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:1947:15840":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:12646:19109":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"14:31:14606":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11011:15748":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10465:15962":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"4:3876:8694":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:40514:2993":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:11201:26742":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6557:9183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:3872:14770":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:20863:8261":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4750:12777":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:2751:2760":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"5:7079:2093":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:2684:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:590:22560":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"4:8308:8773":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:2868:207":{"crate_id":4,"path":["std","io","error","Result"],"kind":"typedef"},"16:2720:14693":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:42526:3076":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4767:12779":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:11895:1531":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"1:2506:131":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"16:4818:15332":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:21633:2648":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:2870:1998":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:8953:15779":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"18:681:19914":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:39635:2976":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:2788:1981":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10545:15799":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:2642:14690":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12113:19075":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11391:18554":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13145:19827":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13842:19881":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:43442:3185":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10823:15791":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12770:19809":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:11006:8809":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"4:4437:8735":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"4:7682:8594":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:1704:10229":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:2940:1912":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12902:19813":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13419:19851":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:7016:33362":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:8443:15769":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10402:15976":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13812:19879":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:1304:93":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"12:0:1841":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:39291:2899":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:11339:18551":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9933:15869":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10712:16000":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:8827:8819":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"18:481:19920":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10635:15986":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:7843:8664":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"9:481:14479":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:113:19898":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"13:110:32929":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"4:7605:2422":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:420:14651":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11615:18570":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"4:6135:28659":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4953:12801":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:2879:14700":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"4:2347:8614":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:562:9310":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:4327:15153":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:4702:15312":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:9746:8710":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:531:19923":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:7543:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:1595:8559":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:4365:1932":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:39051:2865":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"15:180:14624":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:20753:8259":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:1789:8575":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:46424:8289":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:7179:8609":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:38845:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11969:19065":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:42815:3152":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:9376:2420":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:20390:2833":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"4:4855:8760":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13053:19822":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:1232:8554":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4381:12581":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:9534:15823":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"4:8275:8712":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:3225:14707":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:39958:2945":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:10813:8594":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:38830:2001":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:20712:8258":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:2936:1911":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13721:19873":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6671:14622":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:6139:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:6236:15623":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:7239:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:10649:15996":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:0:1845":{"crate_id":17,"path":["object"],"kind":"module"},"4:1086:8554":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:22066:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:21471:21865":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:6375:1962":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"10:0:1839":{"crate_id":10,"path":["adler"],"kind":"module"},"4:644:8528":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"4:4509:8752":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6586:13863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:5920:15613":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6890:15653":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2826:1988":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:40877:2562":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:44542:8301":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:7556:14434":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:8474:8793":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:7449:15665":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:1645:10223":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:1971:2563":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:42605:3139":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"4:5928:203":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6146:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:4356:2361":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"11:646:2562":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:7162:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7437:15664":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:39972:1754":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:10103:3073":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:5104:15402":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4455:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4387:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"4:8253:8764":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"11:659:2093":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:62:8927":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:11163:16007":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:10527:15992":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"4:6759:8825":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10104:15903":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:4394:1934":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:11885:733":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:45056:20863":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:40758:2093":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"4:3061:8678":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:43563:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:9973:15868":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:7103:15660":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:45614:8288":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12496:19099":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"11:810:8545":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:7335:33321":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"5:1341:2561":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:2862:14699":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:652:34050":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6336:15629":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:264:2332":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:154:2311":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:6004:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10428:15989":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:8181:2071":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"4:2210:127":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"11:1085:2552":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:42201:20949":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:9653:15858":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4536:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5786:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:8195:15746":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"18:736:19910":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5041:12809":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:6836:13876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:8598:15774":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:39437:2937":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:30598:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:3616:8685":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:4904:15346":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11653:18573":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:43421:120":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:2833:2400":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"14:187:14614":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:488:9301":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:1422:8546":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:39965:22555":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"4:9051:8639":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"17:10303:15904":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"4:8160:8684":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"6:4873:12792":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:1978:15864":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10257:15909":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:6307:15626":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:515:19922":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6788:13872":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11422:18556":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:21660:21918":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:6566:13861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:46564:8239":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13169:19829":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11502:18562":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:46721:8250":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"4:5695:1959":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:20435:25220":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:20706:8256":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:42591:3140":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:2738:1910":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"16:4932:15350":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:10224:3068":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:10923:15796":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4915:12796":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4664:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4998:12805":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:12218:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4702:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:8931:15747":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4943:12800":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7497:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:38927:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:4682:8713":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:1583:10218":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:5990:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:42921:3145":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:6431:15635":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:3663:2563":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:11544:18565":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"4:11228:29617":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:7050:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:8090:15692":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:30228:20827":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:2502:14684":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:43225:3176":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:43573:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"16:4540:15246":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11319:18550":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:9090:3039":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:6673:13864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:3749:14719":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:21668:20928":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:1433:8547":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"11:1681:142":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:6514:2101":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:8788:15776":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13698:19872":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:9867:20888":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:8080:2574":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"17:13516:19862":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:11832:15950":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:41746:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11721:19054":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4432:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:3815:14737":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:3965:2356":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:9068:33779":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:2357:14678":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:9683:15843":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:44690:8318":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3645:2093":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:43082:3171":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"4:3133:29794":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"4:8249:8762":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:43382:3129":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:1734:22012":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4271:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13639:19866":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:21115:8260":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:48922:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:40577:22030":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:7431:14406":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12126:19076":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"4:487:2391":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8601:78":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:7566:14435":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6717:14621":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:10643:29628":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:671:19913":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:10416:15988":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:4105:8726":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:2303:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:1006:1753":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"1:39736:2966":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:10491:15960":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:42751:3071":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4482:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:41039:87":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"11:1534:2554":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:42930:3154":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:917:2321":{"crate_id":4,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"4:10703:2574":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:7561:21272":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:494:9302":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:9986:15896":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:9455:2445":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:6696:15646":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:11580:3130":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:3211:8675":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:11136:2427":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:10270:15907":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:7775:8630":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:4400:15202":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:41079:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13461:19856":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:7508:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:9218:15784":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"4:11890:1475":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"4:10683:128":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11600:3131":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:1827:8586":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:9322:34037":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"4:5322:8799":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:43402:3184":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2995:1999":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:5229:8862":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:2460:8710":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6506:15640":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:40767:2068":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:39981:2947":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9886:15866":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:7263:14247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"4:7567:8710":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"16:7803:15686":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:4007:102":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:42797:3151":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:873:2093":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"4:850:2561":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"4:3783:8690":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:853:2340":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11037:15800":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:3047:14705":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:50275:22020":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:5643:15602":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:5773:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4804:12784":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:11894:780":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"4:6623:29071":{"crate_id":4,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"14:7:14606":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"11:697:8547":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:10967:15798":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"4:928:8546":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:548:139":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:5034:12808":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:8651:14645":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:40668:2999":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"4:9174:2233":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:40826:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:541:9307":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:2814:1986":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:8683:15749":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:8109:15693":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:1203:8553":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:4680:8709":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:9299:143":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:12224:19081":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:1710:10230":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10015:15943":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:1808:1942":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:3899:14773":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"4:7810:128":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"17:11902:19062":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:3183:2008":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:5475:2371":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:2830:14698":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:38905:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"11:1029:8553":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"4:4565:8698":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"4:1077:8553":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:39594:2972":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2767:1977":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:39030:15699":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"16:5886:15612":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:40006:2952":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:1919:15880":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:45764:8312":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:40894:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:12388:19092":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:5655:15603":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:538:19924":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:0:435":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:4848:12790":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:7467:29112":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:42665:3073":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11234:18546":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:41971:143":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:43246:3178":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:614:34054":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:39350:2892":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:2524:14685":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5305:15579":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"4:8376:8789":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:13791:19877":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"14:165:14607":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:10030:3070":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:1138:8554":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:5069:188":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:13249:19836":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"5:279:1916":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:7648:8531":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:2847:1993":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:573:9312":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:9756:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:3326:2949":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:8896:28678":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:3107:2561":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:8326:8788":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:21784:2653":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:6098:13482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:3063:14706":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:7017:29635":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:12157:134":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:1663:10225":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:9086:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7519:15671":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:6540:1969":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:9409:15811":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"4:5372:8802":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13453:19855":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:579:9313":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10589:15994":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:2159:31677":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:21284:24898":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11258:18547":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:5847:15611":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:1550:10215":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"9:352:14496":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:2806:1985":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:561:2569":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:10826:8804":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"4:8859:8820":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:6906:1923":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:4592:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4865:990":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:43031:3168":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3331:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:7659:8556":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:9554:2395":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:41946:3054":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:2764:14695":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:4030:2872":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2946:1759":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:30050:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:12576:19105":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:10092:15947":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4681:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"13:226:32882":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:45426:8311":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:43654:3219":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"11:1852:8557":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10052:15924":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"11:861:8551":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:43374:3126":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:21378:8710":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:4761:8708":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6132:15619":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:41462:3037":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:7780:8627":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11770:19055":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:42453:3075":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4612:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:9748:15784":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:3459:8634":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:8751:8809":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:11872:411":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"13:0:1836":{"crate_id":13,"path":["std_detect"],"kind":"module"},"4:7835:29046":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:7222:8608":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:4248:1925":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:3382:2842":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:20418:24893":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"4:3250:8671":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:5515:2963":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4406:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:39644:2986":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:7526:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"0:31:1624":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"11:2190:32878":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:9628:15820":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13399:19849":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:20832:8710":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:10182:3071":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:5005:12806":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5868:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:6679:13865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4573:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:9469:15815":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:5892:2361":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:31822:2840":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:1723:10231":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:6430:2332":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10936:15797":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:4789:15327":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:45550:8303":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:8737:8808":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"4:11884:736":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"5:3995:2332":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:11410:18555":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:7264:8869":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:2378:14679":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:4329:8724":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:39664:2964":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4442:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:1655:1075":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:43068:3170":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"9:388:14481":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"4:10215:2578":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"11:725:8543":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11136:16006":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13332:19843":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6728:15647":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"4:9371:8630":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"11:853:8550":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:22330:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2509:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:44597:20941":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:13219:19833":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"4:3940:8698":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:355:8521":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:39543:2969":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4290:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:31831:2849":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:1187:8552":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:6990:15658":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:42769:3067":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"4:4126:8728":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:0:1846":{"crate_id":18,"path":["memchr"],"kind":"module"},"3:0:1833":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:11873:1494":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"1:40656:2998":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:6773:13871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:20675:8254":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:20437:25217":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"4:4846:8759":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:6484:1964":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:1218:2550":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:41962:3053":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6201:15621":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:2298:14649":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"4:936:8548":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:11672:2433":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11924:19063":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:4389:2364":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5858:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:1774:601":{"crate_id":4,"path":["std","env"],"kind":"module"},"1:43174:3174":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:8725:183":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:12307:19086":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:5048:12810":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13385:19848":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"4:361:8522":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:12980:19817":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:1852:2572":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:5457:2974":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:7572:33254":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:535:32996":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4773:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:22132:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"5:1394:8543":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:11883:634":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"17:9545:15822":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:9907:15894":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:10316:15905":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:44742:8325":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"4:3293:8660":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:7787:8631":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"11:632:2561":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:1850:2233":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:39747:2983":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:46300:8304":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:2681:1909":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:6582:2383":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6254:15624":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:12191:24633":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:2137:580":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:21380:8257":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:10681:15997":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:9895:15865":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:1048:2555":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12072:19072":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:10505:15991":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4974:12803":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"4:8036:8632":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"4:10408:8674":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"4:6190:2403":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:5916:2987":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:42425:3066":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"4:10040:29090":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:12259:19083":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:44265:20922":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10125:15923":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:3211:1939":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:46645:8246":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:822:8549":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13211:19832":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7859:15688":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6593:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"4:3136:29792":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:30028:2800":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:11452:29618":{"crate_id":4,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:4786:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"4:3466:8654":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"4:8071:8677":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"6:5705:13371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4354:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:1872:8560":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:8197:2997":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:40014:2954":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:9265:15785":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:2397:2556":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:5817:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4414:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:2931:14702":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:8548:15772":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:5797:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12345:19089":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:3266:2321":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:6724:2375":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4819:12786":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:3934:8697":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:2594:14688":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:46470:8307":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7467:15666":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:45190:8330":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:42851:3149":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:41737:70":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:6904:15654":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:1840:2356":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"10:36:32867":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11785:19056":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:8979:33890":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:9498:15829":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:42555:2593":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:6592:2385":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:6087:2407":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:46362:8324":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11946:19064":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:38949:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:13469:19857":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:8814:8816":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"9:52:14499":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6488:15639":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:2943:1913":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:8155:8686":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:5631:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:6988:8567":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"4:10933:2425":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11821:15949":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"4:3441:2902":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:11186:26802":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:2337:14677":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:11589:3133":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:2339:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:6802:13873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13411:19850":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:2798:1983":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:6061:14648":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:2782:1978":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:10580:15993":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:3119:31537":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5797:32993":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:9036:2902":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:46619:8244":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:2742:14694":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:6081:8826":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4529:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:2870:126":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:10922:2424":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:2772:1982":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:2674:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:11646:3162":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"11:738:8544":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:44335:8308":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:39390:2888":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:21593:22581":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:7584:8515":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:20456:25219":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:7478:15667":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11399:3082":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:6603:2968":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:44866:8302":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:43637:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:8231:8733":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:6487:1965":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:3196:20432":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:7851:2563":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:41239:84":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:1600:8560":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:9596:15826":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:11129:3063":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:4840:12789":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:2198:32879":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:45970:8331":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4602:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11844:19058":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:1628:2326":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:45314:8323":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:4749:25134":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:3882:8693":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:4775:786":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:39371:2895":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:42647:3069":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:40818:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"5:5819:2566":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7366:15662":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:2802:1987":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:46222:8320":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:4075:29634":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:10648:8627":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:7543:15673":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:46112:8300":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:7635:15678":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:44490:8309":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:881:8543":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:43666:3217":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:30122:20786":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9178:15783":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13821:19880":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11993:19066":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11459:18559":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:1602:2332":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:6809:13874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:6981:15657":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:7514:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:2067:2349":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:3938:2361":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"16:3030:14704":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4881:12793":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"11:1836:2093":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:3153:31523":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:44579:8286":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:1583:8557":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:6022:15618":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:500:9303":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:9959:15895":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:7770:8629":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:43390:3128":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:8180:2072":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:13041:19821":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"4:11886:734":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"11:1555:14600":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:1534:2361":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:1534:10213":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:44560:20866":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5000:15370":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13344:19844":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:564:19925":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6541:10149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"4:3356:2361":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"16:4872:15338":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13659:19868":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12138:19077":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10885:15794":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:3511:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:11018:26831":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:39230:2873":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:4257:8730":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:8360:15766":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:12522:19101":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"4:3384:8633":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:907:2356":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:39494:2936":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"9:445:14480":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:21:672":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:8774:23700":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:9350:33724":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"4:9109:29597":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:10709:3080":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"4:10405:8672":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:42617:3143":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2857:1995":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:5983:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:7498:15669":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:5386:14645":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:737:140":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:521:19919":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"9:0:1838":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6293:15625":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13426:19852":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"4:10856:8810":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13121:19825":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13257:19837":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4374:1933":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"5:7058:30433":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"4:0:1372":{"crate_id":4,"path":["std"],"kind":"module"},"4:7524:2418":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:9098:15781":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:699:19916":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:2069:2550":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"4:5721:1960":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6575:13862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:10452:15963":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:39556:2580":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13477:19858":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12622:15801":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:4197:2561":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"4:8971:26736":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:6218:15622":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4810:12785":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:4930:12798":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:42001:22189":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"14:221:14616":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"4:6554:1970":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:9046:130":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"18:644:34050":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:9899:2561":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:45504:8299":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13506:19861":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6854:15651":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:42715:3147":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:40742:2561":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:4636:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:6909:2414":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:38861:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:4449:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5060:12812":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5761:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4314:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4715:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"4:8843:8817":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"4:5441:8804":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"5:6749:2389":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:12178:19079":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7757:15684":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"4:7505:2416":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:9917:15891":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"4:7686:23552":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"6:532:9306":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:8156:15696":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4375:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:22198:2650":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:44311:8316":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:5804:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4858:12791":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:353:2319":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13803:19878":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:20650:8265":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:13324:19842":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:9312:15786":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5935:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:7218:9260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:41199:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:670:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:3174:8560":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:11372:18553":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:44459:20893":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:491:34070":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:12006:19067":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:22264:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:43370:3124":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:4475:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"4:2215:2390":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"4:10638:29452":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"4:48:1532":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"11:444:140":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:2255:104":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:38885:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"4:8882:1961":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4542:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:42535:2592":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:1652:10224":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:4734:12775":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:2500:73":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"18:80:19896":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:1571:10217":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:9275:33497":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:6535:2314":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:13651:19867":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:1609:10221":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9617:15821":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:3585:14710":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:39626:2975":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12799:19810":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:39239:2897":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:4808:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:20458:25215":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:5767:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:4568:15250":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5708:15606":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:12367:105":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:6650:23598":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:29805:2612":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"4:11870:368":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"6:653:9362":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:41441:3035":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:9866:15859":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:39037:21119":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:43236:3177":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:8753:15775":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:2106:31453":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:3988:8701":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"4:1791:8576":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"5:1444:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:2513:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:9826:15839":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:3912:8695":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:40620:2996":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"11:985:8552":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:39421:20862":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40733:2092":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"16:7042:33072":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:5571:15598":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:1991:181":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:43398:3123":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:44888:8305":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"11:2178:32881":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"4:5501:8805":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"1:43211:3175":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:39303:2889":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:2219:8611":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"1:41993:22188":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:5181:2332":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6321:15627":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:3093:2003":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:4640:8761":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:42964:2889":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10039:15902":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:7491:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:13564:19863":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7029:33365":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"7:0:1521":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:44441:8321":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:39775:2985":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:45087:20828":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:40885:2093":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:9188:33575":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"4:624:8525":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:48987:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4420:1935":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"11:0:1840":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:6361:15631":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:1453:8563":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:11325:3160":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:8909:3141":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:393:32869":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:8256:15744":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:22396:2651":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:11446:18558":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:8180:15698":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:4157:2361":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:7532:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"4:4684:8714":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13082:19824":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"11:119:2315":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11800:19057":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:9082:3036":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:39726:2982":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:6680:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:9038:33549":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:5779:15609":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:4239:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:2725:2844":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:2810:1984":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:43386:3127":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:9291:139":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"4:5688:1958":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:10141:3074":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:6997:2093":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6400:15634":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:39357:2893":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13194:19831":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:9084:3037":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:22099:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:39003:2005":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:3612:2332":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4845:15335":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6520:15641":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:42374:23555":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:2388:1850":{"crate_id":4,"path":["std","io"],"kind":"module"},"4:10303:8807":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:46668:8247":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:8256:15700":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:9641:15833":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:9557:15784":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:9948:3069":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:44912:8287":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13309:19840":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:10743:15788":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:42186:3113":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10721:15964":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:39996:2443":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:10735:16001":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:3300:14708":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:39612:22557":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:22033:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:11893:1474":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"17:8521:15771":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:4596:15254":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:6588:214":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:690:19915":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:8944:28683":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:8047:15690":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:39677:2978":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:30034:2801":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:13488:19859":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:2345:2803":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"5:770:95":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:7253:8868":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10798:15790":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:13777:19876":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:6124:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:5387:8803":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:44934:8290":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:4461:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12282:19084":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12046:19070":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12194:19080":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:7020:2344":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:10516:15956":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:9569:2453":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:9078:3034":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:41786:72":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7652:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:2572:14687":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:7579:8514":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"4:3450:30007":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:4310:1930":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:8420:15768":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:25641:2647":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1832:2561":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11090:15803":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:636:34056":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:7509:15670":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:7517:2870":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:4480:15234":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:39655:2977":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:6656:10153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:5025:1956":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:2925:1940":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:3678:2565":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:21706:20789":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"14:215:14615":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4327:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:8123:2983":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:13612:19864":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:2896:31540":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:46584:8241":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:41159:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11585:18568":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:386:15761":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:38971:2002":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:526:9305":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"4:10451:2422":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"4:8149:8687":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:13376:19847":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4469:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11193:16008":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:1706:2321":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:42474:3079":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:2470:14683":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:43394:3122":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6012:32108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:1900:10373":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4726:12774":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:21751:22587":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:1787:15846":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:48948:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:42513:3078":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:9822:15852":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"4:8092:8635":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"5:2179:31424":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:2763:2848":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13763:19875":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:5831:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:9772:15847":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"4:2615:8665":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:4992:29095":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7529:15672":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"14:202:8867":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:7244:33371":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:41983:8789":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"16:4757:15319":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:8129:15694":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:2693:1937":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"11:300:32873":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:14:1813":{"crate_id":1,"path":["core","write"],"kind":"macro"},"4:2478:8663":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:5962:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10598:15798":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"4:5249:118":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:10127:8812":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:13101:19808":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:1687:10227":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5888:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10705:15999":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:45344:8326":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13181:19830":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:8971:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:46630:8245":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:46760:8251":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10555:15957":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"0:0:1617":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:21272:3064":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:8287:3130":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:39364:2894":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:5850:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:39603:2973":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:43366:3121":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"5:6563:2371":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:6103:2410":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"4:1571:2093":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:40531:2994":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:40959:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:7240:14245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"9:174:14583":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:42901:3144":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:48565:8332":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:5677:15604":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:1625:2778":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:1567:2561":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:1509:10209":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:42911:3146":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"15:0:1843":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5845:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:2546:14686":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:3078:94":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:2345:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:1578:2321":{"crate_id":4,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:11471:18560":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:43616:3213":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5955:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:2580:114":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:21609:20873":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:2841:1992":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:8389:15767":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6662:15645":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7042:2093":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12894:19812":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"4:11299:2429":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:22363:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"16:7837:15687":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:39281:2898":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12033:19069":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10615:15985":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"4:9032:8822":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"17:12085:19073":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4728:2910":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:8781:8821":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:9088:3038":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"4:4643:8734":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"4:5336:8800":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:8209:8732":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:12243:3211":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:6238:203":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"4:8399:8790":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"4:11877:1350":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:2503:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:2999:2000":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"4:923:8545":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"4:1439:142":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:10000:15942":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:4575:29609":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"4:894:8544":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:43378:3125":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:11878:1380":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"5:2906:31543":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:13443:19854":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:4037:2562":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:43279:3135":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:953:2332":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:805:2338":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:39534:2961":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:21685:20913":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"4:5558:203":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:2308:123":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:11363:8688":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:242:34042":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:40800:2069":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:40999:80":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:727:19917":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:13316:19841":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:9478:15832":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"4:8215:8723":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:42869:3150":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:6764:13870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:22297:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:3524:2561":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13015:19818":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:7146:8542":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:48961:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:3266:15929":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:6558:15643":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:3394:2841":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"17:12419:19094":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:8142:15695":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"8:0:1837":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:8170:15697":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:1747:10233":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"4:11477:14633":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9424:15812":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"4:11216:26730":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:44289:8328":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6876:15652":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:1054:8552":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5054:12811":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:22165:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:5803:1956":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:2541:2397":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"4:11384:8690":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:10619:8763":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:7456:15763":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:3640:14711":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:43581:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:41954:22566":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:10142:15948":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:11897:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"17:12634:19108":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:48935:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:11871:926":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:11813:15951":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3248:1941":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:4780:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:6474:15638":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:582:2833":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"7:32:14451":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:8485:8794":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:10068:15945":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4504:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"4:6371:1754":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"17:12923:19815":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"4:10693:117":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:11821:26790":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"4:7926:28681":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"4:10939:2426":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13667:19869":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:20663:8710":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11109:15804":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:1985:2565":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:9488:15830":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:9334:3051":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:562:15763":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:21722:20900":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:5504:8806":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"6:1589:10219":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:5724:15607":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:40548:2995":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:39311:2890":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:11355:18552":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:0:807":{"crate_id":6,"path":["libc"],"kind":"module"},"1:2861:1996":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13678:19870":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:41721:22028":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:11536:2645":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:7797:8628":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:3156:2004":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10334:15784":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:7626:15677":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:5947:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"4:2551:2395":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:7293:15661":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:39404:100":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:49000:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:234:8789":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5923:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:7319:2321":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"4:9070:8824":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:44720:8322":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"4:3996:8703":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10660:15801":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:9080:3035":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:7209:8607":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"4:10661:26843":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9340:15787":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:45580:8306":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5996:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:2363:8619":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:11641:18572":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:12409:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"5:773:2335":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:7169:119":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1604:10220":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:11896:1112":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"11:1518:14599":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"4:2212:8610":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"4:9017:164":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13233:19834":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:39687:2979":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:7131:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:12490:3216":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:20856:8710":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:7633:8530":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:2912:115":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:4326:2364":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13033:19820":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11484:18561":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:20704:8710":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1559:10216":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11364:3159":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4554:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:5735:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"4:11887:735":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"1:2497:74":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"17:11879:19060":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9380:15810":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7411:15663":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:6390:15633":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:9577:15828":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:595:9315":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:6639:10150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:2977:2009":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:11532:18564":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:45268:8319":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:2080:8553":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:2426:14681":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:11063:26737":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:6327:15628":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:3537:2562":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:870:2561":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:10354:15912":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6104:12646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4963:12802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:21772:2649":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12170:3210":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:20865:8259":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"9:502:14483":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"4:9364:127":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:43099:3172":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:40919:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"4:3130:28900":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:12510:19100":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12293:19085":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"4:1574:2356":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:7479:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:4738:2401":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:12435:138":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11575:3116":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:507:34050":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:4624:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"4:11889:1478":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:5181:187":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"4:3402:2573":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:7065:33350":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"11:1859:8558":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:39267:2896":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"4:8907:8510":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7743:15683":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:5565:2403":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:21120:8283":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:6943:15656":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:755:19918":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:554:9309":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"11:320:2317":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:7596:15676":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:1618:579":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"2:229:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"4:7921:29098":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:44520:8297":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:10742:3081":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"4:4577:29611":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:6243:33298":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:29994:2799":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1720:2829":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"7:79:14458":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13356:19845":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"11:834:2546":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"9:421:14482":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:20624:8264":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:2694:14692":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:43624:3214":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"15:219:14629":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4796:12783":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"4:3681:8688":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:43053:3169":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:1068:2550":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4740:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:7003:8561":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:8914:26789":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:8769:21271":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12433:19095":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:649:8529":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:39987:2949":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:42946:2892":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:508:2349":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:2895:2155":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:30626:2833":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:42955:2869":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:42443:2589":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"4:11045:8639":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:39696:2980":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:10817:29099":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:44245:20897":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:48974:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11288:3158":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10210:3072":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:39328:2869":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:4492:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:7140:1915":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2777:1979":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10691:15998":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:5697:2356":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:3248:8670":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:41709:108":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:9537:2448":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"4:953:2546":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:40869:2561":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"5:2626:31686":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:40491:152":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:1412:8545":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:10989:15799":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12483:19098":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:21758:2652":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:1403:8544":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:4728:15314":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:40682:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"17:10478:15961":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:1677:10226":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"4:5023:29095":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10080:15946":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:599:34059":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:39514:2960":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:6544:15642":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:4904:2361":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:1716:8720":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12372:19091":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9839:15838":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12959:19816":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:1034:15831":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:4129:1944":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:7473:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:6442:15636":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:8182:2070":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:11556:18566":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:7087:2093":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:1068:31703":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:11026:3184":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"16:6179:15620":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:482:9300":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:4935:12799":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:4624:15258":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"4:537:2392":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"5:35:2328":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:6767:15648":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:2184:20262":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:44419:8317":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"4:2575:8656":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"4:5766:1967":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:3765:2332":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6045:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:8606:85":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"4:8130:3141":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:13865:19883":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"4:7827:117":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:40633:2997":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:44958:8291":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:22831:2646":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:98:32876":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:39584:2971":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:8468:2561":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"5:6278:2332":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:1032:31702":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:863:2562":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:41319:1957":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4360:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:2668:14691":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:6164:33332":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10283:15908":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:41279:91":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:39251:20792":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:766:19911":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:5225:8861":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:12318:19087":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:1065:32875":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"4:682:2570":{"crate_id":4,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"4:413:162":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:8773:2561":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:42463:2591":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:2898:31542":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:9028:15780":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"5:1372:2093":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:44790:8310":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:13857:19882":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:4301:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:6697:2941":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:4924:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:6351:2093":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:9566:15785":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5811:15610":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:1541:10214":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5944:15614":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:12331:19088":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:11220:16009":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:11282:18548":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"4:8719:8807":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6743:13869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:2236:97":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:11876:309":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"16:8214:15699":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:8573:15773":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"4:4177:8729":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"4:2361:8618":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"18:707:3133":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"0:29:1623":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"1:41691:67":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:4904:8769":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"4:2373:8624":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"5:7028:31524":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10196:3067":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:42205:3087":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:60:32868":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:623:31516":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:39565:2962":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:9670:15844":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5557:15597":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1731:10232":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"4:8204:8731":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:9734:15841":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10761:15789":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:5783:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"4:8795:8818":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:42939:3153":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4098:1943":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:1044:14597":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4366:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:12835:19811":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:0:1844":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:43147:3173":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7669:15679":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"4:7568:8523":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:9523:15824":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13433:19853":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:11595:3132":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:13744:19874":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:21524:21854":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"4:10198:8803":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:11348:3157":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4894:12794":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:2853:1994":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:609:34069":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:42545:3077":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"4:5356:8801":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9696:15829":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:3446:14709":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:11484:14633":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:3983:22187":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6035:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:12059:19071":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:41764:126":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:20403:24893":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:39761:2984":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:11854:26801":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:574:34050":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:4756:12778":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4709:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:4:1002":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"4:11843:8532":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"0:28:1617":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:39409:2938":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6694:13867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"4:3678:8689":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"4:10411:8670":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:6935:15655":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:679:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:6867:29410":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10440:15990":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:2404:14680":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9946:15867":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:1866:8559":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:2685:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"4:8064:2944":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"4:10346:2421":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"4:8223:8687":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:4243:1924":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:11882:633":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:7192:1914":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13292:19839":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:40809:2162":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:31782:2838":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:13265:19838":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:2688:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:9991:3082":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:1356:2562":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"4:5572:2404":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:5346:15596":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12358:19090":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"4:6411:1968":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:9027:216":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6376:15632":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:1520:10211":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4690:12770":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"19:0:1019":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"4:8136:3069":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:11440:8839":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"4:11082:8822":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:21645:20927":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:9076:118":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:12158:19078":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1514:10210":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:9339:3052":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"4:8992:26822":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:12378:2407":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:4127:2361":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:9512:15825":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5367:14647":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"9:325:14535":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:487:15762":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:46573:8240":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:10857:15793":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10840:15792":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"4:11879:1460":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:4579:29613":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:12563:19104":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10747:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:39224:2869":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:96:19897":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:7520:2956":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:762:2321":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:44644:8253":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:31818:23552":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"16:55:14644":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"17:9721:15842":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:6868:32950":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"14:0:1842":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:45110:20732":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6616:10176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2616:14689":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"4:11892:1477":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"17:13879:19884":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:12236:19082":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:12019:19068":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:6533:9350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11600:18569":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:2836:1990":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:11159:8813":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"4:8937:29066":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:4097:8725":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:1988:182":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:2808:14697":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:41119:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:46508:8327":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:39010:2843":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:10713:26816":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11113:3061":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3140:8559":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:6846:2944":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"4:6334:29071":{"crate_id":4,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:6575:15644":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:641:8527":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:9108:33813":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:3148:8557":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"4:6298:163":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:12449:19096":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:7524:2957":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"4:8143:3144":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"5:7134:8541":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"4:6384:1755":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"6:568:9311":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:4903:12795":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:41681:22018":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"4:8458:8792":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:8765:8810":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"17:9853:15892":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:5998:15617":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:959:8550":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:44357:8296":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:3782:14728":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}