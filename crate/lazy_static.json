{"root":"0:0:1796","crate_version":"1.4.0","includes_private":false,"index":{"1:13024:26478":{"id":"1:13024:26478","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12933:22846":{"id":"1:12933:22846","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44417:3564","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12934:24303":{"id":"1:12934:24303","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12911:1801":{"id":"1:12911:1801","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12963:29730":{"id":"1:12963:29730","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12592:3526","str::split":"1:12951:26668","prim@char":"4:12072:453","str::split_terminator":"1:12960:29729"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44193:3558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12908:29725":{"id":"1:12908:29725","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12931:28915":{"id":"1:12931:28915","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44379:3555","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12901:29722":{"id":"1:12901:29722","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12957:26671":{"id":"1:12957:26671","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12592:3526","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::split":"1:12951:26668"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44143:3486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12969:26675":{"id":"1:12969:26675","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12072:453","str::splitn":"1:12966:26673","self::pattern":"1:12592:3526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44247:3480","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12987:29733":{"id":"1:12987:29733","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12592:3526","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::match_indices":"1:12984:29732"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44293:3563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12992:29735":{"id":"1:12992:29735","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1803":{"id":"0:31:1803","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12994:29736":{"id":"1:12994:29736","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12960:29729":{"id":"1:12960:29729","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12592:3526","str::split":"1:12951:26668","prim@char":"4:12072:453","`DoubleEndedIterator`":"1:7973:131","str::rsplit_terminator":"1:12963:29730"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44175:3559","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12972:26677":{"id":"1:12972:26677","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13016:29743":{"id":"1:13016:29743","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13007:26679":{"id":"1:13007:26679","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13021:26481":{"id":"1:13021:26481","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:26480":{"id":"5:5603:26480","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13024:26478"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:30446":{"id":"5:5601:30446","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2099","`String`":"5:7622:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2099","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12929:22858":{"id":"1:12929:22858","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12930:22878"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44399:3556","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12919:29726":{"id":"1:12919:29726","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12078:1545","str::slice_mut_unchecked":"1:12920:29727","crate::ops::Index":"1:39861:2189"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12922:26663":{"id":"1:12922:26663","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12921:26662","str::split_at_mut_checked":"1:12924:26667"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13022:27838":{"id":"1:13022:27838","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40215:23397","Self::is_ascii":"1:13021:26481"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40215:23397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5589:30443":{"id":"5:5589:30443","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12917:23806":{"id":"1:12917:23806","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12909:333":{"id":"1:12909:333","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12910:26643","`u8`":"4:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12943:2320":{"id":"1:12943:2320","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42244:191","prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13029:29745":{"id":"1:13029:29745","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4771:29745"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44424:3314","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12932:29728":{"id":"1:12932:29728","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44389:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12975:26678":{"id":"1:12975:26678","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12898":{"id":"1:12898","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12899:879","1:12900:2279","1:12901:29722","1:12902:29723","1:12904:29724","1:12907:25998","1:12908:29725","1:12909:333","1:12910:26643","1:12911:1801","1:12913:23804","1:12915:23805","1:12917:23806","1:12919:29726","1:12920:29727","1:12921:26662","1:12922:26663","1:12923:26666","1:12924:26667","1:12926:22844","1:12927:23120","1:12928:24626","1:12929:22858","1:12930:22878","1:12931:28915","1:12932:29728","1:12933:22846","1:12934:24303","1:12937:26129","1:12940:26131","1:12943:2320","1:12947:2278","1:12951:26668","1:12954:22873","1:12957:26671","1:12960:29729","1:12963:29730","1:12966:26673","1:12969:26675","1:12972:26677","1:12975:26678","1:12978:2000","1:12981:29731","1:12984:29732","1:12987:29733","1:12990:29734","1:12992:29735","1:12994:29736","1:12996:29737","1:12997:29738","1:12998:29739","1:13001:29740","1:13004:25847","1:13007:26679","1:13010:29741","1:13013:29742","1:13016:29743","1:13019:29744","1:13021:26481","1:13022:27838","1:13023:26482","1:13024:26478","1:13025:26477","1:13026:27841","1:13027:27842","1:13028:27843","1:13029:29745","1:13031:3291","1:13032:29746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5602:3362":{"id":"5:5602:3362","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12990:29734":{"id":"1:12990:29734","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5586:3218":{"id":"5:5586:3218","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12998:29739":{"id":"1:12998:29739","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12617:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12951:26668":{"id":"1:12951:26668","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12592:3526","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::split_whitespace":"1:12929:22858","str::rsplit":"1:12957:26671"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44125:3482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12937:26129":{"id":"1:12937:26129","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13004:25847":{"id":"1:13004:25847","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12920:29727":{"id":"1:12920:29727","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12078:1545","crate::ops::IndexMut":"1:3253:2190","str::slice_unchecked":"1:12919:29726"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12966:26673":{"id":"1:12966:26673","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526","str::rsplitn":"1:12969:26675"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44229:3484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13026:27841":{"id":"1:13026:27841","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:34215"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13032:29746":{"id":"1:13032:29746","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4769:29746"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44442:3313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13031:3291":{"id":"1:13031:3291","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4772:3291"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44433:3292","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12954:22873":{"id":"1:12954:22873","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12408:3495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12923:26666":{"id":"1:12923:26666","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:12924:26667"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13027:27842":{"id":"1:13027:27842","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:34215"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12899:879":{"id":"1:12899:879","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12907:25998":{"id":"1:12907:25998","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12140:3546"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12926:22844":{"id":"1:12926:22844","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44095:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1802":{"id":"0:29:1802","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12996:29737":{"id":"1:12996:29737","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12930:22878":{"id":"1:12930:22878","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12929:22858"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44408:3565","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12915:23805":{"id":"1:12915:23805","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1796":{"id":"0:28:1796","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12913:23804":{"id":"1:12913:23804","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12997:29738":{"id":"1:12997:29738","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12940:26131":{"id":"1:12940:26131","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13013:29742":{"id":"1:13013:29742","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:26479":{"id":"5:5604:26479","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13025:26477"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12910:26643":{"id":"1:12910:26643","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12924:26667":{"id":"1:12924:26667","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:12923:26666"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13001:29740":{"id":"1:13001:29740","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12928:24626":{"id":"1:12928:24626","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44111:3552","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13025:26477":{"id":"1:13025:26477","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13019:29744":{"id":"1:13019:29744","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12553:137","`FromStr`":"1:12552:3044"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12552:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12552:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5585:30442":{"id":"5:5585:30442","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2099","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:286:2099","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12984:29732":{"id":"1:12984:29732","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12592:3526","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::rmatch_indices":"1:12987:29733"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44275:3562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13023:26482":{"id":"1:13023:26482","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:30445":{"id":"5:5600:30445","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5584":{"id":"5:5584","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5585:30442","5:5586:3218","5:5589:30443","5:5592:30444","5:5600:30445","5:5601:30446","5:5602:3362","5:5603:26480","5:5604:26479"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12927:23120":{"id":"1:12927:23120","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44101:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12921:26662":{"id":"1:12921:26662","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:12923:26666","str::split_at_mut":"1:12922:26663"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12904:29724":{"id":"1:12904:29724","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12902:29723"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1796":{"id":"0:0:1796","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1802","0:31:1803","0:28:1796"],"is_stripped":false}}},"1:12978:2000":{"id":"1:12978:2000","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12592:3526","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::rmatches":"1:12981:29731"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44329:3560","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13028:27843":{"id":"1:13028:27843","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:918:34215"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12902:29723":{"id":"1:12902:29723","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13010:29741":{"id":"1:13010:29741","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12900:2279":{"id":"1:12900:2279","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12947:2278":{"id":"1:12947:2278","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42244:191","prim@char":"4:12072:453","self::pattern":"1:12592:3526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5592:30444":{"id":"5:5592:30444","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12981:29731":{"id":"1:12981:29731","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12592:3526","`DoubleEndedIterator`":"1:7973:131","prim@char":"4:12072:453","str::matches":"1:12978:2000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44347:3561","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12597:3540","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12612:3542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:9030:25762":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"4:1590:9030":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3172:2198":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"4:5321:203":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"1:40704:3313":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:43491:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7306:16772":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11510:16966":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:3241:29481":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:15760:21189":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"4:12082:696":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"4:11352:25785":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:4634:2119":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:8526:9264":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"16:2284:15750":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7294:16771":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:47124:8730":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:6426:3403":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:48364:8651":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:4462:16344":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:33991:2171":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"4:5581:9278":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:22675:23105":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:2995:15807":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:32789:3277":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:10671:33294":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:4297:2953":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:3783:2955":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:42978:3446":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:5713:2795":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:754:21401":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:491:9776":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:32715:2116":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"16:6134:16730":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:9807:16868":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4916:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"4:3749:9162":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:12070:403":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"5:2279:30971":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1593:10683":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:39932:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:2440:9093":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"17:13325:19860":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:42513:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:12659:17140":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"4:8377:9164":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4932:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6524:14516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"4:6677:2155":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:4844:16450":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:3406:15811":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:15058:21120":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:44399:3556":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:11031:3486":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12278:17127":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:33814:2170":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:42474:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:564:9785":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:5630:16713":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12388:17121":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"14:31:15703":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:6698:14531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6441:14510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:9178:9113":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:6320:16742":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:7998:16803":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:42308:2954":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"6:1621:10684":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:31026:23074":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"9:501:15575":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:46340:8694":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:2733:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:4215:24169":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:9155:235":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:8304:9164":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:16093:21355":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"4:4781:9237":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:7345:16775":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:2326:2940":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:46300:8682":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:15092:21137":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6030:16726":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:22394:8799":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:22900:3060":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:14968:21131":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:2489:15786":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:4545:16358":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"4:10946:2811":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:581:3258":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:5212:13773":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:22462:3234":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:3419:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:1508:9018":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:42300:2953":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:48250:8697":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:8085:25945":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"17:12508:17137":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:16198:21363":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:4355:16306":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"4:10666:28471":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:40655:23171":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6141:32485":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:1107:2942":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:6803:16762":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10710:16898":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6188:16732":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"9:423:15574":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:2369:15696":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:12671:17176":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"18:765:21394":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:481:21403":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:787:9019":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:43721:23180":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:13568:19877":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:710:9021":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:7428:22841":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"19:0:1139":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:13606:19880":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12150:17046":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:4283:16257":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:21755:8665":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9498:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6152:16731":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:33580:2168":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:1142:15693":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:15342:21159":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:1603:15695":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:403:16879":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:22508:8792":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14012:20378":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:9916:16885":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"4:7113:2800":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:40:2708":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:4968:16482":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"4:11160:25990":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:3056:2187":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:45055:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13211:19854":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:21574:8669":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:7931:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:6330:2795":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:2687:9109":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6292:16741":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:6505:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:46616:8683":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:15151:21142":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:12597:3540":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:598:33329":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10419:16855":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14131:20386":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"4:9041:8979":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:1804:638":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:1824:9049":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"1:44143:3486":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:7914:16798":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:7429:10798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6099:16728":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"4:6520:1942":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:6068:220":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:1596:9031":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:10573:33291":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:4426:2743":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:8278:3399":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"17:15701:21185":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:22316:8797":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:43268:3248":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"18:706:3543":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:14091:20384":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"9:0:2025":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:5712:2740":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:922:9023":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6915:14572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:1934:2975":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:8428:9188":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"18:507:33306":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:15078:16938":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:2447:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:5045:9245":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"16:6610:16754":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"11:1160:9029":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:48384:8653":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"15:288:15727":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:13766:17087":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:3346:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15822:21194":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:44193:3558":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"4:4131:9180":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:589:22963":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:6764:2712":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11493:16980":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:15:2001":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:10251:16890":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7442:29454":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:43466:3465":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:47284:8684":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:6478:14514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:11634:16995":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:3832:2283":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:43243:23249":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:10720:33275":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:7364:3384":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:40876:3352":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:8310:9163":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"4:5906:2153":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:2730:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:9964:23078":{"crate_id":4,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"11:2554:32030":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12127:17048":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:6944:2764":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:6621:2150":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13412:19866":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:4047:9172":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:4911:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:41497:3368":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:44845:3536":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:22355:8798":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"4:9472:2806":{"crate_id":4,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"4:12023:25814":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:5390:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14587:20415":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13814:20366":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"4:3522:2964":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:6636:14524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:16259:19864":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:13187:19853":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:3229:2953":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5236:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:5438:9338":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:3741:15830":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:12592:3526":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:13424:19867":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11853:17082":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12089:17041":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:536:32144":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10818:16900":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"4:11112:25987":{"crate_id":4,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:6376:16746":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12043:17043":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11152:3481":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:14994:21121":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:43503:9264":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:3013:3275":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:22815:23260":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:6756:14538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:7889:16797":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:5407:1109":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14260:20393":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:40912:3385":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:7645:9345":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:47750:8713":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:40816:3348":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:46359:8743":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:41241:3400":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:46025:8709":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:44853:3539":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:6597:14520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12597:17148":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:13581:19878":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"4:9048:25870":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:13785:17086":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13899:20371":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:15582:21176":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:3698:2734":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:40727:3315":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:5489:13807":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:2355:15780":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:5677:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:588:8994":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:3545:15812":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15778:21191":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:10339:9281":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"11:2403:2954":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"4:8385:9209":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13855:20369":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:12084:803":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"4:9160:162":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"4:8631:9269":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:48501:8660":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:4095:2712":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6462:16751":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:42148:23081":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"4:4572:9211":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:42433:2954":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"18:726:21400":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:3449:24061":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:21430:24116":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:46115:8675":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:42004:3409":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:14212:20390":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:38623:2184":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"11:1883:2953":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:497:9777":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:1628:10685":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:4823:9189":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12362:17130":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:3442:3363":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"6:1485:10670":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5536:13811":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7584:14959":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:48448:8657":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7225:16769":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:6621:14522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:44247:3480":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:15426:21168":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"14:165:15704":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"4:2671:2781":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:3589:9129":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"6:5181:13770":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:44841:3534":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12707:16903":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"4:11077:3595":{"crate_id":4,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:3236:9031":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:2588:9141":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13473:19870":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:38568:2183":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:45088:3623":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:12683:17145":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:11467:16973":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12572:16899":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:7353:9035":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:10524:16895":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:48204:8746":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"11:2469:2754":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"15:306:15728":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:597:16881":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:22185:8667":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:8291:3482":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"11:351:32013":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:44293:3563":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10905:16902":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:3504:9106":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"16:4761:16436":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:7314:10629":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7971:16801":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:3039:2167":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:515:21405":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:42552:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:42367:2262":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:12851:16906":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:713:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12824:16905":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:1536:9021":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:44442:3313":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:34533:2177":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5039:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6562:14519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:2769:15799":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:46738:8751":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15176:21144":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:15289:21154":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:880:9019":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"9:177:15677":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:545:9782":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:7362:2283":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:586:9788":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6282:16740":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:42788:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"0:0:1796":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"6:7306:9825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:32708:24348":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:42708:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:2234:16993":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:2459:15785":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"4:2657:2783":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5064:13762":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6555:15722":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12584:16900":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"11:774:9018":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:856:2936":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:14868:21127":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:44275:3562":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:3356:9149":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:44891:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:2121:2978":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:8954:9291":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:4257:2740":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:12318:16911":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3652:2954":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:1098:16936":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:8012:15330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12530:17143":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:9089:16767":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"4:8315:9161":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"4:10447:9148":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:2748:29512":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:8341:15526":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:15390:21164":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:41470:3363":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:2617:15792":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:8881:9282":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12300:17128":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:16269:19866":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:22271:8796":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:3203:2126":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:0:480":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:13046:16866":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:13470:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:48353:8650":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:14545:20413":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11567:17023":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"16:4733:16431":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"4:11058:9283":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:15301:21155":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:14463:20407":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"11:1087:32032":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:32697:23610":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:11579:9167":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"4:867:9018":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"4:7926:9104":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6669:16756":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:2271:2776":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"18:735:21393":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11242:16957":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"4:6892:9299":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"4:8248:9108":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"4:859:2283":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:4871:16454":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:7565:16789":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5314:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"11:673:2953":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:7370:9034":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:45037:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14788:21124":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:5225:13775":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2983:2123":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11557:17022":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6348:16744":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5283:13782":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:6230:16736":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13292:19858":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12768:16861":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:5726:16717":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:42291:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:1578:2283":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:5209:204":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:10661:16897":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"11:844:9024":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:7382:2734":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:40627:3292":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10958:3483":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:16187:21362":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:4366:2129":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:43285:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:10350:16893":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:6331:16743":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:16105:21356":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:2971:2124":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"16:6116:16729":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5415:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:4269:3296":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:7595:16790":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:5083:13763":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11877:17039":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:2226:30820":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5624:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"4:4706:9175":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:3296:9033":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:14933:21130":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:4065:2734":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:30969:23095":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:4210:28275":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:4864:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:4997:421":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:11674:17026":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5581:13815":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"4:1072:9029":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:5959:15749":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8391:3293":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:46789:23097":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4985:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:5580:16710":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5653:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:32661:3263":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:6921:2752":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:14298:20396":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:6471:14513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:3798:2958":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:21401:24113":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:286:2099":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:40022:2194":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"4:11424:28269":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:3190:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:3856:15876":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:722:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:40772:3312":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:47360:8696":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:14503:20410":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:10719:129":{"crate_id":4,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:8931:2283":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13399:19865":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:2819:15801":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:42669:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:13415:2791":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:3501:2127":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12621:17146":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:5290:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:22782:3045":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:2859:3268":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"6:5112:13765":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:3597:17065":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:1332:2940":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:4456:2740":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:40042:3287":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11915:17084":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:4942:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:5006:16497":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:31480:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:22728:23187":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:44926:3597":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:15992:21352":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:7194:32528":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"4:1862:9060":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15596:21177":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:2419:15783":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11063:16943":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:261:33292":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"4:10676:9101":{"crate_id":4,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"18:113:21381":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:8282:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:3473:17047":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:2079:2955":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"4:12091:1647":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:13435:2986":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"14:0:2029":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:643:33306":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:5557:13813":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:22924:3061":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5146:13768":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11293:16960":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:14271:20394":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:5825:16720":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:15168:21143":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:670:21396":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:40029:3273":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:10851:2954":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12251:17097":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:14189:20389":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"11:875:9025":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:47206:8678":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:3388:2754":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"11:1582:2945":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7152:16768":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:13173:17184":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:2641:15793":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:16121:21357":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"10:44:15682":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"4:7754:8985":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"1:48002:8719":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:726:3047":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"4:8215:3358":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:45109:3622":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:40683:3321":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:44101:3553":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6858:16765":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14325:20398":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:10044:16888":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:6460:14512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:0:2032":{"crate_id":17,"path":["object"],"kind":"module"},"1:40670:3319":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:4605:2117":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:39972:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:2529:15788":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:14489:20409":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:3993:15990":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:1841:1196":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:4203:24299":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12238:17098":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:5244:13777":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"11:687:2954":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:559:9784":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:14529:20412":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6737:32426":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"0:31:1803":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"1:3221:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:14111:20385":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:3020:3247":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:16138:21358":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:45034:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:10827:2953":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:43874:21441":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11256:16958":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:6773:16761":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:5919:16725":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13538:19875":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:22406:22919":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:42020:3410":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:3029:2169":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"7:78:15550":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:15410:21166":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"18:96:21380":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:7480:3355":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"4:909:9020":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:44505:3579":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:4897:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:16151:21359":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:13363:19862":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:8055:16806":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:13525:3626":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:40856:3347":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:7258:2291":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:41455:1941":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"11:2151:9028":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13089:17181":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:33208:2166":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:7627:25864":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:42064:23197":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"4:9460:139":{"crate_id":4,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"8:0:2024":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:9984:16887":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:15734:21187":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:563:21408":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"4:2438:9092":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"1:40633:3297":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"14:202:9343":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:4061:9173":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:9181:3540":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:860:2718":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:11788:17079":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:42204:3414":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:3709:15821":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:7816:9003":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14449:20406":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:3113:2178":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:42985:3447":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:22542:8791":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:12264:17096":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:6908:32395":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:621:8995":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:5050:2740":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:46692:8744":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:2749:15798":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"4:6511:2148":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:7461:14951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:44071:3551":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"14:7:15703":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:15138:21141":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"4:4232:9201":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"4:3234:29102":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"4:9081:25942":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"4:7982:9017":{"crate_id":4,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:4:1122":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:12695:17144":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:42368:2356":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:5278:16700":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:6621:23055":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:7402:9039":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:46500:8723":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:10399:3552":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:40215:23397":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:40712:3292":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:4481:2107":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"4:2982:2786":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:7559:9083":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"11:102:32027":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:8253:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:2978:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"5:1161:2947":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"4:10230:115":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:43482:3464":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:15814:21193":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:10982:16920":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:5878:16723":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8438:24132":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:9781:16882":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:1686:10691":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:12225:17099":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:7587:9081":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40785:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:2517:2948":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:14025:20379":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:42591:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:15799:21192":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:44045:3490":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13146:17183":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:6447:14511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11670:3494":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5528:13810":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:45134:3629":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"11:832:9020":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3732:2712":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:2496:1962":{"crate_id":4,"path":["std","io"],"kind":"module"},"1:4560:2116":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:14284:20395":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5588:13816":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:7575:14958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12543:17142":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:5361:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:22743:23048":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:4109:9176":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:39817:2199":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:39914:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5616:16712":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10284:16891":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:10290:3463":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13972:20375":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:40739:3316":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"16:3830:15873":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:2399:15782":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:8351:15527":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:38458:2181":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:4011:9171":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:1671:10689":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:14436:20405":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:44719:3589":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:46867:23257":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:44389:3557":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:4489:2743":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:45096:3624":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:5794:16719":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:40846:2823":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:5696:16716":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"4:1809:662":{"crate_id":4,"path":["std","env"],"kind":"module"},"4:3315:9152":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9755:16852":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:7462:2283":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:1547:9022":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:1510:10674":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:7622:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:6227:2791":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:21384:24104":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:7894:3374":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12478:17135":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:43306:3454":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:2740:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"4:3354:9148":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"4:9069:25798":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:1526:9020":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13485:19871":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12289:17092":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:15333:21158":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:11865:17083":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:816:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"4:10088:2968":{"crate_id":4,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"13:226:32033":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5014:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:517:9778":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6077:16727":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:12724:16904":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:12201:17125":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:44417:3564":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:725:9109":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:9150:234":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11075:16939":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6689:14530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:10462:2834":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"16:7118:2259":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:1663:10688":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:1040:1940":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:11635:9314":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"17:11524:17020":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:32818:3168":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"16:5897:16724":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:2724:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"16:6788:32385":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"4:5476:9275":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"17:16249:21367":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:12516:17152":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:5160:13769":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14177:20388":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:2835:15802":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11841:17081":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:15616:21179":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:48410:8655":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:46069:8710":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"4:11095:9113":{"crate_id":4,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:7599:9082":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5515:13809":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:14356:20400":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15456:21171":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11227:16929":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:22831:23201":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:3260:15810":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:4399:16327":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3017:2347":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:1051:9028":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:46890:23199":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:256:33284":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:38513:2182":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:41448:3359":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:2231:15688":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:2093:2958":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12647:17141":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"4:7938:9105":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4891:13573":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:12823:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:6882:32466":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:39952:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:46239:8728":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:8236:2965":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"4:12085:800":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"1:39781:2200":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:44408:3565":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:6714:14533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:7355:16776":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:12096:1255":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"4:4716:26024":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:48399:8654":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:608:33330":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:836:2953":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:41066:3396":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12863:16907":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:15748:21188":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:914:9021":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:44424:3314":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:21627:8664":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"4:8406:9240":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:1723:10694":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"11:2562:32025":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13674:20361":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"4:8402:9238":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:7470:2283":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:5331:16703":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:22537:8793":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:12294:3569":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:46169:8711":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:44329:3560":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2818:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:7720:2758":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:363:8992":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:14066:20382":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:10710:140":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:22759:23159":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:11142:16899":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"11:800:2734":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:3020:29513":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:4952:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"4:8358:9207":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"4:637:8997":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10039:3447":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:7932:16799":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6599:15721":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:1911:3251":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:6811:16763":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12108:3473":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:4787:16439":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:5630:13820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:2203:16968":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:15769:21190":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"4:5527:115":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"16:6422:2699":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:6268:16739":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"5:4227:2740":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:30905:3222":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:12433:16869":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"4:7996:25822":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"4:951:9026":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:3626:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:7366:9240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:523:9779":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14847:21125":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:11313:16961":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13455:19869":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"4:11647:25862":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:15368:21161":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:8294:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:6445:16750":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"4:2276:9085":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"4:3814:9165":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5320:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:928:9024":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"4:3811:9166":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:22073:24111":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:5499:16705":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"4:1602:9032":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15102:21138":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:10672:9109":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:9938:16886":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"4:1063:9028":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:5056:3351":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"4:12075:1159":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:6275:25770":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:2140:2940":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:6215:16734":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:15445:21170":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:645:8999":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:42325:2259":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:40943:3386":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:6954:2766":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:21418:24114":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:811:2754":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"4:1581:2734":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2883:15804":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:7730:9109":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"17:15624:21180":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:11051:16949":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"11:1910:9031":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:3863:2754":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:44111:3552":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:8981:9292":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12422:17132":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:34187:2175":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:42441:2283":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:12552:3044":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:1923:9033":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"4:3561:3325":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"17:11026:16923":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"9:446:15572":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:8080:25949":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:44000:3375":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:7103:32519":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6394:16747":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:21399:24108":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14341:20399":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:40981:22869":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:7749:8983":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"16:6759:16760":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:11354:16971":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"15:394:15739":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:15222:21149":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:5568:16709":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:42827:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:43974:3492":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:22031:9109":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:10137:16853":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:11495:2815":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"4:10700:9105":{"crate_id":4,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:13774:17085":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:21744:9109":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:573:33306":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:10068:16867":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:15646:21182":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10041:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:44229:3484":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:6657:14526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:12175:17112":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:45118:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"4:1939:9078":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"4:3570:29423":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"10:0:2026":{"crate_id":10,"path":["adler"],"kind":"module"},"11:2542:23456":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"4:7931:9101":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:44647:3585":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:22913:3046":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:10919:3495":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:1517:10675":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:2709:15796":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:13723:20362":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:8894:9283":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"4:10444:9152":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"4:10738:28684":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:8012:16804":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:47048:8718":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7270:16770":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:5266:13780":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:4572:16362":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"5:1567:9037":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"13:109:32080":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2789:15800":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11825:17060":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:34360:2176":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:15608:21178":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:2304:15777":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:46470:8717":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:46522:8729":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:5031:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:48288:8731":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13116:17182":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:40995:3391":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:15434:21169":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:43521:23242":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:659:21395":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:5883:3390":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:41096:3398":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:4477:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:40720:3314":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:46646:8689":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1585:10682":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:45047:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"3:0:2022":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"4:8996:9295":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:2516:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:1707:10693":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:8317:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"4:8478:9263":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"1:41013:3402":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6738:14536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"17:14372:20401":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:7389:10815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"4:6243:2794":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:42866:2143":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:3472:2740":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"17:13986:20376":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"4:4902:9185":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"4:9299:2427":{"crate_id":4,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:44857:3537":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10769:33280":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:12663:3573":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:12079:1630":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"6:7537:14955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:6788:31940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:3270:9030":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13015:16869":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:44684:3586":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:45157:23251":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:2035:197":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:7392:2724":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:1317:9028":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:532:9780":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"4:7774:2808":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"17:11153:16900":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:2807:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:9235:25984":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:44698:3587":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:46199:8716":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:7348:14947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"5:820:2715":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:10045:3449":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:44084:3550":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:48463:8658":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:1826:9050":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"16:7684:16794":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"14:160:15703":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:6615:3380":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:41441:22867":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:16032:19856":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"4:12092:1648":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"1:44620:3584":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:10729:2965":{"crate_id":4,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"4:1975:709":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"17:14575:16869":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:15126:21140":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:217:2710":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:10952:2812":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:42964:3445":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:5512:9277":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"17:15190:21145":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:2979:15806":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11405:16969":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11138:3485":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7176:32520":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"4:6547:2154":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:8620:9268":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"16:8097:16807":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:10487:2808":{"crate_id":4,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:7429:32243":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:5097:860":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:11702:17027":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"0:29:1802":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"17:9671:16856":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:14079:20383":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:44095:3554":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"16:6579:16753":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:48:1936":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"16:7366:16777":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:15400:21165":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"11:0:2027":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"11:2304:9027":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:14475:20408":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:22:736":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:42747:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:2689:15795":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:11537:16987":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:10479:2781":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:5496:9276":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"4:10247:2969":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"4:5132:25952":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14051:20381":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:6063:2959":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:916:2720":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:42242:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"11:1676:2706":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13437:19868":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:945:9025":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:9213:25778":{"crate_id":4,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:4550:2115":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7414:16781":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4909:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7491:16785":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8082:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"4:8004:9142":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:6542:14518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:14402:20403":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:22807:23094":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:40790:3349":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3051:2186":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:11214:16930":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"4:11558:9165":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:10037:3446":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4486:2108":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:9145:187":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:3061:2188":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:2917:15805":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:0:1537":{"crate_id":4,"path":["std"],"kind":"module"},"6:7984:9732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:42971:3444":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:364:2702":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:13946:20373":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:5485:16704":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7551:16788":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:80:21379":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:10612:16896":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:635:33326":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:16176:21361":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:11385:25840":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13526:19874":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:15281:21153":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:36582:2180":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:4821:17147":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:3424:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:44865:3532":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11647:17025":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:1716:2712":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:2558:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:15463:21172":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:1346:9029":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:10242:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:15418:21167":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:4907:16467":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:6010:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:13397:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:7330:9655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5445:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:5200:13772":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6201:16733":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"4:4069:9174":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13387:19864":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:16165:21360":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"4:10441:9150":{"crate_id":4,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"6:8265:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:5122:13766":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:1699:10692":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:12087:802":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"4:12088:798":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"1:2363:3234":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"4:7667:2802":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:2548:32024":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12494:17100":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"7:31:15543":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:5477:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:1692:9196":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11688:16992":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7706:16795":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:43953:3488":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15931:19853":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:15944:19854":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:43706:3523":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15214:21148":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:1887:2963":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"17:15836:21195":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14235:20391":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:6421:9301":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"4:2266:139":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:8907:9284":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"1:34706:2179":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:531:21406":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6721:14534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:6678:14529":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:3916:9167":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:3177:15809":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:8006:15329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"4:4825:9190":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4787:13733":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:22793:23255":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8026:2097":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"4:5649:9279":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"18:521:21402":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:5662:16715":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:6062:32468":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5423:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:4518:16354":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:21753:8666":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:7935:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10185:16858":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:39861:2189":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"17:15266:21151":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5502:13808":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:21372:24104":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:44709:3588":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:4433:16338":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"4:10855:9278":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"17:13308:19859":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:2268:9084":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"6:5665:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4924:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:48373:8652":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:6417:14508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:43934:3478":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:570:9786":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:47094:8724":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4811:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:10847:9068":{"crate_id":4,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:43513:23210":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11089:16934":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:41106:3382":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"4:7921:9103":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:32701:16806":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"4:12039:28519":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:5344:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"4:4017:9170":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6435:14509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:1680:10690":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:40953:3387":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:5846:16721":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:22061:3476":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:44035:2984":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:3253:2190":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:14977:21132":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:1025:2940":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:4837:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:22493:9109":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:14560:20414":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"4:8351:3413":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:2124:9027":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:42036:3411":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:6532:14517":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6874:14570":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:12370:3570":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:6151:2789":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:16235:21366":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:13553:19876":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:6691:2156":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"4:11069:28679":{"crate_id":4,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:15383:21163":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:5390:2712":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:513:16880":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:8029:15331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:33932:2172":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:4718:26026":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"4:4720:26028":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:48540:8661":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13024:16913":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:40934:3377":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"4:2422:3225":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"17:12557:16939":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:47394:8745":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12107:16899":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10877:16901":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:3010:15808":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:21646:8665":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5436:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:13248:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"11:1066:15692":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:7434:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:10671:28561":{"crate_id":4,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"4:7822:9067":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"4:5861:2146":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11042:16924":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:15116:21139":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:3464:2125":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:2299:30845":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"4:7976:129":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:7517:9014":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:40963:3388":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:3262:9032":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:2187:2731":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:41489:3366":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:1181:30874":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:34050:2173":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:3430:2195":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12485:17136":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:3264:17042":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"4:4392:9206":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11743:17030":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15356:21160":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:48425:8656":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:465:9772":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5645:16714":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:8915:2953":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:22183:9109":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:2736:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:12086:801":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:2733:9143":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"4:8966:9294":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"4:5389:130":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"17:15376:21162":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:485:9775":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:42356:2260":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:40746:3317":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"16:4702:16423":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"4:7467:28518":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"17:15569:21175":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"4:6378:220":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:6626:2829":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11128:16931":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"4:4248:9203":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:6729:14535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:5298:16701":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:43925:3479":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"13:0:2023":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12124:3475":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:11773:17078":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13509:19873":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"7:0:1694":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:30937:3223":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7386:16779":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:5827:2144":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"4:9122:25995":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"4:7686:2804":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:11102:16933":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:1040:9027":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10092:16889":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:46221:8722":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"0:28:1796":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"4:8369:9199":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"4:8363:9208":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"5:1558:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5382:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:43943:2981":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:7452:14950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:7616:16881":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:32820:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:44347:3561":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:22622:23072":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:6725:233":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:538:9781":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11730:17029":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:5376:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:41034:3379":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:2175:17008":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5457:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:6554:2734":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"4:1585:2754":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:5555:16708":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:1547:10678":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:7898:3373":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:1811:3199":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:8298:3555":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:43725:3500":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:5807:2740":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:7602:14960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:7412:10800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:12083:698":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:32733:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5865:16722":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:15313:21156":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:6811:14542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:15720:21186":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"4:12089:1649":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"16:5316:16702":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:8300:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12342:17095":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"4:1968:9079":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"6:7561:14957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:6402:9300":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"4:10090:25955":{"crate_id":4,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"4:11290:25867":{"crate_id":4,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:5699:2752":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11341:16972":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"4:4784:9210":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:4335:2128":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:7537:16787":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:21362:3258":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:7528:9015":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:2593:15791":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:12353:17129":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6408:16748":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:12331:3571":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:8394:3371":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:44055:2985":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:11443:16975":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:6724:16758":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:1535:10677":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12408:17122":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:47892:8685":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5191:13771":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:7653:16793":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:1580:10681":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:5046:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:42366:2263":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:13221:23741":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:2353:639":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"4:4464:9200":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:41082:3397":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:40801:23268":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"4:6624:2151":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:46970:8712":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:1496:10672":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:4870:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:6491:14470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:32731:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:3214:2096":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5250:13778":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6849:16764":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:33394:2165":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"16:6244:16737":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:7802:9002":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11637:3493":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:6519:14515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:8564:9266":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:40753:3318":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:12140:3546":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"14:214:15712":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11269:16959":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:8247:13984":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:40828:3334":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:44526:3580":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:6379:14442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"4:3273:9150":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:30943:3190":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:3024:2164":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:13272:19857":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:2104:9038":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:7324:16773":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"4:8937:9293":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:328:32023":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5134:13767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:15655:21183":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:43204:23070":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:42385:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:11595:17024":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11016:16922":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:123:2700":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:41047:3394":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"14:40:19855":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6965:16767":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:3436:2197":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"4:3317:9153":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:46570:8677":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:10035:3445":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:10622:33287":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"4:12071:1041":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"4:7987:9016":{"crate_id":4,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"4:9196:9298":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:6042:2142":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"4:12044:9004":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:5601:16711":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5219:13774":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5598:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:14038:20380":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:491:33325":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:0:2031":{"crate_id":16,"path":["gimli"],"kind":"module"},"4:1574:2953":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"9:52:15591":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:14386:20402":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10954:16919":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:39865:2191":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:12454:17133":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:6221:16735":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:4650:9228":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4992:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:623:33305":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:12095:1704":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:1607:9033":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"4:2450:9098":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"6:473:9773":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:41479:2830":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"4:3399:9138":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:10250:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:1820:2754":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:1517:9019":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:8268:3385":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:47544:8679":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"11:1917:9032":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:14414:20404":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:6746:14537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"4:7731:8993":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:1301:9027":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:39892:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"16:6362:16745":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"11:299:2933":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:40693:3322":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:14147:20387":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:41004:3392":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11812:17038":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:557:2962":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"4:4996:9236":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"4:7960:140":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"4:5720:9288":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:5434:9337":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:7444:16782":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"4:415:185":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"4:3237:28403":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:9983:3325":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"16:2336:15779":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"4:9017:2147":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"4:10382:2807":{"crate_id":4,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"4:7070:29082":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"4:357:8991":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:13064:16865":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:8306:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11166:16937":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:6431:16749":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:1653:10687":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:42630:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:13199:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:15324:21157":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"16:7869:16796":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"4:6507:1941":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"1:10033:3444":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:5352:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:7710:2106":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6254:16738":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:613:33309":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"4:4240:9202":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7452:16783":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"4:11413:25805":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:2509:15787":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"4:11230:25882":{"crate_id":4,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:10170:16703":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:22866:23086":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"16:5238:16683":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12929:16910":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:3024:30939":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6821:14543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:4250:3295":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5370:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:9886:16884":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:2536:32028":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10317:16892":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:3639:2953":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"9:329:15628":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:11858:2819":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:4821:9186":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11583:16994":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"9:356:15588":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:40883:3375":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:14986:21133":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"4:9035:117":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"4:5652:9280":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"6:479:9774":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"4:12093:1645":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:42170:3412":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:14723:21122":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:6706:14532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:5018:24809":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:12090:1646":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:10218:16859":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14752:21123":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:39877:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"4:8864:9281":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11419:16899":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"4:10935:2810":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11714:3249":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"4:8614:2953":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:8271:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:46091:8715":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:23957:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7376:16778":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:43474:23092":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13497:19872":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"11:2443:2734":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:15206:21147":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"4:8012:2955":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"15:327:15732":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:6646:16755":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12213:17126":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:14599:20416":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:10439:16894":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:7984:16802":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"4:3017:138":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"4:939:2936":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:4137:2954":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:6880:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:9690:25142":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12969:16857":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"4:2693:9134":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:11069:3487":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:12094:854":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"17:13344:19861":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:7089:2771":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:33873:2174":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:44541:3581":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:31131:23034":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:5706:220":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:7467:14952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:149:2696":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:22893:23207":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:7611:2750":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11547:17021":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:8197:15490":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"4:504:2731":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"4:11430:28276":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:7363:3383":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:12900:16909":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:42377:3419":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:4550:9210":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1455:2953":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:3589:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"6:5617:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:2352:9028":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:44750:3545":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"12:0:2028":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:48080:8691":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:6900:14571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4800:13734":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:5346:32424":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"18:718:21392":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:22379:9109":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:4614:2118":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:12464:17134":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5565:13814":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"4:7223:28270":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:14876:21128":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:3018:30980":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11124:3480":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:2375:15781":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:2439:15784":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11574:15688":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:40903:3376":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:15678:21184":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:32732:2094":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:12617:3541":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"4:533:2778":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"16:2573:15790":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"4:12076:332":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"11:700:2283":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"11:1896:2754":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:7973:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1418:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:8870:199":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"17:12887:16908":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6768:14540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"11:1007:9027":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:41231:3399":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:5541:16707":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:7944:2098":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"14:187:15711":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:44026:3489":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"4:10870:25878":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:8288:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:6664:14527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:6775:14541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:11367:16939":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:13273:3620":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:30681:3005":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"16:3773:15839":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:7359:14948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1559:10679":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:10069:9060":{"crate_id":4,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"16:7482:16784":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:48344:8649":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10534:33265":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:10026:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"16:8022:16805":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:40644:3320":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:12072:453":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"1:2973:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:1717:2740":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:7400:16780":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:1903:9030":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11755:17031":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"15:0:2030":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:22851:23109":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7523:16786":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:6167:2740":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:2319:15778":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"4:4312:9205":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:10396:2832":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:2729:15797":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:41025:3393":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10285:3462":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:14246:20392":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:6600:2712":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12056:17044":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"10:36:32012":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:0:536":{"crate_id":1,"path":["core"],"kind":"module"},"18:689:21398":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11392:16970":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:10043:3448":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:7546:14956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:6546:16752":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:9076:25788":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:42316:2283":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"6:5636:13821":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"4:893:2734":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:42182:3413":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:7609:16791":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6941:16766":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4876:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:41982:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12443:17123":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:7619:16792":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"4:5163:25952":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:4491:16350":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:2383:2953":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:22036:8671":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"18:680:21397":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11764:17032":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:4879:2787":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5260:13779":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:7339:14946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:40925:2971":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:46270:8676":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:12055:25986":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11605:17019":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:4411:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13375:19863":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:3579:9107":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"9:481:15571":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:10996:3496":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:8259:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:1145:30873":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:44869:3533":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:10494:2839":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"5:1054:2712":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:44732:3544":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:698:21399":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:44379:3555":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"17:11715:17028":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"4:10156:9286":{"crate_id":4,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:44125:3482":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:9685:24129":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:44555:3582":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:1566:15694":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:41057:3395":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:21572:9109":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:3600:15813":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:46045:8674":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:12606:3543":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:12792:16863":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"5:7704:2754":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:15010:21134":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:4971:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:16223:21365":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"4:4075:9175":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"9:237:9264":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11115:16932":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:40972:3389":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:46322:8688":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:5997:3378":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"4:11518:9166":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:15023:21135":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2365:3235":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:5759:16718":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:8604:9267":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"1:44572:3583":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:578:9787":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:9830:3460":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:11189:16935":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:3218:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:21625:9109":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11898:17059":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:7837:9068":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:21633:8668":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:43963:2983":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12993:16912":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:651:33306":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:7446:14949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:3275:9151":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:42222:3415":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10018:16860":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:4409:1938":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:9503:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5546:13812":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:4261:9204":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:26357:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"4:6438:186":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11110:3484":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:7650:3358":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:42450:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:13877:20370":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:10682:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:46424:8663":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:44433:3292":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:46377:8749":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:7635:9344":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:10747:28682":{"crate_id":4,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:7543:2745":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:12073:1665":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"5:5926:2734":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:7412:29486":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:5277:13781":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14912:21129":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4227:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:10915:33266":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2450:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"4:4987:9235":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:44861:3538":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:16050:19857":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"11:1891:2734":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:7335:16774":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:271:2712":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:8090:9144":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"4:9102:25747":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:538:21407":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:46137:8681":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:39202:2185":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10997:16921":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:933:2953":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:11130:162":{"crate_id":4,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"5:2197:29492":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:2569:9014":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:22408:3234":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"6:5002:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11621:16997":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11324:16986":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"14:220:15713":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:5200:2142":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:43259:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5020:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"4:6979:2799":{"crate_id":4,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13959:20374":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:4661:2120":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:4674:16418":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:5052:13761":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:9070:2261":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:46714:8750":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12076:17040":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13753:20364":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:10689:25964":{"crate_id":4,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"4:5462:9274":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"17:1207:16944":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:396:2704":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:2423:2283":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:44915:3596":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:14855:21126":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5329:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:10155:16702":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"4:12097:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"4:11654:15736":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"4:4119:9177":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:7516:14954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:11358:9287":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:8328:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"4:10887:9284":{"crate_id":4,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:46668:8695":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:5643:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:41464:3361":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5306:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:6895:32451":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:5466:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:7426:2283":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:640:8998":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14516:20411":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"4:7948:9102":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"1:44837:3531":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:11661:16996":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:4126:2740":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"17:15197:21146":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:14311:20397":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:15273:21152":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"4:8461:9249":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:2688:3004":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11497:16967":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:3409:2193":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:2859:15803":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"11:1887:2283":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1639:10686":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:2552:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:16212:21364":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"9:391:15573":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5483:13806":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:5671:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5102:13764":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:1526:10676":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:482:2777":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:7045:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:5856:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4824:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:3028:30938":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:44873:3595":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:6682:2283":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:15473:21173":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"4:3240:28413":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"4:4123:9178":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:43231:23184":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:5521:16706":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:12354:3568":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:1470:2954":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"11:434:32017":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:1925:23151":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"4:8224:9155":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"16:4813:16442":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:12408:3495":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8400:3372":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:32722:3272":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:2469:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"4:8285:3552":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"17:13235:19855":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:2001:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:16069:21353":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:22448:8800":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:6629:14523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6692:16757":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10887:33281":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:47330:8690":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:10876:3482":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"16:4937:16474":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:15957:21351":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:6609:14521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:31507:3258":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:30958:3248":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10828:33293":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:7951:16800":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:4838:3306":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:15635:21181":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10759:16899":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:6650:14525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6670:14528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:5400:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:9858:16883":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"4:849:2954":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:48326:8752":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:42425:2953":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:45145:3627":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"11:742:9022":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:661:29471":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:1490:10671":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"4:11335:2813":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:1054:2940":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:15249:21150":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:6929:32477":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"11:430:32022":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4965:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4959:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"4:2424:9088":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12399:17131":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13797:20365":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10001:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:2727:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:13832:20367":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13922:20372":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"4:11399:25849":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:32788:2095":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:44175:3559":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:4649:16416":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12371:16910":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:48478:8659":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:43214:3248":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:1503:10673":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12949:16911":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6409:14507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:10031:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:39992:2192":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7114:2775":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:5174:9169":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"11:837:9023":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"4:12077:1512":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"17:9737:16854":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:12189:17124":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:553:9783":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:6763:14539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"11:883:9026":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:12078:1545":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"4:11045:9282":{"crate_id":4,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:15521:21174":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:2553:15789":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"4:11661:15736":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13594:19879":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"4:5834:2145":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13738:20363":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:7485:14953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:1486:2283":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:1446:156":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:44849:3535":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"4:723:154":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:21416:24119":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:12612:3542":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12030:17045":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"4:10647:9239":{"crate_id":4,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:1565:10680":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:46836:23056":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:903:2754":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:12808:16864":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11799:17080":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"4:6052:2795":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"4:918:9022":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5472:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:13252:19856":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:437:15752":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:2521:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:3015:226":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"4:2032:198":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3200:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:7572:23268":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:48142:8725":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:2665:15794":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"4:8549:9265":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:3275:29465":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:44013:3491":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"4:8923:9296":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:5336:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:13999:20377":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:6745:16759":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5038:16506":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:0:2033":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4979:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:2037:16974":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"4:1885:2427":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"17:12328:17093":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:9467:9104":{"crate_id":4,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:15039:21136":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:4885:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:5713:32116":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:41255:3401":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:3224:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:5296:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:16079:21354":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:4986:17153":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:13844:20368":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}