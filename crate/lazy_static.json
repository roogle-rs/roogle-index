{"root":"0:0:1748","crate_version":"1.4.0","includes_private":false,"index":{"1:12438:28531":{"id":"1:12438:28531","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12060:3320","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::matches":"1:12435:1955"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43651:3355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:29207":{"id":"5:5533:29207","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2056","`String`":"5:7487:245"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2056","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:8827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12447:28534":{"id":"1:12447:28534","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12364:28524":{"id":"1:12364:28524","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12362:28523"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12362:28523":{"id":"1:12362:28523","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12397:24963":{"id":"1:12397:24963","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12387:21992":{"id":"1:12387:21992","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12386:21995"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43712:3359","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12420:28530":{"id":"1:12420:28530","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12060:3320","str::split":"1:12408:25387","prim@char":"4:12051:446","str::split_terminator":"1:12417:28529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43497:3352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12426:25394":{"id":"1:12426:25394","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"4:12051:446","str::splitn":"1:12423:25392","self::pattern":"1:12060:3320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43551:3273","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12461:24813":{"id":"1:12461:24813","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1748":{"id":"0:0:1748","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[8,0],"end":[215,1]},"visibility":"public","docs":"A macro for declaring lazily evaluated statics.\n\nUsing this macro, it is possible to have `static`s that require code to be\nexecuted at runtime in order to be initialized.\nThis includes anything requiring heap allocations, like vectors or hash maps,\nas well as anything that requires function calls to be computed.\n\n# Syntax\n\n```ignore\nlazy_static! {\n    [pub] static ref NAME_1: TYPE_1 = EXPR_1;\n    [pub] static ref NAME_2: TYPE_2 = EXPR_2;\n    ...\n    [pub] static ref NAME_N: TYPE_N = EXPR_N;\n}\n```\n\nAttributes (including doc comments) are supported as well:\n\n```rust\n# #[macro_use]\n# extern crate lazy_static;\n# fn main() {\nlazy_static! {\n    /// This is an example for using doc comment attributes\n    static ref EXAMPLE: u8 = 42;\n}\n# }\n```\n\n# Semantics\n\nFor a given `static ref NAME: TYPE = EXPR;`, the macro generates a unique type that\nimplements `Deref<TYPE>` and stores it in a static with name `NAME`. (Attributes end up\nattaching to this type.)\n\nOn first deref, `EXPR` gets evaluated and stored internally, such that all further derefs\ncan return a reference to the same object. Note that this can lead to deadlocks\nif you have multiple lazy statics that depend on each other in their initialization.\n\nApart from the lazy initialization, the resulting \"static ref\" variables\nhave generally the same properties as regular \"static\" variables:\n\n- Any type in them needs to fulfill the `Sync` trait.\n- If the type has a destructor, then it will not run when the process exits.\n\n# Example\n\nUsing the macro:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nuse std::collections::HashMap;\n\nlazy_static! {\n    static ref HASHMAP: HashMap<u32, &'static str> = {\n        let mut m = HashMap::new();\n        m.insert(0, \"foo\");\n        m.insert(1, \"bar\");\n        m.insert(2, \"baz\");\n        m\n    };\n    static ref COUNT: usize = HASHMAP.len();\n    static ref NUMBER: u32 = times_two(21);\n}\n\nfn times_two(n: u32) -> u32 { n * 2 }\n\nfn main() {\n    println!(\"The map has {} entries.\", *COUNT);\n    println!(\"The entry for `0` is \\\"{}\\\".\", HASHMAP.get(&0).unwrap());\n    println!(\"A expensive calculation on a static results in: {}.\", *NUMBER);\n}\n```\n\n# Implementation details\n\nThe `Deref` implementation uses a hidden static variable that is guarded by an atomic check on each access.\n\n# Cargo features\n\nThis crate provides one cargo feature:\n\n- `spin_no_std`: This allows using this crate in a no-std environment, by depending on the standalone `spin` crate.","links":{},"attrs":["#![doc(html_root_url = \"https://docs.rs/lazy_static/1.4.0\")]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:29:1754","0:31:1755","0:28:1748"],"is_stripped":false}}},"0:28:1748":{"id":"0:28:1748","crate_id":0,"name":"lazy_static","span":{"filename":"src/lib.rs","begin":[167,0],"end":[179,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_export(local_inner_macros)]"],"deprecation":null,"inner":{"macro":"macro_rules! lazy_static {\n    ($(#[$attr:meta])* static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    ($(#[$attr:meta])* pub ($($vis:tt)+) static ref $N:ident : $T:ty = $e:expr; $($t:tt)*) => { ... };\n    () => { ... };\n}"}},"1:12453:28537":{"id":"1:12453:28537","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:29204":{"id":"5:5521:29204","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12389:28528":{"id":"1:12389:28528","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43693:3351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12359:864":{"id":"1:12359:864","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"4:12051:446"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12441:28532":{"id":"1:12441:28532","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12060:3320","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::rmatch_indices":"1:12444:28533"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43579:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12478:26509":{"id":"1:12478:26509","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:3159":{"id":"5:5534:3159","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12408:25387":{"id":"1:12408:25387","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12060:3320","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::split_whitespace":"1:12386:21995","str::rsplit":"1:12414:25390"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43429:3275","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12411:21972":{"id":"1:12411:21972","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11876:3288","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12404:2228":{"id":"1:12404:2228","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41469:194","prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12375:22914":{"id":"1:12375:22914","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12358":{"id":"1:12358","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12359:864","1:12360:2229","1:12361:28522","1:12362:28523","1:12364:28524","1:12367:25305","1:12368:28525","1:12369:338","1:12370:337","1:12371:1753","1:12373:22913","1:12375:22914","1:12377:22915","1:12379:28526","1:12380:28527","1:12381:25379","1:12382:25380","1:12383:21974","1:12384:22505","1:12385:24687","1:12386:21995","1:12387:21992","1:12388:28274","1:12389:28528","1:12390:21976","1:12391:20739","1:12394:24961","1:12397:24963","1:12400:2271","1:12404:2228","1:12408:25387","1:12411:21972","1:12414:25390","1:12417:28529","1:12420:28530","1:12423:25392","1:12426:25394","1:12429:25396","1:12432:25397","1:12435:1955","1:12438:28531","1:12441:28532","1:12444:28533","1:12447:28534","1:12449:28535","1:12451:28536","1:12453:28537","1:12454:28538","1:12455:28539","1:12458:28540","1:12461:24813","1:12464:25398","1:12467:28541","1:12470:28542","1:12473:28543","1:12476:28544","1:12478:26509","1:12479:26510","1:12480:26512","1:12481:26513","1:12482:26514","1:12483:28545","1:12485:3081","1:12486:28546"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12435:1955":{"id":"1:12435:1955","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12060:3320","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::rmatches":"1:12438:28531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43633:3354","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12455:28539":{"id":"1:12455:28539","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12085:3335","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12458:28540":{"id":"1:12458:28540","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12391:20739":{"id":"1:12391:20739","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12360:2229":{"id":"1:12360:2229","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12414:25390":{"id":"1:12414:25390","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12060:3320","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::split":"1:12408:25387"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43447:3279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12373:22913":{"id":"1:12373:22913","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41469:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12381:25379":{"id":"1:12381:25379","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12382:25380"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12390:21976":{"id":"1:12390:21976","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43721:3358","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12429:25396":{"id":"1:12429:25396","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12444:28533":{"id":"1:12444:28533","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12060:3320","`DoubleEndedIterator`":"1:7476:125","prim@char":"4:12051:446","str::match_indices":"1:12441:28532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43597:3357","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12464:25398":{"id":"1:12464:25398","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12367:25305":{"id":"1:12367:25305","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11620:3340"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12470:28542":{"id":"1:12470:28542","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12485:3081":{"id":"1:12485:3081","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4560:3081"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43737:3082","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:29206":{"id":"5:5532:29206","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:29203","5:5518:3008","5:5521:29204","5:5524:29205","5:5532:29206","5:5533:29207","5:5534:3159","5:5535:26643","5:5536:26644"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12368:28525":{"id":"1:12368:28525","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12370:337":{"id":"1:12370:337","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"4:12068:1602"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12432:25397":{"id":"1:12432:25397","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12476:28544":{"id":"1:12476:28544","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12021:131","`FromStr`":"1:12020:2861"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41612:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12020:2861","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12020:2861","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12361:28522":{"id":"1:12361:28522","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12423:25392":{"id":"1:12423:25392","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320","str::rsplitn":"1:12426:25394"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43533:3277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:29205":{"id":"5:5524:29205","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12449:28535":{"id":"1:12449:28535","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12369:338":{"id":"1:12369:338","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12370:337","`u8`":"4:12068:1602"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12394:24961":{"id":"1:12394:24961","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12400:2271":{"id":"1:12400:2271","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41469:194","prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:1754":{"id":"0:29:1754","crate_id":0,"name":"LazyStatic","span":{"filename":"src/lib.rs","begin":[185,0],"end":[188,1]},"visibility":"public","docs":"Support trait for enabling a few common operation on lazy static values.\n\nThis is implemented by each defined lazy static, and\nused by the free functions in this crate.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"1:12386:21995":{"id":"1:12386:21995","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12387:21992"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43703:3350","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1755":{"id":"0:31:1755","crate_id":0,"name":"initialize","span":{"filename":"src/lib.rs","begin":[213,0],"end":[215,1]},"visibility":"public","docs":"Takes a shared reference to a lazy static and initializes\nit if it has not been already.\n\nThis can be used to control the initialization point of a lazy static.\n\nExample:\n\n```rust\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n    static ref BUFFER: Vec<u8> = (0..255).collect();\n}\n\nfn main() {\n    lazy_static::initialize(&BUFFER);\n\n    // ...\n    work_with_initialized_data(&BUFFER);\n}\n# fn work_with_initialized_data(_: &[u8]) {}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["lazy",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"LazyStatic","id":"0:29:1754","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12483:28545":{"id":"1:12483:28545","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4559:28545"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43728:3103","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12385:24687":{"id":"1:12385:24687","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43415:3346","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12473:28543":{"id":"1:12473:28543","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12417:28529":{"id":"1:12417:28529","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12060:3320","str::split":"1:12408:25387","prim@char":"4:12051:446","`DoubleEndedIterator`":"1:7476:125","str::rsplit_terminator":"1:12420:28530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43479:3353","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:3008":{"id":"5:5518:3008","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12451:28536":{"id":"1:12451:28536","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12480:26512":{"id":"1:12480:26512","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12382:25380":{"id":"1:12382:25380","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12381:25379"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12388:28274":{"id":"1:12388:28274","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43683:3349","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12482:26514":{"id":"1:12482:26514","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:29203":{"id":"5:5517:29203","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2056","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:8827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2056","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:8827","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12377:22915":{"id":"1:12377:22915","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12384:22505":{"id":"1:12384:22505","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"4:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43405:3347","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12467:28541":{"id":"1:12467:28541","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"4:12051:446","self::pattern":"1:12060:3320"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:3334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:3336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12380:28527":{"id":"1:12380:28527","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"4:12057:1496","crate::ops::IndexMut":"1:3076:2142","str::slice_unchecked":"1:12379:28526"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12454:28538":{"id":"1:12454:28538","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12479:26510":{"id":"1:12479:26510","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39501:21012","Self::is_ascii":"1:12478:26509"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39501:21012","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:26643":{"id":"5:5535:26643","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12481:26513"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12371:1753":{"id":"1:12371:1753","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41469:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12486:28546":{"id":"1:12486:28546","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4557:28546"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43746:3102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:26644":{"id":"5:5536:26644","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12482:26514"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12383:21974":{"id":"1:12383:21974","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"4:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43399:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12481:26513":{"id":"1:12481:26513","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12379:28526":{"id":"1:12379:28526","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"4:12057:1496","str::slice_mut_unchecked":"1:12380:28527","crate::ops::Index":"1:3072:2141"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:2859:2120":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:10548:8939":{"crate_id":4,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:43245:2802":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12810:19517":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:2891:2128":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:6332:15943":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13135:19537":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11886:18985":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4680:8957":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:595:9575":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7862:16004":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5827:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:11023:16255":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:47742:8442":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"4:8878:2234":{"crate_id":4,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13148:19538":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9972:16141":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"4:5639:2600":{"crate_id":4,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:7259:2534":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:21227:3025":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4844:13067":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:4200:1893":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:47602:8549":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:9617:32038":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:42487:113":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:1671:1146":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:43579:3356":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:2170:3025":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:2472:14995":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:13546:20256":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:30254:21458":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"4:12051:446":{"crate_id":4,"path":["std","char"],"kind":"primitive"},"0:31:1755":{"crate_id":0,"path":["lazy_static","initialize"],"kind":"function"},"5:1426:2773":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:40068:3149":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5808:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6818:15966":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:9176:27376":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"4:2223:8875":{"crate_id":4,"path":["std","fs","read_to_string"],"kind":"function"},"9:507:14788":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:14401:20316":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:12643:142":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11802:3365":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:44041:3338":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:7128:15977":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:7447:2055":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:4985:2550":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"4:3303:8935":{"crate_id":4,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4986:13083":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:2875:2125":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13778:16146":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:3232:16251":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:676:252":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:760:2563":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:1852:8824":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:2960:29921":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"4:12071:1601":{"crate_id":4,"path":["std","u64"],"kind":"primitive"},"4:1044:8817":{"crate_id":4,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:2574:14999":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:47290:8488":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4589:13041":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10197:16194":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"4:11835:2624":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"4:8415:9051":{"crate_id":4,"path":["std","path","Prefix"],"kind":"enum"},"4:1817:8850":{"crate_id":4,"path":["std","env","SplitPaths"],"kind":"struct"},"6:6627:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"4:5646:9076":{"crate_id":4,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:504:16079":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:554:9569":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:6742:14931":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:3915:15086":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:20906:22559":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:12066:790":{"crate_id":4,"path":["std","i64"],"kind":"primitive"},"15:0:1984":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:40371:3193":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:538:20367":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"10:44:14895":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"6:6180:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:4527:15554":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:447:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:1831:2563":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"4:12054:1107":{"crate_id":4,"path":["std","pointer"],"kind":"primitive"},"4:48:1659":{"crate_id":4,"path":["std","prelude","v1"],"kind":"module"},"17:10430:16231":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:13451:20254":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"4:871:8808":{"crate_id":4,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13693:20252":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:5322:15893":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:2321:14988":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:6714:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:1288:2760":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:11337:16343":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:10628:16240":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:3461:15021":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:8870:9084":{"crate_id":4,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:10429:3276":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:4921:15660":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4448:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:6814:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:47861:8451":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"4:1895:8868":{"crate_id":4,"path":["std","error","Report"],"kind":"struct"},"1:11841:3364":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:12074:3337":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:42240:3242":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10084:16138":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:2543:137":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:45822:8456":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:11066:2616":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:1585:8824":{"crate_id":4,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:6983:3152":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:1548:2550":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:3669:2522":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"4:4648:26903":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:12286:115":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:14355:20314":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:30240:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"4:8916:9082":{"crate_id":4,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:9207:16093":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:2141:29911":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:46044:8492":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:2550:258":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:13575:20259":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:8167:16012":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"0:28:1748":{"crate_id":0,"path":["lazy_static","lazy_static"],"kind":"macro"},"1:39929:21533":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6189:31362":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:14434:20318":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:2223:29990":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"11:1818:2772":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13989:20285":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"4:364:8785":{"crate_id":4,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:45968:8480":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:12724:19511":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6545:15958":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:2170:28486":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:2540:156":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"4:2598:8921":{"crate_id":4,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4994:13084":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:8926:16088":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:2840:3038":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:43235:3281":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6968:15973":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6753:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:46234:21547":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"4:558:2781":{"crate_id":4,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:22758:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:13922:20280":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"4:11332:9075":{"crate_id":4,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9933:16151":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:8895:16087":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10949:16249":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11261:16330":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:2832:15010":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:14269:20306":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:40525:3195":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:9701:16102":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4344:15467":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:43683:3349":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:41680:198":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:4138:27928":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"4:646:8792":{"crate_id":4,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:7503:15984":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"4:12056:1464":{"crate_id":4,"path":["std","slice"],"kind":"primitive"},"1:40764:3160":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:3226:8938":{"crate_id":4,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"4:3522:8898":{"crate_id":4,"path":["std","io","Seek"],"kind":"trait"},"4:8505:9054":{"crate_id":4,"path":["std","path","Component"],"kind":"enum"},"1:46492:8527":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:2959:2297":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"11:1845:8823":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:21345:8459":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"11:736:8809":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:5939:15930":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:6031:13756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4802:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:7387:8807":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:3264:8939":{"crate_id":4,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:10581:3277":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:521:20362":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"4:6987:27008":{"crate_id":4,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:10685:16247":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:8181:16013":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:526:9565":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:4756:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:7890:3083":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:913:8810":{"crate_id":4,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7067:31029":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:43850:3375":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12543:19500":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:7397:3170":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:21343:8900":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:6680:10585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:9574:32040":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:1568:2563":{"crate_id":4,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"4:1579:8823":{"crate_id":4,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:4986:15677":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:113:20341":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:42019:87":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:2696:15004":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:12656:158":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:40294:3188":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:5858:2544":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:5978:2600":{"crate_id":4,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"13:226:30880":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:5317:124":{"crate_id":4,"path":["std","path","Display"],"kind":"struct"},"4:884:8809":{"crate_id":4,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:47823:8449":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:40243:3183":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:40303:3198":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4277:2065":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:44410:3417":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10561:16200":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:2409:1991":{"crate_id":4,"path":["std","io"],"kind":"module"},"11:2033:8817":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"4:2638:8930":{"crate_id":4,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:2012:16182":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11573:16113":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"4:11557:8955":{"crate_id":4,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12098:18997":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:1776:2563":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:45898:8526":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:47762:8444":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"4:8293:8995":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10278:16177":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:3305:8936":{"crate_id":4,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:41552:2209":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"17:11815:16352":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12778:19515":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:42779:20826":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:44423:173":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:7538:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:11055:2615":{"crate_id":4,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:7287:14551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"4:4646:26901":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:2989:121":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12888:19521":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:15:1956":{"crate_id":1,"path":["core","write"],"kind":"macro"},"11:1611:2516":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11108:3286":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"9:450:14785":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"4:7669:8778":{"crate_id":4,"path":["std","thread","ThreadId"],"kind":"struct"},"4:534:2583":{"crate_id":4,"path":["std","thread","Packet"],"kind":"struct"},"6:4382:13018":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:4508:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"4:11253:155":{"crate_id":4,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:6696:14932":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:7328:2234":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:42226:3239":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"4:5137:206":{"crate_id":4,"path":["std","path","PathBuf"],"kind":"struct"},"17:11991:18990":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14448:20319":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13567:20258":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:4500:8999":{"crate_id":4,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:42740:3257":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:22593:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:895:2772":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:9948:2586":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"4:10814:8895":{"crate_id":4,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:10023:16102":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:21180:8472":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:12861:2596":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:11389:26906":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:4626:3095":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"4:11401:27904":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:8848:16086":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:2049:2777":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:4807:2592":{"crate_id":4,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:2254:99":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:21365:8462":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9780:16104":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:41467:196":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:840:2772":{"crate_id":4,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:5964:13749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:7220:8827":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7102:15976":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:7549:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:1473:8809":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:9140:8904":{"crate_id":4,"path":["std","time","SystemTime"],"kind":"struct"},"16:5798:15926":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:40023:3106":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:4396:2074":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13826:20271":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:261:32045":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11710:16118":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"4:1779:8839":{"crate_id":4,"path":["std","env","Vars"],"kind":"struct"},"4:943:2756":{"crate_id":4,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7492:15983":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:14110:20297":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:12067:786":{"crate_id":4,"path":["std","i128"],"kind":"primitive"},"4:8320:8997":{"crate_id":4,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"4:907:2563":{"crate_id":4,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"11:1663:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:4787:415":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:4465:13027":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11620:3340":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4940:13077":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:3441:16256":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:39048:2152":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"4:10109:27391":{"crate_id":4,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:4491:13031":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:32033:3062":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:45443:8477":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5017:13086":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5070:13091":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"7:0:1648":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:9749:3256":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:644:32063":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11124:16306":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:40233:3182":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:276:2056":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"4:8244:8951":{"crate_id":4,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13055:19532":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4774:15633":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:14420:20317":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7090:31364":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:3243:255":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"4:6201:24855":{"crate_id":4,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4835:15646":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:40783:3163":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10383:16174":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:3076:2142":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:14221:20305":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13101:19535":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"4:6602:2111":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"4:10844:2784":{"crate_id":4,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:45567:8514":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:43651:3355":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11162:16301":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:45698:8485":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12373:19493":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:6956:2576":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10292:16101":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3023:1901":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4783:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:782:2525":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:6844:15967":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:2497:8900":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"4:8985:24857":{"crate_id":4,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:2933:15014":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:47400:8522":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:8978:16090":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"15:327:14942":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:660:20355":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:8953:16089":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"4:8181:8899":{"crate_id":4,"path":["std","io","SeekFrom"],"kind":"enum"},"9:0:1979":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:1012:8818":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:7420:8873":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4910:13074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"4:622:8788":{"crate_id":4,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:11590:3266":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"4:12070:1600":{"crate_id":4,"path":["std","u32"],"kind":"primitive"},"1:22193:2862":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:4059:8968":{"crate_id":4,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:14296:20308":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"4:1924:8869":{"crate_id":4,"path":["std","error","Indented"],"kind":"struct"},"4:9046:15977":{"crate_id":4,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:736:20353":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6569:15959":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"4:12022:8797":{"crate_id":4,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"4:7733:8796":{"crate_id":4,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:1302:8819":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6560:2509":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:21094:3025":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"14:221:14923":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:20848:3048":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:1649:10471":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"4:7644:8900":{"crate_id":4,"path":["std","sealed","Sealed"],"kind":"trait"},"16:5830:15927":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:1503:8812":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:8765:16083":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:5049:15692":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"9:486:14784":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14076:20293":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:12678:24409":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:2380:14991":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"4:8312:8952":{"crate_id":4,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"4:7600:2609":{"crate_id":4,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"4:10486:2612":{"crate_id":4,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4430:13023":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"4:8121:8896":{"crate_id":4,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:42964:3317":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"4:9159:9086":{"crate_id":4,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:9496:3241":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:45423:8512":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:21266:8463":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:0:1987":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1672:2522":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"4:4644:26899":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4306:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:4074:2773":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11327:16342":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:5373:9125":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12465:16296":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:6098:2550":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:500:9563":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:1017:1895":{"crate_id":1,"path":["core","hint","unreachable_unchecked"],"kind":"function"},"4:11639:14946":{"crate_id":4,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5995:15933":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:44203:126":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:40016:3105":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"10:0:1980":{"crate_id":10,"path":["adler"],"kind":"module"},"16:7006:15974":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:6041:15935":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:1575:10465":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"4:11536:8953":{"crate_id":4,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:9660:32017":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7015:15975":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6401:15949":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5046:13088":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:9070:15912":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:4796:13061":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:2722:15005":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"4:4176:8991":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:7855:8893":{"crate_id":4,"path":["std","fs","Metadata"],"kind":"struct"},"1:43929:3378":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:5440:9065":{"crate_id":4,"path":["std","process","ChildStderr"],"kind":"struct"},"1:39945:3108":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4370:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:6582:10415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:3020:2053":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:2384:8883":{"crate_id":4,"path":["std","fs","canonicalize"],"kind":"function"},"4:12057:1496":{"crate_id":4,"path":["std","str"],"kind":"primitive"},"16:6268:31374":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:40336:3190":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"11:968:8817":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:42459:21541":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:7555:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:2690:29488":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:39908:3086":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:41671:2234":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:9328:3346":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1717:10478":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:609:32092":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10520:16234":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:1273:8818":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"4:9198:27903":{"crate_id":4,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:5760:15925":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"4:8547:9055":{"crate_id":4,"path":["std","path","Components"],"kind":"struct"},"4:12063:791":{"crate_id":4,"path":["std","i8"],"kind":"primitive"},"17:10698:16269":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"4:358:8784":{"crate_id":4,"path":["std","thread","scoped","Scope"],"kind":"struct"},"4:3224:8937":{"crate_id":4,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:6697:10583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11244:16115":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:29969:2823":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:6192:3176":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:22890:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:7884:16005":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:1545:10462":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:3183:29898":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5866:15928":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"4:1983:200":{"crate_id":4,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9172:16092":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:7529:2054":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:40253:3184":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9350:16063":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:39134:2143":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3170:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4666:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12496:19497":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:11191:16116":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:10112:16165":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12484:16295":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:587:9574":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14156:20302":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"4:3513:27991":{"crate_id":4,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:699:20359":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:7284:2209":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:40096:3148":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"4:4189:8992":{"crate_id":4,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:10467:3289":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11151:16336":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:12085:3335":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:4330:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4731:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:5973:2098":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2406:14992":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:44156:3330":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:582:16080":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:43479:3353":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12970:19526":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:44240:3391":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:8713:16082":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"4:1561:2234":{"crate_id":4,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"4:10551:8935":{"crate_id":4,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:9985:16140":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:1641:2990":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:43216:3271":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11876:3288":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:403:30874":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"4:8212:3195":{"crate_id":4,"path":["std","io","Take"],"kind":"struct"},"4:4168:8990":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:1760:2794":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:42058:94":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:40271:22147":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11358:16345":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:1048:30879":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:12730:3414":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:1557:10463":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:62:9188":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:2284:14960":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:1631:10469":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:13949:20281":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"4:7137:27925":{"crate_id":4,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11448:16107":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:47797:8447":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:2787:112":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:2628:132":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:21698:8473":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:5121:15716":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:41441:3210":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11235:16339":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:9498:3242":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12043:18993":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8562:2211":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:573:9572":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13487:20255":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"19:0:1087":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6795:2242":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10390:3288":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:40285:3187":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:5661:15919":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:1184:16152":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:9086:15913":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:7320:2234":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13422:20253":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:3679:8950":{"crate_id":4,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:4915:9023":{"crate_id":4,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:11719:16119":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:2504:14996":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4897:13073":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:46604:8481":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6657:10600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:4497:15548":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11173:16337":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"16:5963:15931":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"4:11189:26978":{"crate_id":4,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:7283:2234":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:12050:990":{"crate_id":4,"path":["std","never"],"kind":"primitive"},"17:9521:16098":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:22824:183":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:22857:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:11490:16109":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:482:9560":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:39997:3103":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:2832:2050":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:11374:24801":{"crate_id":4,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:3232:15019":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:14522:20325":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14316:20310":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:3600:15022":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"4:8225:3275":{"crate_id":4,"path":["std","io","Split"],"kind":"struct"},"4:2923:132":{"crate_id":4,"path":["std","io","error","Error"],"kind":"struct"},"16:6687:15962":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12911:19522":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:43256:3285":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:3178:8823":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"4:11197:3389":{"crate_id":4,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:40173:3171":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"4:5575:9067":{"crate_id":4,"path":["std","process","exit"],"kind":"function"},"4:4478:8998":{"crate_id":4,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:2131:2541":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"4:5632:223":{"crate_id":4,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:4393:2550":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:20889:22563":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:20908:22564":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:3254:2147":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4:1070":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:30218:3013":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"4:2576:2586":{"crate_id":4,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:9931:2640":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:40110:3123":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:4706:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:21477:8462":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"4:1058:2760":{"crate_id":4,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4808:23044":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"4:8016:8931":{"crate_id":4,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:44028:3383":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:42749:151":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:40193:3172":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:3939:8959":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:1663:10472":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:0:527":{"crate_id":1,"path":["core"],"kind":"module"},"17:12934:19523":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:2783:2081":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:9500:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"11:2060:8818":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:0:1986":{"crate_id":17,"path":["object"],"kind":"module"},"17:14346:20313":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"15:288:14937":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"4:922:8812":{"crate_id":4,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:9102:16066":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10903:16254":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:2359:14990":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:2324:203":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:12007:18991":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:6083:14959":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:6729:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:13966:20282":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5712:15922":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:8134:16010":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:7434:138":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4697:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:707:3337":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:40049:3101":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:7269:29905":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:10097:16137":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"4:8238:8952":{"crate_id":4,"path":["std","net","tcp","Incoming"],"kind":"struct"},"4:7912:123":{"crate_id":4,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:14499:20323":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"4:10802:26878":{"crate_id":4,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"11:1027:14904":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:3939:2550":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:7259:9520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"4:11008:9072":{"crate_id":4,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4628:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:3171:2772":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:9137:16067":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:47771:8445":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11367:16309":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:4874:13071":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12280:19010":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:3655:15023":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:40224:3173":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:2450:14994":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6499:15955":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:46446:8521":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"9:237:9052":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4946:13078":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:14308:20309":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:2329:129":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:8298:8996":{"crate_id":4,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13010:19529":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:6981:2580":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2849:2124":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"14:165:14914":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12645:19505":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"4:6077:2594":{"crate_id":4,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4750:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"14:160:14913":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:2881:15012":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:4772:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:7618:14740":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:10351:2788":{"crate_id":4,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:14163:20303":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:9003:16091":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:22084:21014":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:32012:16016":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"9:330:14841":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:42499:21455":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:7472:14711":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:2810:15009":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:14024:20288":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"4:7936:2774":{"crate_id":4,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4835:13066":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"4:10545:8937":{"crate_id":4,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:10186:16169":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:8814:201":{"crate_id":4,"path":["std","process","Output"],"kind":"struct"},"11:399:30873":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"11:793:8810":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"9:426:14787":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:44164:3333":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:43835:3374":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:5845:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:13851:20273":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:6932:24358":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:10862:26981":{"crate_id":4,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:10456:16202":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:3204:8824":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:5088:15707":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"4:3741:8954":{"crate_id":4,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6616:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:9460:136":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:11910:18986":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13890:20276":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"4:2921:229":{"crate_id":4,"path":["std","io","error","Result"],"kind":"type_alias"},"1:8561:2212":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"16:4806:15641":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:30418:21530":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:47899:8453":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:21042:8900":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:39989:3082":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5996:13752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:10478:16228":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:12598:19503":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:45535:8484":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9492:3239":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:11742:16120":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1527:10460":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"11:1538:14907":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5909:13747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:43295:3284":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:1569:10464":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"4:3975:8960":{"crate_id":4,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4957:13080":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:4889:13072":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:2913:2132":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:10298:2772":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:11606:3268":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:8006:27369":{"crate_id":4,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:4035:105":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:123:9243":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:564:20368":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:1858:8825":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:9912:16132":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:39328:3077":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:149:2506":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:547:9568":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"4:1573:8822":{"crate_id":4,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"4:3115:8943":{"crate_id":4,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:39165:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:8985:81":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:3049:15017":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10036:16145":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4608:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"4:11216:8904":{"crate_id":4,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:14282:20307":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:574:32063":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:541:9567":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:45619:8525":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:12062:684":{"crate_id":4,"path":["std","f64"],"kind":"primitive"},"1:31972:3053":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"5:629:28419":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:21351:8461":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7722:15998":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:1495:10455":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:9111:237":{"crate_id":4,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"4:2366:3016":{"crate_id":4,"path":["std","fs","metadata"],"kind":"function"},"1:44349:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:4164:2550":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:0:1985":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:11086:16335":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"4:12075:1206":{"crate_id":4,"path":["std","reference"],"kind":"primitive"},"1:2924:2135":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:4749:8974":{"crate_id":4,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"4:12052:1618":{"crate_id":4,"path":["std","unit"],"kind":"primitive"},"4:10853:26948":{"crate_id":4,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:2548:14998":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:7153:3155":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4058:3085":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7487:245":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:506:9564":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"11:657:2234":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:10595:3273":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10637:16241":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:43399:3348":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:8659:16061":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"4:9060:26990":{"crate_id":4,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:5648:15918":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:10591:2613":{"crate_id":4,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:7554:15989":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"4:3191:28213":{"crate_id":4,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"14:202:9130":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"4:1986:199":{"crate_id":4,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12172:19002":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:10447:16203":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12945:19524":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13244:19545":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"4:8011:24866":{"crate_id":4,"path":["std","io","error","Custom"],"kind":"struct"},"1:3518:2544":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:41518:2233":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:12060:3320":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:41299:3205":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:4160:8989":{"crate_id":4,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:41663:2773":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:8990:88":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10397:16229":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:681:20357":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:2669:3058":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"16:7736:15999":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:12196:19004":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:2797:2080":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"11:836:8815":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:1482:8810":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:7621:15993":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:7597:31162":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:400:16078":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:1702:8984":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:6616:2112":{"crate_id":4,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"5:7587:2567":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:5982:15932":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:10540:3280":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11215:16304":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13685:20264":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:46187:21461":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:853:2773":{"crate_id":4,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2864:15011":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11788:16351":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"4:9081:24892":{"crate_id":4,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10468:16233":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:3233:2145":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:40549:3197":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"4:2214:133":{"crate_id":4,"path":["std","fs","File"],"kind":"struct"},"4:7928:8929":{"crate_id":4,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:6203:2634":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:332:2512":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12750:19513":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"4:9026:27379":{"crate_id":4,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"4:10789:8891":{"crate_id":4,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"4:11472:2620":{"crate_id":4,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:43864:3376":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:1411:2772":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4415:13021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:955:8816":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11048:16321":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:2644:15002":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:4397:12862":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12671:19507":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:43497:3352":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:9959:16142":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"4:7865:8891":{"crate_id":4,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:44172:3332":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4687:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:44367:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:13981:20284":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:483:2582":{"crate_id":4,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"4:638:8790":{"crate_id":4,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:844:8816":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"4:11359:24803":{"crate_id":4,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13611:20260":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13162:19539":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:8149:3155":{"crate_id":4,"path":["std","io","util","Empty"],"kind":"struct"},"1:21136:8471":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"4:6817:9087":{"crate_id":4,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7318:15978":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"11:2194:30866":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:3830:15049":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:5455:108":{"crate_id":4,"path":["std","process","Command"],"kind":"struct"},"1:43405:3347":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:2879:2129":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:3217:29910":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"4:10966:24931":{"crate_id":4,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:21213:8467":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"4:5390:9062":{"crate_id":4,"path":["std","process","Child"],"kind":"struct"},"1:3072:2141":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:4856:13069":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:4641:15572":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4742:13054":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:0:869":{"crate_id":6,"path":["libc"],"kind":"module"},"1:43597:3357":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:5696:15921":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:7299:28466":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12437:19495":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:30788:198":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:47876:8452":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:11407:16106":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:3409:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"16:5743:15924":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"4:2888:2591":{"crate_id":4,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:9485:115":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:47846:8450":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4618:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13286:19547":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"4:6153:2596":{"crate_id":4,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:9865:2637":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"11:2201:8806":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:6386:15948":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5891:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7651:15994":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:2596:15000":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:21080:8466":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:13868:20274":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:4343:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3013:2051":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:44402:3416":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6053:30748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"4:8862:2772":{"crate_id":4,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:14145:20301":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4422:13022":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:590:22851":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:6912:265":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:2276:107":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:8686:16081":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:4351:2073":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:532:9566":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6139:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11639:16116":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:40030:3107":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13667:20262":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"4:416:177":{"crate_id":4,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:42761:9052":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:12737:19512":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14460:20320":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:2854:2121":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"4:6364:178":{"crate_id":4,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:9488:8894":{"crate_id":4,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:44176:3326":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:14056:20291":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"4:5091:27354":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:1076:8819":{"crate_id":4,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:8281:16017":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:12293:19011":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6243:15939":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:9504:3244":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:5784:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:43308:3282":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:536:31110":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:43728:3103":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5776:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:599:32071":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:8808:9069":{"crate_id":4,"path":["std","process","CommandArgs"],"kind":"struct"},"6:6634:9028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:43387:3344":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:45775:8552":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10502:3279":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:42233:3241":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:40385:3194":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:46368:8515":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:44359:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11389:16105":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2546:259":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"5:5325:2522":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:30184:3012":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"4:4047:8965":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:5369:9124":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:97:30872":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:40262:3185":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:40773:2635":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:10140:8900":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:7213:2063":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:1506:10457":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:46522:8533":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5886:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4850:13068":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:1536:10461":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:8948:9083":{"crate_id":4,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:42732:21666":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:3419:2550":{"crate_id":4,"path":["std","io","Guard"],"kind":"struct"},"1:41276:164":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:9502:3243":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3273:24659":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2930:2136":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2785:247":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:10107:2787":{"crate_id":4,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:8154:16011":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:30224:3014":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"15:394:14949":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:47782:8446":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:3735:2777":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:474:9559":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:12997:19528":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7828:16003":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:4712:8998":{"crate_id":4,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:8050:16006":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:22266:21446":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:44148:3325":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"4:8840:9071":{"crate_id":4,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:7561:13258":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:7532:13254":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:40080:22695":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9494:3240":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"17:10962:16250":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:624:32076":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"18:515:20365":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"4:10975:9066":{"crate_id":4,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:10322:2773":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:918:8811":{"crate_id":4,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:40004:3104":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"11:365:2514":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:8794:16084":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4826:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:207:2520":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"4:2382:8882":{"crate_id":4,"path":["std","fs","read_link"],"kind":"function"},"16:6346:15944":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:562:9570":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"4:7767:8858":{"crate_id":4,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10126:16166":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:9242:16094":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:12184:19003":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2837:109":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"4:1764:649":{"crate_id":4,"path":["std","env"],"kind":"module"},"18:636:32067":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:14090:20295":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"4:8304:8987":{"crate_id":4,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:40535:3196":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:695:8812":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:6663:2522":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:2537:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:44440:3422":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"11:723:8808":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:6318:15942":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:44168:3331":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:5753:2100":{"crate_id":4,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:47808:8448":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:7375:8806":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:12850:110":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:11295:16341":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:4348:266":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:42724:3258":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:39189:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:9852:16128":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:749:2544":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:12074:1658":{"crate_id":4,"path":["std","usize"],"kind":"primitive"},"4:10779:26884":{"crate_id":4,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:5634:15917":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:10012:16101":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:4520:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:39087:2151":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:13274:16118":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:1523:8829":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:4011:22860":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:11072:2617":{"crate_id":4,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:6156:15936":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:44007:3381":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:21693:8465":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:10616:16239":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"4:9984:22701":{"crate_id":4,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"4:8854:9072":{"crate_id":4,"path":["std","process","ExitCode"],"kind":"struct"},"4:8574:9057":{"crate_id":4,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:9998:16139":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:690:20358":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"4:4320:8994":{"crate_id":4,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:14324:20311":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:6884:3180":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:12065:789":{"crate_id":4,"path":["std","i32"],"kind":"primitive"},"4:11613:9101":{"crate_id":4,"path":["std","alloc","System"],"kind":"struct"},"16:8239:16016":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:41861:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:1442:2234":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"4:3266:8940":{"crate_id":4,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"4:6169:2599":{"crate_id":4,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:4585:15564":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:13298:19548":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:3720:2774":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:6879:15968":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:11098:16308":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:3325:2084":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6415:15950":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"10:36:30863":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:9442:3114":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"9:357:14801":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"4:1564:2544":{"crate_id":4,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:7501:9131":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:2618:15001":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:8115:16009":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:7782:16001":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:5407:2550":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:9372:16096":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:7660:15995":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:9116:238":{"crate_id":4,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"4:7895:134":{"crate_id":4,"path":["std","fs","FileType"],"kind":"struct"},"6:4545:13037":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"4:505:2541":{"crate_id":4,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:45920:8532":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12698:19509":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"4:11625:27388":{"crate_id":4,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"4:926:8813":{"crate_id":4,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:21914:8460":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:3315:15020":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"11:986:2760":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13816:20270":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:2887:2126":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:46758:8499":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:43317:2803":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:3529:8919":{"crate_id":4,"path":["std","io","BufRead"],"kind":"trait"},"6:7567:13259":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12830:19518":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6226:15938":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:6014:3199":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"4:11326:24884":{"crate_id":4,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:1696:10476":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:41655:2772":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:10440:16232":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:9752:16103":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"11:0:1981":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:47686:8534":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:12000:26956":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11687:16117":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:12024:18992":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:256:32027":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:43693:3351":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:46090:8547":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"16:5017:15684":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12531:19499":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:40063:103":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:11281:16331":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:7514:13251":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12237:19007":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:3065:15018":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"4:5994:223":{"crate_id":4,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6531:15957":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:22923:182":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:2835:2971":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:6017:13754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4552:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:14083:20294":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:6805:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:40791:3165":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12554:19501":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"4:6549:2107":{"crate_id":4,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:41405:3208":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:5816:31231":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:45597:8519":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:7897:3168":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:3888:15083":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:10726:16291":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1500:10456":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:42469:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:7401:3169":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:3260:2149":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12765:19514":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:5424:9064":{"crate_id":4,"path":["std","process","ChildStdout"],"kind":"struct"},"1:4425:2076":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"4:6902:2604":{"crate_id":4,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:481:20363":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:47648:8500":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:41316:3206":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:45738:8497":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10139:16167":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14469:20321":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:6893:31279":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10340:16181":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:4426:2553":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:4053:15200":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:39902:3082":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2366:204":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:2617:120":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:41783:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:1520:10459":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"9:177:14890":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:80:20339":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"4:1840:2377":{"crate_id":4,"path":["std","env","Args"],"kind":"struct"},"1:1825:181":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:7512:9132":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:22220:21538":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"4:9481:133":{"crate_id":4,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:40153:3147":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"4:12061:682":{"crate_id":4,"path":["std","f32"],"kind":"primitive"},"1:44465:22852":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"11:2049:2760":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:2339:14989":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:9896:16131":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"14:0:1983":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:4417:15516":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13758:20251":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"4:589:8787":{"crate_id":4,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:22344:2865":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:41333:3207":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:11137:16305":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4477:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14478:20322":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:7541:27009":{"crate_id":4,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:21912:8900":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:22282:21464":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"5:1102:29936":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4640:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:7434:22695":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5746:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:46066:8498":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:3185:27671":{"crate_id":4,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:488:9561":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4158:2086":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5435:31266":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"4:897:2544":{"crate_id":4,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:41543:2234":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"16:2526:14997":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:41585:2210":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:5495:2550":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:4834:846":{"crate_id":1,"path":["core","iter"],"kind":"module"},"16:7360:31361":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:12513:19498":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:3594:2773":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:0:471":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"5:2962:29918":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"4:5578:9068":{"crate_id":4,"path":["std","process","Termination"],"kind":"trait"},"5:1257:8817":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5905:15929":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13113:19536":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:43721:3358":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:21802:22405":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:1838:8822":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"11:1822:2234":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:21790:3269":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"4:12073:840":{"crate_id":4,"path":["std","isize"],"kind":"primitive"},"1:44180:3327":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:44061:3339":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"4:11407:27819":{"crate_id":4,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:3330:2563":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:44452:3420":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:2934:2137":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:9886:16130":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:6929:15971":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:4002:2544":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2918:2134":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:6795:2561":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:11971:18989":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:9963:2645":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:10259:9074":{"crate_id":4,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10494:16206":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:11845:16353":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:39253:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:11141:3287":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:39231:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"4:5760:2101":{"crate_id":4,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:39275:2144":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:43207:3272":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:22245:21549":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14100:20296":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6165:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"14:40:18987":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11182:3039":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:4023:22864":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:4341:2072":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:7513:15985":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"4:8884:9081":{"crate_id":4,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:9867:16129":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:3797:15040":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12154:19001":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:766:20354":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:45720:8491":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:4709:9025":{"crate_id":4,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:49744:8475":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"4:3348:8925":{"crate_id":4,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"4:1429:150":{"crate_id":4,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:21444:8900":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12711:19510":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:6814:2573":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7613:15992":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:14335:20312":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"4:1931:695":{"crate_id":4,"path":["std","ffi"],"kind":"module"},"4:9038:24891":{"crate_id":4,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:40742:22872":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:41527:2772":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:43746:3102":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:1733:10479":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4951:13079":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:43327:3283":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:11761:16121":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:39981:3102":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:41744:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2786:246":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:14013:20287":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:7584:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:2903:2130":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"11:798:8813":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2896:2133":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:3288:2082":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:8202:3181":{"crate_id":4,"path":["std","io","Chain"],"kind":"struct"},"1:41535:2773":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:45467:8513":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11272:16340":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:1464:8808":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:7690:2613":{"crate_id":4,"path":["std","thread","Thread"],"kind":"struct"},"16:6279:15941":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:40143:2628":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4931:13076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:8097:16008":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1492:8811":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:41453:3211":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12846:19519":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:3581:2772":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:4405:2075":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"17:1075:16144":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:7573:13260":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4652:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"4:0:1488":{"crate_id":4,"path":["std"],"kind":"module"},"17:11934:18987":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:5053:13089":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:7934:22740":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"4:8249:8949":{"crate_id":4,"path":["std","net","Shutdown"],"kind":"enum"},"17:9051:16062":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"4:3391:3160":{"crate_id":4,"path":["std","io","util","Repeat"],"kind":"struct"},"4:11177:9071":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:7526:13253":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:2216:8874":{"crate_id":4,"path":["std","fs","DirEntry"],"kind":"struct"},"17:9455:32050":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:40758:3158":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:949:8815":{"crate_id":4,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4376:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:2305:14987":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:30312:21442":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:5994:2778":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:4812:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:653:9622":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:10150:242":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:2209:16201":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"13:0:1977":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:5929:13748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:12033:26975":{"crate_id":4,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11316:16332":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:12131:3367":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:4889:15652":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:11111:16307":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10165:16168":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12225:19006":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:21283:8900":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:40749:1896":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:2498:2822":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:41595:2306":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"4:5060:27354":{"crate_id":4,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"4:8286:3209":{"crate_id":4,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:10507:16204":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:46265:21557":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:5404:9063":{"crate_id":4,"path":["std","process","ChildStdin"],"kind":"struct"},"4:2562:2588":{"crate_id":4,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:41604:208":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:32026:2073":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:5027:13087":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:11062:16333":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13188:19541":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:22153:21668":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:7281:14550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:45668:8479":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:6546:2106":{"crate_id":4,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:568:9571":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9921:16157":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10227:16179":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:4949:15664":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:42542:132":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:5858:13702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:1737:3041":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:20876:22401":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:44228:3390":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:4753:8978":{"crate_id":4,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:46014:8486":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:22725:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12876:19520":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:43737:3082":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:2499:8928":{"crate_id":4,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:10672:16289":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:2947:2140":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5082:13093":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4317:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4718:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:12080:3336":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12267:19009":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:1603:10468":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:43993:3380":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:22332:2863":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:30816:3048":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:863:2234":{"crate_id":4,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:12898:146":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12621:19504":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:7520:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"4:10834:123":{"crate_id":4,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"4:7530:16080":{"crate_id":4,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:21299:8457":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:6003:13753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:6901:15969":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"4:7581:2607":{"crate_id":4,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:43533:3277":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:4051:8966":{"crate_id":4,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:9650:16101":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:878:2530":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:10623:3274":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:96:20340":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:14126:20299":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"4:8563:9056":{"crate_id":4,"path":["std","path","Ancestors"],"kind":"struct"},"17:12123:18999":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:311:30864":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"4:7920:27384":{"crate_id":4,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12422:19494":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"4:12064:788":{"crate_id":4,"path":["std","i16"],"kind":"primitive"},"5:822:2528":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"4:4634:8963":{"crate_id":4,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:14378:20315":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13071:19533":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:2883:2127":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:261:2522":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"4:4578:9016":{"crate_id":4,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1638:10470":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13202:19542":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"4:2394:8888":{"crate_id":4,"path":["std","fs","read_dir"],"kind":"function"},"1:9490:124":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:6076:13759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"4:8826:9070":{"crate_id":4,"path":["std","process","ExitStatus"],"kind":"struct"},"16:6352:15945":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4881:1056":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:4745:15628":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4268:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:11234:26982":{"crate_id":4,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:14001:20286":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:46792:8548":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:531:20366":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:43282:3171":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:9790:32051":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:4557:15560":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"4:12069:1599":{"crate_id":4,"path":["std","u16"],"kind":"primitive"},"17:10534:16205":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:10824:134":{"crate_id":4,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"13:110:30927":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"4:4973:9033":{"crate_id":4,"path":["std","panic","always_abort"],"kind":"function"},"6:5010:13085":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12086:18996":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12473:16294":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:5384:15911":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"11:2186:30870":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:2908:2131":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10588:16237":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:1595:10467":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5976:13750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"4:7751:8857":{"crate_id":4,"path":["std","env","VarError"],"kind":"enum"},"16:5574:15914":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"11:667:8811":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6600:15961":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:7476:2559":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:21468:8900":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:43703:3350":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:719:20352":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:40355:3192":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:7391:15979":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13228:19544":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:43373:3345":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:2160:626":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4558:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:14134:20300":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:2792:249":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:4725:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:22169:21558":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"4:3989:8961":{"crate_id":4,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7768:16000":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:7645:8786":{"crate_id":4,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:41362:21535":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"8:0:1978":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"4:6433:1896":{"crate_id":4,"path":["std","sync","once","Once"],"kind":"struct"},"5:7450:8871":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:40395:3178":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4498:13032":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"4:10167:26886":{"crate_id":4,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:14033:20289":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7229:2234":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:45757:8546":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:4032:2522":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:10609:3278":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:6843:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13876:20275":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9711:32031":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"4:9033:24864":{"crate_id":4,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"0:29:1754":{"crate_id":0,"path":["lazy_static","LazyStatic"],"kind":"trait"},"4:8903:9079":{"crate_id":4,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13040:19531":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:2782:2049":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:46942:8482":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:41705:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:41612:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"3:0:1976":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:39969:3111":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:9762:32057":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:2257:100":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"11:2174:24778":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:4526:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3002:2083":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"4:11309:2618":{"crate_id":4,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:43633:3354":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7534:15987":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"4:10962:8858":{"crate_id":4,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:42771:20827":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:2670:15003":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:7438:159":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"4:9003:24815":{"crate_id":4,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:9823:16127":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13723:20266":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"11:1068:2762":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:42564:74":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10240:16147":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6944:31082":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:5135:2098":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12658:19506":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:2744:15006":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6024:13755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4127:2085":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:7237:8826":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:12017:24887":{"crate_id":4,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5419:15913":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6792:15965":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:4272:2064":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"17:10575:16236":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"11:285:2753":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12074:18995":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:932:8814":{"crate_id":4,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12983:19527":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:644:2773":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:45489:8518":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11000:16257":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10929:16253":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:6583:15960":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:44184:3389":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"4:7718:8795":{"crate_id":4,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:42219:3240":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:6437:2104":{"crate_id":4,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:42097:2099":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7462:15981":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:7474:15982":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:3032:15016":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:1673:10473":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:3238:8825":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:32019:21996":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:41978:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:4613:15568":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13259:19546":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:9945:16147":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:652:32063":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:4862:15649":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13802:20269":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:14514:20324":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:12252:19008":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:21475:8468":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:43156:22859":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:42515:72":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:7694:15996":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:21092:21935":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:12959:19525":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:22626:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:6261:15940":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5060:13090":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"4:10334:108":{"crate_id":4,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:43415:3346":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:5631:2561":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:43225:2800":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:3565:16274":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:2534:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"16:7436:15980":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10547:16235":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:12208:19005":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:43337:2804":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:41382:22704":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:10214:16180":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:579:9573":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:43429:3275":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"16:5673:15920":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:2938:2138":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:7568:15990":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:22791:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:7582:15991":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:10980:16101":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:1911:10642":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:8219:3346":{"crate_id":4,"path":["std","io","Bytes"],"kind":"struct"},"1:23403:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5588:15915":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13739:20267":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:2970:29919":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:8342:9028":{"crate_id":4,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"14:7:14913":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"4:3188:28202":{"crate_id":4,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10316:16183":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4391:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:9709:151":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"16:2907:15013":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:5612:15916":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:2966:29917":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9488:32030":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4485:13030":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11661:16065":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:46136:8554":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:6584:2234":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:494:9562":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5899:13746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:2150:16217":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"14:215:14922":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:4234:2772":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"5:7571:2563":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"4:12055:335":{"crate_id":4,"path":["std","array"],"kind":"primitive"},"16:7523:15986":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:7463:8872":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:8158:8942":{"crate_id":4,"path":["std","io","util","Sink"],"kind":"struct"},"4:5249:205":{"crate_id":4,"path":["std","path","Path"],"kind":"struct"},"6:6859:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"4:5509:9066":{"crate_id":4,"path":["std","process","Stdio"],"kind":"struct"},"1:1751:21459":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:47938:8454":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:10420:16230":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:10443:9069":{"crate_id":4,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:46288:21534":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:2871:2122":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:43881:3377":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:9172:22739":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:7304:14552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:43447:3279":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:4462:15537":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"4:9106:179":{"crate_id":4,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:7249:2544":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12790:19516":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"4:3447:8897":{"crate_id":4,"path":["std","io","Read"],"kind":"trait"},"4:8465:9052":{"crate_id":4,"path":["std","path","State"],"kind":"enum"},"17:14173:20304":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:45637:8531":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:9531:32033":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:1011:2522":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:6877:14181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:2788:15008":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:6485:15954":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"4:10784:27895":{"crate_id":4,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13024:19530":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:14536:20326":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:5872:13703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10788:16293":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10661:16288":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:45868:8520":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:22137:21550":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:46112:8553":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:3212:8822":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:10059:16143":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"4:7860:8894":{"crate_id":4,"path":["std","fs","ReadDir"],"kind":"struct"},"1:44160:3329":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:22318:2864":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"11:630:2772":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"4:8169:2784":{"crate_id":4,"path":["std","io","IoSlice"],"kind":"struct"},"1:39209:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:14068:20292":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:1690:10475":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:6784:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:12068:1602":{"crate_id":4,"path":["std","u8"],"kind":"primitive"},"4:12049:397":{"crate_id":4,"path":["std","bool"],"kind":"primitive"},"4:4751:8977":{"crate_id":4,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:5555:3186":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:22228:21403":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"4:1557:2772":{"crate_id":4,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:47540:8528":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:2243:28498":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:6824:2575":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:7792:16002":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:6332:9088":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:8670:3334":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:35:2518":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:5727:15923":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:671:20356":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4293:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:2180:30868":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:4363:2553":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:8397:9037":{"crate_id":4,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12576:19502":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:22205:22692":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:12020:2861":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"4:4003:8963":{"crate_id":4,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:4570:13040":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13676:20263":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:20891:22561":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:22659:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"11:1826:2544":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6456:15952":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:21449:8458":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"14:31:14913":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"0:0:1748":{"crate_id":0,"path":["lazy_static"],"kind":"module"},"1:3652:2234":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7269:31371":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:43813:3373":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:5832:2109":{"crate_id":4,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:3054:2150":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"4:1781:8840":{"crate_id":4,"path":["std","env","VarsOs"],"kind":"struct"},"1:2829:3065":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:44018:3382":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7041:31368":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11473:16108":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:8594:16064":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"4:10088:8850":{"crate_id":4,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:39307:2146":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:7708:15997":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:1517:2765":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:22956:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13215:19543":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11381:16346":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5802:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:2428:14993":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:2368:8878":{"crate_id":4,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4975:13082":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:22031:20879":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"4:4924:9024":{"crate_id":4,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"11:805:8814":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:12705:207":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6721:15963":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"4:3846:8955":{"crate_id":4,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13838:20272":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:41418:3209":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"4:1590:8825":{"crate_id":4,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:1513:10458":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:7893:3167":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4403:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"14:187:14921":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4789:13060":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:491:32083":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4820:13064":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:2178:16176":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:40346:3191":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13973:20283":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:47478:8494":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:7595:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:2035:2774":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:3764:15031":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"4:8232:3349":{"crate_id":4,"path":["std","io","Lines"],"kind":"struct"},"1:42983:3293":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13710:20265":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13085:19534":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:2942:2139":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:14042:20290":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11351:16344":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:6446:1897":{"crate_id":4,"path":["std","sync","once","ONCE_INIT"],"kind":"constant"},"4:8338:9026":{"crate_id":4,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:8205:16015":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11201:16302":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:47148:8516":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:1138:29937":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:11306:16118":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:6829:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6017:15934":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6607:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"4:6650:236":{"crate_id":4,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:7872:8895":{"crate_id":4,"path":["std","fs","FileTimes"],"kind":"struct"},"1:4452:2077":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:41822:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:32120:3068":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:2844:2119":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"4:11163:9070":{"crate_id":4,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"4:10760:9027":{"crate_id":4,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"4:7739:8820":{"crate_id":4,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"18:507:32063":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:9277:16095":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:4719:15626":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:47724:8555":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:5403:15912":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"4:7744:8821":{"crate_id":4,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13906:20278":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6735:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:6850:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13792:20268":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:22:723":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:3800:2563":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"15:306:14938":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:40215:2790":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"11:1121:8819":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6513:15956":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12111:18998":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"4:8932:9080":{"crate_id":4,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10603:16238":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"4:3997:8962":{"crate_id":4,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11547:16112":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"4:641:8791":{"crate_id":4,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:9177:21680":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:5988:13751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:12953:3419":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"11:1501:14906":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:3248:139":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:10750:16248":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:5613:3174":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12136:19000":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7544:15988":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"4:3504:3114":{"crate_id":4,"path":["std","io","Write"],"kind":"trait"},"4:6256:2600":{"crate_id":4,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:1681:10474":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:25805:268":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:2172:3026":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"7:32:14756":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6037:13757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:7608:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10265:16178":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11617:16115":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:12062:18994":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"4:7029:2605":{"crate_id":4,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"4:1842:2782":{"crate_id":4,"path":["std","env","ArgsOs"],"kind":"struct"},"1:22692:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"4:8996:8772":{"crate_id":4,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:12065:3334":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:43712:3359":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:2461:2767":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7054:31348":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6425:15951":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"4:8557:2772":{"crate_id":4,"path":["std","path","Iter"],"kind":"struct"},"6:1590:10466":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"4:3744:8953":{"crate_id":4,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:7342:31309":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4766:13057":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11586:16114":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:7476:125":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:6598:9444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:6753:15964":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:5838:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"18:755:20361":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:9564:16099":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6361:15946":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"4:3945:8958":{"crate_id":4,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"4:8990:110":{"crate_id":4,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:1709:10477":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"4:11495:8954":{"crate_id":4,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:434:14962":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"4:12058:1583":{"crate_id":4,"path":["std","tuple"],"kind":"primitive"},"4:8364:8976":{"crate_id":4,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5814:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4864:13070":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"4:7882:8892":{"crate_id":4,"path":["std","fs","Permissions"],"kind":"struct"},"16:6376:15947":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:4392:8988":{"crate_id":4,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:46728:8493":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:12305:19012":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13914:20279":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11951:18988":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"4:9208:27905":{"crate_id":4,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"5:6465:2544":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:119:9242":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:11765:3363":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:42524:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"16:2969:15015":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"4:3465:2783":{"crate_id":4,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:10771:16268":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"4:5787:2102":{"crate_id":4,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:8488:9053":{"crate_id":4,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:39959:3110":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:582:3048":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10916:16252":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"4:4240:8993":{"crate_id":4,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:47751:8443":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:4965:13081":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:5363:15910":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12685:19508":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:41939:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:9493:2611":{"crate_id":4,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:22311:24445":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:46682:8487":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10738:16292":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:43551:3273":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:6198:24450":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:42979:22558":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:11074:16334":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"4:7771:22781":{"crate_id":4,"path":["std","error","private","Internal"],"kind":"struct"},"5:5788:253":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:8195:16014":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:7585:171":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:40314:3189":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"9:52:14804":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11507:16110":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4919:13075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"4:11632:14946":{"crate_id":4,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6915:15970":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"4:9121:155":{"crate_id":4,"path":["std","time","Instant"],"kind":"struct"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:39501:21012":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:6145:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:9445:16097":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:727:20360":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:39917:3109":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:1634:625":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"4:727:148":{"crate_id":4,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:6511:2522":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:40202:3181":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:2766:15007":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:14118:20298":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"4:12072:1598":{"crate_id":4,"path":["std","u128"],"kind":"primitive"},"1:9701:147":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:6086:13760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:10347:3275":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13174:19540":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:10646:16287":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"4:1067:8818":{"crate_id":4,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"11:2168:30871":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6204:15937":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:119:2510":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:10370:16175":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"4:7664:8776":{"crate_id":4,"path":["std","thread","Builder"],"kind":"struct"},"6:4471:13028":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11872:16354":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"11:817:2756":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13632:20261":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:21044:8464":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:40735:3156":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:6720:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"4:4830:8973":{"crate_id":4,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:2775:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"7:79:14763":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"4:9288:2377":{"crate_id":4,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6574:9610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"4:12076:13":{"crate_id":4,"path":["std","fn"],"kind":"primitive"},"1:41900:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4458:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:11535:16111":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:44152:3328":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"4:8971:2103":{"crate_id":4,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5076:13092":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:39149:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:32008:22781":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:1922:2797":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:43956:3379":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:2219:2581":{"crate_id":4,"path":["std","fs","read"],"kind":"function"},"17:13554:20257":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10366:16188":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"9:393:14786":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:2360:197":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:4537:13036":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8560:2213":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12452:19496":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:2865:2123":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"4:6304:223":{"crate_id":4,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:1118:2766":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:4194:2550":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:4438:13024":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:40323:3175":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:20861:22401":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:9744:3255":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"11:1103:14905":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:11825:3362":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11226:16338":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6467:15953":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:8825:16085":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10714:16290":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:3017:2052":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10410:16195":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"4:6473:2110":{"crate_id":4,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13897:20277":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:45513:8478":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:39314:3063":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:6045:13758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:9607:16100":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"4:4037:8964":{"crate_id":4,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:8072:16007":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6960:15972":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:614:32066":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"12:0:1982":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"4:10990:26971":{"crate_id":4,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"4:7381:24867":{"crate_id":4,"path":["std","panicking","Hook"],"kind":"enum"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}